// +build !minimal

#pragma once

#ifndef GO_QTCORE_H
#define GO_QTCORE_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtCore_PackedString { char* data; long long len; };
struct QtCore_PackedList { void* data; long long len; };
void QAbstractAnimation_SetDirection(void* ptr, long long direction);
void QAbstractAnimation_ConnectFinished(void* ptr);
void QAbstractAnimation_DisconnectFinished(void* ptr);
void QAbstractAnimation_Finished(void* ptr);
void QAbstractAnimation_SetCurrentTime(void* ptr, int msecs);
void QAbstractAnimation_SetCurrentTimeDefault(void* ptr, int msecs);
void QAbstractAnimation_SetLoopCount(void* ptr, int loopCount);
void* QAbstractAnimation_NewQAbstractAnimation(void* parent);
void QAbstractAnimation_ConnectCurrentLoopChanged(void* ptr);
void QAbstractAnimation_DisconnectCurrentLoopChanged(void* ptr);
void QAbstractAnimation_CurrentLoopChanged(void* ptr, int currentLoop);
void QAbstractAnimation_ConnectDirectionChanged(void* ptr);
void QAbstractAnimation_DisconnectDirectionChanged(void* ptr);
void QAbstractAnimation_DirectionChanged(void* ptr, long long newDirection);
void QAbstractAnimation_Pause(void* ptr);
void QAbstractAnimation_PauseDefault(void* ptr);
void QAbstractAnimation_Resume(void* ptr);
void QAbstractAnimation_ResumeDefault(void* ptr);
void QAbstractAnimation_SetPaused(void* ptr, char paused);
void QAbstractAnimation_SetPausedDefault(void* ptr, char paused);
void QAbstractAnimation_Start(void* ptr, long long policy);
void QAbstractAnimation_StartDefault(void* ptr, long long policy);
void QAbstractAnimation_ConnectStateChanged(void* ptr);
void QAbstractAnimation_DisconnectStateChanged(void* ptr);
void QAbstractAnimation_StateChanged(void* ptr, long long newState, long long oldState);
void QAbstractAnimation_Stop(void* ptr);
void QAbstractAnimation_StopDefault(void* ptr);
void QAbstractAnimation_UpdateCurrentTime(void* ptr, int currentTime);
void QAbstractAnimation_UpdateDirection(void* ptr, long long direction);
void QAbstractAnimation_UpdateDirectionDefault(void* ptr, long long direction);
void QAbstractAnimation_UpdateState(void* ptr, long long newState, long long oldState);
void QAbstractAnimation_UpdateStateDefault(void* ptr, long long newState, long long oldState);
void QAbstractAnimation_DestroyQAbstractAnimation(void* ptr);
void QAbstractAnimation_DestroyQAbstractAnimationDefault(void* ptr);
long long QAbstractAnimation_Direction(void* ptr);
void* QAbstractAnimation_Group(void* ptr);
long long QAbstractAnimation_State(void* ptr);
int QAbstractAnimation_CurrentLoop(void* ptr);
int QAbstractAnimation_CurrentLoopTime(void* ptr);
int QAbstractAnimation_CurrentTime(void* ptr);
int QAbstractAnimation_Duration(void* ptr);
int QAbstractAnimation_LoopCount(void* ptr);
int QAbstractAnimation_TotalDuration(void* ptr);
void* QAbstractEventDispatcher_QAbstractEventDispatcher_Instance(void* thread);
char QAbstractEventDispatcher_FilterNativeEvent(void* ptr, void* eventType, void* message, long result);
char QAbstractEventDispatcher_ProcessEvents(void* ptr, long long flags);
char QAbstractEventDispatcher_RegisterEventNotifier(void* ptr, void* notifier);
char QAbstractEventDispatcher_UnregisterTimer(void* ptr, int timerId);
char QAbstractEventDispatcher_UnregisterTimers(void* ptr, void* object);
int QAbstractEventDispatcher_RegisterTimer(void* ptr, int interval, long long timerType, void* object);
int QAbstractEventDispatcher_RemainingTime(void* ptr, int timerId);
void QAbstractEventDispatcher_ConnectAboutToBlock(void* ptr);
void QAbstractEventDispatcher_DisconnectAboutToBlock(void* ptr);
void QAbstractEventDispatcher_AboutToBlock(void* ptr);
void QAbstractEventDispatcher_ConnectAwake(void* ptr);
void QAbstractEventDispatcher_DisconnectAwake(void* ptr);
void QAbstractEventDispatcher_Awake(void* ptr);
void QAbstractEventDispatcher_Flush(void* ptr);
void QAbstractEventDispatcher_InstallNativeEventFilter(void* ptr, void* filterObj);
void QAbstractEventDispatcher_Interrupt(void* ptr);
void QAbstractEventDispatcher_RegisterSocketNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_RegisterTimer4(void* ptr, int timerId, int interval, long long timerType, void* object);
void QAbstractEventDispatcher_RemoveNativeEventFilter(void* ptr, void* filter);
void QAbstractEventDispatcher_UnregisterEventNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_UnregisterSocketNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_WakeUp(void* ptr);
void QAbstractEventDispatcher_DestroyQAbstractEventDispatcher(void* ptr);
void* QAbstractItemModel_NewQAbstractItemModel(void* parent);
char QAbstractItemModel_BeginMoveColumns(void* ptr, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationChild);
char QAbstractItemModel_BeginMoveRows(void* ptr, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationChild);
char QAbstractItemModel_DropMimeData(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_InsertColumn(void* ptr, int column, void* parent);
char QAbstractItemModel_InsertColumns(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_InsertRow(void* ptr, int row, void* parent);
char QAbstractItemModel_InsertRows(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_MoveColumn(void* ptr, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveColumns(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRow(void* ptr, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRows(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_RemoveColumn(void* ptr, int column, void* parent);
char QAbstractItemModel_RemoveColumns(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_RemoveRow(void* ptr, int row, void* parent);
char QAbstractItemModel_RemoveRows(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_SetData(void* ptr, void* index, void* value, int role);
char QAbstractItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
char QAbstractItemModel_SetHeaderData(void* ptr, int section, long long orientation, void* value, int role);
char QAbstractItemModel_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char QAbstractItemModel_SetItemData(void* ptr, void* index, void* roles);
char QAbstractItemModel_SetItemDataDefault(void* ptr, void* index, void* roles);
char QAbstractItemModel_Submit(void* ptr);
char QAbstractItemModel_SubmitDefault(void* ptr);
void QAbstractItemModel_BeginInsertColumns(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginInsertRows(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginRemoveColumns(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginRemoveRows(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginResetModel(void* ptr);
void QAbstractItemModel_ChangePersistentIndex(void* ptr, void* from, void* to);
void QAbstractItemModel_ChangePersistentIndexList(void* ptr, void* from, void* to);
void QAbstractItemModel_ConnectColumnsAboutToBeInserted(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeMoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectColumnsInserted(void* ptr);
void QAbstractItemModel_DisconnectColumnsInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsMoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsRemoved(void* ptr);
void QAbstractItemModel_DisconnectColumnsRemoved(void* ptr);
void QAbstractItemModel_ConnectDataChanged(void* ptr);
void QAbstractItemModel_DisconnectDataChanged(void* ptr);
void QAbstractItemModel_DataChanged(void* ptr, void* topLeft, void* bottomRight, void* roles);
void QAbstractItemModel_EndInsertColumns(void* ptr);
void QAbstractItemModel_EndInsertRows(void* ptr);
void QAbstractItemModel_EndMoveColumns(void* ptr);
void QAbstractItemModel_EndMoveRows(void* ptr);
void QAbstractItemModel_EndRemoveColumns(void* ptr);
void QAbstractItemModel_EndRemoveRows(void* ptr);
void QAbstractItemModel_EndResetModel(void* ptr);
void QAbstractItemModel_FetchMore(void* ptr, void* parent);
void QAbstractItemModel_FetchMoreDefault(void* ptr, void* parent);
void QAbstractItemModel_ConnectHeaderDataChanged(void* ptr);
void QAbstractItemModel_DisconnectHeaderDataChanged(void* ptr);
void QAbstractItemModel_HeaderDataChanged(void* ptr, long long orientation, int first, int last);
void QAbstractItemModel_ConnectLayoutAboutToBeChanged(void* ptr);
void QAbstractItemModel_DisconnectLayoutAboutToBeChanged(void* ptr);
void QAbstractItemModel_LayoutAboutToBeChanged(void* ptr, void* parents, long long hint);
void QAbstractItemModel_ConnectLayoutChanged(void* ptr);
void QAbstractItemModel_DisconnectLayoutChanged(void* ptr);
void QAbstractItemModel_LayoutChanged(void* ptr, void* parents, long long hint);
void QAbstractItemModel_ConnectModelAboutToBeReset(void* ptr);
void QAbstractItemModel_DisconnectModelAboutToBeReset(void* ptr);
void QAbstractItemModel_ConnectModelReset(void* ptr);
void QAbstractItemModel_DisconnectModelReset(void* ptr);
void QAbstractItemModel_ResetInternalData(void* ptr);
void QAbstractItemModel_ResetInternalDataDefault(void* ptr);
void QAbstractItemModel_Revert(void* ptr);
void QAbstractItemModel_RevertDefault(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeInserted(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeMoved(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_DisconnectRowsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectRowsInserted(void* ptr);
void QAbstractItemModel_DisconnectRowsInserted(void* ptr);
void QAbstractItemModel_ConnectRowsMoved(void* ptr);
void QAbstractItemModel_DisconnectRowsMoved(void* ptr);
void QAbstractItemModel_ConnectRowsRemoved(void* ptr);
void QAbstractItemModel_DisconnectRowsRemoved(void* ptr);
void QAbstractItemModel_Sort(void* ptr, int column, long long order);
void QAbstractItemModel_SortDefault(void* ptr, int column, long long order);
void QAbstractItemModel_DestroyQAbstractItemModel(void* ptr);
void QAbstractItemModel_DestroyQAbstractItemModelDefault(void* ptr);
struct QtCore_PackedList QAbstractItemModel_RoleNames(void* ptr);
struct QtCore_PackedList QAbstractItemModel_RoleNamesDefault(void* ptr);
struct QtCore_PackedList QAbstractItemModel_ItemData(void* ptr, void* index);
struct QtCore_PackedList QAbstractItemModel_ItemDataDefault(void* ptr, void* index);
void* QAbstractItemModel_MimeData(void* ptr, void* indexes);
void* QAbstractItemModel_MimeDataDefault(void* ptr, void* indexes);
void* QAbstractItemModel_Buddy(void* ptr, void* index);
void* QAbstractItemModel_BuddyDefault(void* ptr, void* index);
void* QAbstractItemModel_CreateIndex2(void* ptr, int row, int column, uintptr_t id);
void* QAbstractItemModel_CreateIndex(void* ptr, int row, int column, void* p);
void* QAbstractItemModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractItemModel_Parent(void* ptr, void* index);
void* QAbstractItemModel_Sibling(void* ptr, int row, int column, void* index);
void* QAbstractItemModel_SiblingDefault(void* ptr, int row, int column, void* index);
struct QtCore_PackedList QAbstractItemModel_Match(void* ptr, void* start, int role, void* value, int hits, long long flags);
struct QtCore_PackedList QAbstractItemModel_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
struct QtCore_PackedList QAbstractItemModel_PersistentIndexList(void* ptr);
void* QAbstractItemModel_Span(void* ptr, void* index);
void* QAbstractItemModel_SpanDefault(void* ptr, void* index);
struct QtCore_PackedString QAbstractItemModel_MimeTypes(void* ptr);
struct QtCore_PackedString QAbstractItemModel_MimeTypesDefault(void* ptr);
void* QAbstractItemModel_Data(void* ptr, void* index, int role);
void* QAbstractItemModel_HeaderData(void* ptr, int section, long long orientation, int role);
void* QAbstractItemModel_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long QAbstractItemModel_SupportedDragActions(void* ptr);
long long QAbstractItemModel_SupportedDragActionsDefault(void* ptr);
long long QAbstractItemModel_SupportedDropActions(void* ptr);
long long QAbstractItemModel_SupportedDropActionsDefault(void* ptr);
long long QAbstractItemModel_Flags(void* ptr, void* index);
long long QAbstractItemModel_FlagsDefault(void* ptr, void* index);
char QAbstractItemModel_CanDropMimeData(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_CanFetchMore(void* ptr, void* parent);
char QAbstractItemModel_CanFetchMoreDefault(void* ptr, void* parent);
char QAbstractItemModel_HasChildren(void* ptr, void* parent);
char QAbstractItemModel_HasChildrenDefault(void* ptr, void* parent);
char QAbstractItemModel_HasIndex(void* ptr, int row, int column, void* parent);
int QAbstractItemModel_ColumnCount(void* ptr, void* parent);
int QAbstractItemModel_RowCount(void* ptr, void* parent);
void* QAbstractItemModel___setItemData_roles_atList(void* ptr, int i);
void QAbstractItemModel___setItemData_roles_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___setItemData_roles_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___setItemData_keyList(void* ptr);
void* QAbstractItemModel___changePersistentIndexList_from_atList(void* ptr, int i);
void QAbstractItemModel___changePersistentIndexList_from_setList(void* ptr, void* i);
void* QAbstractItemModel___changePersistentIndexList_from_newList(void* ptr);
void* QAbstractItemModel___changePersistentIndexList_to_atList(void* ptr, int i);
void QAbstractItemModel___changePersistentIndexList_to_setList(void* ptr, void* i);
void* QAbstractItemModel___changePersistentIndexList_to_newList(void* ptr);
int QAbstractItemModel___dataChanged_roles_atList(void* ptr, int i);
void QAbstractItemModel___dataChanged_roles_setList(void* ptr, int i);
void* QAbstractItemModel___dataChanged_roles_newList(void* ptr);
void* QAbstractItemModel___doSetRoleNames_roleNames_atList(void* ptr, int i);
void QAbstractItemModel___doSetRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___doSetRoleNames_roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___doSetRoleNames_keyList(void* ptr);
void* QAbstractItemModel___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void QAbstractItemModel___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* QAbstractItemModel___layoutAboutToBeChanged_parents_newList(void* ptr);
void* QAbstractItemModel___layoutChanged_parents_atList(void* ptr, int i);
void QAbstractItemModel___layoutChanged_parents_setList(void* ptr, void* i);
void* QAbstractItemModel___layoutChanged_parents_newList(void* ptr);
void* QAbstractItemModel___setRoleNames_roleNames_atList(void* ptr, int i);
void QAbstractItemModel___setRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___setRoleNames_roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___setRoleNames_keyList(void* ptr);
void* QAbstractItemModel___roleNames_atList(void* ptr, int i);
void QAbstractItemModel___roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___roleNames_keyList(void* ptr);
void* QAbstractItemModel___itemData_atList(void* ptr, int i);
void QAbstractItemModel___itemData_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___itemData_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___itemData_keyList(void* ptr);
void* QAbstractItemModel___mimeData_indexes_atList(void* ptr, int i);
void QAbstractItemModel___mimeData_indexes_setList(void* ptr, void* i);
void* QAbstractItemModel___mimeData_indexes_newList(void* ptr);
void* QAbstractItemModel___match_atList(void* ptr, int i);
void QAbstractItemModel___match_setList(void* ptr, void* i);
void* QAbstractItemModel___match_newList(void* ptr);
void* QAbstractItemModel___persistentIndexList_atList(void* ptr, int i);
void QAbstractItemModel___persistentIndexList_setList(void* ptr, void* i);
void* QAbstractItemModel___persistentIndexList_newList(void* ptr);
void* QAbstractItemModel___encodeData_indexes_atList(void* ptr, int i);
void QAbstractItemModel___encodeData_indexes_setList(void* ptr, void* i);
void* QAbstractItemModel___encodeData_indexes_newList(void* ptr);
int QAbstractItemModel_____setItemData_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____setItemData_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____setItemData_keyList_newList(void* ptr);
int QAbstractItemModel_____doSetRoleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____doSetRoleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____doSetRoleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____setRoleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____setRoleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____setRoleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____roleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____roleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____roleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____itemData_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____itemData_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____itemData_keyList_newList(void* ptr);
void* QAbstractListModel_NewQAbstractListModel(void* parent);
void QAbstractListModel_DestroyQAbstractListModel(void* ptr);
void* QAbstractListModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractListModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QAbstractListModel_Parent(void* ptr, void* index);
void* QAbstractListModel_ParentDefault(void* ptr, void* index);
void* QAbstractListModel_Data(void* ptr, void* index, int role);
void* QAbstractListModel_DataDefault(void* ptr, void* index, int role);
int QAbstractListModel_ColumnCount(void* ptr, void* parent);
int QAbstractListModel_ColumnCountDefault(void* ptr, void* parent);
int QAbstractListModel_RowCount(void* ptr, void* parent);
int QAbstractListModel_RowCountDefault(void* ptr, void* parent);
void* QAbstractNativeEventFilter_NewQAbstractNativeEventFilter();
char QAbstractNativeEventFilter_NativeEventFilter(void* ptr, void* eventType, void* message, long result);
void QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter(void* ptr);
void QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilterDefault(void* ptr);
void* QAbstractProxyModel_NewQAbstractProxyModel(void* parent);
char QAbstractProxyModel_Submit(void* ptr);
char QAbstractProxyModel_SubmitDefault(void* ptr);
void QAbstractProxyModel_Revert(void* ptr);
void QAbstractProxyModel_RevertDefault(void* ptr);
void QAbstractProxyModel_SetSourceModel(void* ptr, void* sourceModel);
void QAbstractProxyModel_SetSourceModelDefault(void* ptr, void* sourceModel);
void QAbstractProxyModel_ConnectSourceModelChanged(void* ptr);
void QAbstractProxyModel_DisconnectSourceModelChanged(void* ptr);
void QAbstractProxyModel_DestroyQAbstractProxyModel(void* ptr);
void* QAbstractProxyModel_SourceModel(void* ptr);
void* QAbstractProxyModel_MapSelectionFromSource(void* ptr, void* sourceSelection);
void* QAbstractProxyModel_MapSelectionFromSourceDefault(void* ptr, void* sourceSelection);
void* QAbstractProxyModel_MapSelectionToSource(void* ptr, void* proxySelection);
void* QAbstractProxyModel_MapSelectionToSourceDefault(void* ptr, void* proxySelection);
void* QAbstractProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QAbstractProxyModel_MapToSource(void* ptr, void* proxyIndex);
void* QAbstractProxyModel_Data(void* ptr, void* proxyIndex, int role);
void* QAbstractProxyModel_DataDefault(void* ptr, void* proxyIndex, int role);
void* QAbstractProxyModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractProxyModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QAbstractProxyModel_Parent(void* ptr, void* index);
void* QAbstractProxyModel_ParentDefault(void* ptr, void* index);
int QAbstractProxyModel_ColumnCount(void* ptr, void* parent);
int QAbstractProxyModel_ColumnCountDefault(void* ptr, void* parent);
int QAbstractProxyModel_RowCount(void* ptr, void* parent);
int QAbstractProxyModel_RowCountDefault(void* ptr, void* parent);
void* QAbstractState_NewQAbstractState(void* parent);
void QAbstractState_ConnectActiveChanged(void* ptr);
void QAbstractState_DisconnectActiveChanged(void* ptr);
void QAbstractState_ActiveChanged(void* ptr, char active);
void QAbstractState_ConnectEntered(void* ptr);
void QAbstractState_DisconnectEntered(void* ptr);
void QAbstractState_ConnectExited(void* ptr);
void QAbstractState_DisconnectExited(void* ptr);
void QAbstractState_OnEntry(void* ptr, void* event);
void QAbstractState_OnExit(void* ptr, void* event);
void QAbstractState_DestroyQAbstractState(void* ptr);
void* QAbstractState_ParentState(void* ptr);
void* QAbstractState_Machine(void* ptr);
char QAbstractState_Active(void* ptr);
void* QAbstractTableModel_NewQAbstractTableModel(void* parent);
void QAbstractTableModel_DestroyQAbstractTableModel(void* ptr);
void* QAbstractTableModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractTableModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QAbstractTableModel_Parent(void* ptr, void* index);
void* QAbstractTableModel_ParentDefault(void* ptr, void* index);
void* QAbstractTableModel_Data(void* ptr, void* index, int role);
void* QAbstractTableModel_DataDefault(void* ptr, void* index, int role);
int QAbstractTableModel_ColumnCount(void* ptr, void* parent);
int QAbstractTableModel_ColumnCountDefault(void* ptr, void* parent);
int QAbstractTableModel_RowCount(void* ptr, void* parent);
int QAbstractTableModel_RowCountDefault(void* ptr, void* parent);
void* QAbstractTransition_NewQAbstractTransition(void* sourceState);
char QAbstractTransition_EventTest(void* ptr, void* event);
void QAbstractTransition_AddAnimation(void* ptr, void* animation);
void QAbstractTransition_OnTransition(void* ptr, void* event);
void QAbstractTransition_RemoveAnimation(void* ptr, void* animation);
void QAbstractTransition_SetTargetState(void* ptr, void* target);
void QAbstractTransition_SetTargetStates(void* ptr, void* targets);
void QAbstractTransition_SetTransitionType(void* ptr, long long ty);
void QAbstractTransition_ConnectTargetStateChanged(void* ptr);
void QAbstractTransition_DisconnectTargetStateChanged(void* ptr);
void QAbstractTransition_ConnectTargetStatesChanged(void* ptr);
void QAbstractTransition_DisconnectTargetStatesChanged(void* ptr);
void QAbstractTransition_ConnectTriggered(void* ptr);
void QAbstractTransition_DisconnectTriggered(void* ptr);
void QAbstractTransition_DestroyQAbstractTransition(void* ptr);
void QAbstractTransition_DestroyQAbstractTransitionDefault(void* ptr);
void* QAbstractTransition_TargetState(void* ptr);
struct QtCore_PackedList QAbstractTransition_Animations(void* ptr);
struct QtCore_PackedList QAbstractTransition_TargetStates(void* ptr);
void* QAbstractTransition_SourceState(void* ptr);
void* QAbstractTransition_Machine(void* ptr);
long long QAbstractTransition_TransitionType(void* ptr);
void* QAbstractTransition___setTargetStates_targets_atList(void* ptr, int i);
void QAbstractTransition___setTargetStates_targets_setList(void* ptr, void* i);
void* QAbstractTransition___setTargetStates_targets_newList(void* ptr);
void* QAbstractTransition___animations_atList(void* ptr, int i);
void QAbstractTransition___animations_setList(void* ptr, void* i);
void* QAbstractTransition___animations_newList(void* ptr);
void* QAbstractTransition___targetStates_atList(void* ptr, int i);
void QAbstractTransition___targetStates_setList(void* ptr, void* i);
void* QAbstractTransition___targetStates_newList(void* ptr);
void* QAnimationGroup_TakeAnimation(void* ptr, int index);
void* QAnimationGroup_NewQAnimationGroup(void* parent);
void QAnimationGroup_AddAnimation(void* ptr, void* animation);
void QAnimationGroup_Clear(void* ptr);
void QAnimationGroup_InsertAnimation(void* ptr, int index, void* animation);
void QAnimationGroup_RemoveAnimation(void* ptr, void* animation);
void QAnimationGroup_DestroyQAnimationGroup(void* ptr);
void* QAnimationGroup_AnimationAt(void* ptr, int index);
int QAnimationGroup_AnimationCount(void* ptr);
int QAnimationGroup_IndexOfAnimation(void* ptr, void* animation);
void QAnimationGroup_UpdateCurrentTime(void* ptr, int currentTime);
void QAnimationGroup_UpdateCurrentTimeDefault(void* ptr, int currentTime);
int QAnimationGroup_Duration(void* ptr);
int QAnimationGroup_DurationDefault(void* ptr);
void* QAssociativeIterable_Value(void* ptr, void* key);
int QAssociativeIterable_Size(void* ptr);
void* QBasicTimer_NewQBasicTimer();
void QBasicTimer_Start(void* ptr, int msec, void* object);
void QBasicTimer_Start2(void* ptr, int msec, long long timerType, void* obj);
void QBasicTimer_Stop(void* ptr);
void QBasicTimer_DestroyQBasicTimer(void* ptr);
char QBasicTimer_IsActive(void* ptr);
int QBasicTimer_TimerId(void* ptr);
void* QBitArray_NewQBitArray();
void* QBitArray_NewQBitArray4(void* other);
void* QBitArray_NewQBitArray3(void* other);
void* QBitArray_NewQBitArray2(int size, char value);
char QBitArray_Fill(void* ptr, char value, int size);
char QBitArray_ToggleBit(void* ptr, int i);
void QBitArray_Clear(void* ptr);
void QBitArray_ClearBit(void* ptr, int i);
void QBitArray_Fill2(void* ptr, char value, int begin, int end);
void QBitArray_Resize(void* ptr, int size);
void QBitArray_SetBit(void* ptr, int i);
void QBitArray_SetBit2(void* ptr, int i, char value);
void QBitArray_Swap(void* ptr, void* other);
void QBitArray_Truncate(void* ptr, int pos);
char QBitArray_At(void* ptr, int i);
char QBitArray_IsEmpty(void* ptr);
char QBitArray_IsNull(void* ptr);
char QBitArray_TestBit(void* ptr, int i);
int QBitArray_Count(void* ptr);
int QBitArray_Count2(void* ptr, char on);
int QBitArray_Size(void* ptr);
void* QBuffer_NewQBuffer2(void* byteArray, void* parent);
void* QBuffer_NewQBuffer(void* parent);
void* QBuffer_Buffer(void* ptr);
long long QBuffer_ReadData(void* ptr, char* data, long long len);
long long QBuffer_ReadDataDefault(void* ptr, char* data, long long len);
long long QBuffer_WriteData(void* ptr, char* data, long long len);
long long QBuffer_WriteDataDefault(void* ptr, char* data, long long len);
void QBuffer_SetBuffer(void* ptr, void* byteArray);
void QBuffer_SetData(void* ptr, void* data);
void QBuffer_SetData2(void* ptr, char* data, int size);
void QBuffer_DestroyQBuffer(void* ptr);
void* QBuffer_Buffer2(void* ptr);
void* QBuffer_Data(void* ptr);
void* QByteArray_Append5(void* ptr, char* ch);
void* QByteArray_Append(void* ptr, void* ba);
void* QByteArray_Append6(void* ptr, char* str);
void* QByteArray_Append3(void* ptr, char* str);
void* QByteArray_Append4(void* ptr, char* str, int len);
void* QByteArray_Append2(void* ptr, int count, char* ch);
void* QByteArray_Fill(void* ptr, char* ch, int size);
void* QByteArray_Insert5(void* ptr, int i, char* ch);
void* QByteArray_Insert(void* ptr, int i, void* ba);
void* QByteArray_Insert6(void* ptr, int i, char* str);
void* QByteArray_Insert3(void* ptr, int i, char* str);
void* QByteArray_Insert4(void* ptr, int i, char* str, int len);
void* QByteArray_Insert2(void* ptr, int i, int count, char* ch);
void* QByteArray_Prepend5(void* ptr, char* ch);
void* QByteArray_Prepend(void* ptr, void* ba);
void* QByteArray_Prepend3(void* ptr, char* str);
void* QByteArray_Prepend4(void* ptr, char* str, int len);
void* QByteArray_Prepend2(void* ptr, int count, char* ch);
void* QByteArray_Remove(void* ptr, int pos, int len);
void* QByteArray_Replace11(void* ptr, char* before, char* after);
void* QByteArray_Replace5(void* ptr, char* before, void* after);
void* QByteArray_Replace13(void* ptr, char* before, char* after);
void* QByteArray_Replace4(void* ptr, char* before, char* after);
void* QByteArray_Replace8(void* ptr, void* before, void* after);
void* QByteArray_Replace9(void* ptr, void* before, char* after);
void* QByteArray_Replace14(void* ptr, char* before, void* after);
void* QByteArray_Replace12(void* ptr, char* before, char* after);
void* QByteArray_Replace10(void* ptr, char* before, void* after);
void* QByteArray_Replace6(void* ptr, char* before, char* after);
void* QByteArray_Replace7(void* ptr, char* before, int bsize, char* after, int asize);
void* QByteArray_Replace(void* ptr, int pos, int len, void* after);
void* QByteArray_Replace3(void* ptr, int pos, int len, char* after);
void* QByteArray_Replace2(void* ptr, int pos, int len, char* after, int alen);
void* QByteArray_SetNum8(void* ptr, double n, char* fo, int prec);
void* QByteArray_SetNum7(void* ptr, float n, char* fo, int prec);
void* QByteArray_SetNum(void* ptr, int n, int base);
void* QByteArray_SetNum5(void* ptr, long long n, int base);
void* QByteArray_SetNum6(void* ptr, unsigned long long n, int base);
void* QByteArray_SetNum3(void* ptr, short n, int base);
void* QByteArray_SetNum4(void* ptr, unsigned int n, int base);
void* QByteArray_SetNum2(void* ptr, unsigned short n, int base);
void* QByteArray_SetRawData(void* ptr, char* data, unsigned int size);
void* QByteArray_QByteArray_FromBase64(void* base64);
void* QByteArray_QByteArray_FromBase642(void* base64, long long options);
void* QByteArray_QByteArray_FromHex(void* hexEncoded);
void* QByteArray_QByteArray_FromPercentEncoding(void* input, char* percent);
void* QByteArray_QByteArray_FromRawData(char* data, int size);
void* QByteArray_QByteArray_Number5(double n, char* fo, int prec);
void* QByteArray_QByteArray_Number(int n, int base);
void* QByteArray_QByteArray_Number3(long long n, int base);
void* QByteArray_QByteArray_Number4(unsigned long long n, int base);
void* QByteArray_QByteArray_Number2(unsigned int n, int base);
void* QByteArray_NewQByteArray();
void* QByteArray_NewQByteArray6(void* other);
void* QByteArray_NewQByteArray5(void* other);
void* QByteArray_NewQByteArray2(char* data, int size);
void* QByteArray_NewQByteArray3(int size, char* ch);
struct QtCore_PackedString QByteArray_Data(void* ptr);
void QByteArray_Chop(void* ptr, int n);
void QByteArray_Clear(void* ptr);
void QByteArray_Push_back3(void* ptr, char* ch);
void QByteArray_Push_back(void* ptr, void* other);
void QByteArray_Push_back2(void* ptr, char* str);
void QByteArray_Push_front3(void* ptr, char* ch);
void QByteArray_Push_front(void* ptr, void* other);
void QByteArray_Push_front2(void* ptr, char* str);
void QByteArray_Reserve(void* ptr, int size);
void QByteArray_Resize(void* ptr, int size);
void QByteArray_Squeeze(void* ptr);
void QByteArray_Swap(void* ptr, void* other);
void QByteArray_Truncate(void* ptr, int pos);
void QByteArray_DestroyQByteArray(void* ptr);
void* QByteArray_Left(void* ptr, int len);
void* QByteArray_LeftJustified(void* ptr, int width, char* fill, char truncate);
void* QByteArray_Mid(void* ptr, int pos, int len);
void* QByteArray_Repeated(void* ptr, int times);
void* QByteArray_Right(void* ptr, int len);
void* QByteArray_RightJustified(void* ptr, int width, char* fill, char truncate);
void* QByteArray_Simplified(void* ptr);
void* QByteArray_ToBase64(void* ptr);
void* QByteArray_ToBase642(void* ptr, long long options);
void* QByteArray_ToHex(void* ptr);
void* QByteArray_ToLower(void* ptr);
void* QByteArray_ToPercentEncoding(void* ptr, void* exclude, void* include, char* percent);
void* QByteArray_ToUpper(void* ptr);
void* QByteArray_Trimmed(void* ptr);
struct QtCore_PackedList QByteArray_Split(void* ptr, char* sep);
char QByteArray_Contains3(void* ptr, char* ch);
char QByteArray_Contains(void* ptr, void* ba);
char QByteArray_Contains2(void* ptr, char* str);
char QByteArray_EndsWith2(void* ptr, char* ch);
char QByteArray_EndsWith(void* ptr, void* ba);
char QByteArray_EndsWith3(void* ptr, char* str);
char QByteArray_IsEmpty(void* ptr);
char QByteArray_IsNull(void* ptr);
char QByteArray_StartsWith2(void* ptr, char* ch);
char QByteArray_StartsWith(void* ptr, void* ba);
char QByteArray_StartsWith3(void* ptr, char* str);
struct QtCore_PackedString QByteArray_At(void* ptr, int i);
struct QtCore_PackedString QByteArray_ConstData(void* ptr);
struct QtCore_PackedString QByteArray_Data2(void* ptr);
double QByteArray_ToDouble(void* ptr, char ok);
float QByteArray_ToFloat(void* ptr, char ok);
int QByteArray_Capacity(void* ptr);
int QByteArray_Count4(void* ptr);
int QByteArray_Count3(void* ptr, char* ch);
int QByteArray_Count(void* ptr, void* ba);
int QByteArray_Count2(void* ptr, char* str);
int QByteArray_IndexOf3(void* ptr, char* ch, int from);
int QByteArray_IndexOf(void* ptr, void* ba, int from);
int QByteArray_IndexOf4(void* ptr, char* str, int from);
int QByteArray_IndexOf2(void* ptr, char* str, int from);
int QByteArray_LastIndexOf3(void* ptr, char* ch, int from);
int QByteArray_LastIndexOf(void* ptr, void* ba, int from);
int QByteArray_LastIndexOf4(void* ptr, char* str, int from);
int QByteArray_LastIndexOf2(void* ptr, char* str, int from);
int QByteArray_Length(void* ptr);
int QByteArray_Size(void* ptr);
int QByteArray_ToInt(void* ptr, char ok, int base);
long QByteArray_ToLong(void* ptr, char ok, int base);
long long QByteArray_ToLongLong(void* ptr, char ok, int base);
unsigned long long QByteArray_ToULongLong(void* ptr, char ok, int base);
short QByteArray_ToShort(void* ptr, char ok, int base);
unsigned int QByteArray_ToUInt(void* ptr, char ok, int base);
unsigned long QByteArray_ToULong(void* ptr, char ok, int base);
unsigned short QByteArray_ToUShort(void* ptr, char ok, int base);
void* QByteArray___split_atList(void* ptr, int i);
void QByteArray___split_setList(void* ptr, void* i);
void* QByteArray___split_newList(void* ptr);
void* QByteArrayList_Join(void* ptr);
void* QByteArrayList_Join3(void* ptr, char* separator);
void* QByteArrayList_Join2(void* ptr, void* separator);
void* QByteArrayMatcher_NewQByteArrayMatcher();
void* QByteArrayMatcher_NewQByteArrayMatcher2(void* pattern);
void* QByteArrayMatcher_NewQByteArrayMatcher4(void* other);
void* QByteArrayMatcher_NewQByteArrayMatcher3(char* pattern, int length);
void QByteArrayMatcher_SetPattern(void* ptr, void* pattern);
void QByteArrayMatcher_DestroyQByteArrayMatcher(void* ptr);
void* QByteArrayMatcher_Pattern(void* ptr);
int QByteArrayMatcher_IndexIn(void* ptr, void* ba, int from);
int QByteArrayMatcher_IndexIn2(void* ptr, char* str, int len, int from);
long long QChar_QChar_Category2(unsigned int ucs4);
long long QChar_QChar_DecompositionTag2(unsigned int ucs4);
long long QChar_QChar_Direction2(unsigned int ucs4);
long long QChar_QChar_JoiningType2(unsigned int ucs4);
void* QChar_QChar_FromLatin1(char* c);
void* QChar_NewQChar();
void* QChar_NewQChar8(void* ch);
void* QChar_NewQChar7(long long ch);
void* QChar_NewQChar9(char* ch);
void* QChar_NewQChar6(int code);
void* QChar_NewQChar4(short code);
void* QChar_NewQChar3(char* cell, char* row);
void* QChar_NewQChar10(char* ch);
void* QChar_NewQChar5(unsigned int code);
void* QChar_NewQChar2(unsigned short code);
struct QtCore_PackedString QChar_QChar_Decomposition2(unsigned int ucs4);
long long QChar_QChar_Script2(unsigned int ucs4);
long long QChar_QChar_CurrentUnicodeVersion();
long long QChar_QChar_UnicodeVersion2(unsigned int ucs4);
char QChar_QChar_HasMirrored2(unsigned int ucs4);
char QChar_QChar_IsDigit2(unsigned int ucs4);
char QChar_QChar_IsHighSurrogate2(unsigned int ucs4);
char QChar_QChar_IsLetter2(unsigned int ucs4);
char QChar_QChar_IsLetterOrNumber2(unsigned int ucs4);
char QChar_QChar_IsLowSurrogate2(unsigned int ucs4);
char QChar_QChar_IsLower2(unsigned int ucs4);
char QChar_QChar_IsMark2(unsigned int ucs4);
char QChar_QChar_IsNonCharacter2(unsigned int ucs4);
char QChar_QChar_IsNumber2(unsigned int ucs4);
char QChar_QChar_IsPrint2(unsigned int ucs4);
char QChar_QChar_IsPunct2(unsigned int ucs4);
char QChar_QChar_IsSpace2(unsigned int ucs4);
char QChar_QChar_IsSurrogate2(unsigned int ucs4);
char QChar_QChar_IsSymbol2(unsigned int ucs4);
char QChar_QChar_IsTitleCase2(unsigned int ucs4);
char QChar_QChar_IsUpper2(unsigned int ucs4);
char QChar_QChar_RequiresSurrogates(unsigned int ucs4);
int QChar_QChar_DigitValue2(unsigned int ucs4);
unsigned int QChar_QChar_MirroredChar2(unsigned int ucs4);
unsigned int QChar_QChar_SurrogateToUcs42(void* high, void* low);
unsigned int QChar_QChar_SurrogateToUcs4(unsigned short high, unsigned short low);
unsigned int QChar_QChar_ToCaseFolded2(unsigned int ucs4);
unsigned int QChar_QChar_ToLower2(unsigned int ucs4);
unsigned int QChar_QChar_ToTitleCase2(unsigned int ucs4);
unsigned int QChar_QChar_ToUpper2(unsigned int ucs4);
unsigned short QChar_Unicode2(void* ptr);
unsigned short QChar_QChar_HighSurrogate(unsigned int ucs4);
unsigned short QChar_QChar_LowSurrogate(unsigned int ucs4);
long long QChar_Category(void* ptr);
long long QChar_DecompositionTag(void* ptr);
long long QChar_Direction(void* ptr);
long long QChar_JoiningType(void* ptr);
void* QChar_MirroredChar(void* ptr);
void* QChar_ToCaseFolded(void* ptr);
void* QChar_ToLower(void* ptr);
void* QChar_ToTitleCase(void* ptr);
void* QChar_ToUpper(void* ptr);
struct QtCore_PackedString QChar_Decomposition(void* ptr);
long long QChar_Script(void* ptr);
long long QChar_UnicodeVersion(void* ptr);
char QChar_HasMirrored(void* ptr);
char QChar_IsDigit(void* ptr);
char QChar_IsHighSurrogate(void* ptr);
char QChar_IsLetter(void* ptr);
char QChar_IsLetterOrNumber(void* ptr);
char QChar_IsLowSurrogate(void* ptr);
char QChar_IsLower(void* ptr);
char QChar_IsMark(void* ptr);
char QChar_IsNonCharacter(void* ptr);
char QChar_IsNull(void* ptr);
char QChar_IsNumber(void* ptr);
char QChar_IsPrint(void* ptr);
char QChar_IsPunct(void* ptr);
char QChar_IsSpace(void* ptr);
char QChar_IsSurrogate(void* ptr);
char QChar_IsSymbol(void* ptr);
char QChar_IsTitleCase(void* ptr);
char QChar_IsUpper(void* ptr);
struct QtCore_PackedString QChar_ToLatin1(void* ptr);
int QChar_DigitValue(void* ptr);
struct QtCore_PackedString QChar_Cell(void* ptr);
struct QtCore_PackedString QChar_Row(void* ptr);
unsigned short QChar_Unicode(void* ptr);
void* QChildEvent_NewQChildEvent(long long ty, void* child);
void* QChildEvent_Child(void* ptr);
char QChildEvent_Added(void* ptr);
char QChildEvent_Polished(void* ptr);
char QChildEvent_Removed(void* ptr);
void* QChildEvent_C(void* ptr);
void QChildEvent_SetC(void* ptr, void* vqo);
void* QCollator_NewQCollator3(void* other);
void* QCollator_NewQCollator2(void* other);
void* QCollator_NewQCollator(void* locale);
void QCollator_SetCaseSensitivity(void* ptr, long long sensitivity);
void QCollator_SetIgnorePunctuation(void* ptr, char on);
void QCollator_SetLocale(void* ptr, void* locale);
void QCollator_SetNumericMode(void* ptr, char on);
void QCollator_Swap(void* ptr, void* other);
void QCollator_DestroyQCollator(void* ptr);
void* QCollator_SortKey(void* ptr, char* stri);
void* QCollator_Locale(void* ptr);
long long QCollator_CaseSensitivity(void* ptr);
char QCollator_IgnorePunctuation(void* ptr);
char QCollator_NumericMode(void* ptr);
int QCollator_Compare3(void* ptr, void* s1, int len1, void* s2, int len2);
int QCollator_Compare(void* ptr, char* s1, char* s2);
int QCollator_Compare2(void* ptr, void* s1, void* s2);
void* QCollatorSortKey_NewQCollatorSortKey(void* other);
void QCollatorSortKey_Swap(void* ptr, void* other);
void QCollatorSortKey_DestroyQCollatorSortKey(void* ptr);
int QCollatorSortKey_Compare(void* ptr, void* otherKey);
void* QCommandLineOption_NewQCommandLineOption5(void* other);
void* QCommandLineOption_NewQCommandLineOption(char* name);
void* QCommandLineOption_NewQCommandLineOption3(char* name, char* description, char* valueName, char* defaultValue);
void* QCommandLineOption_NewQCommandLineOption2(char* names);
void* QCommandLineOption_NewQCommandLineOption4(char* names, char* description, char* valueName, char* defaultValue);
void QCommandLineOption_SetDefaultValue(void* ptr, char* defaultValue);
void QCommandLineOption_SetDefaultValues(void* ptr, char* defaultValues);
void QCommandLineOption_SetDescription(void* ptr, char* description);
void QCommandLineOption_SetFlags(void* ptr, long long flags);
void QCommandLineOption_SetValueName(void* ptr, char* valueName);
void QCommandLineOption_Swap(void* ptr, void* other);
void QCommandLineOption_DestroyQCommandLineOption(void* ptr);
long long QCommandLineOption_Flags(void* ptr);
struct QtCore_PackedString QCommandLineOption_Description(void* ptr);
struct QtCore_PackedString QCommandLineOption_ValueName(void* ptr);
struct QtCore_PackedString QCommandLineOption_DefaultValues(void* ptr);
struct QtCore_PackedString QCommandLineOption_Names(void* ptr);
void* QCommandLineParser_AddHelpOption(void* ptr);
void* QCommandLineParser_AddVersionOption(void* ptr);
void* QCommandLineParser_NewQCommandLineParser();
char QCommandLineParser_AddOption(void* ptr, void* option);
char QCommandLineParser_AddOptions(void* ptr, void* options);
char QCommandLineParser_Parse(void* ptr, char* arguments);
void QCommandLineParser_AddPositionalArgument(void* ptr, char* name, char* description, char* syntax);
void QCommandLineParser_ClearPositionalArguments(void* ptr);
void QCommandLineParser_Process2(void* ptr, void* app);
void QCommandLineParser_Process(void* ptr, char* arguments);
void QCommandLineParser_SetApplicationDescription(void* ptr, char* description);
void QCommandLineParser_SetOptionsAfterPositionalArgumentsMode(void* ptr, long long parsingMode);
void QCommandLineParser_SetSingleDashWordOptionMode(void* ptr, long long singleDashWordOptionMode);
void QCommandLineParser_ShowHelp(void* ptr, int exitCode);
void QCommandLineParser_ShowVersion(void* ptr);
void QCommandLineParser_DestroyQCommandLineParser(void* ptr);
struct QtCore_PackedString QCommandLineParser_ApplicationDescription(void* ptr);
struct QtCore_PackedString QCommandLineParser_ErrorText(void* ptr);
struct QtCore_PackedString QCommandLineParser_HelpText(void* ptr);
struct QtCore_PackedString QCommandLineParser_Value2(void* ptr, void* option);
struct QtCore_PackedString QCommandLineParser_Value(void* ptr, char* optionName);
struct QtCore_PackedString QCommandLineParser_OptionNames(void* ptr);
struct QtCore_PackedString QCommandLineParser_PositionalArguments(void* ptr);
struct QtCore_PackedString QCommandLineParser_UnknownOptionNames(void* ptr);
struct QtCore_PackedString QCommandLineParser_Values2(void* ptr, void* option);
struct QtCore_PackedString QCommandLineParser_Values(void* ptr, char* optionName);
char QCommandLineParser_IsSet2(void* ptr, void* option);
char QCommandLineParser_IsSet(void* ptr, char* name);
void* QCommandLineParser___addOptions_options_atList(void* ptr, int i);
void QCommandLineParser___addOptions_options_setList(void* ptr, void* i);
void* QCommandLineParser___addOptions_options_newList(void* ptr);
struct QtCore_PackedString QCoreApplication_QCoreApplication_OrganizationDomain();
void* QCoreApplication_QCoreApplication_EventDispatcher();
void* QCoreApplication_QCoreApplication_Instance();
void* QCoreApplication_NewQCoreApplication(int argc, char* argv);
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationDirPath();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationFilePath();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationName();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationVersion();
struct QtCore_PackedString QCoreApplication_QCoreApplication_OrganizationName();
struct QtCore_PackedString QCoreApplication_QCoreApplication_Translate(char* context, char* sourceText, char* disambiguation, int n);
struct QtCore_PackedString QCoreApplication_QCoreApplication_Arguments();
struct QtCore_PackedString QCoreApplication_QCoreApplication_LibraryPaths();
char QCoreApplication_QCoreApplication_ClosingDown();
char QCoreApplication_QCoreApplication_InstallTranslator(void* translationFile);
char QCoreApplication_QCoreApplication_IsQuitLockEnabled();
char QCoreApplication_QCoreApplication_IsSetuidAllowed();
char QCoreApplication_QCoreApplication_RemoveTranslator(void* translationFile);
char QCoreApplication_QCoreApplication_SendEvent(void* receiver, void* event);
char QCoreApplication_QCoreApplication_StartingUp();
char QCoreApplication_QCoreApplication_TestAttribute(long long attribute);
int QCoreApplication_QCoreApplication_Exec();
long long QCoreApplication_QCoreApplication_ApplicationPid();
void QCoreApplication_ConnectAboutToQuit(void* ptr);
void QCoreApplication_DisconnectAboutToQuit(void* ptr);
void QCoreApplication_QCoreApplication_AddLibraryPath(char* path);
void QCoreApplication_QCoreApplication_Exit(int returnCode);
void QCoreApplication_QCoreApplication_Flush();
void QCoreApplication_InstallNativeEventFilter(void* ptr, void* filterObj);
void QCoreApplication_QCoreApplication_PostEvent(void* receiver, void* event, int priority);
void QCoreApplication_QCoreApplication_ProcessEvents(long long flags);
void QCoreApplication_QCoreApplication_ProcessEvents2(long long flags, int maxtime);
void QCoreApplication_Quit(void* ptr);
void QCoreApplication_QuitDefault(void* ptr);
void QCoreApplication_QCoreApplication_RemoveLibraryPath(char* path);
void QCoreApplication_RemoveNativeEventFilter(void* ptr, void* filterObject);
void QCoreApplication_QCoreApplication_RemovePostedEvents(void* receiver, int eventType);
void QCoreApplication_QCoreApplication_SendPostedEvents(void* receiver, int event_type);
void QCoreApplication_QCoreApplication_SetApplicationName(char* application);
void QCoreApplication_QCoreApplication_SetApplicationVersion(char* version);
void QCoreApplication_QCoreApplication_SetAttribute(long long attribute, char on);
void QCoreApplication_QCoreApplication_SetEventDispatcher(void* eventDispatcher);
void QCoreApplication_QCoreApplication_SetLibraryPaths(char* paths);
void QCoreApplication_QCoreApplication_SetOrganizationDomain(char* orgDomain);
void QCoreApplication_QCoreApplication_SetOrganizationName(char* orgName);
void QCoreApplication_QCoreApplication_SetQuitLockEnabled(char enabled);
void QCoreApplication_QCoreApplication_SetSetuidAllowed(char allow);
void QCoreApplication_DestroyQCoreApplication(void* ptr);
int QCoreApplication_QCoreApplication_ApplicationFlags();
void* QCryptographicHash_QCryptographicHash_Hash(void* data, long long method);
void* QCryptographicHash_NewQCryptographicHash(long long method);
char QCryptographicHash_AddData3(void* ptr, void* device);
void QCryptographicHash_AddData2(void* ptr, void* data);
void QCryptographicHash_AddData(void* ptr, char* data, int length);
void QCryptographicHash_Reset(void* ptr);
void QCryptographicHash_DestroyQCryptographicHash(void* ptr);
void* QCryptographicHash_Result(void* ptr);
void* QDataStream_NewQDataStream();
void* QDataStream_NewQDataStream3(void* a, long long mode);
void* QDataStream_NewQDataStream2(void* d);
void* QDataStream_NewQDataStream4(void* a);
char QDataStream_CommitTransaction(void* ptr);
int QDataStream_ReadRawData(void* ptr, char* s, int len);
int QDataStream_SkipRawData(void* ptr, int len);
int QDataStream_WriteRawData(void* ptr, char* s, int len);
void QDataStream_AbortTransaction(void* ptr);
void QDataStream_ResetStatus(void* ptr);
void QDataStream_RollbackTransaction(void* ptr);
void QDataStream_SetByteOrder(void* ptr, long long bo);
void QDataStream_SetDevice(void* ptr, void* d);
void QDataStream_SetFloatingPointPrecision(void* ptr, long long precision);
void QDataStream_SetStatus(void* ptr, long long status);
void QDataStream_SetVersion(void* ptr, int v);
void QDataStream_StartTransaction(void* ptr);
void QDataStream_DestroyQDataStream(void* ptr);
long long QDataStream_ByteOrder(void* ptr);
long long QDataStream_FloatingPointPrecision(void* ptr);
void* QDataStream_Device(void* ptr);
long long QDataStream_Status(void* ptr);
char QDataStream_AtEnd(void* ptr);
int QDataStream_Version(void* ptr);
void* QDate_QDate_CurrentDate();
void* QDate_QDate_FromJulianDay(long long jd);
void* QDate_QDate_FromString(char* stri, long long format);
void* QDate_QDate_FromString2(char* stri, char* format);
void* QDate_NewQDate();
void* QDate_NewQDate3(int y, int m, int d);
struct QtCore_PackedString QDate_QDate_LongDayName(int weekday, long long ty);
struct QtCore_PackedString QDate_QDate_LongMonthName(int month, long long ty);
struct QtCore_PackedString QDate_QDate_ShortDayName(int weekday, long long ty);
struct QtCore_PackedString QDate_QDate_ShortMonthName(int month, long long ty);
char QDate_QDate_IsLeapYear(int year);
char QDate_QDate_IsValid2(int year, int month, int day);
char QDate_SetDate(void* ptr, int year, int month, int day);
void* QDate_AddDays(void* ptr, long long ndays);
void* QDate_AddMonths(void* ptr, int nmonths);
void* QDate_AddYears(void* ptr, int nyears);
struct QtCore_PackedString QDate_ToString2(void* ptr, long long format);
struct QtCore_PackedString QDate_ToString(void* ptr, char* format);
char QDate_IsNull(void* ptr);
char QDate_IsValid(void* ptr);
int QDate_Day(void* ptr);
int QDate_DayOfWeek(void* ptr);
int QDate_DayOfYear(void* ptr);
int QDate_DaysInMonth(void* ptr);
int QDate_DaysInYear(void* ptr);
int QDate_Month(void* ptr);
int QDate_WeekNumber(void* ptr, int yearNumber);
int QDate_Year(void* ptr);
long long QDate_DaysTo(void* ptr, void* d);
long long QDate_ToJulianDay(void* ptr);
void QDate_GetDate(void* ptr, int year, int month, int day);
void* QDateTime_QDateTime_CurrentDateTime();
void* QDateTime_QDateTime_CurrentDateTimeUtc();
void* QDateTime_QDateTime_FromMSecsSinceEpoch(long long msecs);
void* QDateTime_QDateTime_FromMSecsSinceEpoch2(long long msecs, long long spec, int offsetSeconds);
void* QDateTime_QDateTime_FromMSecsSinceEpoch3(long long msecs, void* timeZone);
void* QDateTime_QDateTime_FromSecsSinceEpoch(long long secs, long long spec, int offsetSeconds);
void* QDateTime_QDateTime_FromSecsSinceEpoch2(long long secs, void* timeZone);
void* QDateTime_QDateTime_FromString(char* stri, long long format);
void* QDateTime_QDateTime_FromString2(char* stri, char* format);
void* QDateTime_NewQDateTime();
void* QDateTime_NewQDateTime7(void* other);
void* QDateTime_NewQDateTime2(void* date);
void* QDateTime_NewQDateTime3(void* date, void* time, long long spec);
void* QDateTime_NewQDateTime4(void* date, void* time, long long spec, int offsetSeconds);
void* QDateTime_NewQDateTime5(void* date, void* time, void* timeZone);
void* QDateTime_NewQDateTime6(void* other);
long long QDateTime_QDateTime_CurrentMSecsSinceEpoch();
long long QDateTime_QDateTime_CurrentSecsSinceEpoch();
void QDateTime_SetDate(void* ptr, void* date);
void QDateTime_SetMSecsSinceEpoch(void* ptr, long long msecs);
void QDateTime_SetOffsetFromUtc(void* ptr, int offsetSeconds);
void QDateTime_SetSecsSinceEpoch(void* ptr, long long secs);
void QDateTime_SetTime(void* ptr, void* time);
void QDateTime_SetTimeSpec(void* ptr, long long spec);
void QDateTime_SetTimeZone(void* ptr, void* toZone);
void QDateTime_Swap(void* ptr, void* other);
void QDateTime_DestroyQDateTime(void* ptr);
void* QDateTime_Date(void* ptr);
void* QDateTime_AddDays(void* ptr, long long ndays);
void* QDateTime_AddMSecs(void* ptr, long long msecs);
void* QDateTime_AddMonths(void* ptr, int nmonths);
void* QDateTime_AddSecs(void* ptr, long long s);
void* QDateTime_AddYears(void* ptr, int nyears);
void* QDateTime_ToLocalTime(void* ptr);
void* QDateTime_ToOffsetFromUtc(void* ptr, int offsetSeconds);
void* QDateTime_ToTimeSpec(void* ptr, long long spec);
void* QDateTime_ToTimeZone(void* ptr, void* timeZone);
void* QDateTime_ToUTC(void* ptr);
struct QtCore_PackedString QDateTime_TimeZoneAbbreviation(void* ptr);
struct QtCore_PackedString QDateTime_ToString2(void* ptr, long long format);
struct QtCore_PackedString QDateTime_ToString(void* ptr, char* format);
void* QDateTime_Time(void* ptr);
void* QDateTime_TimeZone(void* ptr);
long long QDateTime_TimeSpec(void* ptr);
char QDateTime_IsDaylightTime(void* ptr);
char QDateTime_IsNull(void* ptr);
char QDateTime_IsValid(void* ptr);
int QDateTime_OffsetFromUtc(void* ptr);
long long QDateTime_DaysTo(void* ptr, void* other);
long long QDateTime_MsecsTo(void* ptr, void* other);
long long QDateTime_SecsTo(void* ptr, void* other);
long long QDateTime_ToMSecsSinceEpoch(void* ptr);
long long QDateTime_ToSecsSinceEpoch(void* ptr);
void* QDeadlineTimer_NewQDeadlineTimer2(long long foreverConstant, long long timerType);
void* QDeadlineTimer_NewQDeadlineTimer(long long timerType);
void* QDeadlineTimer_NewQDeadlineTimer3(long long msecs, long long ty);
void QDeadlineTimer_SetDeadline(void* ptr, long long msecs, long long timerType);
void QDeadlineTimer_SetPreciseDeadline(void* ptr, long long secs, long long nsecs, long long timerType);
void QDeadlineTimer_SetPreciseRemainingTime(void* ptr, long long secs, long long nsecs, long long timerType);
void QDeadlineTimer_SetRemainingTime(void* ptr, long long msecs, long long timerType);
void QDeadlineTimer_SetTimerType(void* ptr, long long timerType);
void QDeadlineTimer_Swap(void* ptr, void* other);
long long QDeadlineTimer_TimerType(void* ptr);
char QDeadlineTimer_HasExpired(void* ptr);
char QDeadlineTimer_IsForever(void* ptr);
long long QDeadlineTimer_Deadline2(void* ptr);
long long QDeadlineTimer_DeadlineNSecs(void* ptr);
long long QDeadlineTimer_RemainingTime(void* ptr);
long long QDeadlineTimer_RemainingTimeNSecs(void* ptr);
void* QDebug_MaybeQuote(void* ptr, char* c);
void* QDebug_MaybeSpace(void* ptr);
void* QDebug_Noquote(void* ptr);
void* QDebug_Nospace(void* ptr);
void* QDebug_Quote(void* ptr);
void* QDebug_ResetFormat(void* ptr);
void* QDebug_Space(void* ptr);
void* QDebug_NewQDebug(void* device);
void* QDebug_NewQDebug2(char* stri);
void* QDebug_NewQDebug4(void* other);
void QDebug_SetAutoInsertSpaces(void* ptr, char b);
void QDebug_SetVerbosity(void* ptr, int verbosityLevel);
void QDebug_Swap(void* ptr, void* other);
void QDebug_DestroyQDebug(void* ptr);
char QDebug_AutoInsertSpaces(void* ptr);
int QDebug_Verbosity(void* ptr);
void* QDebugStateSaver_NewQDebugStateSaver(void* dbg);
void QDebugStateSaver_DestroyQDebugStateSaver(void* ptr);
void* QDir_QDir_ListSeparator();
void* QDir_QDir_Separator();
void* QDir_QDir_Current();
void* QDir_QDir_Home();
void* QDir_QDir_Root();
void* QDir_QDir_Temp();
void* QDir_NewQDir(void* dir);
void* QDir_NewQDir2(char* path);
void* QDir_NewQDir3(char* path, char* nameFilter, long long sort, long long filters);
struct QtCore_PackedList QDir_QDir_Drives();
struct QtCore_PackedString QDir_QDir_CleanPath(char* path);
struct QtCore_PackedString QDir_QDir_CurrentPath();
struct QtCore_PackedString QDir_QDir_FromNativeSeparators(char* pathName);
struct QtCore_PackedString QDir_QDir_HomePath();
struct QtCore_PackedString QDir_QDir_RootPath();
struct QtCore_PackedString QDir_QDir_TempPath();
struct QtCore_PackedString QDir_QDir_ToNativeSeparators(char* pathName);
struct QtCore_PackedString QDir_QDir_SearchPaths(char* prefix);
char QDir_Cd(void* ptr, char* dirName);
char QDir_CdUp(void* ptr);
char QDir_QDir_IsAbsolutePath(char* path);
char QDir_QDir_IsRelativePath(char* path);
char QDir_MakeAbsolute(void* ptr);
char QDir_QDir_Match(char* filter, char* fileName);
char QDir_QDir_Match2(char* filters, char* fileName);
char QDir_Remove(void* ptr, char* fileName);
char QDir_RemoveRecursively(void* ptr);
char QDir_Rename(void* ptr, char* oldName, char* newName);
char QDir_QDir_SetCurrent(char* path);
void QDir_QDir_AddSearchPath(char* prefix, char* path);
void QDir_SetFilter(void* ptr, long long filters);
void QDir_SetNameFilters(void* ptr, char* nameFilters);
void QDir_SetPath(void* ptr, char* path);
void QDir_QDir_SetSearchPaths(char* prefix, char* searchPaths);
void QDir_SetSorting(void* ptr, long long sort);
void QDir_Swap(void* ptr, void* other);
void QDir_DestroyQDir(void* ptr);
long long QDir_Filter(void* ptr);
struct QtCore_PackedList QDir_EntryInfoList2(void* ptr, long long filters, long long sort);
struct QtCore_PackedList QDir_EntryInfoList(void* ptr, char* nameFilters, long long filters, long long sort);
struct QtCore_PackedString QDir_AbsoluteFilePath(void* ptr, char* fileName);
struct QtCore_PackedString QDir_AbsolutePath(void* ptr);
struct QtCore_PackedString QDir_CanonicalPath(void* ptr);
struct QtCore_PackedString QDir_DirName(void* ptr);
struct QtCore_PackedString QDir_FilePath(void* ptr, char* fileName);
struct QtCore_PackedString QDir_Path(void* ptr);
struct QtCore_PackedString QDir_RelativeFilePath(void* ptr, char* fileName);
struct QtCore_PackedString QDir_EntryList2(void* ptr, long long filters, long long sort);
struct QtCore_PackedString QDir_EntryList(void* ptr, char* nameFilters, long long filters, long long sort);
struct QtCore_PackedString QDir_NameFilters(void* ptr);
long long QDir_Sorting(void* ptr);
char QDir_Exists2(void* ptr);
char QDir_Exists(void* ptr, char* name);
char QDir_IsAbsolute(void* ptr);
char QDir_IsReadable(void* ptr);
char QDir_IsRelative(void* ptr);
char QDir_IsRoot(void* ptr);
char QDir_Mkdir(void* ptr, char* dirName);
char QDir_Mkpath(void* ptr, char* dirPath);
char QDir_Rmdir(void* ptr, char* dirName);
char QDir_Rmpath(void* ptr, char* dirPath);
unsigned int QDir_Count(void* ptr);
void QDir_Refresh(void* ptr);
void* QDir___drives_atList(void* ptr, int i);
void QDir___drives_setList(void* ptr, void* i);
void* QDir___drives_newList(void* ptr);
void* QDir___entryInfoList_atList2(void* ptr, int i);
void QDir___entryInfoList_setList2(void* ptr, void* i);
void* QDir___entryInfoList_newList2(void* ptr);
void* QDir___entryInfoList_atList(void* ptr, int i);
void QDir___entryInfoList_setList(void* ptr, void* i);
void* QDir___entryInfoList_newList(void* ptr);
void* QDynamicPropertyChangeEvent_NewQDynamicPropertyChangeEvent(void* name);
void* QDynamicPropertyChangeEvent_PropertyName(void* ptr);
void* QEasingCurve_NewQEasingCurve3(void* other);
void* QEasingCurve_NewQEasingCurve(long long ty);
void* QEasingCurve_NewQEasingCurve2(void* other);
void QEasingCurve_AddCubicBezierSegment(void* ptr, void* c1, void* c2, void* endPoint);
void QEasingCurve_AddTCBSegment(void* ptr, void* nextPoint, double t, double c, double b);
void QEasingCurve_SetAmplitude(void* ptr, double amplitude);
void QEasingCurve_SetOvershoot(void* ptr, double overshoot);
void QEasingCurve_SetPeriod(void* ptr, double period);
void QEasingCurve_SetType(void* ptr, long long ty);
void QEasingCurve_Swap(void* ptr, void* other);
void QEasingCurve_DestroyQEasingCurve(void* ptr);
struct QtCore_PackedList QEasingCurve_ToCubicSpline(void* ptr);
long long QEasingCurve_Type(void* ptr);
double QEasingCurve_Amplitude(void* ptr);
double QEasingCurve_Overshoot(void* ptr);
double QEasingCurve_Period(void* ptr);
double QEasingCurve_ValueForProgress(void* ptr, double progress);
void* QEasingCurve___cubicBezierSpline_atList(void* ptr, int i);
void QEasingCurve___cubicBezierSpline_setList(void* ptr, void* i);
void* QEasingCurve___cubicBezierSpline_newList(void* ptr);
void* QEasingCurve___toCubicSpline_atList(void* ptr, int i);
void QEasingCurve___toCubicSpline_setList(void* ptr, void* i);
void* QEasingCurve___toCubicSpline_newList(void* ptr);
long long QElapsedTimer_QElapsedTimer_ClockType();
void* QElapsedTimer_NewQElapsedTimer();
char QElapsedTimer_QElapsedTimer_IsMonotonic();
long long QElapsedTimer_Restart(void* ptr);
void QElapsedTimer_Invalidate(void* ptr);
void QElapsedTimer_Start(void* ptr);
char QElapsedTimer_HasExpired(void* ptr, long long timeout);
char QElapsedTimer_IsValid(void* ptr);
long long QElapsedTimer_Elapsed(void* ptr);
long long QElapsedTimer_MsecsSinceReference(void* ptr);
long long QElapsedTimer_MsecsTo(void* ptr, void* other);
long long QElapsedTimer_NsecsElapsed(void* ptr);
long long QElapsedTimer_SecsTo(void* ptr, void* other);
void* QEvent_NewQEvent(long long ty);
int QEvent_QEvent_RegisterEventType(int hint);
void QEvent_Accept(void* ptr);
void QEvent_Ignore(void* ptr);
void QEvent_SetAccepted(void* ptr, char accepted);
void QEvent_DestroyQEvent(void* ptr);
void QEvent_DestroyQEventDefault(void* ptr);
long long QEvent_Type(void* ptr);
char QEvent_IsAccepted(void* ptr);
char QEvent_Spontaneous(void* ptr);
unsigned short QEvent_T(void* ptr);
void QEvent_SetT(void* ptr, unsigned short vus);
void* QEventLoop_NewQEventLoop(void* parent);
char QEventLoop_ProcessEvents(void* ptr, long long flags);
int QEventLoop_Exec(void* ptr, long long flags);
void QEventLoop_Exit(void* ptr, int returnCode);
void QEventLoop_ProcessEvents2(void* ptr, long long flags, int maxTime);
void QEventLoop_Quit(void* ptr);
void QEventLoop_QuitDefault(void* ptr);
void QEventLoop_WakeUp(void* ptr);
void QEventLoop_DestroyQEventLoop(void* ptr);
char QEventLoop_IsRunning(void* ptr);
void* QEventLoopLocker_NewQEventLoopLocker();
void* QEventLoopLocker_NewQEventLoopLocker2(void* loop);
void* QEventLoopLocker_NewQEventLoopLocker3(void* thread);
void QEventLoopLocker_DestroyQEventLoopLocker(void* ptr);
void* QEventTransition_NewQEventTransition2(void* object, long long ty, void* sourceState);
void* QEventTransition_NewQEventTransition(void* sourceState);
char QEventTransition_EventTest(void* ptr, void* event);
char QEventTransition_EventTestDefault(void* ptr, void* event);
void QEventTransition_OnTransition(void* ptr, void* event);
void QEventTransition_OnTransitionDefault(void* ptr, void* event);
void QEventTransition_SetEventSource(void* ptr, void* object);
void QEventTransition_SetEventType(void* ptr, long long ty);
void QEventTransition_DestroyQEventTransition(void* ptr);
long long QEventTransition_EventType(void* ptr);
void* QEventTransition_EventSource(void* ptr);
long long QFile_QFile_Permissions2(char* fileName);
void* QFile_QFile_EncodeName(char* fileName);
void* QFile_NewQFile();
void* QFile_NewQFile3(void* parent);
void* QFile_NewQFile2(char* name);
void* QFile_NewQFile4(char* name, void* parent);
struct QtCore_PackedString QFile_QFile_DecodeName(void* localFileName);
struct QtCore_PackedString QFile_QFile_DecodeName2(char* localFileName);
struct QtCore_PackedString QFile_QFile_SymLinkTarget(char* fileName);
char QFile_QFile_Copy2(char* fileName, char* newName);
char QFile_Copy(void* ptr, char* newName);
char QFile_QFile_Exists(char* fileName);
char QFile_QFile_Link2(char* fileName, char* linkName);
char QFile_Link(void* ptr, char* linkName);
char QFile_Open3(void* ptr, int fd, long long mode, long long handleFlags);
char QFile_Remove(void* ptr);
char QFile_QFile_Remove2(char* fileName);
char QFile_Rename(void* ptr, char* newName);
char QFile_QFile_Rename2(char* oldName, char* newName);
char QFile_QFile_Resize2(char* fileName, long long sz);
char QFile_QFile_SetPermissions2(char* fileName, long long permissions);
void QFile_SetFileName(void* ptr, char* name);
void QFile_DestroyQFile(void* ptr);
struct QtCore_PackedString QFile_SymLinkTarget2(void* ptr);
char QFile_Exists2(void* ptr);
char QFileDevice_Flush(void* ptr);
char QFileDevice_Resize(void* ptr, long long sz);
char QFileDevice_ResizeDefault(void* ptr, long long sz);
char QFileDevice_SetPermissions(void* ptr, long long permissions);
char QFileDevice_SetPermissionsDefault(void* ptr, long long permissions);
char QFileDevice_Unmap(void* ptr, char* address);
long long QFileDevice_ReadData(void* ptr, char* data, long long len);
long long QFileDevice_ReadDataDefault(void* ptr, char* data, long long len);
long long QFileDevice_WriteData(void* ptr, char* data, long long len);
long long QFileDevice_WriteDataDefault(void* ptr, char* data, long long len);
struct QtCore_PackedString QFileDevice_Map(void* ptr, long long offset, long long size, long long flags);
void QFileDevice_UnsetError(void* ptr);
void QFileDevice_DestroyQFileDevice(void* ptr);
long long QFileDevice_Error(void* ptr);
long long QFileDevice_Permissions(void* ptr);
long long QFileDevice_PermissionsDefault(void* ptr);
struct QtCore_PackedString QFileDevice_FileName(void* ptr);
struct QtCore_PackedString QFileDevice_FileNameDefault(void* ptr);
int QFileDevice_Handle(void* ptr);
void* QFileInfo_NewQFileInfo();
void* QFileInfo_NewQFileInfo5(void* dir, char* file);
void* QFileInfo_NewQFileInfo4(void* file);
void* QFileInfo_NewQFileInfo6(void* fileinfo);
void* QFileInfo_NewQFileInfo3(char* file);
char QFileInfo_QFileInfo_Exists2(char* file);
char QFileInfo_MakeAbsolute(void* ptr);
void QFileInfo_Refresh(void* ptr);
void QFileInfo_SetCaching(void* ptr, char enable);
void QFileInfo_SetFile3(void* ptr, void* dir, char* file);
void QFileInfo_SetFile2(void* ptr, void* file);
void QFileInfo_SetFile(void* ptr, char* file);
void QFileInfo_Swap(void* ptr, void* other);
void QFileInfo_DestroyQFileInfo(void* ptr);
void* QFileInfo_Created(void* ptr);
void* QFileInfo_LastModified(void* ptr);
void* QFileInfo_LastRead(void* ptr);
void* QFileInfo_AbsoluteDir(void* ptr);
void* QFileInfo_Dir(void* ptr);
struct QtCore_PackedString QFileInfo_AbsoluteFilePath(void* ptr);
struct QtCore_PackedString QFileInfo_AbsolutePath(void* ptr);
struct QtCore_PackedString QFileInfo_BaseName(void* ptr);
struct QtCore_PackedString QFileInfo_BundleName(void* ptr);
struct QtCore_PackedString QFileInfo_CanonicalFilePath(void* ptr);
struct QtCore_PackedString QFileInfo_CanonicalPath(void* ptr);
struct QtCore_PackedString QFileInfo_CompleteBaseName(void* ptr);
struct QtCore_PackedString QFileInfo_CompleteSuffix(void* ptr);
struct QtCore_PackedString QFileInfo_FileName(void* ptr);
struct QtCore_PackedString QFileInfo_FilePath(void* ptr);
struct QtCore_PackedString QFileInfo_Group(void* ptr);
struct QtCore_PackedString QFileInfo_Owner(void* ptr);
struct QtCore_PackedString QFileInfo_Path(void* ptr);
struct QtCore_PackedString QFileInfo_Suffix(void* ptr);
struct QtCore_PackedString QFileInfo_SymLinkTarget(void* ptr);
char QFileInfo_Caching(void* ptr);
char QFileInfo_Exists(void* ptr);
char QFileInfo_IsAbsolute(void* ptr);
char QFileInfo_IsBundle(void* ptr);
char QFileInfo_IsDir(void* ptr);
char QFileInfo_IsExecutable(void* ptr);
char QFileInfo_IsFile(void* ptr);
char QFileInfo_IsHidden(void* ptr);
char QFileInfo_IsNativePath(void* ptr);
char QFileInfo_IsReadable(void* ptr);
char QFileInfo_IsRelative(void* ptr);
char QFileInfo_IsRoot(void* ptr);
char QFileInfo_IsSymLink(void* ptr);
char QFileInfo_IsWritable(void* ptr);
long long QFileInfo_Size(void* ptr);
unsigned int QFileInfo_GroupId(void* ptr);
unsigned int QFileInfo_OwnerId(void* ptr);
void* QFileSelector_NewQFileSelector(void* parent);
void QFileSelector_SetExtraSelectors(void* ptr, char* list);
void QFileSelector_DestroyQFileSelector(void* ptr);
struct QtCore_PackedString QFileSelector_Select(void* ptr, char* filePath);
struct QtCore_PackedString QFileSelector_AllSelectors(void* ptr);
struct QtCore_PackedString QFileSelector_ExtraSelectors(void* ptr);
void* QFileSelector_Select2(void* ptr, void* filePath);
void* QFileSystemWatcher_NewQFileSystemWatcher(void* parent);
void* QFileSystemWatcher_NewQFileSystemWatcher2(char* paths, void* parent);
struct QtCore_PackedString QFileSystemWatcher_AddPaths(void* ptr, char* paths);
struct QtCore_PackedString QFileSystemWatcher_RemovePaths(void* ptr, char* paths);
char QFileSystemWatcher_AddPath(void* ptr, char* path);
char QFileSystemWatcher_RemovePath(void* ptr, char* path);
void QFileSystemWatcher_ConnectDirectoryChanged(void* ptr);
void QFileSystemWatcher_DisconnectDirectoryChanged(void* ptr);
void QFileSystemWatcher_ConnectFileChanged(void* ptr);
void QFileSystemWatcher_DisconnectFileChanged(void* ptr);
void QFileSystemWatcher_DestroyQFileSystemWatcher(void* ptr);
struct QtCore_PackedString QFileSystemWatcher_Directories(void* ptr);
struct QtCore_PackedString QFileSystemWatcher_Files(void* ptr);
void* QFinalState_NewQFinalState(void* parent);
void QFinalState_OnEntry(void* ptr, void* event);
void QFinalState_OnEntryDefault(void* ptr, void* event);
void QFinalState_OnExit(void* ptr, void* event);
void QFinalState_OnExitDefault(void* ptr, void* event);
void QFinalState_DestroyQFinalState(void* ptr);
void* QFlag_NewQFlag(int value);
void* QFlag_NewQFlag3(short value);
void* QFlag_NewQFlag2(unsigned int value);
void* QFlag_NewQFlag4(unsigned short value);
void* QGenericArgument_NewQGenericArgument(char* name, void* data);
struct QtCore_PackedString QGenericArgument_Name(void* ptr);
void* QGenericArgument_Data(void* ptr);
void* QGenericReturnArgument_NewQGenericReturnArgument(char* name, void* data);
void* QHistoryState_NewQHistoryState2(long long ty, void* parent);
void* QHistoryState_NewQHistoryState(void* parent);
void QHistoryState_ConnectDefaultStateChanged(void* ptr);
void QHistoryState_DisconnectDefaultStateChanged(void* ptr);
void QHistoryState_ConnectDefaultTransitionChanged(void* ptr);
void QHistoryState_DisconnectDefaultTransitionChanged(void* ptr);
void QHistoryState_ConnectHistoryTypeChanged(void* ptr);
void QHistoryState_DisconnectHistoryTypeChanged(void* ptr);
void QHistoryState_OnEntry(void* ptr, void* event);
void QHistoryState_OnEntryDefault(void* ptr, void* event);
void QHistoryState_OnExit(void* ptr, void* event);
void QHistoryState_OnExitDefault(void* ptr, void* event);
void QHistoryState_SetDefaultState(void* ptr, void* state);
void QHistoryState_SetDefaultTransition(void* ptr, void* transition);
void QHistoryState_SetHistoryType(void* ptr, long long ty);
void QHistoryState_DestroyQHistoryState(void* ptr);
long long QHistoryState_HistoryType(void* ptr);
void* QHistoryState_DefaultState(void* ptr);
void* QHistoryState_DefaultTransition(void* ptr);
void* QIODevice_Read2(void* ptr, long long maxSize);
void* QIODevice_ReadAll(void* ptr);
void* QIODevice_ReadLine2(void* ptr, long long maxSize);
void* QIODevice_NewQIODevice2(void* parent);
char QIODevice_GetChar(void* ptr, char* c);
void* QIODevice_Peek2(void* ptr, long long maxSize);
void* QIODevice_NewQIODevice();
char QIODevice_Open(void* ptr, long long mode);
char QIODevice_OpenDefault(void* ptr, long long mode);
char QIODevice_PutChar(void* ptr, char* c);
char QIODevice_Reset(void* ptr);
char QIODevice_ResetDefault(void* ptr);
char QIODevice_Seek(void* ptr, long long pos);
char QIODevice_SeekDefault(void* ptr, long long pos);
char QIODevice_WaitForBytesWritten(void* ptr, int msecs);
char QIODevice_WaitForBytesWrittenDefault(void* ptr, int msecs);
char QIODevice_WaitForReadyRead(void* ptr, int msecs);
char QIODevice_WaitForReadyReadDefault(void* ptr, int msecs);
long long QIODevice_Peek(void* ptr, char* data, long long maxSize);
long long QIODevice_Read(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadData(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLine(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineData(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineDataDefault(void* ptr, char* data, long long maxSize);
long long QIODevice_Write3(void* ptr, void* byteArray);
long long QIODevice_Write2(void* ptr, char* data);
long long QIODevice_Write(void* ptr, char* data, long long maxSize);
long long QIODevice_WriteData(void* ptr, char* data, long long maxSize);
void QIODevice_ConnectAboutToClose(void* ptr);
void QIODevice_DisconnectAboutToClose(void* ptr);
void QIODevice_AboutToClose(void* ptr);
void QIODevice_ConnectBytesWritten(void* ptr);
void QIODevice_DisconnectBytesWritten(void* ptr);
void QIODevice_BytesWritten(void* ptr, long long bytes);
void QIODevice_ConnectChannelBytesWritten(void* ptr);
void QIODevice_DisconnectChannelBytesWritten(void* ptr);
void QIODevice_ChannelBytesWritten(void* ptr, int channel, long long bytes);
void QIODevice_ConnectChannelReadyRead(void* ptr);
void QIODevice_DisconnectChannelReadyRead(void* ptr);
void QIODevice_ChannelReadyRead(void* ptr, int channel);
void QIODevice_Close(void* ptr);
void QIODevice_CloseDefault(void* ptr);
void QIODevice_CommitTransaction(void* ptr);
void QIODevice_ConnectReadChannelFinished(void* ptr);
void QIODevice_DisconnectReadChannelFinished(void* ptr);
void QIODevice_ReadChannelFinished(void* ptr);
void QIODevice_ConnectReadyRead(void* ptr);
void QIODevice_DisconnectReadyRead(void* ptr);
void QIODevice_ReadyRead(void* ptr);
void QIODevice_RollbackTransaction(void* ptr);
void QIODevice_SetCurrentReadChannel(void* ptr, int channel);
void QIODevice_SetCurrentWriteChannel(void* ptr, int channel);
void QIODevice_SetErrorString(void* ptr, char* str);
void QIODevice_SetOpenMode(void* ptr, long long openMode);
void QIODevice_SetTextModeEnabled(void* ptr, char enabled);
void QIODevice_StartTransaction(void* ptr);
void QIODevice_UngetChar(void* ptr, char* c);
void QIODevice_DestroyQIODevice(void* ptr);
void QIODevice_DestroyQIODeviceDefault(void* ptr);
long long QIODevice_OpenMode(void* ptr);
struct QtCore_PackedString QIODevice_ErrorString(void* ptr);
char QIODevice_AtEnd(void* ptr);
char QIODevice_AtEndDefault(void* ptr);
char QIODevice_CanReadLine(void* ptr);
char QIODevice_CanReadLineDefault(void* ptr);
char QIODevice_IsOpen(void* ptr);
char QIODevice_IsReadable(void* ptr);
char QIODevice_IsSequential(void* ptr);
char QIODevice_IsSequentialDefault(void* ptr);
char QIODevice_IsTextModeEnabled(void* ptr);
char QIODevice_IsTransactionStarted(void* ptr);
char QIODevice_IsWritable(void* ptr);
int QIODevice_CurrentReadChannel(void* ptr);
int QIODevice_CurrentWriteChannel(void* ptr);
int QIODevice_ReadChannelCount(void* ptr);
int QIODevice_WriteChannelCount(void* ptr);
long long QIODevice_BytesAvailable(void* ptr);
long long QIODevice_BytesAvailableDefault(void* ptr);
long long QIODevice_BytesToWrite(void* ptr);
long long QIODevice_BytesToWriteDefault(void* ptr);
long long QIODevice_Pos(void* ptr);
long long QIODevice_PosDefault(void* ptr);
long long QIODevice_Size(void* ptr);
long long QIODevice_SizeDefault(void* ptr);
void* QIdentityProxyModel_NewQIdentityProxyModel(void* parent);
void QIdentityProxyModel_DestroyQIdentityProxyModel(void* ptr);
void* QIdentityProxyModel_Index(void* ptr, int row, int column, void* parent);
void* QIdentityProxyModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QIdentityProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QIdentityProxyModel_MapFromSourceDefault(void* ptr, void* sourceIndex);
void* QIdentityProxyModel_MapToSource(void* ptr, void* proxyIndex);
void* QIdentityProxyModel_MapToSourceDefault(void* ptr, void* proxyIndex);
void* QIdentityProxyModel_Parent(void* ptr, void* child);
void* QIdentityProxyModel_ParentDefault(void* ptr, void* child);
int QIdentityProxyModel_ColumnCount(void* ptr, void* parent);
int QIdentityProxyModel_ColumnCountDefault(void* ptr, void* parent);
int QIdentityProxyModel_RowCount(void* ptr, void* parent);
int QIdentityProxyModel_RowCountDefault(void* ptr, void* parent);
void* QItemSelection_NewQItemSelection();
void* QItemSelection_NewQItemSelection2(void* topLeft, void* bottomRight);
void QItemSelection_Merge(void* ptr, void* other, long long command);
void QItemSelection_Select(void* ptr, void* topLeft, void* bottomRight);
void QItemSelection_QItemSelection_Split(void* ran, void* other, void* result);
struct QtCore_PackedList QItemSelection_Indexes(void* ptr);
char QItemSelection_Contains(void* ptr, void* index);
void* QItemSelection___indexes_atList(void* ptr, int i);
void QItemSelection___indexes_setList(void* ptr, void* i);
void* QItemSelection___indexes_newList(void* ptr);
void* QItemSelectionModel_Model2(void* ptr);
void* QItemSelectionModel_NewQItemSelectionModel(void* model);
void* QItemSelectionModel_NewQItemSelectionModel2(void* model, void* parent);
void QItemSelectionModel_Clear(void* ptr);
void QItemSelectionModel_ClearDefault(void* ptr);
void QItemSelectionModel_ClearCurrentIndex(void* ptr);
void QItemSelectionModel_ClearCurrentIndexDefault(void* ptr);
void QItemSelectionModel_ClearSelection(void* ptr);
void QItemSelectionModel_ClearSelectionDefault(void* ptr);
void QItemSelectionModel_ConnectCurrentChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentChanged(void* ptr);
void QItemSelectionModel_CurrentChanged(void* ptr, void* current, void* previous);
void QItemSelectionModel_ConnectCurrentColumnChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentColumnChanged(void* ptr);
void QItemSelectionModel_CurrentColumnChanged(void* ptr, void* current, void* previous);
void QItemSelectionModel_ConnectCurrentRowChanged(void* ptr);
void QItemSelectionModel_DisconnectCurrentRowChanged(void* ptr);
void QItemSelectionModel_CurrentRowChanged(void* ptr, void* current, void* previous);
void QItemSelectionModel_EmitSelectionChanged(void* ptr, void* newSelection, void* oldSelection);
void QItemSelectionModel_ConnectModelChanged(void* ptr);
void QItemSelectionModel_DisconnectModelChanged(void* ptr);
void QItemSelectionModel_ModelChanged(void* ptr, void* model);
void QItemSelectionModel_Reset(void* ptr);
void QItemSelectionModel_ResetDefault(void* ptr);
void QItemSelectionModel_Select2(void* ptr, void* selection, long long command);
void QItemSelectionModel_Select2Default(void* ptr, void* selection, long long command);
void QItemSelectionModel_Select(void* ptr, void* index, long long command);
void QItemSelectionModel_SelectDefault(void* ptr, void* index, long long command);
void QItemSelectionModel_ConnectSelectionChanged(void* ptr);
void QItemSelectionModel_DisconnectSelectionChanged(void* ptr);
void QItemSelectionModel_SelectionChanged(void* ptr, void* selected, void* deselected);
void QItemSelectionModel_SetCurrentIndex(void* ptr, void* index, long long command);
void QItemSelectionModel_SetCurrentIndexDefault(void* ptr, void* index, long long command);
void QItemSelectionModel_SetModel(void* ptr, void* model);
void QItemSelectionModel_DestroyQItemSelectionModel(void* ptr);
void QItemSelectionModel_DestroyQItemSelectionModelDefault(void* ptr);
void* QItemSelectionModel_CurrentIndex(void* ptr);
struct QtCore_PackedList QItemSelectionModel_SelectedColumns(void* ptr, int row);
struct QtCore_PackedList QItemSelectionModel_SelectedIndexes(void* ptr);
struct QtCore_PackedList QItemSelectionModel_SelectedRows(void* ptr, int column);
char QItemSelectionModel_ColumnIntersectsSelection(void* ptr, int column, void* parent);
char QItemSelectionModel_HasSelection(void* ptr);
char QItemSelectionModel_IsColumnSelected(void* ptr, int column, void* parent);
char QItemSelectionModel_IsRowSelected(void* ptr, int row, void* parent);
char QItemSelectionModel_IsSelected(void* ptr, void* index);
char QItemSelectionModel_RowIntersectsSelection(void* ptr, int row, void* parent);
void* QItemSelectionModel_Model(void* ptr);
void* QItemSelectionModel_Selection(void* ptr);
void* QItemSelectionModel___selectedColumns_atList(void* ptr, int i);
void QItemSelectionModel___selectedColumns_setList(void* ptr, void* i);
void* QItemSelectionModel___selectedColumns_newList(void* ptr);
void* QItemSelectionModel___selectedIndexes_atList(void* ptr, int i);
void QItemSelectionModel___selectedIndexes_setList(void* ptr, void* i);
void* QItemSelectionModel___selectedIndexes_newList(void* ptr);
void* QItemSelectionModel___selectedRows_atList(void* ptr, int i);
void QItemSelectionModel___selectedRows_setList(void* ptr, void* i);
void* QItemSelectionModel___selectedRows_newList(void* ptr);
void* QItemSelectionRange_NewQItemSelectionRange();
void* QItemSelectionRange_NewQItemSelectionRange3(void* other);
void* QItemSelectionRange_NewQItemSelectionRange2(void* other);
void* QItemSelectionRange_NewQItemSelectionRange5(void* index);
void* QItemSelectionRange_NewQItemSelectionRange4(void* topLeft, void* bottomRight);
void QItemSelectionRange_Swap(void* ptr, void* other);
void* QItemSelectionRange_Intersected(void* ptr, void* other);
void* QItemSelectionRange_Parent(void* ptr);
struct QtCore_PackedList QItemSelectionRange_Indexes(void* ptr);
char QItemSelectionRange_Contains(void* ptr, void* index);
char QItemSelectionRange_Contains2(void* ptr, int row, int column, void* parentIndex);
char QItemSelectionRange_Intersects(void* ptr, void* other);
char QItemSelectionRange_IsEmpty(void* ptr);
char QItemSelectionRange_IsValid(void* ptr);
void* QItemSelectionRange_Model(void* ptr);
void* QItemSelectionRange_BottomRight(void* ptr);
void* QItemSelectionRange_TopLeft(void* ptr);
int QItemSelectionRange_Bottom(void* ptr);
int QItemSelectionRange_Height(void* ptr);
int QItemSelectionRange_Left(void* ptr);
int QItemSelectionRange_Right(void* ptr);
int QItemSelectionRange_Top(void* ptr);
int QItemSelectionRange_Width(void* ptr);
void* QItemSelectionRange___indexes_atList(void* ptr, int i);
void QItemSelectionRange___indexes_setList(void* ptr, void* i);
void* QItemSelectionRange___indexes_newList(void* ptr);
void* QJsonArray_QJsonArray_FromStringList(char* list);
void* QJsonArray_QJsonArray_FromVariantList(void* list);
void* QJsonArray_NewQJsonArray();
void* QJsonArray_NewQJsonArray3(void* other);
void* QJsonArray_TakeAt(void* ptr, int i);
void QJsonArray_Append(void* ptr, void* value);
void QJsonArray_Insert(void* ptr, int i, void* value);
void QJsonArray_Pop_back(void* ptr);
void QJsonArray_Pop_front(void* ptr);
void QJsonArray_Prepend(void* ptr, void* value);
void QJsonArray_Push_back(void* ptr, void* value);
void QJsonArray_Push_front(void* ptr, void* value);
void QJsonArray_RemoveAt(void* ptr, int i);
void QJsonArray_RemoveFirst(void* ptr);
void QJsonArray_RemoveLast(void* ptr);
void QJsonArray_Replace(void* ptr, int i, void* value);
void QJsonArray_DestroyQJsonArray(void* ptr);
void* QJsonArray_At(void* ptr, int i);
void* QJsonArray_First(void* ptr);
void* QJsonArray_Last(void* ptr);
struct QtCore_PackedList QJsonArray_ToVariantList(void* ptr);
char QJsonArray_Contains(void* ptr, void* value);
char QJsonArray_Empty(void* ptr);
char QJsonArray_IsEmpty(void* ptr);
int QJsonArray_Count(void* ptr);
int QJsonArray_Size(void* ptr);
void* QJsonArray___fromVariantList_list_atList(void* ptr, int i);
void QJsonArray___fromVariantList_list_setList(void* ptr, void* i);
void* QJsonArray___fromVariantList_list_newList(void* ptr);
void* QJsonArray___toVariantList_atList(void* ptr, int i);
void QJsonArray___toVariantList_setList(void* ptr, void* i);
void* QJsonArray___toVariantList_newList(void* ptr);
void* QJsonDocument_QJsonDocument_FromBinaryData(void* data, long long validation);
void* QJsonDocument_QJsonDocument_FromJson(void* json, void* error);
void* QJsonDocument_QJsonDocument_FromRawData(char* data, int size, long long validation);
void* QJsonDocument_QJsonDocument_FromVariant(void* variant);
void* QJsonDocument_NewQJsonDocument();
void* QJsonDocument_NewQJsonDocument3(void* array);
void* QJsonDocument_NewQJsonDocument4(void* other);
void* QJsonDocument_NewQJsonDocument2(void* object);
void QJsonDocument_SetArray(void* ptr, void* array);
void QJsonDocument_SetObject(void* ptr, void* object);
void QJsonDocument_DestroyQJsonDocument(void* ptr);
void* QJsonDocument_ToBinaryData(void* ptr);
void* QJsonDocument_ToJson(void* ptr, long long format);
void* QJsonDocument_Array(void* ptr);
void* QJsonDocument_Object(void* ptr);
void* QJsonDocument_ToVariant(void* ptr);
char QJsonDocument_IsArray(void* ptr);
char QJsonDocument_IsEmpty(void* ptr);
char QJsonDocument_IsNull(void* ptr);
char QJsonDocument_IsObject(void* ptr);
struct QtCore_PackedString QJsonDocument_RawData(void* ptr, int size);
void* QJsonObject_QJsonObject_FromVariantHash(void* hash);
void* QJsonObject_NewQJsonObject();
void* QJsonObject_NewQJsonObject3(void* other);
void* QJsonObject_Take(void* ptr, char* key);
void QJsonObject_Remove(void* ptr, char* key);
void QJsonObject_DestroyQJsonObject(void* ptr);
void* QJsonObject_Value2(void* ptr, void* key);
void* QJsonObject_Value(void* ptr, char* key);
struct QtCore_PackedString QJsonObject_Keys(void* ptr);
struct QtCore_PackedList QJsonObject_ToVariantHash(void* ptr);
struct QtCore_PackedList QJsonObject_ToVariantMap(void* ptr);
char QJsonObject_Contains2(void* ptr, void* key);
char QJsonObject_Contains(void* ptr, char* key);
char QJsonObject_Empty(void* ptr);
char QJsonObject_IsEmpty(void* ptr);
int QJsonObject_Count(void* ptr);
int QJsonObject_Length(void* ptr);
int QJsonObject_Size(void* ptr);
void* QJsonObject___fromVariantHash_hash_atList(void* ptr, char* i);
void QJsonObject___fromVariantHash_hash_setList(void* ptr, char* key, void* i);
void* QJsonObject___fromVariantHash_hash_newList(void* ptr);
struct QtCore_PackedList QJsonObject___fromVariantHash_keyList(void* ptr);
void* QJsonObject___toVariantHash_atList(void* ptr, char* i);
void QJsonObject___toVariantHash_setList(void* ptr, char* key, void* i);
void* QJsonObject___toVariantHash_newList(void* ptr);
struct QtCore_PackedList QJsonObject___toVariantHash_keyList(void* ptr);
void* QJsonObject___toVariantMap_atList(void* ptr, char* i);
void QJsonObject___toVariantMap_setList(void* ptr, char* key, void* i);
void* QJsonObject___toVariantMap_newList(void* ptr);
struct QtCore_PackedList QJsonObject___toVariantMap_keyList(void* ptr);
struct QtCore_PackedString QJsonObject_____fromVariantHash_keyList_atList(void* ptr, int i);
void QJsonObject_____fromVariantHash_keyList_setList(void* ptr, char* i);
void* QJsonObject_____fromVariantHash_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____fromVariantMap_keyList_atList(void* ptr, int i);
void QJsonObject_____fromVariantMap_keyList_setList(void* ptr, char* i);
void* QJsonObject_____fromVariantMap_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____toVariantHash_keyList_atList(void* ptr, int i);
void QJsonObject_____toVariantHash_keyList_setList(void* ptr, char* i);
void* QJsonObject_____toVariantHash_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____toVariantMap_keyList_atList(void* ptr, int i);
void QJsonObject_____toVariantMap_keyList_setList(void* ptr, char* i);
void* QJsonObject_____toVariantMap_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonParseError_ErrorString(void* ptr);
long long QJsonParseError_Error(void* ptr);
void QJsonParseError_SetError(void* ptr, long long vpa);
int QJsonParseError_Offset(void* ptr);
void QJsonParseError_SetOffset(void* ptr, int vin);
void* QJsonValue_QJsonValue_FromVariant(void* variant);
void* QJsonValue_NewQJsonValue7(void* s);
void* QJsonValue_NewQJsonValue(long long ty);
void* QJsonValue_NewQJsonValue2(char b);
void* QJsonValue_NewQJsonValue9(void* a);
void* QJsonValue_NewQJsonValue10(void* o);
void* QJsonValue_NewQJsonValue11(void* other);
void* QJsonValue_NewQJsonValue6(char* s);
void* QJsonValue_NewQJsonValue8(char* s);
void* QJsonValue_NewQJsonValue3(double n);
void* QJsonValue_NewQJsonValue4(int n);
void* QJsonValue_NewQJsonValue5(long long n);
void QJsonValue_DestroyQJsonValue(void* ptr);
void* QJsonValue_ToArray2(void* ptr);
void* QJsonValue_ToArray(void* ptr, void* defaultValue);
void* QJsonValue_ToObject2(void* ptr);
void* QJsonValue_ToObject(void* ptr, void* defaultValue);
struct QtCore_PackedString QJsonValue_ToString(void* ptr);
struct QtCore_PackedString QJsonValue_ToString2(void* ptr, char* defaultValue);
void* QJsonValue_ToVariant(void* ptr);
long long QJsonValue_Type(void* ptr);
char QJsonValue_IsArray(void* ptr);
char QJsonValue_IsBool(void* ptr);
char QJsonValue_IsDouble(void* ptr);
char QJsonValue_IsNull(void* ptr);
char QJsonValue_IsObject(void* ptr);
char QJsonValue_IsString(void* ptr);
char QJsonValue_IsUndefined(void* ptr);
char QJsonValue_ToBool(void* ptr, char defaultValue);
double QJsonValue_ToDouble(void* ptr, double defaultValue);
int QJsonValue_ToInt(void* ptr, int defaultValue);
void* QLatin1Char_NewQLatin1Char(char* c);
struct QtCore_PackedString QLatin1Char_ToLatin1(void* ptr);
unsigned short QLatin1Char_Unicode(void* ptr);
void* QLatin1String_NewQLatin1String();
void* QLatin1String_NewQLatin1String4(void* str);
void* QLatin1String_NewQLatin1String2(char* str);
void* QLatin1String_NewQLatin1String3(char* str, int size);
void* QLatin1String_Left(void* ptr, int length);
void* QLatin1String_Mid(void* ptr, int start);
void* QLatin1String_Mid2(void* ptr, int start, int length);
void* QLatin1String_Right(void* ptr, int length);
struct QtCore_PackedString QLatin1String_Data(void* ptr);
struct QtCore_PackedString QLatin1String_Latin1(void* ptr);
int QLatin1String_Size(void* ptr);
void* QLibrary_NewQLibrary(void* parent);
void* QLibrary_NewQLibrary2(char* fileName, void* parent);
void* QLibrary_NewQLibrary4(char* fileName, char* version, void* parent);
void* QLibrary_NewQLibrary3(char* fileName, int verNum, void* parent);
char QLibrary_QLibrary_IsLibrary(char* fileName);
char QLibrary_Load(void* ptr);
char QLibrary_Unload(void* ptr);
void QLibrary_SetFileName(void* ptr, char* fileName);
void QLibrary_SetFileNameAndVersion2(void* ptr, char* fileName, char* version);
void QLibrary_SetFileNameAndVersion(void* ptr, char* fileName, int versionNumber);
void QLibrary_SetLoadHints(void* ptr, long long hints);
void QLibrary_DestroyQLibrary(void* ptr);
long long QLibrary_LoadHints(void* ptr);
struct QtCore_PackedString QLibrary_FileName(void* ptr);
struct QtCore_PackedString QLibrary_ErrorString(void* ptr);
char QLibrary_IsLoaded(void* ptr);
struct QtCore_PackedString QLibraryInfo_QLibraryInfo_Location(long long loc);
void* QLibraryInfo_QLibraryInfo_Version();
char QLibraryInfo_QLibraryInfo_IsDebugBuild();
void* QLine_NewQLine();
void* QLine_NewQLine2(void* p1, void* p2);
void* QLine_NewQLine3(int x1, int y1, int x2, int y2);
void QLine_SetLine(void* ptr, int x1, int y1, int x2, int y2);
void QLine_SetP1(void* ptr, void* p1);
void QLine_SetP2(void* ptr, void* p2);
void QLine_SetPoints(void* ptr, void* p1, void* p2);
void QLine_Translate(void* ptr, void* offset);
void QLine_Translate2(void* ptr, int dx, int dy);
void* QLine_Translated(void* ptr, void* offset);
void* QLine_Translated2(void* ptr, int dx, int dy);
void* QLine_Center(void* ptr);
void* QLine_P1(void* ptr);
void* QLine_P2(void* ptr);
char QLine_IsNull(void* ptr);
int QLine_Dx(void* ptr);
int QLine_Dy(void* ptr);
int QLine_X1(void* ptr);
int QLine_X2(void* ptr);
int QLine_Y1(void* ptr);
int QLine_Y2(void* ptr);
void QLineF_SetLength(void* ptr, double length);
long long QLineF_Intersect(void* ptr, void* line, void* intersectionPoint);
void* QLineF_QLineF_FromPolar(double length, double angle);
void* QLineF_NewQLineF();
void* QLineF_NewQLineF4(void* line);
void* QLineF_NewQLineF2(void* p1, void* p2);
void* QLineF_NewQLineF3(double x1, double y1, double x2, double y2);
void QLineF_SetAngle(void* ptr, double angle);
void QLineF_SetLine(void* ptr, double x1, double y1, double x2, double y2);
void QLineF_SetP1(void* ptr, void* p1);
void QLineF_SetP2(void* ptr, void* p2);
void QLineF_SetPoints(void* ptr, void* p1, void* p2);
void QLineF_Translate(void* ptr, void* offset);
void QLineF_Translate2(void* ptr, double dx, double dy);
void* QLineF_ToLine(void* ptr);
void* QLineF_NormalVector(void* ptr);
void* QLineF_Translated(void* ptr, void* offset);
void* QLineF_Translated2(void* ptr, double dx, double dy);
void* QLineF_UnitVector(void* ptr);
void* QLineF_Center(void* ptr);
void* QLineF_P1(void* ptr);
void* QLineF_P2(void* ptr);
void* QLineF_PointAt(void* ptr, double t);
char QLineF_IsNull(void* ptr);
double QLineF_Angle(void* ptr);
double QLineF_AngleTo(void* ptr, void* line);
double QLineF_Dx(void* ptr);
double QLineF_Dy(void* ptr);
double QLineF_Length(void* ptr);
double QLineF_X1(void* ptr);
double QLineF_X2(void* ptr);
double QLineF_Y1(void* ptr);
double QLineF_Y2(void* ptr);
struct QtCore_PackedList QLocale_QLocale_MatchingLocales(long long language, long long script, long long country);
void* QLocale_QLocale_C();
void* QLocale_QLocale_System();
void* QLocale_NewQLocale();
void* QLocale_NewQLocale3(long long language, long long country);
void* QLocale_NewQLocale4(long long language, long long script, long long country);
void* QLocale_NewQLocale5(void* other);
void* QLocale_NewQLocale2(char* name);
struct QtCore_PackedString QLocale_QLocale_CountryToString(long long country);
struct QtCore_PackedString QLocale_QLocale_LanguageToString(long long language);
struct QtCore_PackedString QLocale_QLocale_ScriptToString(long long script);
void QLocale_QLocale_SetDefault(void* locale);
void QLocale_SetNumberOptions(void* ptr, long long options);
void QLocale_Swap(void* ptr, void* other);
void QLocale_DestroyQLocale(void* ptr);
long long QLocale_Country(void* ptr);
long long QLocale_Language(void* ptr);
long long QLocale_MeasurementSystem(void* ptr);
long long QLocale_NumberOptions(void* ptr);
void* QLocale_DecimalPoint(void* ptr);
void* QLocale_Exponential(void* ptr);
void* QLocale_GroupSeparator(void* ptr);
void* QLocale_NegativeSign(void* ptr);
void* QLocale_Percent(void* ptr);
void* QLocale_PositiveSign(void* ptr);
void* QLocale_ZeroDigit(void* ptr);
void* QLocale_ToDate(void* ptr, char* stri, long long format);
void* QLocale_ToDate2(void* ptr, char* stri, char* format);
void* QLocale_ToDateTime(void* ptr, char* stri, long long format);
void* QLocale_ToDateTime2(void* ptr, char* stri, char* format);
struct QtCore_PackedList QLocale_Weekdays(void* ptr);
struct QtCore_PackedString QLocale_AmText(void* ptr);
struct QtCore_PackedString QLocale_Bcp47Name(void* ptr);
struct QtCore_PackedString QLocale_CreateSeparatedList(void* ptr, char* list);
struct QtCore_PackedString QLocale_CurrencySymbol(void* ptr, long long format);
struct QtCore_PackedString QLocale_DateFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_DateTimeFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_DayName(void* ptr, int day, long long ty);
struct QtCore_PackedString QLocale_MonthName(void* ptr, int month, long long ty);
struct QtCore_PackedString QLocale_Name(void* ptr);
struct QtCore_PackedString QLocale_NativeCountryName(void* ptr);
struct QtCore_PackedString QLocale_NativeLanguageName(void* ptr);
struct QtCore_PackedString QLocale_PmText(void* ptr);
struct QtCore_PackedString QLocale_QuoteString(void* ptr, char* str, long long style);
struct QtCore_PackedString QLocale_QuoteString2(void* ptr, void* str, long long style);
struct QtCore_PackedString QLocale_StandaloneDayName(void* ptr, int day, long long ty);
struct QtCore_PackedString QLocale_StandaloneMonthName(void* ptr, int month, long long ty);
struct QtCore_PackedString QLocale_TimeFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_ToCurrencyString7(void* ptr, double value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString8(void* ptr, double value, char* symbol, int precision);
struct QtCore_PackedString QLocale_ToCurrencyString10(void* ptr, float i, char* symbol, int precision);
struct QtCore_PackedString QLocale_ToCurrencyString9(void* ptr, float value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString5(void* ptr, int value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString(void* ptr, long long value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString2(void* ptr, unsigned long long value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString3(void* ptr, short value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString6(void* ptr, unsigned int value, char* symbol);
struct QtCore_PackedString QLocale_ToCurrencyString4(void* ptr, unsigned short value, char* symbol);
struct QtCore_PackedString QLocale_ToLower(void* ptr, char* str);
struct QtCore_PackedString QLocale_ToString10(void* ptr, void* date, long long format);
struct QtCore_PackedString QLocale_ToString9(void* ptr, void* date, char* format);
struct QtCore_PackedString QLocale_ToString13(void* ptr, void* dateTime, long long format);
struct QtCore_PackedString QLocale_ToString14(void* ptr, void* dateTime, char* format);
struct QtCore_PackedString QLocale_ToString12(void* ptr, void* time, long long format);
struct QtCore_PackedString QLocale_ToString11(void* ptr, void* time, char* format);
struct QtCore_PackedString QLocale_ToString7(void* ptr, double i, char* fo, int prec);
struct QtCore_PackedString QLocale_ToString8(void* ptr, float i, char* fo, int prec);
struct QtCore_PackedString QLocale_ToString5(void* ptr, int i);
struct QtCore_PackedString QLocale_ToString(void* ptr, long long i);
struct QtCore_PackedString QLocale_ToString2(void* ptr, unsigned long long i);
struct QtCore_PackedString QLocale_ToString3(void* ptr, short i);
struct QtCore_PackedString QLocale_ToString6(void* ptr, unsigned int i);
struct QtCore_PackedString QLocale_ToString4(void* ptr, unsigned short i);
struct QtCore_PackedString QLocale_ToUpper(void* ptr, char* str);
struct QtCore_PackedString QLocale_UiLanguages(void* ptr);
void* QLocale_ToTime(void* ptr, char* stri, long long format);
void* QLocale_ToTime2(void* ptr, char* stri, char* format);
long long QLocale_FirstDayOfWeek(void* ptr);
long long QLocale_TextDirection(void* ptr);
long long QLocale_Script(void* ptr);
double QLocale_ToDouble(void* ptr, char* s, char ok);
double QLocale_ToDouble2(void* ptr, void* s, char ok);
float QLocale_ToFloat(void* ptr, char* s, char ok);
float QLocale_ToFloat2(void* ptr, void* s, char ok);
int QLocale_ToInt(void* ptr, char* s, char ok);
int QLocale_ToInt2(void* ptr, void* s, char ok);
long long QLocale_ToLongLong(void* ptr, char* s, char ok);
long long QLocale_ToLongLong2(void* ptr, void* s, char ok);
unsigned long long QLocale_ToULongLong(void* ptr, char* s, char ok);
unsigned long long QLocale_ToULongLong2(void* ptr, void* s, char ok);
short QLocale_ToShort(void* ptr, char* s, char ok);
short QLocale_ToShort2(void* ptr, void* s, char ok);
unsigned int QLocale_ToUInt(void* ptr, char* s, char ok);
unsigned int QLocale_ToUInt2(void* ptr, void* s, char ok);
unsigned short QLocale_ToUShort(void* ptr, char* s, char ok);
unsigned short QLocale_ToUShort2(void* ptr, void* s, char ok);
void* QLocale___matchingLocales_atList(void* ptr, int i);
void QLocale___matchingLocales_setList(void* ptr, void* i);
void* QLocale___matchingLocales_newList(void* ptr);
long long QLocale___weekdays_atList(void* ptr, int i);
void QLocale___weekdays_setList(void* ptr, long long i);
void* QLocale___weekdays_newList(void* ptr);
void* QLockFile_NewQLockFile(char* fileName);
char QLockFile_Lock(void* ptr);
char QLockFile_RemoveStaleLockFile(void* ptr);
char QLockFile_TryLock(void* ptr, int timeout);
void QLockFile_SetStaleLockTime(void* ptr, int staleLockTime);
void QLockFile_Unlock(void* ptr);
void QLockFile_DestroyQLockFile(void* ptr);
long long QLockFile_Error(void* ptr);
char QLockFile_GetLockInfo(void* ptr, long long pid, char* hostname, char* appname);
char QLockFile_IsLocked(void* ptr);
int QLockFile_StaleLockTime(void* ptr);
void* QLoggingCategory_QLoggingCategory_DefaultCategory();
void* QLoggingCategory_NewQLoggingCategory(char* category);
void QLoggingCategory_QLoggingCategory_SetFilterRules(char* rules);
void QLoggingCategory_DestroyQLoggingCategory(void* ptr);
char QLoggingCategory_IsCriticalEnabled(void* ptr);
char QLoggingCategory_IsDebugEnabled(void* ptr);
char QLoggingCategory_IsInfoEnabled(void* ptr);
char QLoggingCategory_IsWarningEnabled(void* ptr);
struct QtCore_PackedString QLoggingCategory_CategoryName(void* ptr);
void* QMargins_NewQMargins();
void* QMargins_NewQMargins2(int left, int top, int right, int bottom);
void QMargins_SetBottom(void* ptr, int bottom);
void QMargins_SetLeft(void* ptr, int left);
void QMargins_SetRight(void* ptr, int right);
void QMargins_SetTop(void* ptr, int Top);
char QMargins_IsNull(void* ptr);
int QMargins_Bottom(void* ptr);
int QMargins_Left(void* ptr);
int QMargins_Right(void* ptr);
int QMargins_Top(void* ptr);
void* QMarginsF_NewQMarginsF();
void* QMarginsF_NewQMarginsF3(void* margins);
void* QMarginsF_NewQMarginsF2(double left, double top, double right, double bottom);
void QMarginsF_SetBottom(void* ptr, double bottom);
void QMarginsF_SetLeft(void* ptr, double left);
void QMarginsF_SetRight(void* ptr, double right);
void QMarginsF_SetTop(void* ptr, double Top);
void* QMarginsF_ToMargins(void* ptr);
char QMarginsF_IsNull(void* ptr);
double QMarginsF_Bottom(void* ptr);
double QMarginsF_Left(void* ptr);
double QMarginsF_Right(void* ptr);
double QMarginsF_Top(void* ptr);
void* QMessageAuthenticationCode_QMessageAuthenticationCode_Hash(void* message, void* key, long long method);
void* QMessageAuthenticationCode_NewQMessageAuthenticationCode(long long method, void* key);
char QMessageAuthenticationCode_AddData3(void* ptr, void* device);
void QMessageAuthenticationCode_AddData2(void* ptr, void* data);
void QMessageAuthenticationCode_AddData(void* ptr, char* data, int length);
void QMessageAuthenticationCode_Reset(void* ptr);
void QMessageAuthenticationCode_SetKey(void* ptr, void* key);
void QMessageAuthenticationCode_DestroyQMessageAuthenticationCode(void* ptr);
void* QMessageAuthenticationCode_Result(void* ptr);
struct QtCore_PackedString QMessageLogContext_Category(void* ptr);
struct QtCore_PackedString QMessageLogContext_File(void* ptr);
struct QtCore_PackedString QMessageLogContext_Function(void* ptr);
int QMessageLogContext_Line(void* ptr);
void QMessageLogContext_SetLine(void* ptr, int vin);
int QMessageLogContext_Version(void* ptr);
void QMessageLogContext_SetVersion(void* ptr, int vin);
void* QMessageLogger_NewQMessageLogger();
void* QMessageLogger_NewQMessageLogger2(char* file, int line, char* function);
void* QMessageLogger_NewQMessageLogger3(char* file, int line, char* function, char* category);
void* QMessageLogger_Critical4(void* ptr);
void* QMessageLogger_Critical5(void* ptr, void* cat);
void* QMessageLogger_Debug4(void* ptr);
void* QMessageLogger_Debug5(void* ptr, void* cat);
void* QMessageLogger_Info4(void* ptr);
void* QMessageLogger_Info5(void* ptr, void* cat);
void* QMessageLogger_Warning4(void* ptr);
void* QMessageLogger_Warning5(void* ptr, void* cat);
struct QtCore_PackedString QMetaClassInfo_Name(void* ptr);
struct QtCore_PackedString QMetaClassInfo_Value(void* ptr);
void* QMetaEnum_ValueToKeys(void* ptr, int value);
char QMetaEnum_IsFlag(void* ptr);
char QMetaEnum_IsScoped(void* ptr);
char QMetaEnum_IsValid(void* ptr);
struct QtCore_PackedString QMetaEnum_Key(void* ptr, int index);
struct QtCore_PackedString QMetaEnum_Name(void* ptr);
struct QtCore_PackedString QMetaEnum_Scope(void* ptr);
struct QtCore_PackedString QMetaEnum_ValueToKey(void* ptr, int value);
int QMetaEnum_KeyCount(void* ptr);
int QMetaEnum_KeyToValue(void* ptr, char* key, char ok);
int QMetaEnum_KeysToValue(void* ptr, char* keys, char ok);
int QMetaEnum_Value(void* ptr, int index);
long long QMetaMethod_Access(void* ptr);
long long QMetaMethod_MethodType(void* ptr);
void* QMetaMethod_MethodSignature(void* ptr);
void* QMetaMethod_Name(void* ptr);
struct QtCore_PackedList QMetaMethod_ParameterNames(void* ptr);
struct QtCore_PackedList QMetaMethod_ParameterTypes(void* ptr);
char QMetaMethod_Invoke4(void* ptr, void* object, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke2(void* ptr, void* object, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke3(void* ptr, void* object, long long connectionType, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke(void* ptr, void* object, long long connectionType, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_InvokeOnGadget2(void* ptr, void* gadget, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_InvokeOnGadget(void* ptr, void* gadget, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_IsValid(void* ptr);
struct QtCore_PackedString QMetaMethod_Tag(void* ptr);
struct QtCore_PackedString QMetaMethod_TypeName(void* ptr);
int QMetaMethod_MethodIndex(void* ptr);
int QMetaMethod_ParameterCount(void* ptr);
int QMetaMethod_ParameterType(void* ptr, int index);
int QMetaMethod_ReturnType(void* ptr);
int QMetaMethod_Revision(void* ptr);
void* QMetaMethod___parameterNames_atList(void* ptr, int i);
void QMetaMethod___parameterNames_setList(void* ptr, void* i);
void* QMetaMethod___parameterNames_newList(void* ptr);
void* QMetaMethod___parameterTypes_atList(void* ptr, int i);
void QMetaMethod___parameterTypes_setList(void* ptr, void* i);
void* QMetaMethod___parameterTypes_newList(void* ptr);
void* QMetaObject_QMetaObject_NormalizedSignature(char* method);
void* QMetaObject_QMetaObject_NormalizedType(char* ty);
char QMetaObject_QMetaObject_CheckConnectArgs2(void* sign, void* method);
char QMetaObject_QMetaObject_CheckConnectArgs(char* sign, char* method);
char QMetaObject_QMetaObject_InvokeMethod4(void* obj, char* member, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod2(void* obj, char* member, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod3(void* obj, char* member, long long ty, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod(void* obj, char* member, long long ty, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
void QMetaObject_QMetaObject_ConnectSlotsByName(void* object);
void* QMetaObject_Constructor(void* ptr, int index);
void* QMetaObject_Method(void* ptr, int index);
void* QMetaObject_NewInstance(void* ptr, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_Inherits(void* ptr, void* metaObject);
void* QMetaObject_SuperClass(void* ptr);
struct QtCore_PackedString QMetaObject_ClassName(void* ptr);
int QMetaObject_ClassInfoCount(void* ptr);
int QMetaObject_ClassInfoOffset(void* ptr);
int QMetaObject_ConstructorCount(void* ptr);
int QMetaObject_EnumeratorCount(void* ptr);
int QMetaObject_EnumeratorOffset(void* ptr);
int QMetaObject_IndexOfClassInfo(void* ptr, char* name);
int QMetaObject_IndexOfConstructor(void* ptr, char* constructor);
int QMetaObject_IndexOfEnumerator(void* ptr, char* name);
int QMetaObject_IndexOfMethod(void* ptr, char* method);
int QMetaObject_IndexOfProperty(void* ptr, char* name);
int QMetaObject_IndexOfSignal(void* ptr, char* sign);
int QMetaObject_IndexOfSlot(void* ptr, char* slot);
int QMetaObject_MethodCount(void* ptr);
int QMetaObject_MethodOffset(void* ptr);
int QMetaObject_PropertyCount(void* ptr);
int QMetaObject_PropertyOffset(void* ptr);
void* QMetaProperty_NotifySignal(void* ptr);
void* QMetaProperty_Read(void* ptr, void* object);
void* QMetaProperty_ReadOnGadget(void* ptr, void* gadget);
long long QMetaProperty_Type(void* ptr);
char QMetaProperty_HasNotifySignal(void* ptr);
char QMetaProperty_IsConstant(void* ptr);
char QMetaProperty_IsDesignable(void* ptr, void* object);
char QMetaProperty_IsEnumType(void* ptr);
char QMetaProperty_IsFinal(void* ptr);
char QMetaProperty_IsFlagType(void* ptr);
char QMetaProperty_IsReadable(void* ptr);
char QMetaProperty_IsResettable(void* ptr);
char QMetaProperty_IsScriptable(void* ptr, void* object);
char QMetaProperty_IsStored(void* ptr, void* object);
char QMetaProperty_IsUser(void* ptr, void* object);
char QMetaProperty_IsValid(void* ptr);
char QMetaProperty_IsWritable(void* ptr);
char QMetaProperty_Reset(void* ptr, void* object);
char QMetaProperty_ResetOnGadget(void* ptr, void* gadget);
char QMetaProperty_Write(void* ptr, void* object, void* value);
char QMetaProperty_WriteOnGadget(void* ptr, void* gadget, void* value);
struct QtCore_PackedString QMetaProperty_Name(void* ptr);
struct QtCore_PackedString QMetaProperty_TypeName(void* ptr);
int QMetaProperty_NotifySignalIndex(void* ptr);
int QMetaProperty_PropertyIndex(void* ptr);
int QMetaProperty_Revision(void* ptr);
int QMetaProperty_UserType(void* ptr);
void* QMetaType_NewQMetaType(int typeId);
long long QMetaType_QMetaType_TypeFlags(int ty);
char QMetaType_QMetaType_Compare(void* lhs, void* rhs, int typeId, int result);
char QMetaType_QMetaType_Convert(void* from, int fromTypeId, void* to, int toTypeId);
char QMetaType_QMetaType_DebugStream(void* dbg, void* rhs, int typeId);
char QMetaType_QMetaType_Equals(void* lhs, void* rhs, int typeId, int result);
char QMetaType_QMetaType_IsRegistered(int ty);
char QMetaType_QMetaType_Load(void* stream, int ty, void* data);
char QMetaType_QMetaType_Save(void* stream, int ty, void* data);
void* QMetaType_QMetaType_MetaObjectForType(int ty);
struct QtCore_PackedString QMetaType_QMetaType_TypeName(int typeId);
int QMetaType_QMetaType_SizeOf(int ty);
int QMetaType_QMetaType_Type2(void* typeName);
int QMetaType_QMetaType_Type(char* typeName);
void* QMetaType_QMetaType_Construct(int ty, void* where, void* copy);
void* QMetaType_QMetaType_Create(int ty, void* copy);
void QMetaType_QMetaType_Destroy(int ty, void* data);
void QMetaType_QMetaType_Destruct(int ty, void* where);
void QMetaType_DestroyQMetaType(void* ptr);
long long QMetaType_Flags(void* ptr);
char QMetaType_IsRegistered2(void* ptr);
char QMetaType_IsValid(void* ptr);
void* QMetaType_MetaObject(void* ptr);
int QMetaType_SizeOf2(void* ptr);
void* QMetaType_Construct3(void* ptr, void* where, void* copy);
void* QMetaType_Create2(void* ptr, void* copy);
void QMetaType_Destroy2(void* ptr, void* data);
void QMetaType_Destruct2(void* ptr, void* data);
void* QMimeData_NewQMimeData();
void QMimeData_Clear(void* ptr);
void QMimeData_RemoveFormat(void* ptr, char* mimeType);
void QMimeData_SetColorData(void* ptr, void* color);
void QMimeData_SetData(void* ptr, char* mimeType, void* data);
void QMimeData_SetHtml(void* ptr, char* html);
void QMimeData_SetImageData(void* ptr, void* image);
void QMimeData_SetText(void* ptr, char* text);
void QMimeData_SetUrls(void* ptr, void* urls);
void QMimeData_DestroyQMimeData(void* ptr);
void* QMimeData_Data(void* ptr, char* mimeType);
struct QtCore_PackedList QMimeData_Urls(void* ptr);
struct QtCore_PackedString QMimeData_Html(void* ptr);
struct QtCore_PackedString QMimeData_Text(void* ptr);
void* QMimeData_ColorData(void* ptr);
void* QMimeData_ImageData(void* ptr);
void* QMimeData_RetrieveData(void* ptr, char* mimeType, long long ty);
void* QMimeData_RetrieveDataDefault(void* ptr, char* mimeType, long long ty);
char QMimeData_HasColor(void* ptr);
char QMimeData_HasFormat(void* ptr, char* mimeType);
char QMimeData_HasFormatDefault(void* ptr, char* mimeType);
char QMimeData_HasHtml(void* ptr);
char QMimeData_HasImage(void* ptr);
char QMimeData_HasText(void* ptr);
char QMimeData_HasUrls(void* ptr);
void* QMimeData___setUrls_urls_atList(void* ptr, int i);
void QMimeData___setUrls_urls_setList(void* ptr, void* i);
void* QMimeData___setUrls_urls_newList(void* ptr);
void* QMimeData___urls_atList(void* ptr, int i);
void QMimeData___urls_setList(void* ptr, void* i);
void* QMimeData___urls_newList(void* ptr);
void* QMimeDatabase_NewQMimeDatabase();
void QMimeDatabase_DestroyQMimeDatabase(void* ptr);
void* QMimeDatabase_MimeTypeForName(void* ptr, char* nameOrAlias);
struct QtCore_PackedList QMimeDatabase_AllMimeTypes(void* ptr);
struct QtCore_PackedList QMimeDatabase_MimeTypesForFileName(void* ptr, char* fileName);
void* QMimeDatabase_MimeTypeForData2(void* ptr, void* device);
void* QMimeDatabase_MimeTypeForData(void* ptr, void* data);
void* QMimeDatabase_MimeTypeForFile(void* ptr, void* fileInfo, long long mode);
void* QMimeDatabase_MimeTypeForFile2(void* ptr, char* fileName, long long mode);
void* QMimeDatabase_MimeTypeForFileNameAndData(void* ptr, char* fileName, void* device);
void* QMimeDatabase_MimeTypeForFileNameAndData2(void* ptr, char* fileName, void* data);
void* QMimeDatabase_MimeTypeForUrl(void* ptr, void* url);
struct QtCore_PackedString QMimeDatabase_SuffixForFileName(void* ptr, char* fileName);
void* QMimeDatabase___allMimeTypes_atList(void* ptr, int i);
void QMimeDatabase___allMimeTypes_setList(void* ptr, void* i);
void* QMimeDatabase___allMimeTypes_newList(void* ptr);
void* QMimeDatabase___mimeTypesForFileName_atList(void* ptr, int i);
void QMimeDatabase___mimeTypesForFileName_setList(void* ptr, void* i);
void* QMimeDatabase___mimeTypesForFileName_newList(void* ptr);
void* QMimeType_NewQMimeType();
void* QMimeType_NewQMimeType2(void* other);
void QMimeType_Swap(void* ptr, void* other);
void QMimeType_DestroyQMimeType(void* ptr);
struct QtCore_PackedString QMimeType_Comment(void* ptr);
struct QtCore_PackedString QMimeType_FilterString(void* ptr);
struct QtCore_PackedString QMimeType_GenericIconName(void* ptr);
struct QtCore_PackedString QMimeType_IconName(void* ptr);
struct QtCore_PackedString QMimeType_Name(void* ptr);
struct QtCore_PackedString QMimeType_PreferredSuffix(void* ptr);
struct QtCore_PackedString QMimeType_Aliases(void* ptr);
struct QtCore_PackedString QMimeType_AllAncestors(void* ptr);
struct QtCore_PackedString QMimeType_GlobPatterns(void* ptr);
struct QtCore_PackedString QMimeType_ParentMimeTypes(void* ptr);
struct QtCore_PackedString QMimeType_Suffixes(void* ptr);
char QMimeType_Inherits(void* ptr, char* mimeTypeName);
char QMimeType_IsDefault(void* ptr);
char QMimeType_IsValid(void* ptr);
void* QModelIndex_NewQModelIndex();
void* QModelIndex_Parent(void* ptr);
void* QModelIndex_Sibling(void* ptr, int row, int column);
void* QModelIndex_Data(void* ptr, int role);
long long QModelIndex_Flags(void* ptr);
char QModelIndex_IsValid(void* ptr);
void* QModelIndex_Model(void* ptr);
int QModelIndex_Column(void* ptr);
int QModelIndex_Row(void* ptr);
uintptr_t QModelIndex_InternalId(void* ptr);
void* QModelIndex_InternalPointer(void* ptr);
char QMutex_TryLock(void* ptr, int timeout);
void QMutex_Lock(void* ptr);
void* QMutex_NewQMutex(long long mode);
char QMutex_Try_lock(void* ptr);
void QMutex_Unlock(void* ptr);
char QMutex_IsRecursive(void* ptr);
void* QMutexLocker_NewQMutexLocker(void* mutex);
void QMutexLocker_Relock(void* ptr);
void QMutexLocker_Unlock(void* ptr);
void QMutexLocker_DestroyQMutexLocker(void* ptr);
void* QMutexLocker_Mutex(void* ptr);
void* QObject_NewQObject(void* parent);
struct QtCore_PackedString QObject_QObject_Tr(char* sourceText, char* disambiguation, int n);
char QObject_BlockSignals(void* ptr, char block);
char QObject_QObject_Disconnect2(void* sender, void* sign, void* receiver, void* method);
char QObject_QObject_Disconnect(void* sender, char* sign, void* receiver, char* method);
char QObject_Event(void* ptr, void* e);
char QObject_EventDefault(void* ptr, void* e);
char QObject_EventFilter(void* ptr, void* watched, void* event);
char QObject_EventFilterDefault(void* ptr, void* watched, void* event);
char QObject_SetProperty(void* ptr, char* name, void* value);
int QObject_StartTimer(void* ptr, int interval, long long timerType);
void QObject_ChildEvent(void* ptr, void* event);
void QObject_ChildEventDefault(void* ptr, void* event);
void QObject_ConnectNotify(void* ptr, void* sign);
void QObject_ConnectNotifyDefault(void* ptr, void* sign);
void QObject_CustomEvent(void* ptr, void* event);
void QObject_CustomEventDefault(void* ptr, void* event);
void QObject_DeleteLater(void* ptr);
void QObject_DeleteLaterDefault(void* ptr);
void QObject_ConnectDestroyed(void* ptr);
void QObject_DisconnectDestroyed(void* ptr);
void QObject_Destroyed(void* ptr, void* obj);
void QObject_DisconnectNotify(void* ptr, void* sign);
void QObject_DisconnectNotifyDefault(void* ptr, void* sign);
void QObject_DumpObjectInfo(void* ptr);
void QObject_DumpObjectTree(void* ptr);
void QObject_InstallEventFilter(void* ptr, void* filterObj);
void QObject_KillTimer(void* ptr, int id);
void QObject_MoveToThread(void* ptr, void* targetThread);
void QObject_ConnectObjectNameChanged(void* ptr);
void QObject_DisconnectObjectNameChanged(void* ptr);
void QObject_RemoveEventFilter(void* ptr, void* obj);
void QObject_SetObjectName(void* ptr, char* name);
void QObject_SetParent(void* ptr, void* parent);
void QObject_TimerEvent(void* ptr, void* event);
void QObject_TimerEventDefault(void* ptr, void* event);
void QObject_DestroyQObject(void* ptr);
void QObject_DestroyQObjectDefault(void* ptr);
struct QtCore_PackedList QObject_DynamicPropertyNames(void* ptr);
struct QtCore_PackedList QObject_FindChildren2(void* ptr, void* regExp, long long options);
struct QtCore_PackedList QObject_FindChildren3(void* ptr, void* re, long long options);
struct QtCore_PackedList QObject_FindChildren(void* ptr, char* name, long long options);
void* QObject_Parent(void* ptr);
void* QObject_Sender(void* ptr);
struct QtCore_PackedString QObject_ObjectName(void* ptr);
void* QObject_Thread(void* ptr);
void* QObject_Property(void* ptr, char* name);
void* QObject_FindChild(void* ptr, char* name, long long options);
char QObject_Disconnect4(void* ptr, void* receiver, char* method);
char QObject_Disconnect3(void* ptr, char* sign, void* receiver, char* method);
char QObject_Inherits(void* ptr, char* className);
char QObject_IsSignalConnected(void* ptr, void* sign);
char QObject_IsWidgetType(void* ptr);
char QObject_IsWindowType(void* ptr);
char QObject_SignalsBlocked(void* ptr);
void* QObject_MetaObject(void* ptr);
void* QObject_MetaObjectDefault(void* ptr);
struct QtCore_PackedList QObject_Children(void* ptr);
int QObject_Receivers(void* ptr, char* sign);
int QObject_SenderSignalIndex(void* ptr);
void* QObject_ToVariant(void* ptr);
void* QObject___dynamicPropertyNames_atList(void* ptr, int i);
void QObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QObject___dynamicPropertyNames_newList(void* ptr);
void* QObject___findChildren_atList2(void* ptr, int i);
void QObject___findChildren_setList2(void* ptr, void* i);
void* QObject___findChildren_newList2(void* ptr);
void* QObject___findChildren_atList3(void* ptr, int i);
void QObject___findChildren_setList3(void* ptr, void* i);
void* QObject___findChildren_newList3(void* ptr);
void* QObject___findChildren_atList(void* ptr, int i);
void QObject___findChildren_setList(void* ptr, void* i);
void* QObject___findChildren_newList(void* ptr);
void* QObject___children_atList(void* ptr, int i);
void QObject___children_setList(void* ptr, void* i);
void* QObject___children_newList(void* ptr);
void* QObjectCleanupHandler_Add(void* ptr, void* object);
void* QObjectCleanupHandler_NewQObjectCleanupHandler();
void QObjectCleanupHandler_Clear(void* ptr);
void QObjectCleanupHandler_Remove(void* ptr, void* object);
void QObjectCleanupHandler_DestroyQObjectCleanupHandler(void* ptr);
char QObjectCleanupHandler_IsEmpty(void* ptr);
void* QParallelAnimationGroup_NewQParallelAnimationGroup(void* parent);
void QParallelAnimationGroup_UpdateCurrentTime(void* ptr, int currentTime);
void QParallelAnimationGroup_UpdateCurrentTimeDefault(void* ptr, int currentTime);
void QParallelAnimationGroup_DestroyQParallelAnimationGroup(void* ptr);
int QParallelAnimationGroup_Duration(void* ptr);
int QParallelAnimationGroup_DurationDefault(void* ptr);
void* QPauseAnimation_NewQPauseAnimation(void* parent);
void* QPauseAnimation_NewQPauseAnimation2(int msecs, void* parent);
void QPauseAnimation_SetDuration(void* ptr, int msecs);
void QPauseAnimation_UpdateCurrentTime(void* ptr, int vin);
void QPauseAnimation_UpdateCurrentTimeDefault(void* ptr, int vin);
void QPauseAnimation_DestroyQPauseAnimation(void* ptr);
int QPauseAnimation_Duration(void* ptr);
int QPauseAnimation_DurationDefault(void* ptr);
void* QPersistentModelIndex_NewQPersistentModelIndex4(void* other);
void* QPersistentModelIndex_NewQPersistentModelIndex(void* index);
void* QPersistentModelIndex_NewQPersistentModelIndex3(void* other);
void QPersistentModelIndex_Swap(void* ptr, void* other);
void* QPersistentModelIndex_Parent(void* ptr);
void* QPersistentModelIndex_Sibling(void* ptr, int row, int column);
void* QPersistentModelIndex_Data(void* ptr, int role);
long long QPersistentModelIndex_Flags(void* ptr);
char QPersistentModelIndex_IsValid(void* ptr);
void* QPersistentModelIndex_Model(void* ptr);
int QPersistentModelIndex_Column(void* ptr);
int QPersistentModelIndex_Row(void* ptr);
void* QPluginLoader_Instance(void* ptr);
struct QtCore_PackedList QPluginLoader_QPluginLoader_StaticInstances();
void* QPluginLoader_NewQPluginLoader(void* parent);
void* QPluginLoader_NewQPluginLoader2(char* fileName, void* parent);
char QPluginLoader_Load(void* ptr);
char QPluginLoader_Unload(void* ptr);
void QPluginLoader_SetFileName(void* ptr, char* fileName);
void QPluginLoader_SetLoadHints(void* ptr, long long loadHints);
void QPluginLoader_DestroyQPluginLoader(void* ptr);
void* QPluginLoader_MetaData(void* ptr);
long long QPluginLoader_LoadHints(void* ptr);
struct QtCore_PackedString QPluginLoader_ErrorString(void* ptr);
struct QtCore_PackedString QPluginLoader_FileName(void* ptr);
char QPluginLoader_IsLoaded(void* ptr);
void* QPluginLoader___staticInstances_atList(void* ptr, int i);
void QPluginLoader___staticInstances_setList(void* ptr, void* i);
void* QPluginLoader___staticInstances_newList(void* ptr);
void QPluginLoader___staticPlugins_setList(void* ptr, void* i);
void* QPluginLoader___staticPlugins_newList(void* ptr);
void* QPoint_NewQPoint();
void* QPoint_NewQPoint2(int xpos, int ypos);
int QPoint_Rx(void* ptr);
int QPoint_Ry(void* ptr);
int QPoint_QPoint_DotProduct(void* p1, void* p2);
void QPoint_SetX(void* ptr, int x);
void QPoint_SetY(void* ptr, int y);
char QPoint_IsNull(void* ptr);
int QPoint_ManhattanLength(void* ptr);
int QPoint_X(void* ptr);
int QPoint_Y(void* ptr);
void* QPointF_NewQPointF();
void* QPointF_NewQPointF2(void* point);
void* QPointF_NewQPointF3(double xpos, double ypos);
double QPointF_Rx(void* ptr);
double QPointF_Ry(void* ptr);
double QPointF_QPointF_DotProduct(void* p1, void* p2);
void QPointF_SetX(void* ptr, double x);
void QPointF_SetY(void* ptr, double y);
void* QPointF_ToPoint(void* ptr);
char QPointF_IsNull(void* ptr);
double QPointF_ManhattanLength(void* ptr);
double QPointF_X(void* ptr);
double QPointF_Y(void* ptr);
void* QPropertyAnimation_NewQPropertyAnimation(void* parent);
void* QPropertyAnimation_NewQPropertyAnimation2(void* target, void* propertyName, void* parent);
void QPropertyAnimation_SetPropertyName(void* ptr, void* propertyName);
void QPropertyAnimation_SetTargetObject(void* ptr, void* target);
void QPropertyAnimation_DestroyQPropertyAnimation(void* ptr);
void* QPropertyAnimation_PropertyName(void* ptr);
void* QPropertyAnimation_TargetObject(void* ptr);
void* QReadLocker_NewQReadLocker(void* lock);
void QReadLocker_Relock(void* ptr);
void QReadLocker_Unlock(void* ptr);
void QReadLocker_DestroyQReadLocker(void* ptr);
void* QReadLocker_ReadWriteLock(void* ptr);
void* QReadWriteLock_NewQReadWriteLock(long long recursionMode);
char QReadWriteLock_TryLockForRead(void* ptr);
char QReadWriteLock_TryLockForRead2(void* ptr, int timeout);
char QReadWriteLock_TryLockForWrite(void* ptr);
char QReadWriteLock_TryLockForWrite2(void* ptr, int timeout);
void QReadWriteLock_LockForRead(void* ptr);
void QReadWriteLock_LockForWrite(void* ptr);
void QReadWriteLock_Unlock(void* ptr);
void QReadWriteLock_DestroyQReadWriteLock(void* ptr);
void* QRect_NewQRect();
void* QRect_NewQRect2(void* topLeft, void* bottomRight);
void* QRect_NewQRect3(void* topLeft, void* size);
void* QRect_NewQRect4(int x, int y, int width, int height);
void QRect_Adjust(void* ptr, int dx1, int dy1, int dx2, int dy2);
void QRect_MoveBottom(void* ptr, int y);
void QRect_MoveBottomLeft(void* ptr, void* position);
void QRect_MoveBottomRight(void* ptr, void* position);
void QRect_MoveCenter(void* ptr, void* position);
void QRect_MoveLeft(void* ptr, int x);
void QRect_MoveRight(void* ptr, int x);
void QRect_MoveTo2(void* ptr, void* position);
void QRect_MoveTo(void* ptr, int x, int y);
void QRect_MoveTop(void* ptr, int y);
void QRect_MoveTopLeft(void* ptr, void* position);
void QRect_MoveTopRight(void* ptr, void* position);
void QRect_SetBottom(void* ptr, int y);
void QRect_SetBottomLeft(void* ptr, void* position);
void QRect_SetBottomRight(void* ptr, void* position);
void QRect_SetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_SetHeight(void* ptr, int height);
void QRect_SetLeft(void* ptr, int x);
void QRect_SetRect(void* ptr, int x, int y, int width, int height);
void QRect_SetRight(void* ptr, int x);
void QRect_SetSize(void* ptr, void* size);
void QRect_SetTop(void* ptr, int y);
void QRect_SetTopLeft(void* ptr, void* position);
void QRect_SetTopRight(void* ptr, void* position);
void QRect_SetWidth(void* ptr, int width);
void QRect_SetX(void* ptr, int x);
void QRect_SetY(void* ptr, int y);
void QRect_Translate2(void* ptr, void* offset);
void QRect_Translate(void* ptr, int dx, int dy);
void* QRect_BottomLeft(void* ptr);
void* QRect_BottomRight(void* ptr);
void* QRect_Center(void* ptr);
void* QRect_TopLeft(void* ptr);
void* QRect_TopRight(void* ptr);
void* QRect_Adjusted(void* ptr, int dx1, int dy1, int dx2, int dy2);
void* QRect_Intersected(void* ptr, void* rectangle);
void* QRect_MarginsAdded(void* ptr, void* margins);
void* QRect_MarginsRemoved(void* ptr, void* margins);
void* QRect_Normalized(void* ptr);
void* QRect_Translated2(void* ptr, void* offset);
void* QRect_Translated(void* ptr, int dx, int dy);
void* QRect_Transposed(void* ptr);
void* QRect_United(void* ptr, void* rectangle);
void* QRect_Size(void* ptr);
char QRect_Contains(void* ptr, void* point, char proper);
char QRect_Contains2(void* ptr, void* rectangle, char proper);
char QRect_Contains3(void* ptr, int x, int y);
char QRect_Contains4(void* ptr, int x, int y, char proper);
char QRect_Intersects(void* ptr, void* rectangle);
char QRect_IsEmpty(void* ptr);
char QRect_IsNull(void* ptr);
char QRect_IsValid(void* ptr);
int QRect_Bottom(void* ptr);
int QRect_Height(void* ptr);
int QRect_Left(void* ptr);
int QRect_Right(void* ptr);
int QRect_Top(void* ptr);
int QRect_Width(void* ptr);
int QRect_X(void* ptr);
int QRect_Y(void* ptr);
void QRect_GetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_GetRect(void* ptr, int x, int y, int width, int height);
void* QRectF_NewQRectF();
void* QRectF_NewQRectF3(void* topLeft, void* bottomRight);
void* QRectF_NewQRectF2(void* topLeft, void* size);
void* QRectF_NewQRectF5(void* rectangle);
void* QRectF_NewQRectF4(double x, double y, double width, double height);
void QRectF_Adjust(void* ptr, double dx1, double dy1, double dx2, double dy2);
void QRectF_MoveBottom(void* ptr, double y);
void QRectF_MoveBottomLeft(void* ptr, void* position);
void QRectF_MoveBottomRight(void* ptr, void* position);
void QRectF_MoveCenter(void* ptr, void* position);
void QRectF_MoveLeft(void* ptr, double x);
void QRectF_MoveRight(void* ptr, double x);
void QRectF_MoveTo2(void* ptr, void* position);
void QRectF_MoveTo(void* ptr, double x, double y);
void QRectF_MoveTop(void* ptr, double y);
void QRectF_MoveTopLeft(void* ptr, void* position);
void QRectF_MoveTopRight(void* ptr, void* position);
void QRectF_SetBottom(void* ptr, double y);
void QRectF_SetBottomLeft(void* ptr, void* position);
void QRectF_SetBottomRight(void* ptr, void* position);
void QRectF_SetCoords(void* ptr, double x1, double y1, double x2, double y2);
void QRectF_SetHeight(void* ptr, double height);
void QRectF_SetLeft(void* ptr, double x);
void QRectF_SetRect(void* ptr, double x, double y, double width, double height);
void QRectF_SetRight(void* ptr, double x);
void QRectF_SetSize(void* ptr, void* size);
void QRectF_SetTop(void* ptr, double y);
void QRectF_SetTopLeft(void* ptr, void* position);
void QRectF_SetTopRight(void* ptr, void* position);
void QRectF_SetWidth(void* ptr, double width);
void QRectF_SetX(void* ptr, double x);
void QRectF_SetY(void* ptr, double y);
void QRectF_Translate2(void* ptr, void* offset);
void QRectF_Translate(void* ptr, double dx, double dy);
void* QRectF_BottomLeft(void* ptr);
void* QRectF_BottomRight(void* ptr);
void* QRectF_Center(void* ptr);
void* QRectF_TopLeft(void* ptr);
void* QRectF_TopRight(void* ptr);
void* QRectF_ToAlignedRect(void* ptr);
void* QRectF_ToRect(void* ptr);
void* QRectF_Adjusted(void* ptr, double dx1, double dy1, double dx2, double dy2);
void* QRectF_Intersected(void* ptr, void* rectangle);
void* QRectF_MarginsAdded(void* ptr, void* margins);
void* QRectF_MarginsRemoved(void* ptr, void* margins);
void* QRectF_Normalized(void* ptr);
void* QRectF_Translated2(void* ptr, void* offset);
void* QRectF_Translated(void* ptr, double dx, double dy);
void* QRectF_Transposed(void* ptr);
void* QRectF_United(void* ptr, void* rectangle);
void* QRectF_Size(void* ptr);
char QRectF_Contains(void* ptr, void* point);
char QRectF_Contains2(void* ptr, void* rectangle);
char QRectF_Contains3(void* ptr, double x, double y);
char QRectF_Intersects(void* ptr, void* rectangle);
char QRectF_IsEmpty(void* ptr);
char QRectF_IsNull(void* ptr);
char QRectF_IsValid(void* ptr);
double QRectF_Bottom(void* ptr);
double QRectF_Height(void* ptr);
double QRectF_Left(void* ptr);
double QRectF_Right(void* ptr);
double QRectF_Top(void* ptr);
double QRectF_Width(void* ptr);
double QRectF_X(void* ptr);
double QRectF_Y(void* ptr);
void QRectF_GetCoords(void* ptr, double x1, double y1, double x2, double y2);
void QRectF_GetRect(void* ptr, double x, double y, double width, double height);
void* QRegExp_NewQRegExp();
void* QRegExp_NewQRegExp3(void* rx);
void* QRegExp_NewQRegExp2(char* pattern, long long cs, long long syntax);
struct QtCore_PackedString QRegExp_QRegExp_Escape(char* str);
void QRegExp_SetCaseSensitivity(void* ptr, long long cs);
void QRegExp_SetMinimal(void* ptr, char minimal);
void QRegExp_SetPattern(void* ptr, char* pattern);
void QRegExp_SetPatternSyntax(void* ptr, long long syntax);
void QRegExp_Swap(void* ptr, void* other);
void QRegExp_DestroyQRegExp(void* ptr);
long long QRegExp_PatternSyntax(void* ptr);
struct QtCore_PackedString QRegExp_Cap(void* ptr, int nth);
struct QtCore_PackedString QRegExp_ErrorString(void* ptr);
struct QtCore_PackedString QRegExp_Pattern(void* ptr);
struct QtCore_PackedString QRegExp_CapturedTexts(void* ptr);
long long QRegExp_CaseSensitivity(void* ptr);
char QRegExp_ExactMatch(void* ptr, char* str);
char QRegExp_IsEmpty(void* ptr);
char QRegExp_IsMinimal(void* ptr);
char QRegExp_IsValid(void* ptr);
int QRegExp_CaptureCount(void* ptr);
int QRegExp_IndexIn(void* ptr, char* str, int offset, long long caretMode);
int QRegExp_LastIndexIn(void* ptr, char* str, int offset, long long caretMode);
int QRegExp_MatchedLength(void* ptr);
int QRegExp_Pos(void* ptr, int nth);
void* QRegularExpression_NewQRegularExpression();
void* QRegularExpression_NewQRegularExpression3(void* re);
void* QRegularExpression_NewQRegularExpression2(char* pattern, long long options);
struct QtCore_PackedString QRegularExpression_QRegularExpression_Escape(char* str);
void QRegularExpression_SetPattern(void* ptr, char* pattern);
void QRegularExpression_SetPatternOptions(void* ptr, long long options);
void QRegularExpression_Swap(void* ptr, void* other);
void QRegularExpression_DestroyQRegularExpression(void* ptr);
long long QRegularExpression_PatternOptions(void* ptr);
void* QRegularExpression_Match(void* ptr, char* subject, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_Match2(void* ptr, void* subjectRef, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_GlobalMatch(void* ptr, char* subject, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_GlobalMatch2(void* ptr, void* subjectRef, int offset, long long matchType, long long matchOptions);
struct QtCore_PackedString QRegularExpression_ErrorString(void* ptr);
struct QtCore_PackedString QRegularExpression_Pattern(void* ptr);
struct QtCore_PackedString QRegularExpression_NamedCaptureGroups(void* ptr);
char QRegularExpression_IsValid(void* ptr);
int QRegularExpression_CaptureCount(void* ptr);
int QRegularExpression_PatternErrorOffset(void* ptr);
void QRegularExpression_Optimize(void* ptr);
void* QRegularExpressionMatch_NewQRegularExpressionMatch();
void* QRegularExpressionMatch_NewQRegularExpressionMatch2(void* match);
void QRegularExpressionMatch_Swap(void* ptr, void* other);
void QRegularExpressionMatch_DestroyQRegularExpressionMatch(void* ptr);
void* QRegularExpressionMatch_RegularExpression(void* ptr);
long long QRegularExpressionMatch_MatchOptions(void* ptr);
long long QRegularExpressionMatch_MatchType(void* ptr);
struct QtCore_PackedString QRegularExpressionMatch_Captured2(void* ptr, char* name);
struct QtCore_PackedString QRegularExpressionMatch_Captured(void* ptr, int nth);
struct QtCore_PackedString QRegularExpressionMatch_CapturedTexts(void* ptr);
void* QRegularExpressionMatch_CapturedRef2(void* ptr, char* name);
void* QRegularExpressionMatch_CapturedRef(void* ptr, int nth);
char QRegularExpressionMatch_HasMatch(void* ptr);
char QRegularExpressionMatch_HasPartialMatch(void* ptr);
char QRegularExpressionMatch_IsValid(void* ptr);
int QRegularExpressionMatch_CapturedEnd2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedEnd(void* ptr, int nth);
int QRegularExpressionMatch_CapturedLength2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedLength(void* ptr, int nth);
int QRegularExpressionMatch_CapturedStart2(void* ptr, char* name);
int QRegularExpressionMatch_CapturedStart(void* ptr, int nth);
int QRegularExpressionMatch_LastCapturedIndex(void* ptr);
void* QResource_NewQResource(char* file, void* locale);
char QResource_QResource_RegisterResource(char* rccFileName, char* mapRoot);
char QResource_QResource_RegisterResource2(char* rccData, char* mapRoot);
char QResource_QResource_UnregisterResource(char* rccFileName, char* mapRoot);
char QResource_QResource_UnregisterResource2(char* rccData, char* mapRoot);
void QResource_SetFileName(void* ptr, char* file);
void QResource_SetLocale(void* ptr, void* locale);
void QResource_DestroyQResource(void* ptr);
void* QResource_LastModified(void* ptr);
void* QResource_Locale(void* ptr);
struct QtCore_PackedString QResource_AbsoluteFilePath(void* ptr);
struct QtCore_PackedString QResource_FileName(void* ptr);
struct QtCore_PackedString QResource_Children(void* ptr);
char QResource_IsCompressed(void* ptr);
char QResource_IsDir(void* ptr);
char QResource_IsFile(void* ptr);
char QResource_IsValid(void* ptr);
struct QtCore_PackedString QResource_Data(void* ptr);
long long QResource_Size(void* ptr);
void* QRunnable_NewQRunnable();
void QRunnable_Run(void* ptr);
void QRunnable_SetAutoDelete(void* ptr, char autoDelete);
void QRunnable_DestroyQRunnable(void* ptr);
void QRunnable_DestroyQRunnableDefault(void* ptr);
char QRunnable_AutoDelete(void* ptr);
void* QSaveFile_NewQSaveFile2(void* parent);
void* QSaveFile_NewQSaveFile(char* name);
void* QSaveFile_NewQSaveFile3(char* name, void* parent);
char QSaveFile_Commit(void* ptr);
void QSaveFile_CancelWriting(void* ptr);
void QSaveFile_SetDirectWriteFallback(void* ptr, char enabled);
void QSaveFile_SetFileName(void* ptr, char* name);
void QSaveFile_DestroyQSaveFile(void* ptr);
char QSaveFile_DirectWriteFallback(void* ptr);
void* QSemaphore_NewQSemaphore(int n);
char QSemaphore_TryAcquire(void* ptr, int n);
char QSemaphore_TryAcquire2(void* ptr, int n, int timeout);
void QSemaphore_Acquire(void* ptr, int n);
void QSemaphore_Release(void* ptr, int n);
void QSemaphore_DestroyQSemaphore(void* ptr);
int QSemaphore_Available(void* ptr);
void* QSequentialAnimationGroup_AddPause(void* ptr, int msecs);
void* QSequentialAnimationGroup_InsertPause(void* ptr, int index, int msecs);
void* QSequentialAnimationGroup_NewQSequentialAnimationGroup(void* parent);
void QSequentialAnimationGroup_ConnectCurrentAnimationChanged(void* ptr);
void QSequentialAnimationGroup_DisconnectCurrentAnimationChanged(void* ptr);
void QSequentialAnimationGroup_CurrentAnimationChanged(void* ptr, void* current);
void QSequentialAnimationGroup_UpdateCurrentTime(void* ptr, int currentTime);
void QSequentialAnimationGroup_UpdateCurrentTimeDefault(void* ptr, int currentTime);
void QSequentialAnimationGroup_DestroyQSequentialAnimationGroup(void* ptr);
void* QSequentialAnimationGroup_CurrentAnimation(void* ptr);
int QSequentialAnimationGroup_Duration(void* ptr);
int QSequentialAnimationGroup_DurationDefault(void* ptr);
void* QSequentialIterable_At(void* ptr, int idx);
char QSequentialIterable_CanReverseIterate(void* ptr);
int QSequentialIterable_Size(void* ptr);
long long QSettings_QSettings_DefaultFormat();
void* QSettings_NewQSettings3(long long format, long long scope, char* organization, char* application, void* parent);
void* QSettings_NewQSettings5(void* parent);
void* QSettings_NewQSettings2(long long scope, char* organization, char* application, void* parent);
void* QSettings_NewQSettings4(char* fileName, long long format, void* parent);
void* QSettings_NewQSettings(char* organization, char* application, void* parent);
int QSettings_BeginReadArray(void* ptr, char* prefix);
void QSettings_BeginGroup(void* ptr, char* prefix);
void QSettings_BeginWriteArray(void* ptr, char* prefix, int size);
void QSettings_Clear(void* ptr);
void QSettings_EndArray(void* ptr);
void QSettings_EndGroup(void* ptr);
void QSettings_Remove(void* ptr, char* key);
void QSettings_SetArrayIndex(void* ptr, int i);
void QSettings_QSettings_SetDefaultFormat(long long format);
void QSettings_SetFallbacksEnabled(void* ptr, char b);
void QSettings_SetIniCodec(void* ptr, void* codec);
void QSettings_SetIniCodec2(void* ptr, char* codecName);
void QSettings_QSettings_SetPath(long long format, long long scope, char* path);
void QSettings_SetValue(void* ptr, char* key, void* value);
void QSettings_Sync(void* ptr);
void QSettings_DestroyQSettings(void* ptr);
long long QSettings_Format(void* ptr);
struct QtCore_PackedString QSettings_ApplicationName(void* ptr);
struct QtCore_PackedString QSettings_FileName(void* ptr);
struct QtCore_PackedString QSettings_Group(void* ptr);
struct QtCore_PackedString QSettings_OrganizationName(void* ptr);
struct QtCore_PackedString QSettings_AllKeys(void* ptr);
struct QtCore_PackedString QSettings_ChildGroups(void* ptr);
struct QtCore_PackedString QSettings_ChildKeys(void* ptr);
void* QSettings_IniCodec(void* ptr);
void* QSettings_Value(void* ptr, char* key, void* defaultValue);
long long QSettings_Scope(void* ptr);
long long QSettings_Status(void* ptr);
char QSettings_Contains(void* ptr, char* key);
char QSettings_FallbacksEnabled(void* ptr);
char QSettings_IsWritable(void* ptr);
void* QSharedData_NewQSharedData();
void* QSharedData_NewQSharedData2(void* other);
void* QSharedMemory_NewQSharedMemory2(void* parent);
void* QSharedMemory_NewQSharedMemory(char* key, void* parent);
char QSharedMemory_Attach(void* ptr, long long mode);
char QSharedMemory_Create(void* ptr, int size, long long mode);
char QSharedMemory_Detach(void* ptr);
char QSharedMemory_Lock(void* ptr);
char QSharedMemory_Unlock(void* ptr);
void* QSharedMemory_Data(void* ptr);
void QSharedMemory_SetKey(void* ptr, char* key);
void QSharedMemory_SetNativeKey(void* ptr, char* key);
void QSharedMemory_DestroyQSharedMemory(void* ptr);
struct QtCore_PackedString QSharedMemory_ErrorString(void* ptr);
struct QtCore_PackedString QSharedMemory_Key(void* ptr);
struct QtCore_PackedString QSharedMemory_NativeKey(void* ptr);
long long QSharedMemory_Error(void* ptr);
char QSharedMemory_IsAttached(void* ptr);
void* QSharedMemory_ConstData(void* ptr);
void* QSharedMemory_Data2(void* ptr);
int QSharedMemory_Size(void* ptr);
void* QSignalBlocker_NewQSignalBlocker2(void* object);
void* QSignalBlocker_NewQSignalBlocker(void* object);
void QSignalBlocker_Reblock(void* ptr);
void QSignalBlocker_Unblock(void* ptr);
void QSignalBlocker_DestroyQSignalBlocker(void* ptr);
void* QSignalMapper_NewQSignalMapper(void* parent);
void QSignalMapper_Map(void* ptr);
void QSignalMapper_MapDefault(void* ptr);
void QSignalMapper_Map2(void* ptr, void* sender);
void QSignalMapper_Map2Default(void* ptr, void* sender);
void QSignalMapper_ConnectMapped4(void* ptr);
void QSignalMapper_DisconnectMapped4(void* ptr);
void QSignalMapper_Mapped4(void* ptr, void* object);
void QSignalMapper_ConnectMapped3(void* ptr);
void QSignalMapper_DisconnectMapped3(void* ptr);
void QSignalMapper_Mapped3(void* ptr, void* widget);
void QSignalMapper_ConnectMapped2(void* ptr);
void QSignalMapper_DisconnectMapped2(void* ptr);
void QSignalMapper_Mapped2(void* ptr, char* text);
void QSignalMapper_ConnectMapped(void* ptr);
void QSignalMapper_DisconnectMapped(void* ptr);
void QSignalMapper_Mapped(void* ptr, int i);
void QSignalMapper_RemoveMappings(void* ptr, void* sender);
void QSignalMapper_SetMapping4(void* ptr, void* sender, void* object);
void QSignalMapper_SetMapping3(void* ptr, void* sender, void* widget);
void QSignalMapper_SetMapping2(void* ptr, void* sender, char* text);
void QSignalMapper_SetMapping(void* ptr, void* sender, int id);
void QSignalMapper_DestroyQSignalMapper(void* ptr);
void* QSignalMapper_Mapping4(void* ptr, void* object);
void* QSignalMapper_Mapping3(void* ptr, void* widget);
void* QSignalMapper_Mapping2(void* ptr, char* id);
void* QSignalMapper_Mapping(void* ptr, int id);
void* QSignalTransition_NewQSignalTransition(void* sourceState);
void* QSignalTransition_NewQSignalTransition2(void* sender, char* sign, void* sourceState);
char QSignalTransition_EventTest(void* ptr, void* event);
char QSignalTransition_EventTestDefault(void* ptr, void* event);
void QSignalTransition_OnTransition(void* ptr, void* event);
void QSignalTransition_OnTransitionDefault(void* ptr, void* event);
void QSignalTransition_ConnectSenderObjectChanged(void* ptr);
void QSignalTransition_DisconnectSenderObjectChanged(void* ptr);
void QSignalTransition_SetSenderObject(void* ptr, void* sender);
void QSignalTransition_SetSignal(void* ptr, void* sign);
void QSignalTransition_ConnectSignalChanged(void* ptr);
void QSignalTransition_DisconnectSignalChanged(void* ptr);
void QSignalTransition_DestroyQSignalTransition(void* ptr);
void* QSignalTransition_Signal(void* ptr);
void* QSignalTransition_SenderObject(void* ptr);
void* QSize_NewQSize();
void* QSize_NewQSize2(int width, int height);
int QSize_Rheight(void* ptr);
int QSize_Rwidth(void* ptr);
void QSize_Scale2(void* ptr, void* size, long long mode);
void QSize_Scale(void* ptr, int width, int height, long long mode);
void QSize_SetHeight(void* ptr, int height);
void QSize_SetWidth(void* ptr, int width);
void QSize_Transpose(void* ptr);
void* QSize_BoundedTo(void* ptr, void* otherSize);
void* QSize_ExpandedTo(void* ptr, void* otherSize);
void* QSize_Scaled2(void* ptr, void* s, long long mode);
void* QSize_Scaled(void* ptr, int width, int height, long long mode);
void* QSize_Transposed(void* ptr);
char QSize_IsEmpty(void* ptr);
char QSize_IsNull(void* ptr);
char QSize_IsValid(void* ptr);
int QSize_Height(void* ptr);
int QSize_Width(void* ptr);
void* QSizeF_NewQSizeF();
void* QSizeF_NewQSizeF2(void* size);
void* QSizeF_NewQSizeF3(double width, double height);
double QSizeF_Rheight(void* ptr);
double QSizeF_Rwidth(void* ptr);
void QSizeF_Scale2(void* ptr, void* size, long long mode);
void QSizeF_Scale(void* ptr, double width, double height, long long mode);
void QSizeF_SetHeight(void* ptr, double height);
void QSizeF_SetWidth(void* ptr, double width);
void QSizeF_Transpose(void* ptr);
void* QSizeF_ToSize(void* ptr);
void* QSizeF_BoundedTo(void* ptr, void* otherSize);
void* QSizeF_ExpandedTo(void* ptr, void* otherSize);
void* QSizeF_Scaled2(void* ptr, void* s, long long mode);
void* QSizeF_Scaled(void* ptr, double width, double height, long long mode);
void* QSizeF_Transposed(void* ptr);
char QSizeF_IsEmpty(void* ptr);
char QSizeF_IsNull(void* ptr);
char QSizeF_IsValid(void* ptr);
double QSizeF_Height(void* ptr);
double QSizeF_Width(void* ptr);
void QSocketNotifier_ConnectActivated(void* ptr);
void QSocketNotifier_DisconnectActivated(void* ptr);
void QSocketNotifier_SetEnabled(void* ptr, char enable);
void QSocketNotifier_SetEnabledDefault(void* ptr, char enable);
void QSocketNotifier_DestroyQSocketNotifier(void* ptr);
long long QSocketNotifier_Type(void* ptr);
char QSocketNotifier_IsEnabled(void* ptr);
void* QSortFilterProxyModel_NewQSortFilterProxyModel(void* parent);
void QSortFilterProxyModel_Invalidate(void* ptr);
void QSortFilterProxyModel_InvalidateDefault(void* ptr);
void QSortFilterProxyModel_InvalidateFilter(void* ptr);
void QSortFilterProxyModel_SetDynamicSortFilter(void* ptr, char enable);
void QSortFilterProxyModel_SetFilterCaseSensitivity(void* ptr, long long cs);
void QSortFilterProxyModel_SetFilterFixedString(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterFixedStringDefault(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterKeyColumn(void* ptr, int column);
void QSortFilterProxyModel_SetFilterRegExp(void* ptr, void* regExp);
void QSortFilterProxyModel_SetFilterRegExp2(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterRegExp2Default(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterRole(void* ptr, int role);
void QSortFilterProxyModel_SetFilterWildcard(void* ptr, char* pattern);
void QSortFilterProxyModel_SetFilterWildcardDefault(void* ptr, char* pattern);
void QSortFilterProxyModel_SetSortCaseSensitivity(void* ptr, long long cs);
void QSortFilterProxyModel_SetSortLocaleAware(void* ptr, char on);
void QSortFilterProxyModel_SetSortRole(void* ptr, int role);
void QSortFilterProxyModel_DestroyQSortFilterProxyModel(void* ptr);
void* QSortFilterProxyModel_Index(void* ptr, int row, int column, void* parent);
void* QSortFilterProxyModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QSortFilterProxyModel_MapFromSource(void* ptr, void* sourceIndex);
void* QSortFilterProxyModel_MapFromSourceDefault(void* ptr, void* sourceIndex);
void* QSortFilterProxyModel_MapToSource(void* ptr, void* proxyIndex);
void* QSortFilterProxyModel_MapToSourceDefault(void* ptr, void* proxyIndex);
void* QSortFilterProxyModel_Parent(void* ptr, void* child);
void* QSortFilterProxyModel_ParentDefault(void* ptr, void* child);
void* QSortFilterProxyModel_FilterRegExp(void* ptr);
long long QSortFilterProxyModel_FilterCaseSensitivity(void* ptr);
long long QSortFilterProxyModel_SortCaseSensitivity(void* ptr);
long long QSortFilterProxyModel_SortOrder(void* ptr);
char QSortFilterProxyModel_DynamicSortFilter(void* ptr);
char QSortFilterProxyModel_FilterAcceptsColumn(void* ptr, int source_column, void* source_parent);
char QSortFilterProxyModel_FilterAcceptsColumnDefault(void* ptr, int source_column, void* source_parent);
char QSortFilterProxyModel_FilterAcceptsRow(void* ptr, int source_row, void* source_parent);
char QSortFilterProxyModel_FilterAcceptsRowDefault(void* ptr, int source_row, void* source_parent);
char QSortFilterProxyModel_IsSortLocaleAware(void* ptr);
char QSortFilterProxyModel_LessThan(void* ptr, void* source_left, void* source_right);
char QSortFilterProxyModel_LessThanDefault(void* ptr, void* source_left, void* source_right);
int QSortFilterProxyModel_ColumnCount(void* ptr, void* parent);
int QSortFilterProxyModel_ColumnCountDefault(void* ptr, void* parent);
int QSortFilterProxyModel_FilterKeyColumn(void* ptr);
int QSortFilterProxyModel_FilterRole(void* ptr);
int QSortFilterProxyModel_RowCount(void* ptr, void* parent);
int QSortFilterProxyModel_RowCountDefault(void* ptr, void* parent);
int QSortFilterProxyModel_SortColumn(void* ptr);
int QSortFilterProxyModel_SortRole(void* ptr);
struct QtCore_PackedString QStandardPaths_QStandardPaths_DisplayName(long long ty);
struct QtCore_PackedString QStandardPaths_QStandardPaths_FindExecutable(char* executableName, char* paths);
struct QtCore_PackedString QStandardPaths_QStandardPaths_Locate(long long ty, char* fileName, long long options);
struct QtCore_PackedString QStandardPaths_QStandardPaths_WritableLocation(long long ty);
struct QtCore_PackedString QStandardPaths_QStandardPaths_LocateAll(long long ty, char* fileName, long long options);
struct QtCore_PackedString QStandardPaths_QStandardPaths_StandardLocations(long long ty);
void QStandardPaths_QStandardPaths_SetTestModeEnabled(char testMode);
void* QState_AddTransition4(void* ptr, void* target);
void* QState_AddTransition2(void* ptr, void* sender, char* sign, void* target);
void* QState_NewQState2(long long childMode, void* parent);
void* QState_NewQState(void* parent);
void QState_AddTransition(void* ptr, void* transition);
void QState_AssignProperty(void* ptr, void* object, char* name, void* value);
void QState_ConnectChildModeChanged(void* ptr);
void QState_DisconnectChildModeChanged(void* ptr);
void QState_ConnectErrorStateChanged(void* ptr);
void QState_DisconnectErrorStateChanged(void* ptr);
void QState_ConnectFinished(void* ptr);
void QState_DisconnectFinished(void* ptr);
void QState_ConnectInitialStateChanged(void* ptr);
void QState_DisconnectInitialStateChanged(void* ptr);
void QState_OnEntry(void* ptr, void* event);
void QState_OnEntryDefault(void* ptr, void* event);
void QState_OnExit(void* ptr, void* event);
void QState_OnExitDefault(void* ptr, void* event);
void QState_ConnectPropertiesAssigned(void* ptr);
void QState_DisconnectPropertiesAssigned(void* ptr);
void QState_RemoveTransition(void* ptr, void* transition);
void QState_SetChildMode(void* ptr, long long mode);
void QState_SetErrorState(void* ptr, void* state);
void QState_SetInitialState(void* ptr, void* state);
void QState_DestroyQState(void* ptr);
long long QState_ChildMode(void* ptr);
void* QState_ErrorState(void* ptr);
void* QState_InitialState(void* ptr);
struct QtCore_PackedList QState_Transitions(void* ptr);
void* QState___transitions_atList(void* ptr, int i);
void QState___transitions_setList(void* ptr, void* i);
void* QState___transitions_newList(void* ptr);
void* QStateMachine_NewQStateMachine(void* parent);
void* QStateMachine_NewQStateMachine2(long long childMode, void* parent);
char QStateMachine_CancelDelayedEvent(void* ptr, int id);
int QStateMachine_PostDelayedEvent(void* ptr, void* event, int delay);
void QStateMachine_AddDefaultAnimation(void* ptr, void* animation);
void QStateMachine_AddState(void* ptr, void* state);
void QStateMachine_ClearError(void* ptr);
void QStateMachine_PostEvent(void* ptr, void* event, long long priority);
void QStateMachine_RemoveDefaultAnimation(void* ptr, void* animation);
void QStateMachine_RemoveState(void* ptr, void* state);
void QStateMachine_ConnectRunningChanged(void* ptr);
void QStateMachine_DisconnectRunningChanged(void* ptr);
void QStateMachine_RunningChanged(void* ptr, char running);
void QStateMachine_SetAnimated(void* ptr, char enabled);
void QStateMachine_SetGlobalRestorePolicy(void* ptr, long long restorePolicy);
void QStateMachine_SetRunning(void* ptr, char running);
void QStateMachine_SetRunningDefault(void* ptr, char running);
void QStateMachine_Start(void* ptr);
void QStateMachine_StartDefault(void* ptr);
void QStateMachine_ConnectStarted(void* ptr);
void QStateMachine_DisconnectStarted(void* ptr);
void QStateMachine_Stop(void* ptr);
void QStateMachine_StopDefault(void* ptr);
void QStateMachine_ConnectStopped(void* ptr);
void QStateMachine_DisconnectStopped(void* ptr);
void QStateMachine_DestroyQStateMachine(void* ptr);
long long QStateMachine_Error(void* ptr);
struct QtCore_PackedList QStateMachine_DefaultAnimations(void* ptr);
long long QStateMachine_GlobalRestorePolicy(void* ptr);
struct QtCore_PackedString QStateMachine_ErrorString(void* ptr);
char QStateMachine_IsAnimated(void* ptr);
char QStateMachine_IsRunning(void* ptr);
void* QStateMachine___defaultAnimations_atList(void* ptr, int i);
void QStateMachine___defaultAnimations_setList(void* ptr, void* i);
void* QStateMachine___defaultAnimations_newList(void* ptr);
void* QStaticPlugin_Instance(void* ptr);
struct QtCore_PackedString QStaticPlugin_RawMetaData(void* ptr);
void* QStaticPlugin_MetaData(void* ptr);
struct QtCore_PackedList QStorageInfo_QStorageInfo_MountedVolumes();
void* QStorageInfo_QStorageInfo_Root();
void* QStorageInfo_NewQStorageInfo();
void* QStorageInfo_NewQStorageInfo3(void* dir);
void* QStorageInfo_NewQStorageInfo4(void* other);
void* QStorageInfo_NewQStorageInfo2(char* path);
void QStorageInfo_Refresh(void* ptr);
void QStorageInfo_SetPath(void* ptr, char* path);
void QStorageInfo_Swap(void* ptr, void* other);
void QStorageInfo_DestroyQStorageInfo(void* ptr);
void* QStorageInfo_Device(void* ptr);
void* QStorageInfo_FileSystemType(void* ptr);
struct QtCore_PackedString QStorageInfo_DisplayName(void* ptr);
struct QtCore_PackedString QStorageInfo_Name(void* ptr);
struct QtCore_PackedString QStorageInfo_RootPath(void* ptr);
char QStorageInfo_IsReadOnly(void* ptr);
char QStorageInfo_IsReady(void* ptr);
char QStorageInfo_IsRoot(void* ptr);
char QStorageInfo_IsValid(void* ptr);
int QStorageInfo_BlockSize(void* ptr);
long long QStorageInfo_BytesAvailable(void* ptr);
long long QStorageInfo_BytesFree(void* ptr);
long long QStorageInfo_BytesTotal(void* ptr);
void* QStorageInfo___mountedVolumes_atList(void* ptr, int i);
void QStorageInfo___mountedVolumes_setList(void* ptr, void* i);
void* QStorageInfo___mountedVolumes_newList(void* ptr);
void* QStringListModel_NewQStringListModel(void* parent);
void* QStringListModel_NewQStringListModel2(char* strin, void* parent);
void QStringListModel_SetStringList(void* ptr, char* strin);
struct QtCore_PackedString QStringListModel_StringList(void* ptr);
void* QStringListModel_Data(void* ptr, void* index, int role);
void* QStringListModel_DataDefault(void* ptr, void* index, int role);
int QStringListModel_RowCount(void* ptr, void* parent);
int QStringListModel_RowCountDefault(void* ptr, void* parent);
void* QStringMatcher_NewQStringMatcher();
void* QStringMatcher_NewQStringMatcher3(void* uc, int length, long long cs);
void* QStringMatcher_NewQStringMatcher2(char* pattern, long long cs);
void* QStringMatcher_NewQStringMatcher4(void* other);
void QStringMatcher_SetCaseSensitivity(void* ptr, long long cs);
void QStringMatcher_SetPattern(void* ptr, char* pattern);
void QStringMatcher_DestroyQStringMatcher(void* ptr);
struct QtCore_PackedString QStringMatcher_Pattern(void* ptr);
long long QStringMatcher_CaseSensitivity(void* ptr);
int QStringMatcher_IndexIn2(void* ptr, void* str, int length, int from);
int QStringMatcher_IndexIn(void* ptr, char* str, int from);
void* QStringRef_NewQStringRef();
void* QStringRef_NewQStringRef5(void* other);
void* QStringRef_NewQStringRef3(char* stri);
void* QStringRef_NewQStringRef2(char* stri, int position, int length);
void* QStringRef_NewQStringRef4(void* other);
int QStringRef_QStringRef_Compare7(void* s1, void* s2, long long cs);
int QStringRef_QStringRef_Compare(void* s1, char* s2, long long cs);
int QStringRef_QStringRef_Compare6(void* s1, void* s2, long long cs);
int QStringRef_QStringRef_LocaleAwareCompare(void* s1, char* s2);
int QStringRef_QStringRef_LocaleAwareCompare4(void* s1, void* s2);
void QStringRef_Chop(void* ptr, int n);
void QStringRef_Clear(void* ptr);
void QStringRef_Truncate(void* ptr, int position);
void QStringRef_DestroyQStringRef(void* ptr);
void* QStringRef_ToLatin1(void* ptr);
void* QStringRef_ToLocal8Bit(void* ptr);
void* QStringRef_ToUtf8(void* ptr);
struct QtCore_PackedString QStringRef_ToString(void* ptr);
void* QStringRef_AppendTo(void* ptr, char* stri);
void* QStringRef_Left(void* ptr, int n);
void* QStringRef_Mid(void* ptr, int position, int n);
void* QStringRef_Right(void* ptr, int n);
void* QStringRef_Trimmed(void* ptr);
struct QtCore_PackedList QStringRef_Split2(void* ptr, void* sep, long long behavior, long long cs);
struct QtCore_PackedList QStringRef_Split(void* ptr, char* sep, long long behavior, long long cs);
struct QtCore_PackedList QStringRef_ToUcs4(void* ptr);
char QStringRef_Contains2(void* ptr, void* ch, long long cs);
char QStringRef_Contains3(void* ptr, void* str, long long cs);
char QStringRef_Contains(void* ptr, char* str, long long cs);
char QStringRef_Contains4(void* ptr, void* str, long long cs);
char QStringRef_EndsWith3(void* ptr, void* ch, long long cs);
char QStringRef_EndsWith2(void* ptr, void* str, long long cs);
char QStringRef_EndsWith(void* ptr, char* str, long long cs);
char QStringRef_EndsWith4(void* ptr, void* str, long long cs);
char QStringRef_IsEmpty(void* ptr);
char QStringRef_IsNull(void* ptr);
char QStringRef_StartsWith3(void* ptr, void* ch, long long cs);
char QStringRef_StartsWith2(void* ptr, void* str, long long cs);
char QStringRef_StartsWith(void* ptr, char* str, long long cs);
char QStringRef_StartsWith4(void* ptr, void* str, long long cs);
void* QStringRef_ConstData(void* ptr);
void* QStringRef_Data(void* ptr);
void* QStringRef_Unicode(void* ptr);
void* QStringRef_At(void* ptr, int position);
struct QtCore_PackedString QStringRef_String(void* ptr);
double QStringRef_ToDouble(void* ptr, char ok);
float QStringRef_ToFloat(void* ptr, char ok);
int QStringRef_Compare3(void* ptr, void* other, long long cs);
int QStringRef_Compare4(void* ptr, void* other, long long cs);
int QStringRef_Compare5(void* ptr, char* other, long long cs);
int QStringRef_Compare2(void* ptr, void* other, long long cs);
int QStringRef_Count(void* ptr);
int QStringRef_Count3(void* ptr, void* ch, long long cs);
int QStringRef_Count2(void* ptr, char* str, long long cs);
int QStringRef_Count4(void* ptr, void* str, long long cs);
int QStringRef_IndexOf2(void* ptr, void* ch, int from, long long cs);
int QStringRef_IndexOf3(void* ptr, void* str, int from, long long cs);
int QStringRef_IndexOf(void* ptr, char* str, int from, long long cs);
int QStringRef_IndexOf4(void* ptr, void* str, int from, long long cs);
int QStringRef_LastIndexOf2(void* ptr, void* ch, int from, long long cs);
int QStringRef_LastIndexOf3(void* ptr, void* str, int from, long long cs);
int QStringRef_LastIndexOf(void* ptr, char* str, int from, long long cs);
int QStringRef_LastIndexOf4(void* ptr, void* str, int from, long long cs);
int QStringRef_Length(void* ptr);
int QStringRef_LocaleAwareCompare3(void* ptr, char* other);
int QStringRef_LocaleAwareCompare2(void* ptr, void* other);
int QStringRef_Position(void* ptr);
int QStringRef_Size(void* ptr);
int QStringRef_ToInt(void* ptr, char ok, int base);
long QStringRef_ToLong(void* ptr, char ok, int base);
long long QStringRef_ToLongLong(void* ptr, char ok, int base);
unsigned long long QStringRef_ToULongLong(void* ptr, char ok, int base);
short QStringRef_ToShort(void* ptr, char ok, int base);
unsigned int QStringRef_ToUInt(void* ptr, char ok, int base);
unsigned long QStringRef_ToULong(void* ptr, char ok, int base);
unsigned short QStringRef_ToUShort(void* ptr, char ok, int base);
void* QStringRef___split_atList2(void* ptr, int i);
void QStringRef___split_setList2(void* ptr, void* i);
void* QStringRef___split_newList2(void* ptr);
void* QStringRef___split_atList(void* ptr, int i);
void QStringRef___split_setList(void* ptr, void* i);
void* QStringRef___split_newList(void* ptr);
unsigned int QStringRef___toUcs4_atList(void* ptr, int i);
void QStringRef___toUcs4_setList(void* ptr, unsigned int i);
void* QStringRef___toUcs4_newList(void* ptr);
int QSysInfo_MV_9_Type();
int QSysInfo_MV_10_0_Type();
int QSysInfo_MV_10_1_Type();
int QSysInfo_MV_10_2_Type();
int QSysInfo_MV_10_3_Type();
int QSysInfo_MV_10_4_Type();
int QSysInfo_MV_10_5_Type();
int QSysInfo_MV_10_6_Type();
int QSysInfo_MV_10_7_Type();
int QSysInfo_MV_10_8_Type();
int QSysInfo_MV_10_9_Type();
int QSysInfo_MV_10_10_Type();
int QSysInfo_MV_10_11_Type();
int QSysInfo_MV_10_12_Type();
int QSysInfo_MV_IOS_Type();
int QSysInfo_MV_IOS_4_3_Type();
int QSysInfo_MV_IOS_5_0_Type();
int QSysInfo_MV_IOS_5_1_Type();
int QSysInfo_MV_IOS_6_0_Type();
int QSysInfo_MV_IOS_6_1_Type();
int QSysInfo_MV_IOS_7_0_Type();
int QSysInfo_MV_IOS_7_1_Type();
int QSysInfo_MV_IOS_8_0_Type();
int QSysInfo_MV_IOS_8_1_Type();
int QSysInfo_MV_IOS_8_2_Type();
int QSysInfo_MV_IOS_8_3_Type();
int QSysInfo_MV_IOS_8_4_Type();
int QSysInfo_MV_IOS_9_0_Type();
int QSysInfo_MV_IOS_9_1_Type();
int QSysInfo_MV_IOS_9_2_Type();
int QSysInfo_MV_IOS_9_3_Type();
int QSysInfo_MV_IOS_10_0_Type();
int QSysInfo_MV_TVOS_Type();
int QSysInfo_MV_TVOS_9_0_Type();
int QSysInfo_MV_TVOS_9_1_Type();
int QSysInfo_MV_TVOS_9_2_Type();
int QSysInfo_MV_TVOS_10_0_Type();
int QSysInfo_MV_WATCHOS_Type();
int QSysInfo_MV_WATCHOS_2_0_Type();
int QSysInfo_MV_WATCHOS_2_1_Type();
int QSysInfo_MV_WATCHOS_2_2_Type();
int QSysInfo_MV_WATCHOS_3_0_Type();
int QSysInfo_WordSize_Type();
long long QSysInfo_QSysInfo_MacVersion();
struct QtCore_PackedString QSysInfo_QSysInfo_BuildAbi();
struct QtCore_PackedString QSysInfo_QSysInfo_BuildCpuArchitecture();
struct QtCore_PackedString QSysInfo_QSysInfo_CurrentCpuArchitecture();
struct QtCore_PackedString QSysInfo_QSysInfo_KernelType();
struct QtCore_PackedString QSysInfo_QSysInfo_KernelVersion();
struct QtCore_PackedString QSysInfo_QSysInfo_MachineHostName();
struct QtCore_PackedString QSysInfo_QSysInfo_PrettyProductName();
struct QtCore_PackedString QSysInfo_QSysInfo_ProductType();
struct QtCore_PackedString QSysInfo_QSysInfo_ProductVersion();
long long QSysInfo_QSysInfo_WindowsVersion();
long long QSysInfo_QSysInfo_MacintoshVersion();
void* QSystemSemaphore_NewQSystemSemaphore(char* key, int initialValue, long long mode);
char QSystemSemaphore_Acquire(void* ptr);
char QSystemSemaphore_Release(void* ptr, int n);
void QSystemSemaphore_SetKey(void* ptr, char* key, int initialValue, long long mode);
void QSystemSemaphore_DestroyQSystemSemaphore(void* ptr);
struct QtCore_PackedString QSystemSemaphore_ErrorString(void* ptr);
struct QtCore_PackedString QSystemSemaphore_Key(void* ptr);
long long QSystemSemaphore_Error(void* ptr);
void* QTemporaryDir_NewQTemporaryDir();
void* QTemporaryDir_NewQTemporaryDir2(char* templatePath);
char QTemporaryDir_Remove(void* ptr);
void QTemporaryDir_SetAutoRemove(void* ptr, char b);
void QTemporaryDir_DestroyQTemporaryDir(void* ptr);
struct QtCore_PackedString QTemporaryDir_ErrorString(void* ptr);
struct QtCore_PackedString QTemporaryDir_Path(void* ptr);
char QTemporaryDir_AutoRemove(void* ptr);
char QTemporaryDir_IsValid(void* ptr);
void* QTemporaryFile_QTemporaryFile_CreateNativeFile(void* file);
void* QTemporaryFile_QTemporaryFile_CreateNativeFile2(char* fileName);
void* QTemporaryFile_NewQTemporaryFile();
void* QTemporaryFile_NewQTemporaryFile3(void* parent);
void* QTemporaryFile_NewQTemporaryFile2(char* templateName);
void* QTemporaryFile_NewQTemporaryFile4(char* templateName, void* parent);
char QTemporaryFile_Open(void* ptr);
void QTemporaryFile_SetAutoRemove(void* ptr, char b);
void QTemporaryFile_SetFileTemplate(void* ptr, char* name);
void QTemporaryFile_DestroyQTemporaryFile(void* ptr);
struct QtCore_PackedString QTemporaryFile_FileTemplate(void* ptr);
char QTemporaryFile_AutoRemove(void* ptr);
void* QTextBoundaryFinder_NewQTextBoundaryFinder();
void* QTextBoundaryFinder_NewQTextBoundaryFinder3(long long ty, char* stri);
void* QTextBoundaryFinder_NewQTextBoundaryFinder2(void* other);
int QTextBoundaryFinder_ToNextBoundary(void* ptr);
int QTextBoundaryFinder_ToPreviousBoundary(void* ptr);
void QTextBoundaryFinder_SetPosition(void* ptr, int position);
void QTextBoundaryFinder_ToEnd(void* ptr);
void QTextBoundaryFinder_ToStart(void* ptr);
void QTextBoundaryFinder_DestroyQTextBoundaryFinder(void* ptr);
long long QTextBoundaryFinder_BoundaryReasons(void* ptr);
long long QTextBoundaryFinder_Type(void* ptr);
struct QtCore_PackedString QTextBoundaryFinder_String(void* ptr);
char QTextBoundaryFinder_IsAtBoundary(void* ptr);
char QTextBoundaryFinder_IsValid(void* ptr);
int QTextBoundaryFinder_Position(void* ptr);
struct QtCore_PackedList QTextCodec_QTextCodec_AvailableCodecs();
struct QtCore_PackedList QTextCodec_QTextCodec_AvailableMibs();
void* QTextCodec_QTextCodec_CodecForHtml2(void* ba);
void* QTextCodec_QTextCodec_CodecForHtml(void* ba, void* defaultCodec);
void* QTextCodec_QTextCodec_CodecForLocale();
void* QTextCodec_QTextCodec_CodecForMib(int mib);
void* QTextCodec_QTextCodec_CodecForName(void* name);
void* QTextCodec_QTextCodec_CodecForName2(char* name);
void* QTextCodec_QTextCodec_CodecForUtfText2(void* ba);
void* QTextCodec_QTextCodec_CodecForUtfText(void* ba, void* defaultCodec);
void QTextCodec_QTextCodec_SetCodecForLocale(void* c);
void QTextCodec_DestroyQTextCodec(void* ptr);
void QTextCodec_DestroyQTextCodecDefault(void* ptr);
void* QTextCodec_FromUnicode(void* ptr, char* str);
void* QTextCodec_Name(void* ptr);
struct QtCore_PackedList QTextCodec_Aliases(void* ptr);
struct QtCore_PackedList QTextCodec_AliasesDefault(void* ptr);
struct QtCore_PackedString QTextCodec_ToUnicode(void* ptr, void* a);
struct QtCore_PackedString QTextCodec_ToUnicode2(void* ptr, char* chars);
void* QTextCodec_MakeDecoder(void* ptr, long long flags);
void* QTextCodec_MakeEncoder(void* ptr, long long flags);
char QTextCodec_CanEncode(void* ptr, void* ch);
char QTextCodec_CanEncode2(void* ptr, char* s);
int QTextCodec_MibEnum(void* ptr);
void* QTextCodec___availableCodecs_atList(void* ptr, int i);
void QTextCodec___availableCodecs_setList(void* ptr, void* i);
void* QTextCodec___availableCodecs_newList(void* ptr);
int QTextCodec___availableMibs_atList(void* ptr, int i);
void QTextCodec___availableMibs_setList(void* ptr, int i);
void* QTextCodec___availableMibs_newList(void* ptr);
void* QTextCodec___aliases_atList(void* ptr, int i);
void QTextCodec___aliases_setList(void* ptr, void* i);
void* QTextCodec___aliases_newList(void* ptr);
struct QtCore_PackedString QTextDecoder_ToUnicode2(void* ptr, void* ba);
struct QtCore_PackedString QTextDecoder_ToUnicode(void* ptr, char* chars, int len);
void* QTextDecoder_NewQTextDecoder(void* codec);
void* QTextDecoder_NewQTextDecoder2(void* codec, long long flags);
void QTextDecoder_ToUnicode3(void* ptr, char* target, char* chars, int len);
void QTextDecoder_DestroyQTextDecoder(void* ptr);
void* QTextEncoder_FromUnicode2(void* ptr, void* uc, int len);
void* QTextEncoder_FromUnicode(void* ptr, char* str);
void* QTextEncoder_NewQTextEncoder(void* codec);
void* QTextEncoder_NewQTextEncoder2(void* codec, long long flags);
void QTextEncoder_DestroyQTextEncoder(void* ptr);
struct QtCore_PackedString QTextStream_Read(void* ptr, long long maxlen);
struct QtCore_PackedString QTextStream_ReadAll(void* ptr);
struct QtCore_PackedString QTextStream_ReadLine(void* ptr, long long maxlen);
void* QTextStream_NewQTextStream();
void* QTextStream_NewQTextStream5(void* array, long long openMode);
void* QTextStream_NewQTextStream2(void* device);
void* QTextStream_NewQTextStream4(char* stri, long long openMode);
void* QTextStream_NewQTextStream6(void* array, long long openMode);
char QTextStream_ReadLineInto(void* ptr, char* line, long long maxlen);
char QTextStream_Seek(void* ptr, long long pos);
void QTextStream_Flush(void* ptr);
void QTextStream_Reset(void* ptr);
void QTextStream_ResetStatus(void* ptr);
void QTextStream_SetAutoDetectUnicode(void* ptr, char enabled);
void QTextStream_SetCodec(void* ptr, void* codec);
void QTextStream_SetCodec2(void* ptr, char* codecName);
void QTextStream_SetDevice(void* ptr, void* device);
void QTextStream_SetFieldAlignment(void* ptr, long long mode);
void QTextStream_SetFieldWidth(void* ptr, int width);
void QTextStream_SetGenerateByteOrderMark(void* ptr, char generate);
void QTextStream_SetIntegerBase(void* ptr, int base);
void QTextStream_SetLocale(void* ptr, void* locale);
void QTextStream_SetNumberFlags(void* ptr, long long flags);
void QTextStream_SetPadChar(void* ptr, void* ch);
void QTextStream_SetRealNumberNotation(void* ptr, long long notation);
void QTextStream_SetRealNumberPrecision(void* ptr, int precision);
void QTextStream_SetStatus(void* ptr, long long status);
void QTextStream_SetString(void* ptr, char* stri, long long openMode);
void QTextStream_SkipWhiteSpace(void* ptr);
void QTextStream_DestroyQTextStream(void* ptr);
void QTextStream_DestroyQTextStreamDefault(void* ptr);
long long QTextStream_FieldAlignment(void* ptr);
long long QTextStream_NumberFlags(void* ptr);
void* QTextStream_PadChar(void* ptr);
void* QTextStream_Device(void* ptr);
void* QTextStream_Locale(void* ptr);
struct QtCore_PackedString QTextStream_String(void* ptr);
void* QTextStream_Codec(void* ptr);
long long QTextStream_RealNumberNotation(void* ptr);
long long QTextStream_Status(void* ptr);
char QTextStream_AtEnd(void* ptr);
char QTextStream_AutoDetectUnicode(void* ptr);
char QTextStream_GenerateByteOrderMark(void* ptr);
int QTextStream_FieldWidth(void* ptr);
int QTextStream_IntegerBase(void* ptr);
int QTextStream_RealNumberPrecision(void* ptr);
long long QTextStream_Pos(void* ptr);
char QThread_Wait(void* ptr, unsigned long time);
int QThread_QThread_IdealThreadCount();
void QThread_QThread_Msleep(unsigned long msecs);
void QThread_SetPriority(void* ptr, long long priority);
void* QThread_QThread_CurrentThread();
void* QThread_NewQThread(void* parent);
int QThread_Exec(void* ptr);
void QThread_Exit(void* ptr, int returnCode);
void QThread_ConnectFinished(void* ptr);
void QThread_DisconnectFinished(void* ptr);
void QThread_Quit(void* ptr);
void QThread_QuitDefault(void* ptr);
void QThread_RequestInterruption(void* ptr);
void QThread_Run(void* ptr);
void QThread_RunDefault(void* ptr);
void QThread_SetEventDispatcher(void* ptr, void* eventDispatcher);
void QThread_SetStackSize(void* ptr, unsigned int stackSize);
void QThread_QThread_SetTerminationEnabled(char enabled);
void QThread_QThread_Sleep(unsigned long secs);
void QThread_Start(void* ptr);
void QThread_StartDefault(void* ptr);
void QThread_ConnectStarted(void* ptr);
void QThread_DisconnectStarted(void* ptr);
void QThread_Terminate(void* ptr);
void QThread_TerminateDefault(void* ptr);
void QThread_QThread_Usleep(unsigned long usecs);
void QThread_QThread_YieldCurrentThread();
void QThread_DestroyQThread(void* ptr);
long long QThread_Priority(void* ptr);
void* QThread_EventDispatcher(void* ptr);
char QThread_IsFinished(void* ptr);
char QThread_IsInterruptionRequested(void* ptr);
char QThread_IsRunning(void* ptr);
int QThread_LoopLevel(void* ptr);
unsigned int QThread_StackSize(void* ptr);
void* QThreadPool_QThreadPool_GlobalInstance();
void* QThreadPool_NewQThreadPool(void* parent);
char QThreadPool_TryStart(void* ptr, void* runnable);
char QThreadPool_WaitForDone(void* ptr, int msecs);
void QThreadPool_Cancel(void* ptr, void* runnable);
void QThreadPool_Clear(void* ptr);
void QThreadPool_ReleaseThread(void* ptr);
void QThreadPool_ReserveThread(void* ptr);
void QThreadPool_SetExpiryTimeout(void* ptr, int expiryTimeout);
void QThreadPool_SetMaxThreadCount(void* ptr, int maxThreadCount);
void QThreadPool_Start(void* ptr, void* runnable, int priority);
void QThreadPool_DestroyQThreadPool(void* ptr);
int QThreadPool_ActiveThreadCount(void* ptr);
int QThreadPool_ExpiryTimeout(void* ptr);
int QThreadPool_MaxThreadCount(void* ptr);
void* QTime_QTime_CurrentTime();
void* QTime_QTime_FromMSecsSinceStartOfDay(int msecs);
void* QTime_QTime_FromString(char* stri, long long format);
void* QTime_QTime_FromString2(char* stri, char* format);
void* QTime_NewQTime();
void* QTime_NewQTime3(int h, int m, int s, int ms);
char QTime_QTime_IsValid2(int h, int m, int s, int ms);
char QTime_SetHMS(void* ptr, int h, int m, int s, int ms);
int QTime_Restart(void* ptr);
void QTime_Start(void* ptr);
struct QtCore_PackedString QTime_ToString2(void* ptr, long long format);
struct QtCore_PackedString QTime_ToString(void* ptr, char* format);
void* QTime_AddMSecs(void* ptr, int ms);
void* QTime_AddSecs(void* ptr, int s);
char QTime_IsNull(void* ptr);
char QTime_IsValid(void* ptr);
int QTime_Elapsed(void* ptr);
int QTime_Hour(void* ptr);
int QTime_Minute(void* ptr);
int QTime_Msec(void* ptr);
int QTime_MsecsSinceStartOfDay(void* ptr);
int QTime_MsecsTo(void* ptr, void* t);
int QTime_Second(void* ptr);
int QTime_SecsTo(void* ptr, void* t);
void QTimeLine_SetCurrentTime(void* ptr, int msec);
void QTimeLine_SetCurrentTimeDefault(void* ptr, int msec);
void* QTimeLine_NewQTimeLine(int duration, void* parent);
void QTimeLine_ConnectFinished(void* ptr);
void QTimeLine_DisconnectFinished(void* ptr);
void QTimeLine_ConnectFrameChanged(void* ptr);
void QTimeLine_DisconnectFrameChanged(void* ptr);
void QTimeLine_Resume(void* ptr);
void QTimeLine_ResumeDefault(void* ptr);
void QTimeLine_SetCurveShape(void* ptr, long long shape);
void QTimeLine_SetDirection(void* ptr, long long direction);
void QTimeLine_SetDuration(void* ptr, int duration);
void QTimeLine_SetEasingCurve(void* ptr, void* curve);
void QTimeLine_SetEndFrame(void* ptr, int frame);
void QTimeLine_SetFrameRange(void* ptr, int startFrame, int endFrame);
void QTimeLine_SetLoopCount(void* ptr, int count);
void QTimeLine_SetPaused(void* ptr, char paused);
void QTimeLine_SetPausedDefault(void* ptr, char paused);
void QTimeLine_SetStartFrame(void* ptr, int frame);
void QTimeLine_SetUpdateInterval(void* ptr, int interval);
void QTimeLine_Start(void* ptr);
void QTimeLine_StartDefault(void* ptr);
void QTimeLine_ConnectStateChanged(void* ptr);
void QTimeLine_DisconnectStateChanged(void* ptr);
void QTimeLine_Stop(void* ptr);
void QTimeLine_StopDefault(void* ptr);
void QTimeLine_ToggleDirection(void* ptr);
void QTimeLine_ToggleDirectionDefault(void* ptr);
void QTimeLine_ConnectValueChanged(void* ptr);
void QTimeLine_DisconnectValueChanged(void* ptr);
void QTimeLine_DestroyQTimeLine(void* ptr);
void QTimeLine_DestroyQTimeLineDefault(void* ptr);
long long QTimeLine_CurveShape(void* ptr);
long long QTimeLine_Direction(void* ptr);
void* QTimeLine_EasingCurve(void* ptr);
long long QTimeLine_State(void* ptr);
int QTimeLine_CurrentFrame(void* ptr);
int QTimeLine_CurrentTime(void* ptr);
int QTimeLine_Duration(void* ptr);
int QTimeLine_EndFrame(void* ptr);
int QTimeLine_FrameForTime(void* ptr, int msec);
int QTimeLine_LoopCount(void* ptr);
int QTimeLine_StartFrame(void* ptr);
int QTimeLine_UpdateInterval(void* ptr);
double QTimeLine_CurrentValue(void* ptr);
double QTimeLine_ValueForTime(void* ptr, int msec);
double QTimeLine_ValueForTimeDefault(void* ptr, int msec);
void* QTimeZone_QTimeZone_IanaIdToWindowsId(void* ianaId);
void* QTimeZone_QTimeZone_SystemTimeZoneId();
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId(void* windowsId);
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId2(void* windowsId, long long country);
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds();
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds2(long long country);
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds3(int offsetSeconds);
struct QtCore_PackedList QTimeZone_QTimeZone_WindowsIdToIanaIds(void* windowsId);
struct QtCore_PackedList QTimeZone_QTimeZone_WindowsIdToIanaIds2(void* windowsId, long long country);
void* QTimeZone_QTimeZone_SystemTimeZone();
void* QTimeZone_QTimeZone_Utc();
void* QTimeZone_NewQTimeZone();
void* QTimeZone_NewQTimeZone2(void* ianaId);
void* QTimeZone_NewQTimeZone4(void* ianaId, int offsetSeconds, char* name, char* abbreviation, long long country, char* comment);
void* QTimeZone_NewQTimeZone5(void* other);
void* QTimeZone_NewQTimeZone3(int offsetSeconds);
char QTimeZone_QTimeZone_IsTimeZoneIdAvailable(void* ianaId);
void QTimeZone_Swap(void* ptr, void* other);
void QTimeZone_DestroyQTimeZone(void* ptr);
void* QTimeZone_Id(void* ptr);
long long QTimeZone_Country(void* ptr);
struct QtCore_PackedString QTimeZone_Abbreviation(void* ptr, void* atDateTime);
struct QtCore_PackedString QTimeZone_Comment(void* ptr);
struct QtCore_PackedString QTimeZone_DisplayName2(void* ptr, long long timeType, long long nameType, void* locale);
struct QtCore_PackedString QTimeZone_DisplayName(void* ptr, void* atDateTime, long long nameType, void* locale);
char QTimeZone_HasDaylightTime(void* ptr);
char QTimeZone_HasTransitions(void* ptr);
char QTimeZone_IsDaylightTime(void* ptr, void* atDateTime);
char QTimeZone_IsValid(void* ptr);
int QTimeZone_DaylightTimeOffset(void* ptr, void* atDateTime);
int QTimeZone_OffsetFromUtc(void* ptr, void* atDateTime);
int QTimeZone_StandardTimeOffset(void* ptr, void* atDateTime);
void* QTimeZone___availableTimeZoneIds_atList(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList(void* ptr);
void* QTimeZone___availableTimeZoneIds_atList2(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList2(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList2(void* ptr);
void* QTimeZone___availableTimeZoneIds_atList3(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList3(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList3(void* ptr);
void* QTimeZone___windowsIdToIanaIds_atList(void* ptr, int i);
void QTimeZone___windowsIdToIanaIds_setList(void* ptr, void* i);
void* QTimeZone___windowsIdToIanaIds_newList(void* ptr);
void* QTimeZone___windowsIdToIanaIds_atList2(void* ptr, int i);
void QTimeZone___windowsIdToIanaIds_setList2(void* ptr, void* i);
void* QTimeZone___windowsIdToIanaIds_newList2(void* ptr);
void* QTimer_NewQTimer(void* parent);
void QTimer_SetInterval(void* ptr, int msec);
void QTimer_SetSingleShot(void* ptr, char singleShot);
void QTimer_SetTimerType(void* ptr, long long atype);
void QTimer_QTimer_SingleShot2(int msec, long long timerType, void* receiver, char* member);
void QTimer_QTimer_SingleShot(int msec, void* receiver, char* member);
void QTimer_Start2(void* ptr);
void QTimer_Start2Default(void* ptr);
void QTimer_Start(void* ptr, int msec);
void QTimer_StartDefault(void* ptr, int msec);
void QTimer_Stop(void* ptr);
void QTimer_StopDefault(void* ptr);
void QTimer_ConnectTimeout(void* ptr);
void QTimer_DisconnectTimeout(void* ptr);
void QTimer_DestroyQTimer(void* ptr);
long long QTimer_TimerType(void* ptr);
char QTimer_IsActive(void* ptr);
char QTimer_IsSingleShot(void* ptr);
int QTimer_Interval(void* ptr);
int QTimer_RemainingTime(void* ptr);
int QTimer_TimerId(void* ptr);
void* QTimerEvent_NewQTimerEvent(int timerId);
int QTimerEvent_TimerId(void* ptr);
int QTimerEvent_Id(void* ptr);
void QTimerEvent_SetId(void* ptr, int vin);
void* QTranslator_NewQTranslator(void* parent);
char QTranslator_Load2(void* ptr, void* locale, char* filename, char* prefix, char* directory, char* suffix);
char QTranslator_Load(void* ptr, char* filename, char* directory, char* search_delimiters, char* suffix);
char QTranslator_Load3(void* ptr, char* data, int len, char* directory);
void QTranslator_DestroyQTranslator(void* ptr);
struct QtCore_PackedString QTranslator_Translate(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
struct QtCore_PackedString QTranslator_TranslateDefault(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
char QTranslator_IsEmpty(void* ptr);
char QTranslator_IsEmptyDefault(void* ptr);
struct QtCore_PackedList QUrl_QUrl_FromStringList(char* urls, long long mode);
struct QtCore_PackedString QUrl_QUrl_FromPercentEncoding(void* input);
void* QUrl_QUrl_FromEncoded(void* input, long long parsingMode);
void* QUrl_QUrl_ToAce(char* domain);
void* QUrl_QUrl_ToPercentEncoding(char* input, void* exclude, void* include);
struct QtCore_PackedString QUrl_QUrl_FromAce(void* domain);
struct QtCore_PackedString QUrl_QUrl_IdnWhitelist();
struct QtCore_PackedString QUrl_QUrl_ToStringList(void* urls, long long options);
void* QUrl_QUrl_FromLocalFile(char* localFile);
void* QUrl_QUrl_FromUserInput(char* userInput);
void* QUrl_QUrl_FromUserInput2(char* userInput, char* workingDirectory, long long options);
void* QUrl_NewQUrl();
void* QUrl_NewQUrl4(void* other);
void* QUrl_NewQUrl3(char* url, long long parsingMode);
void* QUrl_NewQUrl2(void* other);
void QUrl_Clear(void* ptr);
void QUrl_SetAuthority(void* ptr, char* authority, long long mode);
void QUrl_SetFragment(void* ptr, char* fragment, long long mode);
void QUrl_SetHost(void* ptr, char* host, long long mode);
void QUrl_QUrl_SetIdnWhitelist(char* list);
void QUrl_SetPassword(void* ptr, char* password, long long mode);
void QUrl_SetPath(void* ptr, char* path, long long mode);
void QUrl_SetPort(void* ptr, int port);
void QUrl_SetQuery(void* ptr, char* query, long long mode);
void QUrl_SetQuery2(void* ptr, void* query);
void QUrl_SetScheme(void* ptr, char* scheme);
void QUrl_SetUrl(void* ptr, char* url, long long parsingMode);
void QUrl_SetUserInfo(void* ptr, char* userInfo, long long mode);
void QUrl_SetUserName(void* ptr, char* userName, long long mode);
void QUrl_Swap(void* ptr, void* other);
void QUrl_DestroyQUrl(void* ptr);
void* QUrl_ToEncoded(void* ptr, long long options);
struct QtCore_PackedString QUrl_Authority(void* ptr, long long options);
struct QtCore_PackedString QUrl_ErrorString(void* ptr);
struct QtCore_PackedString QUrl_FileName(void* ptr, long long options);
struct QtCore_PackedString QUrl_Fragment(void* ptr, long long options);
struct QtCore_PackedString QUrl_Host(void* ptr, long long options);
struct QtCore_PackedString QUrl_Password(void* ptr, long long options);
struct QtCore_PackedString QUrl_Path(void* ptr, long long options);
struct QtCore_PackedString QUrl_Query(void* ptr, long long options);
struct QtCore_PackedString QUrl_Scheme(void* ptr);
struct QtCore_PackedString QUrl_ToDisplayString(void* ptr, long long options);
struct QtCore_PackedString QUrl_ToLocalFile(void* ptr);
struct QtCore_PackedString QUrl_ToString(void* ptr, long long options);
struct QtCore_PackedString QUrl_TopLevelDomain(void* ptr, long long options);
struct QtCore_PackedString QUrl_Url(void* ptr, long long options);
struct QtCore_PackedString QUrl_UserInfo(void* ptr, long long options);
struct QtCore_PackedString QUrl_UserName(void* ptr, long long options);
void* QUrl_Adjusted(void* ptr, long long options);
void* QUrl_Resolved(void* ptr, void* relative);
char QUrl_HasFragment(void* ptr);
char QUrl_HasQuery(void* ptr);
char QUrl_IsEmpty(void* ptr);
char QUrl_IsLocalFile(void* ptr);
char QUrl_IsParentOf(void* ptr, void* childUrl);
char QUrl_IsRelative(void* ptr);
char QUrl_IsValid(void* ptr);
char QUrl_Matches(void* ptr, void* url, long long options);
int QUrl_Port(void* ptr, int defaultPort);
void* QUrl___fromStringList_atList(void* ptr, int i);
void QUrl___fromStringList_setList(void* ptr, void* i);
void* QUrl___fromStringList_newList(void* ptr);
void* QUrl___toStringList_urls_atList(void* ptr, int i);
void QUrl___toStringList_urls_setList(void* ptr, void* i);
void* QUrl___toStringList_urls_newList(void* ptr);
void* QUrl___allEncodedQueryItemValues_atList(void* ptr, int i);
void QUrl___allEncodedQueryItemValues_setList(void* ptr, void* i);
void* QUrl___allEncodedQueryItemValues_newList(void* ptr);
void* QUrlQuery_QUrlQuery_DefaultQueryPairDelimiter();
void* QUrlQuery_QUrlQuery_DefaultQueryValueDelimiter();
void* QUrlQuery_NewQUrlQuery();
void* QUrlQuery_NewQUrlQuery3(char* queryString);
void* QUrlQuery_NewQUrlQuery2(void* url);
void* QUrlQuery_NewQUrlQuery4(void* other);
void QUrlQuery_AddQueryItem(void* ptr, char* key, char* value);
void QUrlQuery_Clear(void* ptr);
void QUrlQuery_RemoveAllQueryItems(void* ptr, char* key);
void QUrlQuery_RemoveQueryItem(void* ptr, char* key);
void QUrlQuery_SetQuery(void* ptr, char* queryString);
void QUrlQuery_SetQueryDelimiters(void* ptr, void* valueDelimiter, void* pairDelimiter);
void QUrlQuery_Swap(void* ptr, void* other);
void QUrlQuery_DestroyQUrlQuery(void* ptr);
void* QUrlQuery_QueryPairDelimiter(void* ptr);
void* QUrlQuery_QueryValueDelimiter(void* ptr);
struct QtCore_PackedString QUrlQuery_Query(void* ptr, long long encoding);
struct QtCore_PackedString QUrlQuery_QueryItemValue(void* ptr, char* key, long long encoding);
struct QtCore_PackedString QUrlQuery_ToString(void* ptr, long long encoding);
struct QtCore_PackedString QUrlQuery_AllQueryItemValues(void* ptr, char* key, long long encoding);
char QUrlQuery_HasQueryItem(void* ptr, char* key);
char QUrlQuery_IsEmpty(void* ptr);
void* QUuid_QUuid_CreateUuid();
void* QUuid_QUuid_CreateUuidV3(void* ns, void* baseData);
void* QUuid_QUuid_CreateUuidV5(void* ns, void* baseData);
void* QUuid_QUuid_CreateUuidV32(void* ns, char* baseData);
void* QUuid_QUuid_CreateUuidV52(void* ns, char* baseData);
void* QUuid_QUuid_FromRfc4122(void* bytes);
void* QUuid_NewQUuid();
void* QUuid_NewQUuid5(void* text);
void* QUuid_NewQUuid3(char* text);
void* QUuid_NewQUuid2(unsigned int l, unsigned short w1, unsigned short w2, char* b1, char* b2, char* b3, char* b4, char* b5, char* b6, char* b7, char* b8);
void* QUuid_ToByteArray(void* ptr);
void* QUuid_ToRfc4122(void* ptr);
struct QtCore_PackedString QUuid_ToString(void* ptr);
long long QUuid_Variant(void* ptr);
long long QUuid_Version(void* ptr);
char QUuid_IsNull(void* ptr);
unsigned int QUuid_Data1(void* ptr);
void QUuid_SetData1(void* ptr, unsigned int vui);
unsigned short QUuid_Data2(void* ptr);
void QUuid_SetData2(void* ptr, unsigned short vus);
unsigned short QUuid_Data3(void* ptr);
void QUuid_SetData3(void* ptr, unsigned short vus);
void* QVariant_NewQVariant20(void* c);
void* QVariant_NewQVariant();
void* QVariant_NewQVariant6(void* s);
void* QVariant_NewQVariant18(void* val);
void* QVariant_NewQVariant47(void* other);
void* QVariant_NewQVariant2(long long ty);
void* QVariant_NewQVariant11(char val);
void* QVariant_NewQVariant16(void* val);
void* QVariant_NewQVariant15(void* val);
void* QVariant_NewQVariant21(void* val);
void* QVariant_NewQVariant23(void* val);
void* QVariant_NewQVariant39(void* val);
void* QVariant_NewQVariant26(void* val);
void* QVariant_NewQVariant45(void* val);
void* QVariant_NewQVariant46(void* val);
void* QVariant_NewQVariant44(void* val);
void* QVariant_NewQVariant43(void* val);
void* QVariant_NewQVariant31(void* val);
void* QVariant_NewQVariant32(void* val);
void* QVariant_NewQVariant24(void* val);
void* QVariant_NewQVariant35(void* l);
void* QVariant_NewQVariant25(void* val);
void* QVariant_NewQVariant41(void* val);
void* QVariant_NewQVariant42(void* val);
void* QVariant_NewQVariant29(void* val);
void* QVariant_NewQVariant30(void* val);
void* QVariant_NewQVariant33(void* val);
void* QVariant_NewQVariant34(void* val);
void* QVariant_NewQVariant36(void* regExp);
void* QVariant_NewQVariant37(void* re);
void* QVariant_NewQVariant27(void* val);
void* QVariant_NewQVariant28(void* val);
void* QVariant_NewQVariant17(char* val);
void* QVariant_NewQVariant19(char* val);
void* QVariant_NewQVariant22(void* val);
void* QVariant_NewQVariant38(void* val);
void* QVariant_NewQVariant40(void* val);
void* QVariant_NewQVariant5(void* p);
void* QVariant_NewQVariant14(char* val);
void* QVariant_NewQVariant12(double val);
void* QVariant_NewQVariant13(float val);
void* QVariant_NewQVariant3(int typeId, void* copy);
void* QVariant_NewQVariant7(int val);
void* QVariant_NewQVariant9(long long val);
void* QVariant_NewQVariant10(unsigned long long val);
void* QVariant_NewQVariant8(unsigned int val);
long long QVariant_QVariant_NameToType(char* name);
char QVariant_Convert(void* ptr, int targetTypeId);
struct QtCore_PackedString QVariant_QVariant_TypeToName(int typeId);
void QVariant_Clear(void* ptr);
void QVariant_Swap(void* ptr, void* other);
void QVariant_DestroyQVariant(void* ptr);
void* QVariant_ToBitArray(void* ptr);
void* QVariant_ToByteArray(void* ptr);
void* QVariant_ToChar(void* ptr);
void* QVariant_ToDate(void* ptr);
void* QVariant_ToDateTime(void* ptr);
void* QVariant_ToEasingCurve(void* ptr);
struct QtCore_PackedList QVariant_ToHash(void* ptr);
void* QVariant_ToJsonArray(void* ptr);
void* QVariant_ToJsonDocument(void* ptr);
void* QVariant_ToJsonObject(void* ptr);
void* QVariant_ToJsonValue(void* ptr);
void* QVariant_ToLine(void* ptr);
void* QVariant_ToLineF(void* ptr);
struct QtCore_PackedList QVariant_ToList(void* ptr);
void* QVariant_ToLocale(void* ptr);
struct QtCore_PackedList QVariant_ToMap(void* ptr);
void* QVariant_ToModelIndex(void* ptr);
void* QVariant_ToPersistentModelIndex(void* ptr);
void* QVariant_ToPoint(void* ptr);
void* QVariant_ToPointF(void* ptr);
void* QVariant_ToRect(void* ptr);
void* QVariant_ToRectF(void* ptr);
void* QVariant_ToRegExp(void* ptr);
void* QVariant_ToRegularExpression(void* ptr);
void* QVariant_ToSize(void* ptr);
void* QVariant_ToSizeF(void* ptr);
struct QtCore_PackedString QVariant_ToString(void* ptr);
struct QtCore_PackedString QVariant_ToStringList(void* ptr);
void* QVariant_ToTime(void* ptr);
void* QVariant_ToUrl(void* ptr);
void* QVariant_ToUuid(void* ptr);
long long QVariant_Type(void* ptr);
char QVariant_IsNull(void* ptr);
char QVariant_IsValid(void* ptr);
char QVariant_ToBool(void* ptr);
struct QtCore_PackedString QVariant_TypeName(void* ptr);
double QVariant_ToDouble(void* ptr, char ok);
float QVariant_ToFloat(void* ptr, char ok);
int QVariant_ToInt(void* ptr, char ok);
int QVariant_UserType(void* ptr);
long long QVariant_ToLongLong(void* ptr, char ok);
double QVariant_ToReal(void* ptr, char ok);
unsigned long long QVariant_ToULongLong(void* ptr, char ok);
unsigned int QVariant_ToUInt(void* ptr, char ok);
void* QVariant_ToColor(void* ptr);
void* QVariant_ToFont(void* ptr);
void* QVariant_ToImage(void* ptr);
void* QVariant_ToObject(void* ptr);
void* QVariant___QVariant_val_atList26(void* ptr, char* i);
void QVariant___QVariant_val_setList26(void* ptr, char* key, void* i);
void* QVariant___QVariant_val_newList26(void* ptr);
struct QtCore_PackedList QVariant___QVariant_keyList26(void* ptr);
void* QVariant___QVariant_val_atList24(void* ptr, int i);
void QVariant___QVariant_val_setList24(void* ptr, void* i);
void* QVariant___QVariant_val_newList24(void* ptr);
void* QVariant___QVariant_val_atList25(void* ptr, char* i);
void QVariant___QVariant_val_setList25(void* ptr, char* key, void* i);
void* QVariant___QVariant_val_newList25(void* ptr);
struct QtCore_PackedList QVariant___QVariant_keyList25(void* ptr);
void* QVariant___toHash_atList(void* ptr, char* i);
void QVariant___toHash_setList(void* ptr, char* key, void* i);
void* QVariant___toHash_newList(void* ptr);
struct QtCore_PackedList QVariant___toHash_keyList(void* ptr);
void* QVariant___toList_atList(void* ptr, int i);
void QVariant___toList_setList(void* ptr, void* i);
void* QVariant___toList_newList(void* ptr);
void* QVariant___toMap_atList(void* ptr, char* i);
void QVariant___toMap_setList(void* ptr, char* key, void* i);
void* QVariant___toMap_newList(void* ptr);
struct QtCore_PackedList QVariant___toMap_keyList(void* ptr);
struct QtCore_PackedString QVariant_____QVariant_keyList_atList26(void* ptr, int i);
void QVariant_____QVariant_keyList_setList26(void* ptr, char* i);
void* QVariant_____QVariant_keyList_newList26(void* ptr);
struct QtCore_PackedString QVariant_____QVariant_keyList_atList25(void* ptr, int i);
void QVariant_____QVariant_keyList_setList25(void* ptr, char* i);
void* QVariant_____QVariant_keyList_newList25(void* ptr);
struct QtCore_PackedString QVariant_____toHash_keyList_atList(void* ptr, int i);
void QVariant_____toHash_keyList_setList(void* ptr, char* i);
void* QVariant_____toHash_keyList_newList(void* ptr);
struct QtCore_PackedString QVariant_____toMap_keyList_atList(void* ptr, int i);
void QVariant_____toMap_keyList_setList(void* ptr, char* i);
void* QVariant_____toMap_keyList_newList(void* ptr);
void QVariantAnimation_SetEndValue(void* ptr, void* value);
void QVariantAnimation_SetStartValue(void* ptr, void* value);
void* QVariantAnimation_NewQVariantAnimation(void* parent);
void QVariantAnimation_SetDuration(void* ptr, int msecs);
void QVariantAnimation_SetEasingCurve(void* ptr, void* easing);
void QVariantAnimation_SetKeyValueAt(void* ptr, double step, void* value);
void QVariantAnimation_UpdateCurrentTime(void* ptr, int vin);
void QVariantAnimation_UpdateCurrentTimeDefault(void* ptr, int vin);
void QVariantAnimation_UpdateCurrentValue(void* ptr, void* value);
void QVariantAnimation_UpdateCurrentValueDefault(void* ptr, void* value);
void QVariantAnimation_ConnectValueChanged(void* ptr);
void QVariantAnimation_DisconnectValueChanged(void* ptr);
void QVariantAnimation_ValueChanged(void* ptr, void* value);
void QVariantAnimation_DestroyQVariantAnimation(void* ptr);
void* QVariantAnimation_EasingCurve(void* ptr);
void* QVariantAnimation_CurrentValue(void* ptr);
void* QVariantAnimation_EndValue(void* ptr);
void* QVariantAnimation_Interpolated(void* ptr, void* from, void* to, double progress);
void* QVariantAnimation_InterpolatedDefault(void* ptr, void* from, void* to, double progress);
void* QVariantAnimation_KeyValueAt(void* ptr, double step);
void* QVariantAnimation_StartValue(void* ptr);
int QVariantAnimation_Duration(void* ptr);
int QVariantAnimation_DurationDefault(void* ptr);
void* QVersionNumber_QVersionNumber_CommonPrefix(void* v1, void* v2);
void* QVersionNumber_QVersionNumber_FromString(char* stri, int suffixIndex);
struct QtCore_PackedString QVersionNumber_ToString(void* ptr);
void* QVersionNumber_NewQVersionNumber();
void* QVersionNumber_NewQVersionNumber3(void* seg);
void* QVersionNumber_NewQVersionNumber2(void* seg);
void* QVersionNumber_NewQVersionNumber5(int maj);
void* QVersionNumber_NewQVersionNumber6(int maj, int min);
void* QVersionNumber_NewQVersionNumber7(int maj, int min, int mic);
int QVersionNumber_QVersionNumber_Compare(void* v1, void* v2);
struct QtCore_PackedList QVersionNumber_Segments(void* ptr);
void* QVersionNumber_Normalized(void* ptr);
char QVersionNumber_IsNormalized(void* ptr);
char QVersionNumber_IsNull(void* ptr);
char QVersionNumber_IsPrefixOf(void* ptr, void* other);
int QVersionNumber_MajorVersion(void* ptr);
int QVersionNumber_MicroVersion(void* ptr);
int QVersionNumber_MinorVersion(void* ptr);
int QVersionNumber_SegmentAt(void* ptr, int index);
int QVersionNumber_SegmentCount(void* ptr);
int QVersionNumber___QVersionNumber_seg_atList3(void* ptr, int i);
void QVersionNumber___QVersionNumber_seg_setList3(void* ptr, int i);
void* QVersionNumber___QVersionNumber_seg_newList3(void* ptr);
int QVersionNumber___QVersionNumber_seg_atList2(void* ptr, int i);
void QVersionNumber___QVersionNumber_seg_setList2(void* ptr, int i);
void* QVersionNumber___QVersionNumber_seg_newList2(void* ptr);
int QVersionNumber___segments_atList(void* ptr, int i);
void QVersionNumber___segments_setList(void* ptr, int i);
void* QVersionNumber___segments_newList(void* ptr);
void* QWaitCondition_NewQWaitCondition();
char QWaitCondition_Wait(void* ptr, void* lockedMutex, unsigned long time);
char QWaitCondition_Wait2(void* ptr, void* lockedReadWriteLock, unsigned long time);
void QWaitCondition_Notify_all(void* ptr);
void QWaitCondition_Notify_one(void* ptr);
void QWaitCondition_WakeAll(void* ptr);
void QWaitCondition_WakeOne(void* ptr);
void QWaitCondition_DestroyQWaitCondition(void* ptr);
void* QWriteLocker_NewQWriteLocker(void* lock);
void QWriteLocker_Relock(void* ptr);
void QWriteLocker_Unlock(void* ptr);
void QWriteLocker_DestroyQWriteLocker(void* ptr);
void* QWriteLocker_ReadWriteLock(void* ptr);
void* QXmlStreamAttribute_NewQXmlStreamAttribute();
void* QXmlStreamAttribute_NewQXmlStreamAttribute5(void* other);
void* QXmlStreamAttribute_NewQXmlStreamAttribute3(char* namespaceUri, char* name, char* value);
void* QXmlStreamAttribute_NewQXmlStreamAttribute2(char* qualifiedName, char* value);
void* QXmlStreamAttribute_NewQXmlStreamAttribute4(void* other);
void QXmlStreamAttribute_DestroyQXmlStreamAttribute(void* ptr);
void* QXmlStreamAttribute_Name(void* ptr);
void* QXmlStreamAttribute_NamespaceUri(void* ptr);
void* QXmlStreamAttribute_Prefix(void* ptr);
void* QXmlStreamAttribute_QualifiedName(void* ptr);
void* QXmlStreamAttribute_Value(void* ptr);
char QXmlStreamAttribute_IsDefault(void* ptr);
void* QXmlStreamAttributes_NewQXmlStreamAttributes();
void QXmlStreamAttributes_Append(void* ptr, char* namespaceUri, char* name, char* value);
void QXmlStreamAttributes_Append2(void* ptr, char* qualifiedName, char* value);
void* QXmlStreamAttributes_Value3(void* ptr, void* namespaceUri, void* name);
void* QXmlStreamAttributes_Value5(void* ptr, void* qualifiedName);
void* QXmlStreamAttributes_Value2(void* ptr, char* namespaceUri, void* name);
void* QXmlStreamAttributes_Value(void* ptr, char* namespaceUri, char* name);
void* QXmlStreamAttributes_Value4(void* ptr, char* qualifiedName);
char QXmlStreamAttributes_HasAttribute2(void* ptr, void* qualifiedName);
char QXmlStreamAttributes_HasAttribute3(void* ptr, char* namespaceUri, char* name);
char QXmlStreamAttributes_HasAttribute(void* ptr, char* qualifiedName);
void* QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration();
void* QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration3(void* other);
void* QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration2(void* other);
void QXmlStreamEntityDeclaration_DestroyQXmlStreamEntityDeclaration(void* ptr);
void* QXmlStreamEntityDeclaration_Name(void* ptr);
void* QXmlStreamEntityDeclaration_NotationName(void* ptr);
void* QXmlStreamEntityDeclaration_PublicId(void* ptr);
void* QXmlStreamEntityDeclaration_SystemId(void* ptr);
void* QXmlStreamEntityDeclaration_Value(void* ptr);
struct QtCore_PackedString QXmlStreamEntityResolver_ResolveUndeclaredEntity(void* ptr, char* name);
struct QtCore_PackedString QXmlStreamEntityResolver_ResolveUndeclaredEntityDefault(void* ptr, char* name);
void QXmlStreamEntityResolver_DestroyQXmlStreamEntityResolver(void* ptr);
void QXmlStreamEntityResolver_DestroyQXmlStreamEntityResolverDefault(void* ptr);
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration();
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration3(void* other);
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration4(char* prefix, char* namespaceUri);
void* QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration2(void* other);
void QXmlStreamNamespaceDeclaration_DestroyQXmlStreamNamespaceDeclaration(void* ptr);
void* QXmlStreamNamespaceDeclaration_NamespaceUri(void* ptr);
void* QXmlStreamNamespaceDeclaration_Prefix(void* ptr);
void* QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration();
void* QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration3(void* other);
void* QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration2(void* other);
void QXmlStreamNotationDeclaration_DestroyQXmlStreamNotationDeclaration(void* ptr);
void* QXmlStreamNotationDeclaration_Name(void* ptr);
void* QXmlStreamNotationDeclaration_PublicId(void* ptr);
void* QXmlStreamNotationDeclaration_SystemId(void* ptr);
struct QtCore_PackedString QXmlStreamReader_ReadElementText(void* ptr, long long behaviour);
void* QXmlStreamReader_NewQXmlStreamReader();
void* QXmlStreamReader_NewQXmlStreamReader2(void* device);
void* QXmlStreamReader_NewQXmlStreamReader3(void* data);
void* QXmlStreamReader_NewQXmlStreamReader4(char* data);
void* QXmlStreamReader_NewQXmlStreamReader5(char* data);
long long QXmlStreamReader_ReadNext(void* ptr);
char QXmlStreamReader_ReadNextStartElement(void* ptr);
void QXmlStreamReader_AddData(void* ptr, void* data);
void QXmlStreamReader_AddData2(void* ptr, char* data);
void QXmlStreamReader_AddData3(void* ptr, char* data);
void QXmlStreamReader_AddExtraNamespaceDeclaration(void* ptr, void* extraNamespaceDeclaration);
void QXmlStreamReader_Clear(void* ptr);
void QXmlStreamReader_RaiseError(void* ptr, char* message);
void QXmlStreamReader_SetDevice(void* ptr, void* device);
void QXmlStreamReader_SetEntityResolver(void* ptr, void* resolver);
void QXmlStreamReader_SetNamespaceProcessing(void* ptr, char vbo);
void QXmlStreamReader_SkipCurrentElement(void* ptr);
void QXmlStreamReader_DestroyQXmlStreamReader(void* ptr);
long long QXmlStreamReader_Error(void* ptr);
void* QXmlStreamReader_Device(void* ptr);
struct QtCore_PackedString QXmlStreamReader_ErrorString(void* ptr);
struct QtCore_PackedString QXmlStreamReader_TokenString(void* ptr);
void* QXmlStreamReader_DocumentEncoding(void* ptr);
void* QXmlStreamReader_DocumentVersion(void* ptr);
void* QXmlStreamReader_DtdName(void* ptr);
void* QXmlStreamReader_DtdPublicId(void* ptr);
void* QXmlStreamReader_DtdSystemId(void* ptr);
void* QXmlStreamReader_Name(void* ptr);
void* QXmlStreamReader_NamespaceUri(void* ptr);
void* QXmlStreamReader_Prefix(void* ptr);
void* QXmlStreamReader_ProcessingInstructionData(void* ptr);
void* QXmlStreamReader_ProcessingInstructionTarget(void* ptr);
void* QXmlStreamReader_QualifiedName(void* ptr);
void* QXmlStreamReader_Text(void* ptr);
void* QXmlStreamReader_EntityResolver(void* ptr);
long long QXmlStreamReader_TokenType(void* ptr);
char QXmlStreamReader_AtEnd(void* ptr);
char QXmlStreamReader_HasError(void* ptr);
char QXmlStreamReader_IsCDATA(void* ptr);
char QXmlStreamReader_IsCharacters(void* ptr);
char QXmlStreamReader_IsComment(void* ptr);
char QXmlStreamReader_IsDTD(void* ptr);
char QXmlStreamReader_IsEndDocument(void* ptr);
char QXmlStreamReader_IsEndElement(void* ptr);
char QXmlStreamReader_IsEntityReference(void* ptr);
char QXmlStreamReader_IsProcessingInstruction(void* ptr);
char QXmlStreamReader_IsStandaloneDocument(void* ptr);
char QXmlStreamReader_IsStartDocument(void* ptr);
char QXmlStreamReader_IsStartElement(void* ptr);
char QXmlStreamReader_IsWhitespace(void* ptr);
char QXmlStreamReader_NamespaceProcessing(void* ptr);
long long QXmlStreamReader_CharacterOffset(void* ptr);
long long QXmlStreamReader_ColumnNumber(void* ptr);
long long QXmlStreamReader_LineNumber(void* ptr);
void* QXmlStreamWriter_NewQXmlStreamWriter();
void* QXmlStreamWriter_NewQXmlStreamWriter3(void* array);
void* QXmlStreamWriter_NewQXmlStreamWriter2(void* device);
void* QXmlStreamWriter_NewQXmlStreamWriter4(char* stri);
void QXmlStreamWriter_SetAutoFormatting(void* ptr, char enable);
void QXmlStreamWriter_SetAutoFormattingIndent(void* ptr, int spacesOrTabs);
void QXmlStreamWriter_SetCodec(void* ptr, void* codec);
void QXmlStreamWriter_SetCodec2(void* ptr, char* codecName);
void QXmlStreamWriter_SetDevice(void* ptr, void* device);
void QXmlStreamWriter_WriteAttribute(void* ptr, char* namespaceUri, char* name, char* value);
void QXmlStreamWriter_WriteAttribute2(void* ptr, char* qualifiedName, char* value);
void QXmlStreamWriter_WriteAttribute3(void* ptr, void* attribute);
void QXmlStreamWriter_WriteAttributes(void* ptr, void* attributes);
void QXmlStreamWriter_WriteCDATA(void* ptr, char* text);
void QXmlStreamWriter_WriteCharacters(void* ptr, char* text);
void QXmlStreamWriter_WriteComment(void* ptr, char* text);
void QXmlStreamWriter_WriteCurrentToken(void* ptr, void* reader);
void QXmlStreamWriter_WriteDTD(void* ptr, char* dtd);
void QXmlStreamWriter_WriteDefaultNamespace(void* ptr, char* namespaceUri);
void QXmlStreamWriter_WriteEmptyElement(void* ptr, char* namespaceUri, char* name);
void QXmlStreamWriter_WriteEmptyElement2(void* ptr, char* qualifiedName);
void QXmlStreamWriter_WriteEndDocument(void* ptr);
void QXmlStreamWriter_WriteEndElement(void* ptr);
void QXmlStreamWriter_WriteEntityReference(void* ptr, char* name);
void QXmlStreamWriter_WriteNamespace(void* ptr, char* namespaceUri, char* prefix);
void QXmlStreamWriter_WriteProcessingInstruction(void* ptr, char* target, char* data);
void QXmlStreamWriter_WriteStartDocument2(void* ptr);
void QXmlStreamWriter_WriteStartDocument(void* ptr, char* version);
void QXmlStreamWriter_WriteStartDocument3(void* ptr, char* version, char standalone);
void QXmlStreamWriter_WriteStartElement(void* ptr, char* namespaceUri, char* name);
void QXmlStreamWriter_WriteStartElement2(void* ptr, char* qualifiedName);
void QXmlStreamWriter_WriteTextElement(void* ptr, char* namespaceUri, char* name, char* text);
void QXmlStreamWriter_WriteTextElement2(void* ptr, char* qualifiedName, char* text);
void QXmlStreamWriter_DestroyQXmlStreamWriter(void* ptr);
void* QXmlStreamWriter_Device(void* ptr);
void* QXmlStreamWriter_Codec(void* ptr);
char QXmlStreamWriter_AutoFormatting(void* ptr);
char QXmlStreamWriter_HasError(void* ptr);
int QXmlStreamWriter_AutoFormattingIndent(void* ptr);
int Qt_LocaleDate_Type();
int Qt_SystemLocaleShortDate_Type();
int Qt_SystemLocaleLongDate_Type();
int Qt_DefaultLocaleShortDate_Type();
int Qt_DefaultLocaleLongDate_Type();
int Qt_RFC2822Date_Type();
int Qt_ISODateWithMs_Type();
int Qt_LastGestureType_Type();
struct QtCore_PackedString Qt_Qt_ConvertFromPlainText(char* plain, long long mode);
char Qt_Qt_MightBeRichText(char* text);

#ifdef __cplusplus
}
#endif

#endif