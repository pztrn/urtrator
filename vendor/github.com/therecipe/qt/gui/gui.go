// +build !minimal

package gui

//#include <stdint.h>
//#include <stdlib.h>
//#include <string.h>
//#include "gui.h"
import "C"
import (
	"fmt"
	"github.com/therecipe/qt"
	"github.com/therecipe/qt/core"
	"runtime"
	"strings"
	"unsafe"
)

func cGoUnpackString(s C.struct_QtGui_PackedString) string {
	if len := int(s.len); len == -1 {
		return C.GoString(s.data)
	}
	return C.GoStringN(s.data, C.int(s.len))
}

type QAbstractTextDocumentLayout_PaintContext struct {
	ptr unsafe.Pointer
}

type QAbstractTextDocumentLayout_PaintContext_ITF interface {
	QAbstractTextDocumentLayout_PaintContext_PTR() *QAbstractTextDocumentLayout_PaintContext
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) QAbstractTextDocumentLayout_PaintContext_PTR() *QAbstractTextDocumentLayout_PaintContext {
	return ptr
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAbstractTextDocumentLayout_PaintContext(ptr QAbstractTextDocumentLayout_PaintContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTextDocumentLayout_PaintContext_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTextDocumentLayout_PaintContextFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout_PaintContext {
	var n = new(QAbstractTextDocumentLayout_PaintContext)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) DestroyQAbstractTextDocumentLayout_PaintContext() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQAbstractTextDocumentLayout_PaintContext() *QAbstractTextDocumentLayout_PaintContext {
	var tmpValue = NewQAbstractTextDocumentLayout_PaintContextFromPointer(C.PaintContext_NewPaintContext())
	runtime.SetFinalizer(tmpValue, (*QAbstractTextDocumentLayout_PaintContext).DestroyQAbstractTextDocumentLayout_PaintContext)
	return tmpValue
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) Clip() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.PaintContext_Clip(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetClip(vqr core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetClip(ptr.Pointer(), core.PointerFromQRectF(vqr))
	}
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.PaintContext_CursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetCursorPosition(vin int) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetCursorPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) Palette() *QPalette {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPaletteFromPointer(C.PaintContext_Palette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetPalette(vqp QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetPalette(ptr.Pointer(), PointerFromQPalette(vqp))
	}
}

type QAbstractOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QAbstractOpenGLFunctions_ITF interface {
	QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions
}

func (ptr *QAbstractOpenGLFunctions) QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions {
	return ptr
}

func (ptr *QAbstractOpenGLFunctions) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAbstractOpenGLFunctions) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAbstractOpenGLFunctions(ptr QAbstractOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQAbstractOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QAbstractOpenGLFunctions {
	var n = new(QAbstractOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

type QAbstractTextDocumentLayout struct {
	core.QObject
}

type QAbstractTextDocumentLayout_ITF interface {
	core.QObject_ITF
	QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout
}

func (ptr *QAbstractTextDocumentLayout) QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout {
	return ptr
}

func (ptr *QAbstractTextDocumentLayout) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQAbstractTextDocumentLayout(ptr QAbstractTextDocumentLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTextDocumentLayout_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTextDocumentLayoutFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout {
	var n = new(QAbstractTextDocumentLayout)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAbstractTextDocumentLayout) DestroyQAbstractTextDocumentLayout() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTextDocumentLayout) Format(position int) *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QAbstractTextDocumentLayout_Format(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func NewQAbstractTextDocumentLayout(document QTextDocument_ITF) *QAbstractTextDocumentLayout {
	var tmpValue = NewQAbstractTextDocumentLayoutFromPointer(C.QAbstractTextDocumentLayout_NewQAbstractTextDocumentLayout(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractTextDocumentLayout_DocumentChanged
func callbackQAbstractTextDocumentLayout_DocumentChanged(ptr unsafe.Pointer, position C.int, charsRemoved C.int, charsAdded C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "documentChanged"); signal != nil {
		signal.(func(int, int, int))(int(int32(position)), int(int32(charsRemoved)), int(int32(charsAdded)))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentChanged(f func(position int, charsRemoved int, charsAdded int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "documentChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentChanged", func(position int, charsRemoved int, charsAdded int) {
				signal.(func(int, int, int))(position, charsRemoved, charsAdded)
				f(position, charsRemoved, charsAdded)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentChanged", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentChanged() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "documentChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentChanged(position int, charsRemoved int, charsAdded int) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentChanged(ptr.Pointer(), C.int(int32(position)), C.int(int32(charsRemoved)), C.int(int32(charsAdded)))
	}
}

//export callbackQAbstractTextDocumentLayout_DocumentSizeChanged
func callbackQAbstractTextDocumentLayout_DocumentSizeChanged(ptr unsafe.Pointer, newSize unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "documentSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(newSize))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSizeChanged(f func(newSize *core.QSizeF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "documentSizeChanged") {
			C.QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "documentSizeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentSizeChanged", func(newSize *core.QSizeF) {
				signal.(func(*core.QSizeF))(newSize)
				f(newSize)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentSizeChanged", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSizeChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "documentSizeChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSizeChanged(newSize core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(newSize))
	}
}

//export callbackQAbstractTextDocumentLayout_Draw
func callbackQAbstractTextDocumentLayout_Draw(ptr unsafe.Pointer, painter unsafe.Pointer, context unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "draw"); signal != nil {
		signal.(func(*QPainter, *QAbstractTextDocumentLayout_PaintContext))(NewQPainterFromPointer(painter), NewQAbstractTextDocumentLayout_PaintContextFromPointer(context))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDraw(f func(painter *QPainter, context *QAbstractTextDocumentLayout_PaintContext)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "draw"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "draw", func(painter *QPainter, context *QAbstractTextDocumentLayout_PaintContext) {
				signal.(func(*QPainter, *QAbstractTextDocumentLayout_PaintContext))(painter, context)
				f(painter, context)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "draw", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDraw() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "draw")
	}
}

func (ptr *QAbstractTextDocumentLayout) Draw(painter QPainter_ITF, context QAbstractTextDocumentLayout_PaintContext_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_Draw(ptr.Pointer(), PointerFromQPainter(painter), PointerFromQAbstractTextDocumentLayout_PaintContext(context))
	}
}

//export callbackQAbstractTextDocumentLayout_DrawInlineObject
func callbackQAbstractTextDocumentLayout_DrawInlineObject(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer, object unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawInlineObject"); signal != nil {
		signal.(func(*QPainter, *core.QRectF, *QTextInlineObject, int, *QTextFormat))(NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect), NewQTextInlineObjectFromPointer(object), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DrawInlineObjectDefault(NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect), NewQTextInlineObjectFromPointer(object), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectDrawInlineObject(f func(painter *QPainter, rect *core.QRectF, object *QTextInlineObject, posInDocument int, format *QTextFormat)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawInlineObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawInlineObject", func(painter *QPainter, rect *core.QRectF, object *QTextInlineObject, posInDocument int, format *QTextFormat) {
				signal.(func(*QPainter, *core.QRectF, *QTextInlineObject, int, *QTextFormat))(painter, rect, object, posInDocument, format)
				f(painter, rect, object, posInDocument, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawInlineObject", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDrawInlineObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawInlineObject")
	}
}

func (ptr *QAbstractTextDocumentLayout) DrawInlineObject(painter QPainter_ITF, rect core.QRectF_ITF, object QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DrawInlineObject(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRectF(rect), PointerFromQTextInlineObject(object), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) DrawInlineObjectDefault(painter QPainter_ITF, rect core.QRectF_ITF, object QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DrawInlineObjectDefault(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRectF(rect), PointerFromQTextInlineObject(object), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

//export callbackQAbstractTextDocumentLayout_PageCountChanged
func callbackQAbstractTextDocumentLayout_PageCountChanged(ptr unsafe.Pointer, newPages C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "pageCountChanged"); signal != nil {
		signal.(func(int))(int(int32(newPages)))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCountChanged(f func(newPages int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "pageCountChanged") {
			C.QAbstractTextDocumentLayout_ConnectPageCountChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "pageCountChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pageCountChanged", func(newPages int) {
				signal.(func(int))(newPages)
				f(newPages)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pageCountChanged", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCountChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectPageCountChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "pageCountChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCountChanged(newPages int) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_PageCountChanged(ptr.Pointer(), C.int(int32(newPages)))
	}
}

//export callbackQAbstractTextDocumentLayout_PositionInlineObject
func callbackQAbstractTextDocumentLayout_PositionInlineObject(ptr unsafe.Pointer, item unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "positionInlineObject"); signal != nil {
		signal.(func(*QTextInlineObject, int, *QTextFormat))(NewQTextInlineObjectFromPointer(item), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).PositionInlineObjectDefault(NewQTextInlineObjectFromPointer(item), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectPositionInlineObject(f func(item *QTextInlineObject, posInDocument int, format *QTextFormat)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "positionInlineObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "positionInlineObject", func(item *QTextInlineObject, posInDocument int, format *QTextFormat) {
				signal.(func(*QTextInlineObject, int, *QTextFormat))(item, posInDocument, format)
				f(item, posInDocument, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "positionInlineObject", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPositionInlineObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "positionInlineObject")
	}
}

func (ptr *QAbstractTextDocumentLayout) PositionInlineObject(item QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_PositionInlineObject(ptr.Pointer(), PointerFromQTextInlineObject(item), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) PositionInlineObjectDefault(item QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_PositionInlineObjectDefault(ptr.Pointer(), PointerFromQTextInlineObject(item), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) RegisterHandler(objectType int, component core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_RegisterHandler(ptr.Pointer(), C.int(int32(objectType)), core.PointerFromQObject(component))
	}
}

//export callbackQAbstractTextDocumentLayout_ResizeInlineObject
func callbackQAbstractTextDocumentLayout_ResizeInlineObject(ptr unsafe.Pointer, item unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "resizeInlineObject"); signal != nil {
		signal.(func(*QTextInlineObject, int, *QTextFormat))(NewQTextInlineObjectFromPointer(item), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ResizeInlineObjectDefault(NewQTextInlineObjectFromPointer(item), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectResizeInlineObject(f func(item *QTextInlineObject, posInDocument int, format *QTextFormat)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "resizeInlineObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resizeInlineObject", func(item *QTextInlineObject, posInDocument int, format *QTextFormat) {
				signal.(func(*QTextInlineObject, int, *QTextFormat))(item, posInDocument, format)
				f(item, posInDocument, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resizeInlineObject", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectResizeInlineObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "resizeInlineObject")
	}
}

func (ptr *QAbstractTextDocumentLayout) ResizeInlineObject(item QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ResizeInlineObject(ptr.Pointer(), PointerFromQTextInlineObject(item), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) ResizeInlineObjectDefault(item QTextInlineObject_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ResizeInlineObjectDefault(ptr.Pointer(), PointerFromQTextInlineObject(item), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

func (ptr *QAbstractTextDocumentLayout) SetPaintDevice(device QPaintDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_SetPaintDevice(ptr.Pointer(), PointerFromQPaintDevice(device))
	}
}

func (ptr *QAbstractTextDocumentLayout) UnregisterHandler(objectType int, component core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UnregisterHandler(ptr.Pointer(), C.int(int32(objectType)), core.PointerFromQObject(component))
	}
}

//export callbackQAbstractTextDocumentLayout_Update
func callbackQAbstractTextDocumentLayout_Update(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "update"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdate(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "update") {
			C.QAbstractTextDocumentLayout_ConnectUpdate(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "update"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update", func(rect *core.QRectF) {
				signal.(func(*core.QRectF))(rect)
				f(rect)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdate() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdate(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "update")
	}
}

func (ptr *QAbstractTextDocumentLayout) Update(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_Update(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQAbstractTextDocumentLayout_UpdateBlock
func callbackQAbstractTextDocumentLayout_UpdateBlock(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "updateBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdateBlock(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "updateBlock") {
			C.QAbstractTextDocumentLayout_ConnectUpdateBlock(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "updateBlock"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updateBlock", func(block *QTextBlock) {
				signal.(func(*QTextBlock))(block)
				f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updateBlock", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdateBlock() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdateBlock(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "updateBlock")
	}
}

func (ptr *QAbstractTextDocumentLayout) UpdateBlock(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UpdateBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QAbstractTextDocumentLayout) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QAbstractTextDocumentLayout_PaintDevice(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_BlockBoundingRect
func callbackQAbstractTextDocumentLayout_BlockBoundingRect(ptr unsafe.Pointer, block unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "blockBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextBlock) *core.QRectF)(NewQTextBlockFromPointer(block)))
	}

	return core.PointerFromQRectF(core.NewQRectF())
}

func (ptr *QAbstractTextDocumentLayout) ConnectBlockBoundingRect(f func(block *QTextBlock) *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "blockBoundingRect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockBoundingRect", func(block *QTextBlock) *core.QRectF {
				signal.(func(*QTextBlock) *core.QRectF)(block)
				return f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockBoundingRect", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectBlockBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "blockBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) BlockBoundingRect(block QTextBlock_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_BlockBoundingRect(ptr.Pointer(), PointerFromQTextBlock(block)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_FrameBoundingRect
func callbackQAbstractTextDocumentLayout_FrameBoundingRect(ptr unsafe.Pointer, frame unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "frameBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextFrame) *core.QRectF)(NewQTextFrameFromPointer(frame)))
	}

	return core.PointerFromQRectF(core.NewQRectF())
}

func (ptr *QAbstractTextDocumentLayout) ConnectFrameBoundingRect(f func(frame *QTextFrame) *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "frameBoundingRect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "frameBoundingRect", func(frame *QTextFrame) *core.QRectF {
				signal.(func(*QTextFrame) *core.QRectF)(frame)
				return f(frame)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "frameBoundingRect", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectFrameBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "frameBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) FrameBoundingRect(frame QTextFrame_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_FrameBoundingRect(ptr.Pointer(), PointerFromQTextFrame(frame)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_DocumentSize
func callbackQAbstractTextDocumentLayout_DocumentSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "documentSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func() *core.QSizeF)())
	}

	return core.PointerFromQSizeF(core.NewQSizeF())
}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSize(f func() *core.QSizeF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "documentSize"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentSize", func() *core.QSizeF {
				signal.(func() *core.QSizeF)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentSize", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "documentSize")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QAbstractTextDocumentLayout_DocumentSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) AnchorAt(position core.QPointF_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAbstractTextDocumentLayout_AnchorAt(ptr.Pointer(), core.PointerFromQPointF(position)))
	}
	return ""
}

func (ptr *QAbstractTextDocumentLayout) ImageAt(pos core.QPointF_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAbstractTextDocumentLayout_ImageAt(ptr.Pointer(), core.PointerFromQPointF(pos)))
	}
	return ""
}

func (ptr *QAbstractTextDocumentLayout) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QAbstractTextDocumentLayout_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) FormatAt(pos core.QPointF_ITF) *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QAbstractTextDocumentLayout_FormatAt(ptr.Pointer(), core.PointerFromQPointF(pos)))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) HandlerForObject(objectType int) *QTextObjectInterface {
	if ptr.Pointer() != nil {
		return NewQTextObjectInterfaceFromPointer(C.QAbstractTextDocumentLayout_HandlerForObject(ptr.Pointer(), C.int(int32(objectType))))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_HitTest
func callbackQAbstractTextDocumentLayout_HitTest(ptr unsafe.Pointer, point unsafe.Pointer, accuracy C.longlong) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "hitTest"); signal != nil {
		return C.int(int32(signal.(func(*core.QPointF, core.Qt__HitTestAccuracy) int)(core.NewQPointFFromPointer(point), core.Qt__HitTestAccuracy(accuracy))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTextDocumentLayout) ConnectHitTest(f func(point *core.QPointF, accuracy core.Qt__HitTestAccuracy) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "hitTest"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hitTest", func(point *core.QPointF, accuracy core.Qt__HitTestAccuracy) int {
				signal.(func(*core.QPointF, core.Qt__HitTestAccuracy) int)(point, accuracy)
				return f(point, accuracy)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hitTest", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectHitTest() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "hitTest")
	}
}

func (ptr *QAbstractTextDocumentLayout) HitTest(point core.QPointF_ITF, accuracy core.Qt__HitTestAccuracy) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTextDocumentLayout_HitTest(ptr.Pointer(), core.PointerFromQPointF(point), C.longlong(accuracy))))
	}
	return 0
}

//export callbackQAbstractTextDocumentLayout_PageCount
func callbackQAbstractTextDocumentLayout_PageCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "pageCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "pageCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pageCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pageCount", f)
		}
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "pageCount")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTextDocumentLayout_PageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractTextDocumentLayout) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QAbstractTextDocumentLayout___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QAbstractTextDocumentLayout) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAbstractTextDocumentLayout___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAbstractTextDocumentLayout___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QAbstractTextDocumentLayout___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAbstractTextDocumentLayout___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QAbstractTextDocumentLayout___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAbstractTextDocumentLayout___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAbstractTextDocumentLayout) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAbstractTextDocumentLayout___findChildren_newList(ptr.Pointer()))
}

func (ptr *QAbstractTextDocumentLayout) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAbstractTextDocumentLayout___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAbstractTextDocumentLayout) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAbstractTextDocumentLayout___children_newList(ptr.Pointer()))
}

//export callbackQAbstractTextDocumentLayout_Event
func callbackQAbstractTextDocumentLayout_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAbstractTextDocumentLayout) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_EventFilter
func callbackQAbstractTextDocumentLayout_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAbstractTextDocumentLayout) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_ChildEvent
func callbackQAbstractTextDocumentLayout_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_ConnectNotify
func callbackQAbstractTextDocumentLayout_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_CustomEvent
func callbackQAbstractTextDocumentLayout_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_DeleteLater
func callbackQAbstractTextDocumentLayout_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractTextDocumentLayout) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTextDocumentLayout_Destroyed
func callbackQAbstractTextDocumentLayout_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQAbstractTextDocumentLayout_DisconnectNotify
func callbackQAbstractTextDocumentLayout_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_ObjectNameChanged
func callbackQAbstractTextDocumentLayout_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQAbstractTextDocumentLayout_TimerEvent
func callbackQAbstractTextDocumentLayout_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_MetaObject
func callbackQAbstractTextDocumentLayout_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAbstractTextDocumentLayoutFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractTextDocumentLayout) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractTextDocumentLayout_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessible struct {
	ptr unsafe.Pointer
}

type QAccessible_ITF interface {
	QAccessible_PTR() *QAccessible
}

func (ptr *QAccessible) QAccessible_PTR() *QAccessible {
	return ptr
}

func (ptr *QAccessible) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessible) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessible(ptr QAccessible_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessible_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleFromPointer(ptr unsafe.Pointer) *QAccessible {
	var n = new(QAccessible)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessible) DestroyQAccessible() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QAccessible__Event
//QAccessible::Event
type QAccessible__Event int64

var (
	QAccessible__SoundPlayed                     QAccessible__Event = QAccessible__Event(0x0001)
	QAccessible__Alert                           QAccessible__Event = QAccessible__Event(0x0002)
	QAccessible__ForegroundChanged               QAccessible__Event = QAccessible__Event(0x0003)
	QAccessible__MenuStart                       QAccessible__Event = QAccessible__Event(0x0004)
	QAccessible__MenuEnd                         QAccessible__Event = QAccessible__Event(0x0005)
	QAccessible__PopupMenuStart                  QAccessible__Event = QAccessible__Event(0x0006)
	QAccessible__PopupMenuEnd                    QAccessible__Event = QAccessible__Event(0x0007)
	QAccessible__ContextHelpStart                QAccessible__Event = QAccessible__Event(0x000C)
	QAccessible__ContextHelpEnd                  QAccessible__Event = QAccessible__Event(0x000D)
	QAccessible__DragDropStart                   QAccessible__Event = QAccessible__Event(0x000E)
	QAccessible__DragDropEnd                     QAccessible__Event = QAccessible__Event(0x000F)
	QAccessible__DialogStart                     QAccessible__Event = QAccessible__Event(0x0010)
	QAccessible__DialogEnd                       QAccessible__Event = QAccessible__Event(0x0011)
	QAccessible__ScrollingStart                  QAccessible__Event = QAccessible__Event(0x0012)
	QAccessible__ScrollingEnd                    QAccessible__Event = QAccessible__Event(0x0013)
	QAccessible__MenuCommand                     QAccessible__Event = QAccessible__Event(0x0018)
	QAccessible__ActionChanged                   QAccessible__Event = QAccessible__Event(0x0101)
	QAccessible__ActiveDescendantChanged         QAccessible__Event = QAccessible__Event(0x0102)
	QAccessible__AttributeChanged                QAccessible__Event = QAccessible__Event(0x0103)
	QAccessible__DocumentContentChanged          QAccessible__Event = QAccessible__Event(0x0104)
	QAccessible__DocumentLoadComplete            QAccessible__Event = QAccessible__Event(0x0105)
	QAccessible__DocumentLoadStopped             QAccessible__Event = QAccessible__Event(0x0106)
	QAccessible__DocumentReload                  QAccessible__Event = QAccessible__Event(0x0107)
	QAccessible__HyperlinkEndIndexChanged        QAccessible__Event = QAccessible__Event(0x0108)
	QAccessible__HyperlinkNumberOfAnchorsChanged QAccessible__Event = QAccessible__Event(0x0109)
	QAccessible__HyperlinkSelectedLinkChanged    QAccessible__Event = QAccessible__Event(0x010A)
	QAccessible__HypertextLinkActivated          QAccessible__Event = QAccessible__Event(0x010B)
	QAccessible__HypertextLinkSelected           QAccessible__Event = QAccessible__Event(0x010C)
	QAccessible__HyperlinkStartIndexChanged      QAccessible__Event = QAccessible__Event(0x010D)
	QAccessible__HypertextChanged                QAccessible__Event = QAccessible__Event(0x010E)
	QAccessible__HypertextNLinksChanged          QAccessible__Event = QAccessible__Event(0x010F)
	QAccessible__ObjectAttributeChanged          QAccessible__Event = QAccessible__Event(0x0110)
	QAccessible__PageChanged                     QAccessible__Event = QAccessible__Event(0x0111)
	QAccessible__SectionChanged                  QAccessible__Event = QAccessible__Event(0x0112)
	QAccessible__TableCaptionChanged             QAccessible__Event = QAccessible__Event(0x0113)
	QAccessible__TableColumnDescriptionChanged   QAccessible__Event = QAccessible__Event(0x0114)
	QAccessible__TableColumnHeaderChanged        QAccessible__Event = QAccessible__Event(0x0115)
	QAccessible__TableModelChanged               QAccessible__Event = QAccessible__Event(0x0116)
	QAccessible__TableRowDescriptionChanged      QAccessible__Event = QAccessible__Event(0x0117)
	QAccessible__TableRowHeaderChanged           QAccessible__Event = QAccessible__Event(0x0118)
	QAccessible__TableSummaryChanged             QAccessible__Event = QAccessible__Event(0x0119)
	QAccessible__TextAttributeChanged            QAccessible__Event = QAccessible__Event(0x011A)
	QAccessible__TextCaretMoved                  QAccessible__Event = QAccessible__Event(0x011B)
	QAccessible__TextColumnChanged               QAccessible__Event = QAccessible__Event(0x011D)
	QAccessible__TextInserted                    QAccessible__Event = QAccessible__Event(0x011E)
	QAccessible__TextRemoved                     QAccessible__Event = QAccessible__Event(0x011F)
	QAccessible__TextUpdated                     QAccessible__Event = QAccessible__Event(0x0120)
	QAccessible__TextSelectionChanged            QAccessible__Event = QAccessible__Event(0x0121)
	QAccessible__VisibleDataChanged              QAccessible__Event = QAccessible__Event(0x0122)
	QAccessible__ObjectCreated                   QAccessible__Event = QAccessible__Event(0x8000)
	QAccessible__ObjectDestroyed                 QAccessible__Event = QAccessible__Event(0x8001)
	QAccessible__ObjectShow                      QAccessible__Event = QAccessible__Event(0x8002)
	QAccessible__ObjectHide                      QAccessible__Event = QAccessible__Event(0x8003)
	QAccessible__ObjectReorder                   QAccessible__Event = QAccessible__Event(0x8004)
	QAccessible__Focus                           QAccessible__Event = QAccessible__Event(0x8005)
	QAccessible__Selection                       QAccessible__Event = QAccessible__Event(0x8006)
	QAccessible__SelectionAdd                    QAccessible__Event = QAccessible__Event(0x8007)
	QAccessible__SelectionRemove                 QAccessible__Event = QAccessible__Event(0x8008)
	QAccessible__SelectionWithin                 QAccessible__Event = QAccessible__Event(0x8009)
	QAccessible__StateChanged                    QAccessible__Event = QAccessible__Event(0x800A)
	QAccessible__LocationChanged                 QAccessible__Event = QAccessible__Event(0x800B)
	QAccessible__NameChanged                     QAccessible__Event = QAccessible__Event(0x800C)
	QAccessible__DescriptionChanged              QAccessible__Event = QAccessible__Event(0x800D)
	QAccessible__ValueChanged                    QAccessible__Event = QAccessible__Event(0x800E)
	QAccessible__ParentChanged                   QAccessible__Event = QAccessible__Event(0x800F)
	QAccessible__HelpChanged                     QAccessible__Event = QAccessible__Event(0x80A0)
	QAccessible__DefaultActionChanged            QAccessible__Event = QAccessible__Event(0x80B0)
	QAccessible__AcceleratorChanged              QAccessible__Event = QAccessible__Event(0x80C0)
	QAccessible__InvalidEvent                    QAccessible__Event = QAccessible__Event(C.QAccessible_InvalidEvent_Type())
)

//go:generate stringer -type=QAccessible__InterfaceType
//QAccessible::InterfaceType
type QAccessible__InterfaceType int64

const (
	QAccessible__TextInterface         QAccessible__InterfaceType = QAccessible__InterfaceType(0)
	QAccessible__EditableTextInterface QAccessible__InterfaceType = QAccessible__InterfaceType(1)
	QAccessible__ValueInterface        QAccessible__InterfaceType = QAccessible__InterfaceType(2)
	QAccessible__ActionInterface       QAccessible__InterfaceType = QAccessible__InterfaceType(3)
	QAccessible__ImageInterface        QAccessible__InterfaceType = QAccessible__InterfaceType(4)
	QAccessible__TableInterface        QAccessible__InterfaceType = QAccessible__InterfaceType(5)
	QAccessible__TableCellInterface    QAccessible__InterfaceType = QAccessible__InterfaceType(6)
)

//go:generate stringer -type=QAccessible__RelationFlag
//QAccessible::RelationFlag
type QAccessible__RelationFlag int64

const (
	QAccessible__Label        QAccessible__RelationFlag = QAccessible__RelationFlag(0x00000001)
	QAccessible__Labelled     QAccessible__RelationFlag = QAccessible__RelationFlag(0x00000002)
	QAccessible__Controller   QAccessible__RelationFlag = QAccessible__RelationFlag(0x00000004)
	QAccessible__Controlled   QAccessible__RelationFlag = QAccessible__RelationFlag(0x00000008)
	QAccessible__AllRelations QAccessible__RelationFlag = QAccessible__RelationFlag(0xffffffff)
)

//go:generate stringer -type=QAccessible__Role
//QAccessible::Role
type QAccessible__Role int64

const (
	QAccessible__NoRole               QAccessible__Role = QAccessible__Role(0x00000000)
	QAccessible__TitleBar             QAccessible__Role = QAccessible__Role(0x00000001)
	QAccessible__MenuBar              QAccessible__Role = QAccessible__Role(0x00000002)
	QAccessible__ScrollBar            QAccessible__Role = QAccessible__Role(0x00000003)
	QAccessible__Grip                 QAccessible__Role = QAccessible__Role(0x00000004)
	QAccessible__Sound                QAccessible__Role = QAccessible__Role(0x00000005)
	QAccessible__Cursor               QAccessible__Role = QAccessible__Role(0x00000006)
	QAccessible__Caret                QAccessible__Role = QAccessible__Role(0x00000007)
	QAccessible__AlertMessage         QAccessible__Role = QAccessible__Role(0x00000008)
	QAccessible__Window               QAccessible__Role = QAccessible__Role(0x00000009)
	QAccessible__Client               QAccessible__Role = QAccessible__Role(0x0000000A)
	QAccessible__PopupMenu            QAccessible__Role = QAccessible__Role(0x0000000B)
	QAccessible__MenuItem             QAccessible__Role = QAccessible__Role(0x0000000C)
	QAccessible__ToolTip              QAccessible__Role = QAccessible__Role(0x0000000D)
	QAccessible__Application          QAccessible__Role = QAccessible__Role(0x0000000E)
	QAccessible__Document             QAccessible__Role = QAccessible__Role(0x0000000F)
	QAccessible__Pane                 QAccessible__Role = QAccessible__Role(0x00000010)
	QAccessible__Chart                QAccessible__Role = QAccessible__Role(0x00000011)
	QAccessible__Dialog               QAccessible__Role = QAccessible__Role(0x00000012)
	QAccessible__Border               QAccessible__Role = QAccessible__Role(0x00000013)
	QAccessible__Grouping             QAccessible__Role = QAccessible__Role(0x00000014)
	QAccessible__Separator            QAccessible__Role = QAccessible__Role(0x00000015)
	QAccessible__ToolBar              QAccessible__Role = QAccessible__Role(0x00000016)
	QAccessible__StatusBar            QAccessible__Role = QAccessible__Role(0x00000017)
	QAccessible__Table                QAccessible__Role = QAccessible__Role(0x00000018)
	QAccessible__ColumnHeader         QAccessible__Role = QAccessible__Role(0x00000019)
	QAccessible__RowHeader            QAccessible__Role = QAccessible__Role(0x0000001A)
	QAccessible__Column               QAccessible__Role = QAccessible__Role(0x0000001B)
	QAccessible__Row                  QAccessible__Role = QAccessible__Role(0x0000001C)
	QAccessible__Cell                 QAccessible__Role = QAccessible__Role(0x0000001D)
	QAccessible__Link                 QAccessible__Role = QAccessible__Role(0x0000001E)
	QAccessible__HelpBalloon          QAccessible__Role = QAccessible__Role(0x0000001F)
	QAccessible__Assistant            QAccessible__Role = QAccessible__Role(0x00000020)
	QAccessible__List                 QAccessible__Role = QAccessible__Role(0x00000021)
	QAccessible__ListItem             QAccessible__Role = QAccessible__Role(0x00000022)
	QAccessible__Tree                 QAccessible__Role = QAccessible__Role(0x00000023)
	QAccessible__TreeItem             QAccessible__Role = QAccessible__Role(0x00000024)
	QAccessible__PageTab              QAccessible__Role = QAccessible__Role(0x00000025)
	QAccessible__PropertyPage         QAccessible__Role = QAccessible__Role(0x00000026)
	QAccessible__Indicator            QAccessible__Role = QAccessible__Role(0x00000027)
	QAccessible__Graphic              QAccessible__Role = QAccessible__Role(0x00000028)
	QAccessible__StaticText           QAccessible__Role = QAccessible__Role(0x00000029)
	QAccessible__EditableText         QAccessible__Role = QAccessible__Role(0x0000002A)
	QAccessible__Button               QAccessible__Role = QAccessible__Role(0x0000002B)
	QAccessible__CheckBox             QAccessible__Role = QAccessible__Role(0x0000002C)
	QAccessible__RadioButton          QAccessible__Role = QAccessible__Role(0x0000002D)
	QAccessible__ComboBox             QAccessible__Role = QAccessible__Role(0x0000002E)
	QAccessible__ProgressBar          QAccessible__Role = QAccessible__Role(0x00000030)
	QAccessible__Dial                 QAccessible__Role = QAccessible__Role(0x00000031)
	QAccessible__HotkeyField          QAccessible__Role = QAccessible__Role(0x00000032)
	QAccessible__Slider               QAccessible__Role = QAccessible__Role(0x00000033)
	QAccessible__SpinBox              QAccessible__Role = QAccessible__Role(0x00000034)
	QAccessible__Canvas               QAccessible__Role = QAccessible__Role(0x00000035)
	QAccessible__Animation            QAccessible__Role = QAccessible__Role(0x00000036)
	QAccessible__Equation             QAccessible__Role = QAccessible__Role(0x00000037)
	QAccessible__ButtonDropDown       QAccessible__Role = QAccessible__Role(0x00000038)
	QAccessible__ButtonMenu           QAccessible__Role = QAccessible__Role(0x00000039)
	QAccessible__ButtonDropGrid       QAccessible__Role = QAccessible__Role(0x0000003A)
	QAccessible__Whitespace           QAccessible__Role = QAccessible__Role(0x0000003B)
	QAccessible__PageTabList          QAccessible__Role = QAccessible__Role(0x0000003C)
	QAccessible__Clock                QAccessible__Role = QAccessible__Role(0x0000003D)
	QAccessible__Splitter             QAccessible__Role = QAccessible__Role(0x0000003E)
	QAccessible__LayeredPane          QAccessible__Role = QAccessible__Role(0x00000080)
	QAccessible__Terminal             QAccessible__Role = QAccessible__Role(0x00000081)
	QAccessible__Desktop              QAccessible__Role = QAccessible__Role(0x00000082)
	QAccessible__Paragraph            QAccessible__Role = QAccessible__Role(0x00000083)
	QAccessible__WebDocument          QAccessible__Role = QAccessible__Role(0x00000084)
	QAccessible__Section              QAccessible__Role = QAccessible__Role(0x00000085)
	QAccessible__ColorChooser         QAccessible__Role = QAccessible__Role(0x404)
	QAccessible__Footer               QAccessible__Role = QAccessible__Role(0x40E)
	QAccessible__Form                 QAccessible__Role = QAccessible__Role(0x410)
	QAccessible__Heading              QAccessible__Role = QAccessible__Role(0x414)
	QAccessible__Note                 QAccessible__Role = QAccessible__Role(0x41B)
	QAccessible__ComplementaryContent QAccessible__Role = QAccessible__Role(0x42C)
	QAccessible__UserRole             QAccessible__Role = QAccessible__Role(0x0000ffff)
)

//go:generate stringer -type=QAccessible__Text
//QAccessible::Text
type QAccessible__Text int64

const (
	QAccessible__Name             QAccessible__Text = QAccessible__Text(0)
	QAccessible__Description      QAccessible__Text = QAccessible__Text(1)
	QAccessible__Value            QAccessible__Text = QAccessible__Text(2)
	QAccessible__Help             QAccessible__Text = QAccessible__Text(3)
	QAccessible__Accelerator      QAccessible__Text = QAccessible__Text(4)
	QAccessible__DebugDescription QAccessible__Text = QAccessible__Text(5)
	QAccessible__UserText         QAccessible__Text = QAccessible__Text(0x0000ffff)
)

//go:generate stringer -type=QAccessible__TextBoundaryType
//QAccessible::TextBoundaryType
type QAccessible__TextBoundaryType int64

const (
	QAccessible__CharBoundary      QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(0)
	QAccessible__WordBoundary      QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(1)
	QAccessible__SentenceBoundary  QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(2)
	QAccessible__ParagraphBoundary QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(3)
	QAccessible__LineBoundary      QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(4)
	QAccessible__NoBoundary        QAccessible__TextBoundaryType = QAccessible__TextBoundaryType(5)
)

func QAccessible_QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func (ptr *QAccessible) QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func QAccessible_IsActive() bool {
	return C.QAccessible_QAccessible_IsActive() != 0
}

func (ptr *QAccessible) IsActive() bool {
	return C.QAccessible_QAccessible_IsActive() != 0
}

func QAccessible_SetRootObject(object core.QObject_ITF) {
	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func (ptr *QAccessible) SetRootObject(object core.QObject_ITF) {
	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func QAccessible_UpdateAccessibility(event QAccessibleEvent_ITF) {
	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

func (ptr *QAccessible) UpdateAccessibility(event QAccessibleEvent_ITF) {
	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

type QAccessibleActionInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleActionInterface_ITF interface {
	QAccessibleActionInterface_PTR() *QAccessibleActionInterface
}

func (ptr *QAccessibleActionInterface) QAccessibleActionInterface_PTR() *QAccessibleActionInterface {
	return ptr
}

func (ptr *QAccessibleActionInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleActionInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleActionInterface(ptr QAccessibleActionInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleActionInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleActionInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleActionInterface {
	var n = new(QAccessibleActionInterface)
	n.SetPointer(ptr)
	return n
}
func QAccessibleActionInterface_NextPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func (ptr *QAccessibleActionInterface) NextPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func QAccessibleActionInterface_PreviousPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func (ptr *QAccessibleActionInterface) PreviousPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func QAccessibleActionInterface_ScrollDownAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func (ptr *QAccessibleActionInterface) ScrollDownAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func QAccessibleActionInterface_ScrollLeftAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func (ptr *QAccessibleActionInterface) ScrollLeftAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func QAccessibleActionInterface_ScrollRightAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func (ptr *QAccessibleActionInterface) ScrollRightAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func QAccessibleActionInterface_ScrollUpAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func (ptr *QAccessibleActionInterface) ScrollUpAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func QAccessibleActionInterface_DecreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

func (ptr *QAccessibleActionInterface) DecreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

func QAccessibleActionInterface_IncreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

func (ptr *QAccessibleActionInterface) IncreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

func QAccessibleActionInterface_PressAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func (ptr *QAccessibleActionInterface) PressAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func QAccessibleActionInterface_SetFocusAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func (ptr *QAccessibleActionInterface) SetFocusAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func QAccessibleActionInterface_ShowMenuAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func (ptr *QAccessibleActionInterface) ShowMenuAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func QAccessibleActionInterface_ToggleAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

func (ptr *QAccessibleActionInterface) ToggleAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

//export callbackQAccessibleActionInterface_DoAction
func callbackQAccessibleActionInterface_DoAction(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "doAction"); signal != nil {
		signal.(func(string))(cGoUnpackString(actionName))
	}

}

func (ptr *QAccessibleActionInterface) ConnectDoAction(f func(actionName string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "doAction"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "doAction", func(actionName string) {
				signal.(func(string))(actionName)
				f(actionName)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "doAction", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectDoAction() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "doAction")
	}
}

func (ptr *QAccessibleActionInterface) DoAction(actionName string) {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		C.QAccessibleActionInterface_DoAction(ptr.Pointer(), actionNameC)
	}
}

//export callbackQAccessibleActionInterface_DestroyQAccessibleActionInterface
func callbackQAccessibleActionInterface_DestroyQAccessibleActionInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleActionInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleActionInterfaceFromPointer(ptr).DestroyQAccessibleActionInterfaceDefault()
	}
}

func (ptr *QAccessibleActionInterface) ConnectDestroyQAccessibleActionInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleActionInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleActionInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleActionInterface", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectDestroyQAccessibleActionInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleActionInterface")
	}
}

func (ptr *QAccessibleActionInterface) DestroyQAccessibleActionInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DestroyQAccessibleActionInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleActionInterface) DestroyQAccessibleActionInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DestroyQAccessibleActionInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleActionInterface_LocalizedActionDescription
func callbackQAccessibleActionInterface_LocalizedActionDescription(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "localizedActionDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(cGoUnpackString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionDescriptionDefault(cGoUnpackString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionDescription(f func(actionName string) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "localizedActionDescription"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionDescription", func(actionName string) string {
				signal.(func(string) string)(actionName)
				return f(actionName)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionDescription", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionDescription() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionDescription")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescription(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionDescription(ptr.Pointer(), actionNameC))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescriptionDefault(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionDescriptionDefault(ptr.Pointer(), actionNameC))
	}
	return ""
}

//export callbackQAccessibleActionInterface_LocalizedActionName
func callbackQAccessibleActionInterface_LocalizedActionName(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "localizedActionName"); signal != nil {
		return C.CString(signal.(func(string) string)(cGoUnpackString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionNameDefault(cGoUnpackString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionName(f func(actionName string) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "localizedActionName"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionName", func(actionName string) string {
				signal.(func(string) string)(actionName)
				return f(actionName)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionName", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "localizedActionName")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionName(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionName(ptr.Pointer(), actionNameC))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionNameDefault(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionNameDefault(ptr.Pointer(), actionNameC))
	}
	return ""
}

//export callbackQAccessibleActionInterface_ActionNames
func callbackQAccessibleActionInterface_ActionNames(ptr unsafe.Pointer) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "actionNames"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectActionNames(f func() []string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "actionNames"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actionNames", func() []string {
				signal.(func() []string)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actionNames", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectActionNames() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "actionNames")
	}
}

func (ptr *QAccessibleActionInterface) ActionNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAccessibleActionInterface_ActionNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAccessibleActionInterface_KeyBindingsForAction
func callbackQAccessibleActionInterface_KeyBindingsForAction(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "keyBindingsForAction"); signal != nil {
		return C.CString(strings.Join(signal.(func(string) []string)(cGoUnpackString(actionName)), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectKeyBindingsForAction(f func(actionName string) []string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "keyBindingsForAction"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyBindingsForAction", func(actionName string) []string {
				signal.(func(string) []string)(actionName)
				return f(actionName)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyBindingsForAction", f)
		}
	}
}

func (ptr *QAccessibleActionInterface) DisconnectKeyBindingsForAction() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "keyBindingsForAction")
	}
}

func (ptr *QAccessibleActionInterface) KeyBindingsForAction(actionName string) []string {
	if ptr.Pointer() != nil {
		var actionNameC *C.char
		if actionName != "" {
			actionNameC = C.CString(actionName)
			defer C.free(unsafe.Pointer(actionNameC))
		}
		return strings.Split(cGoUnpackString(C.QAccessibleActionInterface_KeyBindingsForAction(ptr.Pointer(), actionNameC)), "|")
	}
	return make([]string, 0)
}

type QAccessibleEditableTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleEditableTextInterface_ITF interface {
	QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface
}

func (ptr *QAccessibleEditableTextInterface) QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface {
	return ptr
}

func (ptr *QAccessibleEditableTextInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleEditableTextInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleEditableTextInterface(ptr QAccessibleEditableTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEditableTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEditableTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleEditableTextInterface {
	var n = new(QAccessibleEditableTextInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleEditableTextInterface_DeleteText
func callbackQAccessibleEditableTextInterface_DeleteText(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteText"); signal != nil {
		signal.(func(int, int))(int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectDeleteText(f func(startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "deleteText"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "deleteText", func(startOffset int, endOffset int) {
				signal.(func(int, int))(startOffset, endOffset)
				f(startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "deleteText", f)
		}
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectDeleteText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "deleteText")
	}
}

func (ptr *QAccessibleEditableTextInterface) DeleteText(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DeleteText(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleEditableTextInterface_InsertText
func callbackQAccessibleEditableTextInterface_InsertText(ptr unsafe.Pointer, offset C.int, text C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "insertText"); signal != nil {
		signal.(func(int, string))(int(int32(offset)), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectInsertText(f func(offset int, text string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "insertText"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "insertText", func(offset int, text string) {
				signal.(func(int, string))(offset, text)
				f(offset, text)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "insertText", f)
		}
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectInsertText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "insertText")
	}
}

func (ptr *QAccessibleEditableTextInterface) InsertText(offset int, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAccessibleEditableTextInterface_InsertText(ptr.Pointer(), C.int(int32(offset)), textC)
	}
}

//export callbackQAccessibleEditableTextInterface_ReplaceText
func callbackQAccessibleEditableTextInterface_ReplaceText(ptr unsafe.Pointer, startOffset C.int, endOffset C.int, text C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "replaceText"); signal != nil {
		signal.(func(int, int, string))(int(int32(startOffset)), int(int32(endOffset)), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectReplaceText(f func(startOffset int, endOffset int, text string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "replaceText"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "replaceText", func(startOffset int, endOffset int, text string) {
				signal.(func(int, int, string))(startOffset, endOffset, text)
				f(startOffset, endOffset, text)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "replaceText", f)
		}
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectReplaceText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "replaceText")
	}
}

func (ptr *QAccessibleEditableTextInterface) ReplaceText(startOffset int, endOffset int, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAccessibleEditableTextInterface_ReplaceText(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)), textC)
	}
}

//export callbackQAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface
func callbackQAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleEditableTextInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleEditableTextInterfaceFromPointer(ptr).DestroyQAccessibleEditableTextInterfaceDefault()
	}
}

func (ptr *QAccessibleEditableTextInterface) ConnectDestroyQAccessibleEditableTextInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEditableTextInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEditableTextInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEditableTextInterface", f)
		}
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectDestroyQAccessibleEditableTextInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEditableTextInterface")
	}
}

func (ptr *QAccessibleEditableTextInterface) DestroyQAccessibleEditableTextInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEditableTextInterface) DestroyQAccessibleEditableTextInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleEvent struct {
	ptr unsafe.Pointer
}

type QAccessibleEvent_ITF interface {
	QAccessibleEvent_PTR() *QAccessibleEvent
}

func (ptr *QAccessibleEvent) QAccessibleEvent_PTR() *QAccessibleEvent {
	return ptr
}

func (ptr *QAccessibleEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleEvent(ptr QAccessibleEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEventFromPointer(ptr unsafe.Pointer) *QAccessibleEvent {
	var n = new(QAccessibleEvent)
	n.SetPointer(ptr)
	return n
}
func NewQAccessibleEvent2(interfa QAccessibleInterface_ITF, ty QAccessible__Event) *QAccessibleEvent {
	return NewQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent2(PointerFromQAccessibleInterface(interfa), C.longlong(ty)))
}

func NewQAccessibleEvent(object core.QObject_ITF, ty QAccessible__Event) *QAccessibleEvent {
	return NewQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent(core.PointerFromQObject(object), C.longlong(ty)))
}

func (ptr *QAccessibleEvent) SetChild(child int) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetChild(ptr.Pointer(), C.int(int32(child)))
	}
}

//export callbackQAccessibleEvent_DestroyQAccessibleEvent
func callbackQAccessibleEvent_DestroyQAccessibleEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleEvent"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleEventFromPointer(ptr).DestroyQAccessibleEventDefault()
	}
}

func (ptr *QAccessibleEvent) ConnectDestroyQAccessibleEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEvent", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEvent", f)
		}
	}
}

func (ptr *QAccessibleEvent) DisconnectDestroyQAccessibleEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleEvent")
	}
}

func (ptr *QAccessibleEvent) DestroyQAccessibleEvent() {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_DestroyQAccessibleEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEvent) DestroyQAccessibleEventDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_DestroyQAccessibleEventDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEvent) Type() QAccessible__Event {
	if ptr.Pointer() != nil {
		return QAccessible__Event(C.QAccessibleEvent_Type(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleEvent_AccessibleInterface
func callbackQAccessibleEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "accessibleInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "accessibleInterface", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "accessibleInterface", f)
		}
	}
}

func (ptr *QAccessibleEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "accessibleInterface")
	}
}

func (ptr *QAccessibleEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleEvent_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleEvent) Child() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleEvent_Child(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleEvent) M_object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleEvent_M_object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleEvent) SetM_object(vqo core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetM_object(ptr.Pointer(), core.PointerFromQObject(vqo))
	}
}

func (ptr *QAccessibleEvent) M_type() QAccessible__Event {
	if ptr.Pointer() != nil {
		return QAccessible__Event(C.QAccessibleEvent_M_type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleEvent) SetM_type(vqa QAccessible__Event) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetM_type(ptr.Pointer(), C.longlong(vqa))
	}
}

type QAccessibleInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleInterface_ITF interface {
	QAccessibleInterface_PTR() *QAccessibleInterface
}

func (ptr *QAccessibleInterface) QAccessibleInterface_PTR() *QAccessibleInterface {
	return ptr
}

func (ptr *QAccessibleInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleInterface(ptr QAccessibleInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleInterface {
	var n = new(QAccessibleInterface)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAccessibleInterface) ActionInterface() *QAccessibleActionInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleActionInterfaceFromPointer(C.QAccessibleInterface_ActionInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) TableCellInterface() *QAccessibleTableCellInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTableCellInterfaceFromPointer(C.QAccessibleInterface_TableCellInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) TableInterface() *QAccessibleTableInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTableInterfaceFromPointer(C.QAccessibleInterface_TableInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) TextInterface() *QAccessibleTextInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTextInterfaceFromPointer(C.QAccessibleInterface_TextInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) ValueInterface() *QAccessibleValueInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleValueInterfaceFromPointer(C.QAccessibleInterface_ValueInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Interface_cast
func callbackQAccessibleInterface_Interface_cast(ptr unsafe.Pointer, ty C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "interface_cast"); signal != nil {
		return signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(QAccessible__InterfaceType(ty))
	}

	return NewQAccessibleInterfaceFromPointer(ptr).Interface_castDefault(QAccessible__InterfaceType(ty))
}

func (ptr *QAccessibleInterface) ConnectInterface_cast(f func(ty QAccessible__InterfaceType) unsafe.Pointer) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "interface_cast"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "interface_cast", func(ty QAccessible__InterfaceType) unsafe.Pointer {
				signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(ty)
				return f(ty)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "interface_cast", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectInterface_cast() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "interface_cast")
	}
}

func (ptr *QAccessibleInterface) Interface_cast(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_cast(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

func (ptr *QAccessibleInterface) Interface_castDefault(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_castDefault(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

//export callbackQAccessibleInterface_SetText
func callbackQAccessibleInterface_SetText(ptr unsafe.Pointer, t C.longlong, text C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleInterface) ConnectSetText(f func(t QAccessible__Text, text string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setText"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setText", func(t QAccessible__Text, text string) {
				signal.(func(QAccessible__Text, string))(t, text)
				f(t, text)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setText", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectSetText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setText")
	}
}

func (ptr *QAccessibleInterface) SetText(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAccessibleInterface_SetText(ptr.Pointer(), C.longlong(t), textC)
	}
}

//export callbackQAccessibleInterface_DestroyQAccessibleInterface
func callbackQAccessibleInterface_DestroyQAccessibleInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleInterfaceFromPointer(ptr).DestroyQAccessibleInterfaceDefault()
	}
}

func (ptr *QAccessibleInterface) ConnectDestroyQAccessibleInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleInterface", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectDestroyQAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleInterface")
	}
}

func (ptr *QAccessibleInterface) DestroyQAccessibleInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleInterface_DestroyQAccessibleInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleInterface) DestroyQAccessibleInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleInterface_DestroyQAccessibleInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleInterface_Role
func callbackQAccessibleInterface_Role(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "role"); signal != nil {
		return C.longlong(signal.(func() QAccessible__Role)())
	}

	return C.longlong(0)
}

func (ptr *QAccessibleInterface) ConnectRole(f func() QAccessible__Role) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "role"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "role", func() QAccessible__Role {
				signal.(func() QAccessible__Role)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "role", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectRole() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "role")
	}
}

func (ptr *QAccessibleInterface) Role() QAccessible__Role {
	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleInterface_Role(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleInterface_Child
func callbackQAccessibleInterface_Child(ptr unsafe.Pointer, index C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(int32(index))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChild(f func(index int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "child"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "child", func(index int) *QAccessibleInterface {
				signal.(func(int) *QAccessibleInterface)(index)
				return f(index)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "child", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "child")
	}
}

func (ptr *QAccessibleInterface) Child(index int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Child(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

//export callbackQAccessibleInterface_ChildAt
func callbackQAccessibleInterface_ChildAt(ptr unsafe.Pointer, x C.int, y C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(x)), int(int32(y))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "childAt"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childAt", func(x int, y int) *QAccessibleInterface {
				signal.(func(int, int) *QAccessibleInterface)(x, y)
				return f(x, y)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childAt", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectChildAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "childAt")
	}
}

func (ptr *QAccessibleInterface) ChildAt(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_ChildAt(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

//export callbackQAccessibleInterface_FocusChild
func callbackQAccessibleInterface_FocusChild(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusChild"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleInterfaceFromPointer(ptr).FocusChildDefault())
}

func (ptr *QAccessibleInterface) ConnectFocusChild(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusChild"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusChild", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusChild", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectFocusChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusChild")
	}
}

func (ptr *QAccessibleInterface) FocusChild() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChild(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) FocusChildDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChildDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Parent
func callbackQAccessibleInterface_Parent(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectParent(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "parent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "parent", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "parent", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "parent")
	}
}

func (ptr *QAccessibleInterface) Parent() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Parent(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_BackgroundColor
func callbackQAccessibleInterface_BackgroundColor(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "backgroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).BackgroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectBackgroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "backgroundColor"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "backgroundColor", func() *QColor {
				signal.(func() *QColor)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "backgroundColor", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectBackgroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "backgroundColor")
	}
}

func (ptr *QAccessibleInterface) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) BackgroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_BackgroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_ForegroundColor
func callbackQAccessibleInterface_ForegroundColor(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "foregroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).ForegroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectForegroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "foregroundColor"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "foregroundColor", func() *QColor {
				signal.(func() *QColor)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "foregroundColor", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectForegroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "foregroundColor")
	}
}

func (ptr *QAccessibleInterface) ForegroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_ForegroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) ForegroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_ForegroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Object
func callbackQAccessibleInterface_Object(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(core.NewQObject(nil))
}

func (ptr *QAccessibleInterface) ConnectObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "object"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "object", func() *core.QObject {
				signal.(func() *core.QObject)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "object", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "object")
	}
}

func (ptr *QAccessibleInterface) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleInterface_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Rect
func callbackQAccessibleInterface_Rect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(core.NewQRect())
}

func (ptr *QAccessibleInterface) ConnectRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rect", func() *core.QRect {
				signal.(func() *core.QRect)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rect", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rect")
	}
}

func (ptr *QAccessibleInterface) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleInterface_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Text
func callbackQAccessibleInterface_Text(ptr unsafe.Pointer, t C.longlong) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString("")
}

func (ptr *QAccessibleInterface) ConnectText(f func(t QAccessible__Text) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "text"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "text", func(t QAccessible__Text) string {
				signal.(func(QAccessible__Text) string)(t)
				return f(t)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "text", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "text")
	}
}

func (ptr *QAccessibleInterface) Text(t QAccessible__Text) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleInterface_Text(ptr.Pointer(), C.longlong(t)))
	}
	return ""
}

//export callbackQAccessibleInterface_Window
func callbackQAccessibleInterface_Window(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "window"); signal != nil {
		return PointerFromQWindow(signal.(func() *QWindow)())
	}

	return PointerFromQWindow(NewQAccessibleInterfaceFromPointer(ptr).WindowDefault())
}

func (ptr *QAccessibleInterface) ConnectWindow(f func() *QWindow) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "window"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "window", func() *QWindow {
				signal.(func() *QWindow)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "window", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectWindow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "window")
	}
}

func (ptr *QAccessibleInterface) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleInterface_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) WindowDefault() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleInterface_WindowDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_IsValid
func callbackQAccessibleInterface_IsValid(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "isValid"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleInterface) ConnectIsValid(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "isValid"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isValid", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isValid", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectIsValid() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "isValid")
	}
}

func (ptr *QAccessibleInterface) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleInterface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleInterface_ChildCount
func callbackQAccessibleInterface_ChildCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleInterface) ConnectChildCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "childCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childCount", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectChildCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "childCount")
	}
}

func (ptr *QAccessibleInterface) ChildCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleInterface_ChildCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleInterface_IndexOfChild
func callbackQAccessibleInterface_IndexOfChild(ptr unsafe.Pointer, child unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "indexOfChild"); signal != nil {
		return C.int(int32(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child))))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleInterface) ConnectIndexOfChild(f func(child *QAccessibleInterface) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "indexOfChild"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "indexOfChild", func(child *QAccessibleInterface) int {
				signal.(func(*QAccessibleInterface) int)(child)
				return f(child)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "indexOfChild", f)
		}
	}
}

func (ptr *QAccessibleInterface) DisconnectIndexOfChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "indexOfChild")
	}
}

func (ptr *QAccessibleInterface) IndexOfChild(child QAccessibleInterface_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleInterface_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child))))
	}
	return 0
}

type QAccessibleObject struct {
	QAccessibleInterface
}

type QAccessibleObject_ITF interface {
	QAccessibleInterface_ITF
	QAccessibleObject_PTR() *QAccessibleObject
}

func (ptr *QAccessibleObject) QAccessibleObject_PTR() *QAccessibleObject {
	return ptr
}

func (ptr *QAccessibleObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleInterface_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleObject(ptr QAccessibleObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleObject_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleObjectFromPointer(ptr unsafe.Pointer) *QAccessibleObject {
	var n = new(QAccessibleObject)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleObject_SetText
func callbackQAccessibleObject_SetText(ptr unsafe.Pointer, t C.longlong, text C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), cGoUnpackString(text))
	} else {
		NewQAccessibleObjectFromPointer(ptr).SetTextDefault(QAccessible__Text(t), cGoUnpackString(text))
	}
}

func (ptr *QAccessibleObject) ConnectSetText(f func(t QAccessible__Text, text string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setText"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setText", func(t QAccessible__Text, text string) {
				signal.(func(QAccessible__Text, string))(t, text)
				f(t, text)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setText", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectSetText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setText")
	}
}

func (ptr *QAccessibleObject) SetText(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAccessibleObject_SetText(ptr.Pointer(), C.longlong(t), textC)
	}
}

func (ptr *QAccessibleObject) SetTextDefault(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAccessibleObject_SetTextDefault(ptr.Pointer(), C.longlong(t), textC)
	}
}

//export callbackQAccessibleObject_DestroyQAccessibleObject
func callbackQAccessibleObject_DestroyQAccessibleObject(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleObject"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleObjectFromPointer(ptr).DestroyQAccessibleObjectDefault()
	}
}

func (ptr *QAccessibleObject) ConnectDestroyQAccessibleObject(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleObject", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleObject", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectDestroyQAccessibleObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleObject")
	}
}

func (ptr *QAccessibleObject) DestroyQAccessibleObject() {
	if ptr.Pointer() != nil {
		C.QAccessibleObject_DestroyQAccessibleObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleObject) DestroyQAccessibleObjectDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleObject_DestroyQAccessibleObjectDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleObject_ChildAt
func callbackQAccessibleObject_ChildAt(ptr unsafe.Pointer, x C.int, y C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(x)), int(int32(y))))
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).ChildAtDefault(int(int32(x)), int(int32(y))))
}

func (ptr *QAccessibleObject) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "childAt"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childAt", func(x int, y int) *QAccessibleInterface {
				signal.(func(int, int) *QAccessibleInterface)(x, y)
				return f(x, y)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "childAt", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectChildAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "childAt")
	}
}

func (ptr *QAccessibleObject) ChildAt(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAt(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

func (ptr *QAccessibleObject) ChildAtDefault(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAtDefault(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

//export callbackQAccessibleObject_Object
func callbackQAccessibleObject_Object(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQAccessibleObjectFromPointer(ptr).ObjectDefault())
}

func (ptr *QAccessibleObject) ConnectObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "object"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "object", func() *core.QObject {
				signal.(func() *core.QObject)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "object", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "object")
	}
}

func (ptr *QAccessibleObject) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleObject_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) ObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleObject_ObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_Rect
func callbackQAccessibleObject_Rect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQAccessibleObjectFromPointer(ptr).RectDefault())
}

func (ptr *QAccessibleObject) ConnectRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rect", func() *core.QRect {
				signal.(func() *core.QRect)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rect", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rect")
	}
}

func (ptr *QAccessibleObject) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleObject_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) RectDefault() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleObject_RectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_IsValid
func callbackQAccessibleObject_IsValid(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "isValid"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessibleObjectFromPointer(ptr).IsValidDefault())))
}

func (ptr *QAccessibleObject) ConnectIsValid(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "isValid"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isValid", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isValid", f)
		}
	}
}

func (ptr *QAccessibleObject) DisconnectIsValid() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "isValid")
	}
}

func (ptr *QAccessibleObject) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAccessibleObject) IsValidDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValidDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleObject_Role
func callbackQAccessibleObject_Role(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "role"); signal != nil {
		return C.longlong(signal.(func() QAccessible__Role)())
	}

	return C.longlong(NewQAccessibleObjectFromPointer(ptr).RoleDefault())
}

func (ptr *QAccessibleObject) Role() QAccessible__Role {
	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleObject_Role(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleObject) RoleDefault() QAccessible__Role {
	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleObject_RoleDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleObject_Child
func callbackQAccessibleObject_Child(ptr unsafe.Pointer, index C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(int32(index))))
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).ChildDefault(int(int32(index))))
}

func (ptr *QAccessibleObject) Child(index int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Child(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

func (ptr *QAccessibleObject) ChildDefault(index int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildDefault(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

//export callbackQAccessibleObject_Parent
func callbackQAccessibleObject_Parent(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).ParentDefault())
}

func (ptr *QAccessibleObject) Parent() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Parent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) ParentDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ParentDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_Text
func callbackQAccessibleObject_Text(ptr unsafe.Pointer, t C.longlong) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString(NewQAccessibleObjectFromPointer(ptr).TextDefault(QAccessible__Text(t)))
}

func (ptr *QAccessibleObject) Text(t QAccessible__Text) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleObject_Text(ptr.Pointer(), C.longlong(t)))
	}
	return ""
}

func (ptr *QAccessibleObject) TextDefault(t QAccessible__Text) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleObject_TextDefault(ptr.Pointer(), C.longlong(t)))
	}
	return ""
}

//export callbackQAccessibleObject_ChildCount
func callbackQAccessibleObject_ChildCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQAccessibleObjectFromPointer(ptr).ChildCountDefault()))
}

func (ptr *QAccessibleObject) ChildCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_ChildCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleObject) ChildCountDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_ChildCountDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleObject_IndexOfChild
func callbackQAccessibleObject_IndexOfChild(ptr unsafe.Pointer, child unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "indexOfChild"); signal != nil {
		return C.int(int32(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child))))
	}

	return C.int(int32(NewQAccessibleObjectFromPointer(ptr).IndexOfChildDefault(NewQAccessibleInterfaceFromPointer(child))))
}

func (ptr *QAccessibleObject) IndexOfChild(child QAccessibleInterface_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child))))
	}
	return 0
}

func (ptr *QAccessibleObject) IndexOfChildDefault(child QAccessibleInterface_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_IndexOfChildDefault(ptr.Pointer(), PointerFromQAccessibleInterface(child))))
	}
	return 0
}

type QAccessiblePlugin struct {
	core.QObject
}

type QAccessiblePlugin_ITF interface {
	core.QObject_ITF
	QAccessiblePlugin_PTR() *QAccessiblePlugin
}

func (ptr *QAccessiblePlugin) QAccessiblePlugin_PTR() *QAccessiblePlugin {
	return ptr
}

func (ptr *QAccessiblePlugin) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessiblePlugin) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQAccessiblePlugin(ptr QAccessiblePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessiblePlugin_PTR().Pointer()
	}
	return nil
}

func NewQAccessiblePluginFromPointer(ptr unsafe.Pointer) *QAccessiblePlugin {
	var n = new(QAccessiblePlugin)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessiblePlugin_Create
func callbackQAccessiblePlugin_Create(ptr unsafe.Pointer, key C.struct_QtGui_PackedString, object unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "create"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(string, *core.QObject) *QAccessibleInterface)(cGoUnpackString(key), core.NewQObjectFromPointer(object)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessiblePlugin) ConnectCreate(f func(key string, object *core.QObject) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "create"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", func(key string, object *core.QObject) *QAccessibleInterface {
				signal.(func(string, *core.QObject) *QAccessibleInterface)(key, object)
				return f(key, object)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", f)
		}
	}
}

func (ptr *QAccessiblePlugin) DisconnectCreate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "create")
	}
}

func (ptr *QAccessiblePlugin) Create(key string, object core.QObject_ITF) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		return NewQAccessibleInterfaceFromPointer(C.QAccessiblePlugin_Create(ptr.Pointer(), keyC, core.PointerFromQObject(object)))
	}
	return nil
}

func NewQAccessiblePlugin(parent core.QObject_ITF) *QAccessiblePlugin {
	var tmpValue = NewQAccessiblePluginFromPointer(C.QAccessiblePlugin_NewQAccessiblePlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAccessiblePlugin) DestroyQAccessiblePlugin() {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DestroyQAccessiblePlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessiblePlugin) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QAccessiblePlugin___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessiblePlugin) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QAccessiblePlugin) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessiblePlugin___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QAccessiblePlugin) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessiblePlugin___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessiblePlugin) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAccessiblePlugin) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessiblePlugin___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QAccessiblePlugin) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessiblePlugin___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessiblePlugin) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAccessiblePlugin) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessiblePlugin___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QAccessiblePlugin) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessiblePlugin___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessiblePlugin) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAccessiblePlugin) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessiblePlugin___findChildren_newList(ptr.Pointer()))
}

func (ptr *QAccessiblePlugin) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessiblePlugin___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessiblePlugin) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAccessiblePlugin) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessiblePlugin___children_newList(ptr.Pointer()))
}

//export callbackQAccessiblePlugin_Event
func callbackQAccessiblePlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAccessiblePlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_EventFilter
func callbackQAccessiblePlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAccessiblePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_ChildEvent
func callbackQAccessiblePlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAccessiblePlugin_ConnectNotify
func callbackQAccessiblePlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_CustomEvent
func callbackQAccessiblePlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAccessiblePlugin_DeleteLater
func callbackQAccessiblePlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessiblePluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAccessiblePlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessiblePlugin_Destroyed
func callbackQAccessiblePlugin_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQAccessiblePlugin_DisconnectNotify
func callbackQAccessiblePlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_ObjectNameChanged
func callbackQAccessiblePlugin_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQAccessiblePlugin_TimerEvent
func callbackQAccessiblePlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAccessiblePlugin_MetaObject
func callbackQAccessiblePlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAccessiblePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAccessiblePlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAccessiblePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleStateChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleStateChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent
}

func (ptr *QAccessibleStateChangeEvent) QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent {
	return ptr
}

func (ptr *QAccessibleStateChangeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleStateChangeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleStateChangeEvent(ptr QAccessibleStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleStateChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleStateChangeEvent {
	var n = new(QAccessibleStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleStateChangeEvent) DestroyQAccessibleStateChangeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleTableCellInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableCellInterface_ITF interface {
	QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface
}

func (ptr *QAccessibleTableCellInterface) QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface {
	return ptr
}

func (ptr *QAccessibleTableCellInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleTableCellInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleTableCellInterface(ptr QAccessibleTableCellInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableCellInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableCellInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableCellInterface {
	var n = new(QAccessibleTableCellInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface
func callbackQAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleTableCellInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTableCellInterfaceFromPointer(ptr).DestroyQAccessibleTableCellInterfaceDefault()
	}
}

func (ptr *QAccessibleTableCellInterface) ConnectDestroyQAccessibleTableCellInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableCellInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableCellInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableCellInterface", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectDestroyQAccessibleTableCellInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableCellInterface")
	}
}

func (ptr *QAccessibleTableCellInterface) DestroyQAccessibleTableCellInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableCellInterface) DestroyQAccessibleTableCellInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleTableCellInterface_Table
func callbackQAccessibleTableCellInterface_Table(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "table"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableCellInterface) ConnectTable(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "table"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "table", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "table", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectTable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "table")
	}
}

func (ptr *QAccessibleTableCellInterface) Table() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface_Table(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableCellInterface_ColumnHeaderCells
func callbackQAccessibleTableCellInterface_ColumnHeaderCells(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnHeaderCells"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQAccessibleTableCellInterfaceFromPointer(NewQAccessibleTableCellInterfaceFromPointer(nil).__columnHeaderCells_newList())
			for _, v := range signal.(func() []*QAccessibleInterface)() {
				tmpList.__columnHeaderCells_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQAccessibleTableCellInterfaceFromPointer(NewQAccessibleTableCellInterfaceFromPointer(nil).__columnHeaderCells_newList())
		for _, v := range make([]*QAccessibleInterface, 0) {
			tmpList.__columnHeaderCells_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnHeaderCells(f func() []*QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnHeaderCells"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnHeaderCells", func() []*QAccessibleInterface {
				signal.(func() []*QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnHeaderCells", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnHeaderCells() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnHeaderCells")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnHeaderCells() []*QAccessibleInterface {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QAccessibleInterface {
			var out = make([]*QAccessibleInterface, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAccessibleTableCellInterfaceFromPointer(l.data).__columnHeaderCells_atList(i)
			}
			return out
		}(C.QAccessibleTableCellInterface_ColumnHeaderCells(ptr.Pointer()))
	}
	return make([]*QAccessibleInterface, 0)
}

//export callbackQAccessibleTableCellInterface_RowHeaderCells
func callbackQAccessibleTableCellInterface_RowHeaderCells(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowHeaderCells"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQAccessibleTableCellInterfaceFromPointer(NewQAccessibleTableCellInterfaceFromPointer(nil).__rowHeaderCells_newList())
			for _, v := range signal.(func() []*QAccessibleInterface)() {
				tmpList.__rowHeaderCells_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQAccessibleTableCellInterfaceFromPointer(NewQAccessibleTableCellInterfaceFromPointer(nil).__rowHeaderCells_newList())
		for _, v := range make([]*QAccessibleInterface, 0) {
			tmpList.__rowHeaderCells_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QAccessibleTableCellInterface) ConnectRowHeaderCells(f func() []*QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowHeaderCells"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowHeaderCells", func() []*QAccessibleInterface {
				signal.(func() []*QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowHeaderCells", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowHeaderCells() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowHeaderCells")
	}
}

func (ptr *QAccessibleTableCellInterface) RowHeaderCells() []*QAccessibleInterface {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QAccessibleInterface {
			var out = make([]*QAccessibleInterface, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAccessibleTableCellInterfaceFromPointer(l.data).__rowHeaderCells_atList(i)
			}
			return out
		}(C.QAccessibleTableCellInterface_RowHeaderCells(ptr.Pointer()))
	}
	return make([]*QAccessibleInterface, 0)
}

//export callbackQAccessibleTableCellInterface_IsSelected
func callbackQAccessibleTableCellInterface_IsSelected(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "isSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableCellInterface) ConnectIsSelected(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "isSelected"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isSelected", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isSelected", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectIsSelected() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "isSelected")
	}
}

func (ptr *QAccessibleTableCellInterface) IsSelected() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableCellInterface_IsSelected(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleTableCellInterface_ColumnExtent
func callbackQAccessibleTableCellInterface_ColumnExtent(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnExtent"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnExtent(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnExtent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnExtent", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnExtent", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnExtent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnExtent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_ColumnExtent(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_ColumnIndex
func callbackQAccessibleTableCellInterface_ColumnIndex(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnIndex"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnIndex(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnIndex"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnIndex", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnIndex", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_ColumnIndex(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_RowExtent
func callbackQAccessibleTableCellInterface_RowExtent(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowExtent"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectRowExtent(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowExtent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowExtent", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowExtent", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowExtent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) RowExtent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_RowExtent(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_RowIndex
func callbackQAccessibleTableCellInterface_RowIndex(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowIndex"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectRowIndex(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowIndex"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowIndex", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowIndex", f)
		}
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) RowIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_RowIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableCellInterface) __columnHeaderCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface___columnHeaderCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QAccessibleTableCellInterface) __columnHeaderCells_setList(i QAccessibleInterface_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface___columnHeaderCells_setList(ptr.Pointer(), PointerFromQAccessibleInterface(i))
	}
}

func (ptr *QAccessibleTableCellInterface) __columnHeaderCells_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessibleTableCellInterface___columnHeaderCells_newList(ptr.Pointer()))
}

func (ptr *QAccessibleTableCellInterface) __rowHeaderCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface___rowHeaderCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QAccessibleTableCellInterface) __rowHeaderCells_setList(i QAccessibleInterface_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface___rowHeaderCells_setList(ptr.Pointer(), PointerFromQAccessibleInterface(i))
	}
}

func (ptr *QAccessibleTableCellInterface) __rowHeaderCells_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessibleTableCellInterface___rowHeaderCells_newList(ptr.Pointer()))
}

type QAccessibleTableInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableInterface_ITF interface {
	QAccessibleTableInterface_PTR() *QAccessibleTableInterface
}

func (ptr *QAccessibleTableInterface) QAccessibleTableInterface_PTR() *QAccessibleTableInterface {
	return ptr
}

func (ptr *QAccessibleTableInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleTableInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleTableInterface(ptr QAccessibleTableInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableInterface {
	var n = new(QAccessibleTableInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTableInterface_SelectColumn
func callbackQAccessibleTableInterface_SelectColumn(ptr unsafe.Pointer, column C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectColumn"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectSelectColumn(f func(column int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectColumn"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectColumn", func(column int) bool {
				signal.(func(int) bool)(column)
				return f(column)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectColumn", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectColumn() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectColumn")
	}
}

func (ptr *QAccessibleTableInterface) SelectColumn(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectColumn(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_SelectRow
func callbackQAccessibleTableInterface_SelectRow(ptr unsafe.Pointer, row C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectRow"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectSelectRow(f func(row int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectRow"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectRow", func(row int) bool {
				signal.(func(int) bool)(row)
				return f(row)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectRow", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectRow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectRow")
	}
}

func (ptr *QAccessibleTableInterface) SelectRow(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectRow(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_UnselectColumn
func callbackQAccessibleTableInterface_UnselectColumn(ptr unsafe.Pointer, column C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "unselectColumn"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectColumn(f func(column int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "unselectColumn"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "unselectColumn", func(column int) bool {
				signal.(func(int) bool)(column)
				return f(column)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "unselectColumn", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectColumn() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "unselectColumn")
	}
}

func (ptr *QAccessibleTableInterface) UnselectColumn(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectColumn(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_UnselectRow
func callbackQAccessibleTableInterface_UnselectRow(ptr unsafe.Pointer, row C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "unselectRow"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectRow(f func(row int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "unselectRow"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "unselectRow", func(row int) bool {
				signal.(func(int) bool)(row)
				return f(row)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "unselectRow", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectRow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "unselectRow")
	}
}

func (ptr *QAccessibleTableInterface) UnselectRow(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectRow(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_ModelChange
func callbackQAccessibleTableInterface_ModelChange(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "modelChange"); signal != nil {
		signal.(func(*QAccessibleTableModelChangeEvent))(NewQAccessibleTableModelChangeEventFromPointer(event))
	}

}

func (ptr *QAccessibleTableInterface) ConnectModelChange(f func(event *QAccessibleTableModelChangeEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "modelChange"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modelChange", func(event *QAccessibleTableModelChangeEvent) {
				signal.(func(*QAccessibleTableModelChangeEvent))(event)
				f(event)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modelChange", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectModelChange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "modelChange")
	}
}

func (ptr *QAccessibleTableInterface) ModelChange(event QAccessibleTableModelChangeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_ModelChange(ptr.Pointer(), PointerFromQAccessibleTableModelChangeEvent(event))
	}
}

//export callbackQAccessibleTableInterface_DestroyQAccessibleTableInterface
func callbackQAccessibleTableInterface_DestroyQAccessibleTableInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleTableInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTableInterfaceFromPointer(ptr).DestroyQAccessibleTableInterfaceDefault()
	}
}

func (ptr *QAccessibleTableInterface) ConnectDestroyQAccessibleTableInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableInterface", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectDestroyQAccessibleTableInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTableInterface")
	}
}

func (ptr *QAccessibleTableInterface) DestroyQAccessibleTableInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_DestroyQAccessibleTableInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableInterface) DestroyQAccessibleTableInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_DestroyQAccessibleTableInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleTableInterface_Caption
func callbackQAccessibleTableInterface_Caption(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "caption"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCaption(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "caption"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "caption", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "caption", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCaption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "caption")
	}
}

func (ptr *QAccessibleTableInterface) Caption() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Caption(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_CellAt
func callbackQAccessibleTableInterface_CellAt(ptr unsafe.Pointer, row C.int, column C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "cellAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(row)), int(int32(column))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCellAt(f func(row int, column int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "cellAt"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cellAt", func(row int, column int) *QAccessibleInterface {
				signal.(func(int, int) *QAccessibleInterface)(row, column)
				return f(row, column)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cellAt", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCellAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "cellAt")
	}
}

func (ptr *QAccessibleTableInterface) CellAt(row int, column int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_CellAt(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

//export callbackQAccessibleTableInterface_Summary
func callbackQAccessibleTableInterface_Summary(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "summary"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectSummary(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "summary"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "summary", func() *QAccessibleInterface {
				signal.(func() *QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "summary", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSummary() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "summary")
	}
}

func (ptr *QAccessibleTableInterface) Summary() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Summary(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_SelectedCells
func callbackQAccessibleTableInterface_SelectedCells(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedCells"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedCells_newList())
			for _, v := range signal.(func() []*QAccessibleInterface)() {
				tmpList.__selectedCells_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedCells_newList())
		for _, v := range make([]*QAccessibleInterface, 0) {
			tmpList.__selectedCells_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QAccessibleTableInterface) ConnectSelectedCells(f func() []*QAccessibleInterface) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedCells"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCells", func() []*QAccessibleInterface {
				signal.(func() []*QAccessibleInterface)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCells", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedCells() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCells")
	}
}

func (ptr *QAccessibleTableInterface) SelectedCells() []*QAccessibleInterface {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QAccessibleInterface {
			var out = make([]*QAccessibleInterface, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAccessibleTableInterfaceFromPointer(l.data).__selectedCells_atList(i)
			}
			return out
		}(C.QAccessibleTableInterface_SelectedCells(ptr.Pointer()))
	}
	return make([]*QAccessibleInterface, 0)
}

//export callbackQAccessibleTableInterface_SelectedColumns
func callbackQAccessibleTableInterface_SelectedColumns(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedColumns"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedColumns_newList())
			for _, v := range signal.(func() []int)() {
				tmpList.__selectedColumns_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedColumns_newList())
		for _, v := range make([]int, 0) {
			tmpList.__selectedColumns_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QAccessibleTableInterface) ConnectSelectedColumns(f func() []int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedColumns"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumns", func() []int {
				signal.(func() []int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumns", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumns")
	}
}

func (ptr *QAccessibleTableInterface) SelectedColumns() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAccessibleTableInterfaceFromPointer(l.data).__selectedColumns_atList(i)
			}
			return out
		}(C.QAccessibleTableInterface_SelectedColumns(ptr.Pointer()))
	}
	return make([]int, 0)
}

//export callbackQAccessibleTableInterface_SelectedRows
func callbackQAccessibleTableInterface_SelectedRows(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedRows"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedRows_newList())
			for _, v := range signal.(func() []int)() {
				tmpList.__selectedRows_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQAccessibleTableInterfaceFromPointer(NewQAccessibleTableInterfaceFromPointer(nil).__selectedRows_newList())
		for _, v := range make([]int, 0) {
			tmpList.__selectedRows_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QAccessibleTableInterface) ConnectSelectedRows(f func() []int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedRows"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRows", func() []int {
				signal.(func() []int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRows", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRows")
	}
}

func (ptr *QAccessibleTableInterface) SelectedRows() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAccessibleTableInterfaceFromPointer(l.data).__selectedRows_atList(i)
			}
			return out
		}(C.QAccessibleTableInterface_SelectedRows(ptr.Pointer()))
	}
	return make([]int, 0)
}

//export callbackQAccessibleTableInterface_ColumnDescription
func callbackQAccessibleTableInterface_ColumnDescription(ptr unsafe.Pointer, column C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(column))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectColumnDescription(f func(column int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnDescription"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnDescription", func(column int) string {
				signal.(func(int) string)(column)
				return f(column)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnDescription", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnDescription() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnDescription")
	}
}

func (ptr *QAccessibleTableInterface) ColumnDescription(column int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTableInterface_ColumnDescription(ptr.Pointer(), C.int(int32(column))))
	}
	return ""
}

//export callbackQAccessibleTableInterface_RowDescription
func callbackQAccessibleTableInterface_RowDescription(ptr unsafe.Pointer, row C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(row))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectRowDescription(f func(row int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowDescription"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowDescription", func(row int) string {
				signal.(func(int) string)(row)
				return f(row)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowDescription", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowDescription() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowDescription")
	}
}

func (ptr *QAccessibleTableInterface) RowDescription(row int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTableInterface_RowDescription(ptr.Pointer(), C.int(int32(row))))
	}
	return ""
}

//export callbackQAccessibleTableInterface_IsColumnSelected
func callbackQAccessibleTableInterface_IsColumnSelected(ptr unsafe.Pointer, column C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "isColumnSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectIsColumnSelected(f func(column int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "isColumnSelected"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isColumnSelected", func(column int) bool {
				signal.(func(int) bool)(column)
				return f(column)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isColumnSelected", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsColumnSelected() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "isColumnSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsColumnSelected(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsColumnSelected(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_IsRowSelected
func callbackQAccessibleTableInterface_IsRowSelected(ptr unsafe.Pointer, row C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "isRowSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectIsRowSelected(f func(row int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "isRowSelected"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isRowSelected", func(row int) bool {
				signal.(func(int) bool)(row)
				return f(row)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "isRowSelected", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsRowSelected() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "isRowSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsRowSelected(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsRowSelected(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_ColumnCount
func callbackQAccessibleTableInterface_ColumnCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectColumnCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount")
	}
}

func (ptr *QAccessibleTableInterface) ColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_ColumnCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_RowCount
func callbackQAccessibleTableInterface_RowCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectRowCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount")
	}
}

func (ptr *QAccessibleTableInterface) RowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_RowCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedCellCount
func callbackQAccessibleTableInterface_SelectedCellCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedCellCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedCellCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedCellCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCellCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCellCount", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedCellCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedCellCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedCellCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedCellCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedColumnCount
func callbackQAccessibleTableInterface_SelectedColumnCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedColumnCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedColumnCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedColumnCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumnCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumnCount", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedColumnCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedColumnCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedRowCount
func callbackQAccessibleTableInterface_SelectedRowCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectedRowCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedRowCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectedRowCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRowCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRowCount", f)
		}
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectedRowCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedRowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedRowCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableInterface) __selectedCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface___selectedCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QAccessibleTableInterface) __selectedCells_setList(i QAccessibleInterface_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface___selectedCells_setList(ptr.Pointer(), PointerFromQAccessibleInterface(i))
	}
}

func (ptr *QAccessibleTableInterface) __selectedCells_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessibleTableInterface___selectedCells_newList(ptr.Pointer()))
}

func (ptr *QAccessibleTableInterface) __selectedColumns_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface___selectedColumns_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QAccessibleTableInterface) __selectedColumns_setList(i int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface___selectedColumns_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QAccessibleTableInterface) __selectedColumns_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessibleTableInterface___selectedColumns_newList(ptr.Pointer()))
}

func (ptr *QAccessibleTableInterface) __selectedRows_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface___selectedRows_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QAccessibleTableInterface) __selectedRows_setList(i int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface___selectedRows_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QAccessibleTableInterface) __selectedRows_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QAccessibleTableInterface___selectedRows_newList(ptr.Pointer()))
}

type QAccessibleTableModelChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleTableModelChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent
}

func (ptr *QAccessibleTableModelChangeEvent) QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent {
	return ptr
}

func (ptr *QAccessibleTableModelChangeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTableModelChangeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTableModelChangeEvent(ptr QAccessibleTableModelChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableModelChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableModelChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleTableModelChangeEvent {
	var n = new(QAccessibleTableModelChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTableModelChangeEvent) DestroyQAccessibleTableModelChangeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QAccessibleTableModelChangeEvent__ModelChangeType
//QAccessibleTableModelChangeEvent::ModelChangeType
type QAccessibleTableModelChangeEvent__ModelChangeType int64

const (
	QAccessibleTableModelChangeEvent__ModelReset      QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(0)
	QAccessibleTableModelChangeEvent__DataChanged     QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(1)
	QAccessibleTableModelChangeEvent__RowsInserted    QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(2)
	QAccessibleTableModelChangeEvent__ColumnsInserted QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(3)
	QAccessibleTableModelChangeEvent__RowsRemoved     QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(4)
	QAccessibleTableModelChangeEvent__ColumnsRemoved  QAccessibleTableModelChangeEvent__ModelChangeType = QAccessibleTableModelChangeEvent__ModelChangeType(5)
)

func NewQAccessibleTableModelChangeEvent2(iface QAccessibleInterface_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	return NewQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(PointerFromQAccessibleInterface(iface), C.longlong(changeType)))
}

func NewQAccessibleTableModelChangeEvent(object core.QObject_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	return NewQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(core.PointerFromQObject(object), C.longlong(changeType)))
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstColumn(column int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstRow(row int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastColumn(column int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastRow(row int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetModelChangeType(changeType QAccessibleTableModelChangeEvent__ModelChangeType) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetModelChangeType(ptr.Pointer(), C.longlong(changeType))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) ModelChangeType() QAccessibleTableModelChangeEvent__ModelChangeType {
	if ptr.Pointer() != nil {
		return QAccessibleTableModelChangeEvent__ModelChangeType(C.QAccessibleTableModelChangeEvent_ModelChangeType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) FirstColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_FirstColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) FirstRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_FirstRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_LastColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_LastRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) M_firstColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_firstColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_firstColumn(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_firstColumn(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_firstRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_firstRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_firstRow(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_firstRow(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_lastColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_lastColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_lastColumn(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_lastColumn(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_lastRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_lastRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_lastRow(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_lastRow(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_modelChangeType() QAccessibleTableModelChangeEvent__ModelChangeType {
	if ptr.Pointer() != nil {
		return QAccessibleTableModelChangeEvent__ModelChangeType(C.QAccessibleTableModelChangeEvent_M_modelChangeType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_modelChangeType(vmo QAccessibleTableModelChangeEvent__ModelChangeType) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_modelChangeType(ptr.Pointer(), C.longlong(vmo))
	}
}

type QAccessibleTextCursorEvent struct {
	QAccessibleEvent
}

type QAccessibleTextCursorEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent
}

func (ptr *QAccessibleTextCursorEvent) QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent {
	return ptr
}

func (ptr *QAccessibleTextCursorEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTextCursorEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTextCursorEvent(ptr QAccessibleTextCursorEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextCursorEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextCursorEvent {
	var n = new(QAccessibleTextCursorEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextCursorEvent) DestroyQAccessibleTextCursorEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleTextCursorEvent2(iface QAccessibleInterface_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	return NewQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(cursorPos))))
}

func NewQAccessibleTextCursorEvent(object core.QObject_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	return NewQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(core.PointerFromQObject(object), C.int(int32(cursorPos))))
}

func (ptr *QAccessibleTextCursorEvent) SetCursorPosition(position int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextCursorEvent_SetCursorPosition(ptr.Pointer(), C.int(int32(position)))
	}
}

func (ptr *QAccessibleTextCursorEvent) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextCursorEvent_CursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextCursorEvent) M_cursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextCursorEvent_M_cursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextCursorEvent) SetM_cursorPosition(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextCursorEvent_SetM_cursorPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QAccessibleTextInsertEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextInsertEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent
}

func (ptr *QAccessibleTextInsertEvent) QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent {
	return ptr
}

func (ptr *QAccessibleTextInsertEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTextInsertEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleTextCursorEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTextInsertEvent(ptr QAccessibleTextInsertEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInsertEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInsertEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextInsertEvent {
	var n = new(QAccessibleTextInsertEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextInsertEvent) DestroyQAccessibleTextInsertEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleTextInsertEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextInsertEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), textC))
}

func NewQAccessibleTextInsertEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextInsertEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(core.PointerFromQObject(object), C.int(int32(position)), textC))
}

func (ptr *QAccessibleTextInsertEvent) TextInserted() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInsertEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextInsertEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInsertEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextInsertEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInsertEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextInsertEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInsertEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextInsertEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInsertEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextInsertEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QAccessibleTextInsertEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

type QAccessibleTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTextInterface_ITF interface {
	QAccessibleTextInterface_PTR() *QAccessibleTextInterface
}

func (ptr *QAccessibleTextInterface) QAccessibleTextInterface_PTR() *QAccessibleTextInterface {
	return ptr
}

func (ptr *QAccessibleTextInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleTextInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleTextInterface(ptr QAccessibleTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTextInterface {
	var n = new(QAccessibleTextInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTextInterface_AddSelection
func callbackQAccessibleTextInterface_AddSelection(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "addSelection"); signal != nil {
		signal.(func(int, int))(int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectAddSelection(f func(startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "addSelection"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addSelection", func(startOffset int, endOffset int) {
				signal.(func(int, int))(startOffset, endOffset)
				f(startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addSelection", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectAddSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "addSelection")
	}
}

func (ptr *QAccessibleTextInterface) AddSelection(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_AddSelection(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleTextInterface_RemoveSelection
func callbackQAccessibleTextInterface_RemoveSelection(ptr unsafe.Pointer, selectionIndex C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "removeSelection"); signal != nil {
		signal.(func(int))(int(int32(selectionIndex)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectRemoveSelection(f func(selectionIndex int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "removeSelection"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "removeSelection", func(selectionIndex int) {
				signal.(func(int))(selectionIndex)
				f(selectionIndex)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "removeSelection", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectRemoveSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "removeSelection")
	}
}

func (ptr *QAccessibleTextInterface) RemoveSelection(selectionIndex int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_RemoveSelection(ptr.Pointer(), C.int(int32(selectionIndex)))
	}
}

//export callbackQAccessibleTextInterface_ScrollToSubstring
func callbackQAccessibleTextInterface_ScrollToSubstring(ptr unsafe.Pointer, startIndex C.int, endIndex C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "scrollToSubstring"); signal != nil {
		signal.(func(int, int))(int(int32(startIndex)), int(int32(endIndex)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectScrollToSubstring(f func(startIndex int, endIndex int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "scrollToSubstring"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "scrollToSubstring", func(startIndex int, endIndex int) {
				signal.(func(int, int))(startIndex, endIndex)
				f(startIndex, endIndex)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "scrollToSubstring", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectScrollToSubstring() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "scrollToSubstring")
	}
}

func (ptr *QAccessibleTextInterface) ScrollToSubstring(startIndex int, endIndex int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_ScrollToSubstring(ptr.Pointer(), C.int(int32(startIndex)), C.int(int32(endIndex)))
	}
}

//export callbackQAccessibleTextInterface_SetCursorPosition
func callbackQAccessibleTextInterface_SetCursorPosition(ptr unsafe.Pointer, position C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setCursorPosition"); signal != nil {
		signal.(func(int))(int(int32(position)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetCursorPosition(f func(position int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setCursorPosition"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setCursorPosition", func(position int) {
				signal.(func(int))(position)
				f(position)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setCursorPosition", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetCursorPosition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setCursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) SetCursorPosition(position int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetCursorPosition(ptr.Pointer(), C.int(int32(position)))
	}
}

//export callbackQAccessibleTextInterface_SetSelection
func callbackQAccessibleTextInterface_SetSelection(ptr unsafe.Pointer, selectionIndex C.int, startOffset C.int, endOffset C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setSelection"); signal != nil {
		signal.(func(int, int, int))(int(int32(selectionIndex)), int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setSelection"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setSelection", func(selectionIndex int, startOffset int, endOffset int) {
				signal.(func(int, int, int))(selectionIndex, startOffset, endOffset)
				f(selectionIndex, startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setSelection", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setSelection")
	}
}

func (ptr *QAccessibleTextInterface) SetSelection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetSelection(ptr.Pointer(), C.int(int32(selectionIndex)), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleTextInterface_DestroyQAccessibleTextInterface
func callbackQAccessibleTextInterface_DestroyQAccessibleTextInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleTextInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTextInterfaceFromPointer(ptr).DestroyQAccessibleTextInterfaceDefault()
	}
}

func (ptr *QAccessibleTextInterface) ConnectDestroyQAccessibleTextInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTextInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTextInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTextInterface", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectDestroyQAccessibleTextInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleTextInterface")
	}
}

func (ptr *QAccessibleTextInterface) DestroyQAccessibleTextInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_DestroyQAccessibleTextInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTextInterface) DestroyQAccessibleTextInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_DestroyQAccessibleTextInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleTextInterface_CharacterRect
func callbackQAccessibleTextInterface_CharacterRect(ptr unsafe.Pointer, offset C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "characterRect"); signal != nil {
		return core.PointerFromQRect(signal.(func(int) *core.QRect)(int(int32(offset))))
	}

	return core.PointerFromQRect(core.NewQRect())
}

func (ptr *QAccessibleTextInterface) ConnectCharacterRect(f func(offset int) *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "characterRect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "characterRect", func(offset int) *core.QRect {
				signal.(func(int) *core.QRect)(offset)
				return f(offset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "characterRect", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "characterRect")
	}
}

func (ptr *QAccessibleTextInterface) CharacterRect(offset int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleTextInterface_CharacterRect(ptr.Pointer(), C.int(int32(offset))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleTextInterface_Text
func callbackQAccessibleTextInterface_Text(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "text"); signal != nil {
		return C.CString(signal.(func(int, int) string)(int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTextInterface) ConnectText(f func(startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "text"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "text", func(startOffset int, endOffset int) string {
				signal.(func(int, int) string)(startOffset, endOffset)
				return f(startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "text", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "text")
	}
}

func (ptr *QAccessibleTextInterface) Text(startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_Text(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAfterOffset
func callbackQAccessibleTextInterface_TextAfterOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "textAfterOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAfterOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextAfterOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "textAfterOffset"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textAfterOffset", func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
				signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(offset, boundaryType, startOffset, endOffset)
				return f(offset, boundaryType, startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textAfterOffset", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAfterOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "textAfterOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAfterOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAfterOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAfterOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAfterOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAtOffset
func callbackQAccessibleTextInterface_TextAtOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "textAtOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAtOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextAtOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "textAtOffset"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textAtOffset", func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
				signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(offset, boundaryType, startOffset, endOffset)
				return f(offset, boundaryType, startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textAtOffset", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAtOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "textAtOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAtOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAtOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAtOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAtOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextBeforeOffset
func callbackQAccessibleTextInterface_TextBeforeOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "textBeforeOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextBeforeOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextBeforeOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "textBeforeOffset"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textBeforeOffset", func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
				signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(offset, boundaryType, startOffset, endOffset)
				return f(offset, boundaryType, startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "textBeforeOffset", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextBeforeOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "textBeforeOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextBeforeOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextBeforeOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextBeforeOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextBeforeOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_CharacterCount
func callbackQAccessibleTextInterface_CharacterCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "characterCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectCharacterCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "characterCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "characterCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "characterCount", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "characterCount")
	}
}

func (ptr *QAccessibleTextInterface) CharacterCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_CharacterCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_CursorPosition
func callbackQAccessibleTextInterface_CursorPosition(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "cursorPosition"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectCursorPosition(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "cursorPosition"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPosition", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPosition", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCursorPosition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_CursorPosition(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_OffsetAtPoint
func callbackQAccessibleTextInterface_OffsetAtPoint(ptr unsafe.Pointer, point unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "offsetAtPoint"); signal != nil {
		return C.int(int32(signal.(func(*core.QPoint) int)(core.NewQPointFromPointer(point))))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectOffsetAtPoint(f func(point *core.QPoint) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "offsetAtPoint"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "offsetAtPoint", func(point *core.QPoint) int {
				signal.(func(*core.QPoint) int)(point)
				return f(point)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "offsetAtPoint", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectOffsetAtPoint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "offsetAtPoint")
	}
}

func (ptr *QAccessibleTextInterface) OffsetAtPoint(point core.QPoint_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_OffsetAtPoint(ptr.Pointer(), core.PointerFromQPoint(point))))
	}
	return 0
}

//export callbackQAccessibleTextInterface_SelectionCount
func callbackQAccessibleTextInterface_SelectionCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectionCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectSelectionCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectionCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectionCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectionCount", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelectionCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectionCount")
	}
}

func (ptr *QAccessibleTextInterface) SelectionCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_SelectionCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_Selection
func callbackQAccessibleTextInterface_Selection(ptr unsafe.Pointer, selectionIndex C.int, startOffset C.int, endOffset C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selection"); signal != nil {
		signal.(func(int, int, int))(int(int32(selectionIndex)), int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selection"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selection", func(selectionIndex int, startOffset int, endOffset int) {
				signal.(func(int, int, int))(selectionIndex, startOffset, endOffset)
				f(selectionIndex, startOffset, endOffset)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selection", f)
		}
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selection")
	}
}

func (ptr *QAccessibleTextInterface) Selection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_Selection(ptr.Pointer(), C.int(int32(selectionIndex)), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

type QAccessibleTextRemoveEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextRemoveEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent
}

func (ptr *QAccessibleTextRemoveEvent) QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent {
	return ptr
}

func (ptr *QAccessibleTextRemoveEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTextRemoveEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleTextCursorEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTextRemoveEvent(ptr QAccessibleTextRemoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextRemoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextRemoveEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextRemoveEvent {
	var n = new(QAccessibleTextRemoveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextRemoveEvent) DestroyQAccessibleTextRemoveEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleTextRemoveEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), textC))
}

func NewQAccessibleTextRemoveEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(core.PointerFromQObject(object), C.int(int32(position)), textC))
}

func (ptr *QAccessibleTextRemoveEvent) TextRemoved() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextRemoveEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextRemoveEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextRemoveEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextRemoveEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextRemoveEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextRemoveEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextRemoveEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextRemoveEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextRemoveEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextRemoveEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QAccessibleTextRemoveEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

type QAccessibleTextSelectionEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextSelectionEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent
}

func (ptr *QAccessibleTextSelectionEvent) QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent {
	return ptr
}

func (ptr *QAccessibleTextSelectionEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTextSelectionEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleTextCursorEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTextSelectionEvent(ptr QAccessibleTextSelectionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextSelectionEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextSelectionEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextSelectionEvent {
	var n = new(QAccessibleTextSelectionEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextSelectionEvent) DestroyQAccessibleTextSelectionEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleTextSelectionEvent2(iface QAccessibleInterface_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	return NewQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(start)), C.int(int32(end))))
}

func NewQAccessibleTextSelectionEvent(object core.QObject_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	return NewQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(core.PointerFromQObject(object), C.int(int32(start)), C.int(int32(end))))
}

func (ptr *QAccessibleTextSelectionEvent) SetSelection(start int, end int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetSelection(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

func (ptr *QAccessibleTextSelectionEvent) SelectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_SelectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SelectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_SelectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) M_selectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_M_selectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetM_selectionEnd(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetM_selectionEnd(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextSelectionEvent) M_selectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_M_selectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetM_selectionStart(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetM_selectionStart(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QAccessibleTextUpdateEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextUpdateEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent
}

func (ptr *QAccessibleTextUpdateEvent) QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent {
	return ptr
}

func (ptr *QAccessibleTextUpdateEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleTextUpdateEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleTextCursorEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleTextUpdateEvent(ptr QAccessibleTextUpdateEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextUpdateEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextUpdateEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextUpdateEvent {
	var n = new(QAccessibleTextUpdateEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextUpdateEvent) DestroyQAccessibleTextUpdateEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleTextUpdateEvent2(iface QAccessibleInterface_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	var oldTextC *C.char
	if oldText != "" {
		oldTextC = C.CString(oldText)
		defer C.free(unsafe.Pointer(oldTextC))
	}
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), oldTextC, textC))
}

func NewQAccessibleTextUpdateEvent(object core.QObject_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	var oldTextC *C.char
	if oldText != "" {
		oldTextC = C.CString(oldText)
		defer C.free(unsafe.Pointer(oldTextC))
	}
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(core.PointerFromQObject(object), C.int(int32(position)), oldTextC, textC))
}

func (ptr *QAccessibleTextUpdateEvent) TextInserted() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) TextRemoved() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextUpdateEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextUpdateEvent) M_oldText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_M_oldText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) SetM_oldText(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QAccessibleTextUpdateEvent_SetM_oldText(ptr.Pointer(), vqsC)
	}
}

func (ptr *QAccessibleTextUpdateEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextUpdateEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextUpdateEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextUpdateEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextUpdateEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QAccessibleTextUpdateEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

type QAccessibleValueChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleValueChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent
}

func (ptr *QAccessibleValueChangeEvent) QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent {
	return ptr
}

func (ptr *QAccessibleValueChangeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAccessibleEvent_PTR().SetPointer(p)
	}
}

func PointerFromQAccessibleValueChangeEvent(ptr QAccessibleValueChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleValueChangeEvent {
	var n = new(QAccessibleValueChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleValueChangeEvent) DestroyQAccessibleValueChangeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQAccessibleValueChangeEvent2(iface QAccessibleInterface_ITF, val core.QVariant_ITF) *QAccessibleValueChangeEvent {
	return NewQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(PointerFromQAccessibleInterface(iface), core.PointerFromQVariant(val)))
}

func NewQAccessibleValueChangeEvent(object core.QObject_ITF, value core.QVariant_ITF) *QAccessibleValueChangeEvent {
	return NewQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(core.PointerFromQObject(object), core.PointerFromQVariant(value)))
}

func (ptr *QAccessibleValueChangeEvent) SetValue(value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueChangeEvent_SetValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

func (ptr *QAccessibleValueChangeEvent) Value() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueChangeEvent_Value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) M_value() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueChangeEvent_M_value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) SetM_value(vqv core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueChangeEvent_SetM_value(ptr.Pointer(), core.PointerFromQVariant(vqv))
	}
}

type QAccessibleValueInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleValueInterface_ITF interface {
	QAccessibleValueInterface_PTR() *QAccessibleValueInterface
}

func (ptr *QAccessibleValueInterface) QAccessibleValueInterface_PTR() *QAccessibleValueInterface {
	return ptr
}

func (ptr *QAccessibleValueInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QAccessibleValueInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQAccessibleValueInterface(ptr QAccessibleValueInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleValueInterface {
	var n = new(QAccessibleValueInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleValueInterface_SetCurrentValue
func callbackQAccessibleValueInterface_SetCurrentValue(ptr unsafe.Pointer, value unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setCurrentValue"); signal != nil {
		signal.(func(*core.QVariant))(core.NewQVariantFromPointer(value))
	}

}

func (ptr *QAccessibleValueInterface) ConnectSetCurrentValue(f func(value *core.QVariant)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setCurrentValue"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setCurrentValue", func(value *core.QVariant) {
				signal.(func(*core.QVariant))(value)
				f(value)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setCurrentValue", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectSetCurrentValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setCurrentValue")
	}
}

func (ptr *QAccessibleValueInterface) SetCurrentValue(value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_SetCurrentValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

//export callbackQAccessibleValueInterface_DestroyQAccessibleValueInterface
func callbackQAccessibleValueInterface_DestroyQAccessibleValueInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QAccessibleValueInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleValueInterfaceFromPointer(ptr).DestroyQAccessibleValueInterfaceDefault()
	}
}

func (ptr *QAccessibleValueInterface) ConnectDestroyQAccessibleValueInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleValueInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleValueInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleValueInterface", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectDestroyQAccessibleValueInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QAccessibleValueInterface")
	}
}

func (ptr *QAccessibleValueInterface) DestroyQAccessibleValueInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_DestroyQAccessibleValueInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleValueInterface) DestroyQAccessibleValueInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_DestroyQAccessibleValueInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleValueInterface_CurrentValue
func callbackQAccessibleValueInterface_CurrentValue(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "currentValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(core.NewQVariant())
}

func (ptr *QAccessibleValueInterface) ConnectCurrentValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "currentValue"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentValue", func() *core.QVariant {
				signal.(func() *core.QVariant)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentValue", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectCurrentValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "currentValue")
	}
}

func (ptr *QAccessibleValueInterface) CurrentValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_CurrentValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MaximumValue
func callbackQAccessibleValueInterface_MaximumValue(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "maximumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(core.NewQVariant())
}

func (ptr *QAccessibleValueInterface) ConnectMaximumValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "maximumValue"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumValue", func() *core.QVariant {
				signal.(func() *core.QVariant)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumValue", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMaximumValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "maximumValue")
	}
}

func (ptr *QAccessibleValueInterface) MaximumValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MaximumValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumStepSize
func callbackQAccessibleValueInterface_MinimumStepSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "minimumStepSize"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(core.NewQVariant())
}

func (ptr *QAccessibleValueInterface) ConnectMinimumStepSize(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "minimumStepSize"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumStepSize", func() *core.QVariant {
				signal.(func() *core.QVariant)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumStepSize", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumStepSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "minimumStepSize")
	}
}

func (ptr *QAccessibleValueInterface) MinimumStepSize() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumStepSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumValue
func callbackQAccessibleValueInterface_MinimumValue(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "minimumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(core.NewQVariant())
}

func (ptr *QAccessibleValueInterface) ConnectMinimumValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "minimumValue"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumValue", func() *core.QVariant {
				signal.(func() *core.QVariant)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumValue", f)
		}
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "minimumValue")
	}
}

func (ptr *QAccessibleValueInterface) MinimumValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QActionEvent struct {
	core.QEvent
}

type QActionEvent_ITF interface {
	core.QEvent_ITF
	QActionEvent_PTR() *QActionEvent
}

func (ptr *QActionEvent) QActionEvent_PTR() *QActionEvent {
	return ptr
}

func (ptr *QActionEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QActionEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQActionEvent(ptr QActionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QActionEvent_PTR().Pointer()
	}
	return nil
}

func NewQActionEventFromPointer(ptr unsafe.Pointer) *QActionEvent {
	var n = new(QActionEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QActionEvent) DestroyQActionEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQActionEvent(ty int, action unsafe.Pointer, before unsafe.Pointer) *QActionEvent {
	return NewQActionEventFromPointer(C.QActionEvent_NewQActionEvent(C.int(int32(ty)), action, before))
}

func (ptr *QActionEvent) Action() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Action(ptr.Pointer()))
	}
	return nil
}

func (ptr *QActionEvent) Before() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Before(ptr.Pointer()))
	}
	return nil
}

type QBackingStore struct {
	ptr unsafe.Pointer
}

type QBackingStore_ITF interface {
	QBackingStore_PTR() *QBackingStore
}

func (ptr *QBackingStore) QBackingStore_PTR() *QBackingStore {
	return ptr
}

func (ptr *QBackingStore) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QBackingStore) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQBackingStore(ptr QBackingStore_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBackingStore_PTR().Pointer()
	}
	return nil
}

func NewQBackingStoreFromPointer(ptr unsafe.Pointer) *QBackingStore {
	var n = new(QBackingStore)
	n.SetPointer(ptr)
	return n
}
func NewQBackingStore(window QWindow_ITF) *QBackingStore {
	var tmpValue = NewQBackingStoreFromPointer(C.QBackingStore_NewQBackingStore(PointerFromQWindow(window)))
	runtime.SetFinalizer(tmpValue, (*QBackingStore).DestroyQBackingStore)
	return tmpValue
}

func (ptr *QBackingStore) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QBackingStore_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBackingStore) Scroll(area QRegion_ITF, dx int, dy int) bool {
	if ptr.Pointer() != nil {
		return C.QBackingStore_Scroll(ptr.Pointer(), PointerFromQRegion(area), C.int(int32(dx)), C.int(int32(dy))) != 0
	}
	return false
}

func (ptr *QBackingStore) BeginPaint(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_BeginPaint(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) EndPaint() {
	if ptr.Pointer() != nil {
		C.QBackingStore_EndPaint(ptr.Pointer())
	}
}

func (ptr *QBackingStore) Flush(region QRegion_ITF, win QWindow_ITF, offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_Flush(ptr.Pointer(), PointerFromQRegion(region), PointerFromQWindow(win), core.PointerFromQPoint(offset))
	}
}

func (ptr *QBackingStore) Resize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_Resize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QBackingStore) SetStaticContents(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_SetStaticContents(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) DestroyQBackingStore() {
	if ptr.Pointer() != nil {
		C.QBackingStore_DestroyQBackingStore(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QBackingStore) StaticContents() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QBackingStore_StaticContents(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QBackingStore_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QBackingStore_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) HasStaticContents() bool {
	if ptr.Pointer() != nil {
		return C.QBackingStore_HasStaticContents(ptr.Pointer()) != 0
	}
	return false
}

type QBitmap struct {
	QPixmap
}

type QBitmap_ITF interface {
	QPixmap_ITF
	QBitmap_PTR() *QBitmap
}

func (ptr *QBitmap) QBitmap_PTR() *QBitmap {
	return ptr
}

func (ptr *QBitmap) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmap_PTR().Pointer()
	}
	return nil
}

func (ptr *QBitmap) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPixmap_PTR().SetPointer(p)
	}
}

func PointerFromQBitmap(ptr QBitmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBitmap_PTR().Pointer()
	}
	return nil
}

func NewQBitmapFromPointer(ptr unsafe.Pointer) *QBitmap {
	var n = new(QBitmap)
	n.SetPointer(ptr)
	return n
}
func QBitmap_FromData(size core.QSize_ITF, bits string, monoFormat QImage__Format) *QBitmap {
	var bitsC *C.char
	if bits != "" {
		bitsC = C.CString(bits)
		defer C.free(unsafe.Pointer(bitsC))
	}
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromData(core.PointerFromQSize(size), bitsC, C.longlong(monoFormat)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) FromData(size core.QSize_ITF, bits string, monoFormat QImage__Format) *QBitmap {
	var bitsC *C.char
	if bits != "" {
		bitsC = C.CString(bits)
		defer C.free(unsafe.Pointer(bitsC))
	}
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromData(core.PointerFromQSize(size), bitsC, C.longlong(monoFormat)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func QBitmap_FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap() *QBitmap {
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap())
}

func NewQBitmap3(width int, height int) *QBitmap {
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap3(C.int(int32(width)), C.int(int32(height))))
}

func NewQBitmap6(other QBitmap_ITF) *QBitmap {
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap6(PointerFromQBitmap(other)))
}

func NewQBitmap2(pixmap QPixmap_ITF) *QBitmap {
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap2(PointerFromQPixmap(pixmap)))
}

func NewQBitmap4(size core.QSize_ITF) *QBitmap {
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap4(core.PointerFromQSize(size)))
}

func NewQBitmap5(fileName string, format string) *QBitmap {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	return NewQBitmapFromPointer(C.QBitmap_NewQBitmap5(fileNameC, formatC))
}

func (ptr *QBitmap) Clear() {
	if ptr.Pointer() != nil {
		C.QBitmap_Clear(ptr.Pointer())
	}
}

func (ptr *QBitmap) Swap(other QBitmap_ITF) {
	if ptr.Pointer() != nil {
		C.QBitmap_Swap(ptr.Pointer(), PointerFromQBitmap(other))
	}
}

func (ptr *QBitmap) DestroyQBitmap() {
	if ptr.Pointer() != nil {
		C.QBitmap_DestroyQBitmap(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QBitmap) Transformed(matrix QTransform_ITF) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QBitmap_Transformed(ptr.Pointer(), PointerFromQTransform(matrix)))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

type QBrush struct {
	ptr unsafe.Pointer
}

type QBrush_ITF interface {
	QBrush_PTR() *QBrush
}

func (ptr *QBrush) QBrush_PTR() *QBrush {
	return ptr
}

func (ptr *QBrush) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QBrush) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQBrush(ptr QBrush_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBrush_PTR().Pointer()
	}
	return nil
}

func NewQBrushFromPointer(ptr unsafe.Pointer) *QBrush {
	var n = new(QBrush)
	n.SetPointer(ptr)
	return n
}
func NewQBrush() *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush())
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush2(style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush2(C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush4(color core.Qt__GlobalColor, style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush4(C.longlong(color), C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush6(color core.Qt__GlobalColor, pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush6(C.longlong(color), PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush9(other QBrush_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush9(PointerFromQBrush(other)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush3(color QColor_ITF, style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush3(PointerFromQColor(color), C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush5(color QColor_ITF, pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush5(PointerFromQColor(color), PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush10(gradient QGradient_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush10(PointerFromQGradient(gradient)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush8(image QImage_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush8(PointerFromQImage(image)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush7(pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush7(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func (ptr *QBrush) SetColor2(color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QBrush_SetColor2(ptr.Pointer(), C.longlong(color))
	}
}

func (ptr *QBrush) SetColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QBrush) SetStyle(style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QBrush_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QBrush) SetTexture(pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTexture(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QBrush) SetTextureImage(image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTextureImage(ptr.Pointer(), PointerFromQImage(image))
	}
}

func (ptr *QBrush) SetTransform(matrix QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTransform(ptr.Pointer(), PointerFromQTransform(matrix))
	}
}

func (ptr *QBrush) Swap(other QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_Swap(ptr.Pointer(), PointerFromQBrush(other))
	}
}

func (ptr *QBrush) DestroyQBrush() {
	if ptr.Pointer() != nil {
		C.QBrush_DestroyQBrush(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QBrush) TextureImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QBrush_TextureImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QBrush) Texture() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QBrush_Texture(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QBrush) Transform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QBrush_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QBrush) Style() core.Qt__BrushStyle {
	if ptr.Pointer() != nil {
		return core.Qt__BrushStyle(C.QBrush_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBrush) IsOpaque() bool {
	if ptr.Pointer() != nil {
		return C.QBrush_IsOpaque(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBrush) Color() *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QBrush_Color(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) Gradient() *QGradient {
	if ptr.Pointer() != nil {
		return NewQGradientFromPointer(C.QBrush_Gradient(ptr.Pointer()))
	}
	return nil
}

type QClipboard struct {
	core.QObject
}

type QClipboard_ITF interface {
	core.QObject_ITF
	QClipboard_PTR() *QClipboard
}

func (ptr *QClipboard) QClipboard_PTR() *QClipboard {
	return ptr
}

func (ptr *QClipboard) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QClipboard) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQClipboard(ptr QClipboard_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QClipboard_PTR().Pointer()
	}
	return nil
}

func NewQClipboardFromPointer(ptr unsafe.Pointer) *QClipboard {
	var n = new(QClipboard)
	n.SetPointer(ptr)
	return n
}

func (ptr *QClipboard) DestroyQClipboard() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QClipboard__Mode
//QClipboard::Mode
type QClipboard__Mode int64

const (
	QClipboard__Clipboard  QClipboard__Mode = QClipboard__Mode(0)
	QClipboard__Selection  QClipboard__Mode = QClipboard__Mode(1)
	QClipboard__FindBuffer QClipboard__Mode = QClipboard__Mode(2)
	QClipboard__LastMode   QClipboard__Mode = QClipboard__Mode(QClipboard__FindBuffer)
)

//export callbackQClipboard_Changed
func callbackQClipboard_Changed(ptr unsafe.Pointer, mode C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "changed"); signal != nil {
		signal.(func(QClipboard__Mode))(QClipboard__Mode(mode))
	}

}

func (ptr *QClipboard) ConnectChanged(f func(mode QClipboard__Mode)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "changed") {
			C.QClipboard_ConnectChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "changed"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "changed", func(mode QClipboard__Mode) {
				signal.(func(QClipboard__Mode))(mode)
				f(mode)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "changed", f)
		}
	}
}

func (ptr *QClipboard) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "changed")
	}
}

func (ptr *QClipboard) Changed(mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_Changed(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QClipboard) Clear(mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_Clear(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQClipboard_DataChanged
func callbackQClipboard_DataChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "dataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectDataChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "dataChanged") {
			C.QClipboard_ConnectDataChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "dataChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "dataChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "dataChanged", f)
		}
	}
}

func (ptr *QClipboard) DisconnectDataChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "dataChanged")
	}
}

func (ptr *QClipboard) DataChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DataChanged(ptr.Pointer())
	}
}

//export callbackQClipboard_FindBufferChanged
func callbackQClipboard_FindBufferChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "findBufferChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectFindBufferChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "findBufferChanged") {
			C.QClipboard_ConnectFindBufferChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "findBufferChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "findBufferChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "findBufferChanged", f)
		}
	}
}

func (ptr *QClipboard) DisconnectFindBufferChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectFindBufferChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "findBufferChanged")
	}
}

func (ptr *QClipboard) FindBufferChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_FindBufferChanged(ptr.Pointer())
	}
}

//export callbackQClipboard_SelectionChanged
func callbackQClipboard_SelectionChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "selectionChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectSelectionChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "selectionChanged") {
			C.QClipboard_ConnectSelectionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "selectionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectionChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "selectionChanged", f)
		}
	}
}

func (ptr *QClipboard) DisconnectSelectionChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectSelectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "selectionChanged")
	}
}

func (ptr *QClipboard) SelectionChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_SelectionChanged(ptr.Pointer())
	}
}

func (ptr *QClipboard) SetImage(image QImage_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetImage(ptr.Pointer(), PointerFromQImage(image), C.longlong(mode))
	}
}

func (ptr *QClipboard) SetMimeData(src core.QMimeData_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(src), C.longlong(mode))
	}
}

func (ptr *QClipboard) SetPixmap(pixmap QPixmap_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode))
	}
}

func (ptr *QClipboard) SetText(text string, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QClipboard_SetText(ptr.Pointer(), textC, C.longlong(mode))
	}
}

func (ptr *QClipboard) Image(mode QClipboard__Mode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QClipboard_Image(ptr.Pointer(), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) Pixmap(mode QClipboard__Mode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QClipboard_Pixmap(ptr.Pointer(), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) Text(mode QClipboard__Mode) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QClipboard_Text(ptr.Pointer(), C.longlong(mode)))
	}
	return ""
}

func (ptr *QClipboard) Text2(subtype string, mode QClipboard__Mode) string {
	if ptr.Pointer() != nil {
		var subtypeC *C.char
		if subtype != "" {
			subtypeC = C.CString(subtype)
			defer C.free(unsafe.Pointer(subtypeC))
		}
		return cGoUnpackString(C.QClipboard_Text2(ptr.Pointer(), subtypeC, C.longlong(mode)))
	}
	return ""
}

func (ptr *QClipboard) OwnsClipboard() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsClipboard(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsFindBuffer() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsSelection() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) SupportsFindBuffer() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) SupportsSelection() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) MimeData(mode QClipboard__Mode) *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QClipboard_MimeData(ptr.Pointer(), C.longlong(mode)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QClipboard___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QClipboard) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QClipboard___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QClipboard) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QClipboard___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QClipboard) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QClipboard___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QClipboard) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QClipboard___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QClipboard) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QClipboard___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QClipboard) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QClipboard___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QClipboard) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QClipboard___findChildren_newList(ptr.Pointer()))
}

func (ptr *QClipboard) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QClipboard___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QClipboard) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QClipboard___children_newList(ptr.Pointer()))
}

//export callbackQClipboard_Event
func callbackQClipboard_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QClipboard) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQClipboard_EventFilter
func callbackQClipboard_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QClipboard) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQClipboard_ChildEvent
func callbackQClipboard_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QClipboard) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQClipboard_ConnectNotify
func callbackQClipboard_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_CustomEvent
func callbackQClipboard_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QClipboard) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQClipboard_DeleteLater
func callbackQClipboard_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQClipboardFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QClipboard) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QClipboard_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQClipboard_Destroyed
func callbackQClipboard_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQClipboard_DisconnectNotify
func callbackQClipboard_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_ObjectNameChanged
func callbackQClipboard_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQClipboard_TimerEvent
func callbackQClipboard_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QClipboard) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQClipboard_MetaObject
func callbackQClipboard_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQClipboardFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QClipboard) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QClipboard_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCloseEvent struct {
	core.QEvent
}

type QCloseEvent_ITF interface {
	core.QEvent_ITF
	QCloseEvent_PTR() *QCloseEvent
}

func (ptr *QCloseEvent) QCloseEvent_PTR() *QCloseEvent {
	return ptr
}

func (ptr *QCloseEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QCloseEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQCloseEvent(ptr QCloseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCloseEvent_PTR().Pointer()
	}
	return nil
}

func NewQCloseEventFromPointer(ptr unsafe.Pointer) *QCloseEvent {
	var n = new(QCloseEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCloseEvent) DestroyQCloseEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQCloseEvent() *QCloseEvent {
	return NewQCloseEventFromPointer(C.QCloseEvent_NewQCloseEvent())
}

type QColor struct {
	ptr unsafe.Pointer
}

type QColor_ITF interface {
	QColor_PTR() *QColor
}

func (ptr *QColor) QColor_PTR() *QColor {
	return ptr
}

func (ptr *QColor) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QColor) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQColor(ptr QColor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QColor_PTR().Pointer()
	}
	return nil
}

func NewQColorFromPointer(ptr unsafe.Pointer) *QColor {
	var n = new(QColor)
	n.SetPointer(ptr)
	return n
}

func (ptr *QColor) DestroyQColor() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QColor__Spec
//QColor::Spec
type QColor__Spec int64

const (
	QColor__Invalid QColor__Spec = QColor__Spec(0)
	QColor__Rgb     QColor__Spec = QColor__Spec(1)
	QColor__Hsv     QColor__Spec = QColor__Spec(2)
	QColor__Cmyk    QColor__Spec = QColor__Spec(3)
	QColor__Hsl     QColor__Spec = QColor__Spec(4)
)

//go:generate stringer -type=QColor__NameFormat
//QColor::NameFormat
type QColor__NameFormat int64

const (
	QColor__HexRgb  QColor__NameFormat = QColor__NameFormat(0)
	QColor__HexArgb QColor__NameFormat = QColor__NameFormat(1)
)

func QColor_FromHsv(h int, s int, v int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsv(h int, s int, v int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgb2(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgb2(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) SetRgbF(r float64, g float64, b float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgbF(ptr.Pointer(), C.double(r), C.double(g), C.double(b), C.double(a))
	}
}

func (ptr *QColor) ConvertTo(colorSpec QColor__Spec) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ConvertTo(ptr.Pointer(), C.longlong(colorSpec)))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func QColor_FromCmyk(c int, m int, y int, k int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromCmyk(c int, m int, y int, k int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHsl(h int, s int, l int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsl(h int, s int, l int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHslF(h float64, s float64, l float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHslF(h float64, s float64, l float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgba642(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba642(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgba642(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba642(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgba64(r uint16, g uint16, b uint16, a uint16) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba64(C.ushort(r), C.ushort(g), C.ushort(b), C.ushort(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgba64(r uint16, g uint16, b uint16, a uint16) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba64(C.ushort(r), C.ushort(g), C.ushort(b), C.ushort(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor() *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor())
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor11(other QColor_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor11(PointerFromQColor(other)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor8(name core.QLatin1String_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor8(core.PointerFromQLatin1String(name)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor5(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor5(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor2(color core.Qt__GlobalColor) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor2(C.longlong(color)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor10(color QColor_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor10(PointerFromQColor(color)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor6(name string) *QColor {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor6(nameC))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor7(name string) *QColor {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor7(nameC))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor3(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor3(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_ColorNames() []string {
	return strings.Split(cGoUnpackString(C.QColor_QColor_ColorNames()), "|")
}

func (ptr *QColor) ColorNames() []string {
	return strings.Split(cGoUnpackString(C.QColor_QColor_ColorNames()), "|")
}

func QColor_IsValidColor2(name core.QLatin1String_ITF) bool {
	return C.QColor_QColor_IsValidColor2(core.PointerFromQLatin1String(name)) != 0
}

func (ptr *QColor) IsValidColor2(name core.QLatin1String_ITF) bool {
	return C.QColor_QColor_IsValidColor2(core.PointerFromQLatin1String(name)) != 0
}

func QColor_IsValidColor(name string) bool {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	return C.QColor_QColor_IsValidColor(nameC) != 0
}

func (ptr *QColor) IsValidColor(name string) bool {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	return C.QColor_QColor_IsValidColor(nameC) != 0
}

func (ptr *QColor) GetCmyk(c int, m int, y int, k int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetCmyk(ptr.Pointer(), C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetCmykF(c float64, m float64, y float64, k float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetCmykF(ptr.Pointer(), C.double(c), C.double(m), C.double(y), C.double(k), C.double(a))
	}
}

func (ptr *QColor) SetAlpha(alpha int) {
	if ptr.Pointer() != nil {
		C.QColor_SetAlpha(ptr.Pointer(), C.int(int32(alpha)))
	}
}

func (ptr *QColor) SetAlphaF(alpha float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetAlphaF(ptr.Pointer(), C.double(alpha))
	}
}

func (ptr *QColor) SetBlue(blue int) {
	if ptr.Pointer() != nil {
		C.QColor_SetBlue(ptr.Pointer(), C.int(int32(blue)))
	}
}

func (ptr *QColor) SetBlueF(blue float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetBlueF(ptr.Pointer(), C.double(blue))
	}
}

func (ptr *QColor) SetCmyk(c int, m int, y int, k int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetCmyk(ptr.Pointer(), C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetCmykF(c float64, m float64, y float64, k float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetCmykF(ptr.Pointer(), C.double(c), C.double(m), C.double(y), C.double(k), C.double(a))
	}
}

func (ptr *QColor) SetGreen(green int) {
	if ptr.Pointer() != nil {
		C.QColor_SetGreen(ptr.Pointer(), C.int(int32(green)))
	}
}

func (ptr *QColor) SetGreenF(green float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetGreenF(ptr.Pointer(), C.double(green))
	}
}

func (ptr *QColor) SetHsl(h int, s int, l int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsl(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetHslF(h float64, s float64, l float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetHslF(ptr.Pointer(), C.double(h), C.double(s), C.double(l), C.double(a))
	}
}

func (ptr *QColor) SetHsv(h int, s int, v int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsv(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetHsvF(h float64, s float64, v float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsvF(ptr.Pointer(), C.double(h), C.double(s), C.double(v), C.double(a))
	}
}

func (ptr *QColor) SetNamedColor2(name core.QLatin1String_ITF) {
	if ptr.Pointer() != nil {
		C.QColor_SetNamedColor2(ptr.Pointer(), core.PointerFromQLatin1String(name))
	}
}

func (ptr *QColor) SetNamedColor(name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QColor_SetNamedColor(ptr.Pointer(), nameC)
	}
}

func (ptr *QColor) SetRed(red int) {
	if ptr.Pointer() != nil {
		C.QColor_SetRed(ptr.Pointer(), C.int(int32(red)))
	}
}

func (ptr *QColor) SetRedF(red float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetRedF(ptr.Pointer(), C.double(red))
	}
}

func (ptr *QColor) SetRgb(r int, g int, b int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgb(ptr.Pointer(), C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetRgba64(rgba QRgba64_ITF) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgba64(ptr.Pointer(), PointerFromQRgba64(rgba))
	}
}

func (ptr *QColor) Darker(factor int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_Darker(ptr.Pointer(), C.int(int32(factor))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) Lighter(factor int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_Lighter(ptr.Pointer(), C.int(int32(factor))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToCmyk() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToCmyk(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToHsl() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToHsl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToHsv() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToHsv(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToRgb() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToRgb(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QColor_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QColor) Name2(format QColor__NameFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QColor_Name2(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QColor) Spec() QColor__Spec {
	if ptr.Pointer() != nil {
		return QColor__Spec(C.QColor_Spec(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QColor_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QColor) Alpha() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Alpha(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Black() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Black(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Blue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Blue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Cyan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Cyan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Green() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Green(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HslHue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HslHue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HslSaturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HslSaturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HsvHue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HsvHue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HsvSaturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HsvSaturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Hue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Hue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Lightness() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Lightness(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Magenta() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Magenta(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Red() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Red(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Saturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Saturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Value() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Value(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) Yellow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Yellow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) AlphaF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_AlphaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) BlackF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_BlackF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) BlueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_BlueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) CyanF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_CyanF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) GreenF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_GreenF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslHueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HslHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslSaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HslSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvHueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvSaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) LightnessF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_LightnessF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) MagentaF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_MagentaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) RedF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_RedF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) SaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_SaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) ValueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_ValueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) YellowF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_YellowF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) GetHsl(h int, s int, l int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsl(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetHslF(h float64, s float64, l float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetHslF(ptr.Pointer(), C.double(h), C.double(s), C.double(l), C.double(a))
	}
}

func (ptr *QColor) GetHsv(h int, s int, v int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsv(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetHsvF(h float64, s float64, v float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsvF(ptr.Pointer(), C.double(h), C.double(s), C.double(v), C.double(a))
	}
}

func (ptr *QColor) GetRgb(r int, g int, b int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetRgb(ptr.Pointer(), C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetRgbF(r float64, g float64, b float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetRgbF(ptr.Pointer(), C.double(r), C.double(g), C.double(b), C.double(a))
	}
}

func (ptr *QColor) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QColor_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QConicalGradient struct {
	QGradient
}

type QConicalGradient_ITF interface {
	QGradient_ITF
	QConicalGradient_PTR() *QConicalGradient
}

func (ptr *QConicalGradient) QConicalGradient_PTR() *QConicalGradient {
	return ptr
}

func (ptr *QConicalGradient) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func (ptr *QConicalGradient) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGradient_PTR().SetPointer(p)
	}
}

func PointerFromQConicalGradient(ptr QConicalGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QConicalGradient_PTR().Pointer()
	}
	return nil
}

func NewQConicalGradientFromPointer(ptr unsafe.Pointer) *QConicalGradient {
	var n = new(QConicalGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QConicalGradient) DestroyQConicalGradient() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQConicalGradient() *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient())
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func NewQConicalGradient2(center core.QPointF_ITF, angle float64) *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient2(core.PointerFromQPointF(center), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func NewQConicalGradient3(cx float64, cy float64, angle float64) *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient3(C.double(cx), C.double(cy), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func (ptr *QConicalGradient) SetAngle(angle float64) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetAngle(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QConicalGradient) SetCenter(center core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QConicalGradient) SetCenter2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QConicalGradient) Center() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QConicalGradient_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QConicalGradient) Angle() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QConicalGradient_Angle(ptr.Pointer()))
	}
	return 0
}

type QContextMenuEvent struct {
	QInputEvent
}

type QContextMenuEvent_ITF interface {
	QInputEvent_ITF
	QContextMenuEvent_PTR() *QContextMenuEvent
}

func (ptr *QContextMenuEvent) QContextMenuEvent_PTR() *QContextMenuEvent {
	return ptr
}

func (ptr *QContextMenuEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QContextMenuEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQContextMenuEvent(ptr QContextMenuEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QContextMenuEvent_PTR().Pointer()
	}
	return nil
}

func NewQContextMenuEventFromPointer(ptr unsafe.Pointer) *QContextMenuEvent {
	var n = new(QContextMenuEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QContextMenuEvent) DestroyQContextMenuEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QContextMenuEvent__Reason
//QContextMenuEvent::Reason
type QContextMenuEvent__Reason int64

const (
	QContextMenuEvent__Mouse    QContextMenuEvent__Reason = QContextMenuEvent__Reason(0)
	QContextMenuEvent__Keyboard QContextMenuEvent__Reason = QContextMenuEvent__Reason(1)
	QContextMenuEvent__Other    QContextMenuEvent__Reason = QContextMenuEvent__Reason(2)
)

func NewQContextMenuEvent3(reason QContextMenuEvent__Reason, pos core.QPoint_ITF) *QContextMenuEvent {
	return NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent3(C.longlong(reason), core.PointerFromQPoint(pos)))
}

func NewQContextMenuEvent2(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QContextMenuEvent {
	return NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent2(C.longlong(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
}

func NewQContextMenuEvent(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF, modifiers core.Qt__KeyboardModifier) *QContextMenuEvent {
	return NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent(C.longlong(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos), C.longlong(modifiers)))
}

func (ptr *QContextMenuEvent) Reason() QContextMenuEvent__Reason {
	if ptr.Pointer() != nil {
		return QContextMenuEvent__Reason(C.QContextMenuEvent_Reason(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) Gp() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QContextMenuEvent_Gp(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QContextMenuEvent) SetGp(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QContextMenuEvent_SetGp(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QContextMenuEvent) P() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QContextMenuEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QContextMenuEvent) SetP(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QContextMenuEvent_SetP(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

type QCss struct {
	ptr unsafe.Pointer
}

type QCss_ITF interface {
	QCss_PTR() *QCss
}

func (ptr *QCss) QCss_PTR() *QCss {
	return ptr
}

func (ptr *QCss) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QCss) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQCss(ptr QCss_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCss_PTR().Pointer()
	}
	return nil
}

func NewQCssFromPointer(ptr unsafe.Pointer) *QCss {
	var n = new(QCss)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCss) DestroyQCss() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QCursor struct {
	ptr unsafe.Pointer
}

type QCursor_ITF interface {
	QCursor_PTR() *QCursor
}

func (ptr *QCursor) QCursor_PTR() *QCursor {
	return ptr
}

func (ptr *QCursor) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QCursor) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQCursor(ptr QCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCursor_PTR().Pointer()
	}
	return nil
}

func NewQCursorFromPointer(ptr unsafe.Pointer) *QCursor {
	var n = new(QCursor)
	n.SetPointer(ptr)
	return n
}
func NewQCursor() *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor())
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor6(other QCursor_ITF) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor6(PointerFromQCursor(other)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor2(shape core.Qt__CursorShape) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor2(C.longlong(shape)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor3(bitmap QBitmap_ITF, mask QBitmap_ITF, hotX int, hotY int) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor3(PointerFromQBitmap(bitmap), PointerFromQBitmap(mask), C.int(int32(hotX)), C.int(int32(hotY))))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor5(c QCursor_ITF) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor5(PointerFromQCursor(c)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor4(pixmap QPixmap_ITF, hotX int, hotY int) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor4(PointerFromQPixmap(pixmap), C.int(int32(hotX)), C.int(int32(hotY))))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func QCursor_Pos() *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func (ptr *QCursor) Pos() *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func QCursor_Pos2(screen QScreen_ITF) *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func (ptr *QCursor) Pos2(screen QScreen_ITF) *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func QCursor_SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func QCursor_SetPos2(screen QScreen_ITF, x int, y int) {
	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(int32(x)), C.int(int32(y)))
}

func (ptr *QCursor) SetPos2(screen QScreen_ITF, x int, y int) {
	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(int32(x)), C.int(int32(y)))
}

func QCursor_SetPos3(p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos3(p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func QCursor_SetPos(x int, y int) {
	C.QCursor_QCursor_SetPos(C.int(int32(x)), C.int(int32(y)))
}

func (ptr *QCursor) SetPos(x int, y int) {
	C.QCursor_QCursor_SetPos(C.int(int32(x)), C.int(int32(y)))
}

func (ptr *QCursor) SetShape(shape core.Qt__CursorShape) {
	if ptr.Pointer() != nil {
		C.QCursor_SetShape(ptr.Pointer(), C.longlong(shape))
	}
}

func (ptr *QCursor) Swap(other QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QCursor_Swap(ptr.Pointer(), PointerFromQCursor(other))
	}
}

func (ptr *QCursor) DestroyQCursor() {
	if ptr.Pointer() != nil {
		C.QCursor_DestroyQCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QCursor) Pixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QCursor_Pixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QCursor) HotSpot() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QCursor_HotSpot(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QCursor) Shape() core.Qt__CursorShape {
	if ptr.Pointer() != nil {
		return core.Qt__CursorShape(C.QCursor_Shape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCursor) Bitmap() *QBitmap {
	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Bitmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) Mask() *QBitmap {
	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Mask(ptr.Pointer()))
	}
	return nil
}

type QDesktopServices struct {
	ptr unsafe.Pointer
}

type QDesktopServices_ITF interface {
	QDesktopServices_PTR() *QDesktopServices
}

func (ptr *QDesktopServices) QDesktopServices_PTR() *QDesktopServices {
	return ptr
}

func (ptr *QDesktopServices) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QDesktopServices) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQDesktopServices(ptr QDesktopServices_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDesktopServices_PTR().Pointer()
	}
	return nil
}

func NewQDesktopServicesFromPointer(ptr unsafe.Pointer) *QDesktopServices {
	var n = new(QDesktopServices)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDesktopServices) DestroyQDesktopServices() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QDesktopServices_OpenUrl(url core.QUrl_ITF) bool {
	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func (ptr *QDesktopServices) OpenUrl(url core.QUrl_ITF) bool {
	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func QDesktopServices_SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	var schemeC *C.char
	if scheme != "" {
		schemeC = C.CString(scheme)
		defer C.free(unsafe.Pointer(schemeC))
	}
	var methodC *C.char
	if method != "" {
		methodC = C.CString(method)
		defer C.free(unsafe.Pointer(methodC))
	}
	C.QDesktopServices_QDesktopServices_SetUrlHandler(schemeC, core.PointerFromQObject(receiver), methodC)
}

func (ptr *QDesktopServices) SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	var schemeC *C.char
	if scheme != "" {
		schemeC = C.CString(scheme)
		defer C.free(unsafe.Pointer(schemeC))
	}
	var methodC *C.char
	if method != "" {
		methodC = C.CString(method)
		defer C.free(unsafe.Pointer(methodC))
	}
	C.QDesktopServices_QDesktopServices_SetUrlHandler(schemeC, core.PointerFromQObject(receiver), methodC)
}

func QDesktopServices_UnsetUrlHandler(scheme string) {
	var schemeC *C.char
	if scheme != "" {
		schemeC = C.CString(scheme)
		defer C.free(unsafe.Pointer(schemeC))
	}
	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(schemeC)
}

func (ptr *QDesktopServices) UnsetUrlHandler(scheme string) {
	var schemeC *C.char
	if scheme != "" {
		schemeC = C.CString(scheme)
		defer C.free(unsafe.Pointer(schemeC))
	}
	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(schemeC)
}

type QDoubleValidator struct {
	QValidator
}

type QDoubleValidator_ITF interface {
	QValidator_ITF
	QDoubleValidator_PTR() *QDoubleValidator
}

func (ptr *QDoubleValidator) QDoubleValidator_PTR() *QDoubleValidator {
	return ptr
}

func (ptr *QDoubleValidator) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func (ptr *QDoubleValidator) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QValidator_PTR().SetPointer(p)
	}
}

func PointerFromQDoubleValidator(ptr QDoubleValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDoubleValidator_PTR().Pointer()
	}
	return nil
}

func NewQDoubleValidatorFromPointer(ptr unsafe.Pointer) *QDoubleValidator {
	var n = new(QDoubleValidator)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QDoubleValidator__Notation
//QDoubleValidator::Notation
type QDoubleValidator__Notation int64

const (
	QDoubleValidator__StandardNotation   QDoubleValidator__Notation = QDoubleValidator__Notation(0)
	QDoubleValidator__ScientificNotation QDoubleValidator__Notation = QDoubleValidator__Notation(1)
)

func NewQDoubleValidator(parent core.QObject_ITF) *QDoubleValidator {
	var tmpValue = NewQDoubleValidatorFromPointer(C.QDoubleValidator_NewQDoubleValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQDoubleValidator2(bottom float64, top float64, decimals int, parent core.QObject_ITF) *QDoubleValidator {
	var tmpValue = NewQDoubleValidatorFromPointer(C.QDoubleValidator_NewQDoubleValidator2(C.double(bottom), C.double(top), C.int(int32(decimals)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QDoubleValidator) SetBottom(vdo float64) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetBottom(ptr.Pointer(), C.double(vdo))
	}
}

func (ptr *QDoubleValidator) SetDecimals(vin int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetDecimals(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QDoubleValidator) SetNotation(vno QDoubleValidator__Notation) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetNotation(ptr.Pointer(), C.longlong(vno))
	}
}

//export callbackQDoubleValidator_SetRange
func callbackQDoubleValidator_SetRange(ptr unsafe.Pointer, minimum C.double, maximum C.double, decimals C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setRange"); signal != nil {
		signal.(func(float64, float64, int))(float64(minimum), float64(maximum), int(int32(decimals)))
	} else {
		NewQDoubleValidatorFromPointer(ptr).SetRangeDefault(float64(minimum), float64(maximum), int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) ConnectSetRange(f func(minimum float64, maximum float64, decimals int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setRange"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRange", func(minimum float64, maximum float64, decimals int) {
				signal.(func(float64, float64, int))(minimum, maximum, decimals)
				f(minimum, maximum, decimals)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRange", f)
		}
	}
}

func (ptr *QDoubleValidator) DisconnectSetRange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setRange")
	}
}

func (ptr *QDoubleValidator) SetRange(minimum float64, maximum float64, decimals int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetRange(ptr.Pointer(), C.double(minimum), C.double(maximum), C.int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) SetRangeDefault(minimum float64, maximum float64, decimals int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetRangeDefault(ptr.Pointer(), C.double(minimum), C.double(maximum), C.int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) SetTop(vdo float64) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetTop(ptr.Pointer(), C.double(vdo))
	}
}

func (ptr *QDoubleValidator) DestroyQDoubleValidator() {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DestroyQDoubleValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QDoubleValidator) Notation() QDoubleValidator__Notation {
	if ptr.Pointer() != nil {
		return QDoubleValidator__Notation(C.QDoubleValidator_Notation(ptr.Pointer()))
	}
	return 0
}

//export callbackQDoubleValidator_Validate
func callbackQDoubleValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQDoubleValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QDoubleValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "validate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", func(input string, pos int) QValidator__State {
				signal.(func(string, int) QValidator__State)(input, pos)
				return f(input, pos)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", f)
		}
	}
}

func (ptr *QDoubleValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "validate")
	}
}

func (ptr *QDoubleValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QDoubleValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QDoubleValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QDoubleValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QDoubleValidator) Bottom() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QDoubleValidator_Bottom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) Top() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QDoubleValidator_Top(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) Decimals() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDoubleValidator_Decimals(ptr.Pointer())))
	}
	return 0
}

type QDrag struct {
	core.QObject
}

type QDrag_ITF interface {
	core.QObject_ITF
	QDrag_PTR() *QDrag
}

func (ptr *QDrag) QDrag_PTR() *QDrag {
	return ptr
}

func (ptr *QDrag) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QDrag) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQDrag(ptr QDrag_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDrag_PTR().Pointer()
	}
	return nil
}

func NewQDragFromPointer(ptr unsafe.Pointer) *QDrag {
	var n = new(QDrag)
	n.SetPointer(ptr)
	return n
}
func NewQDrag(dragSource core.QObject_ITF) *QDrag {
	var tmpValue = NewQDragFromPointer(C.QDrag_NewQDrag(core.PointerFromQObject(dragSource)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QDrag) Exec(supportedActions core.Qt__DropAction) core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec(ptr.Pointer(), C.longlong(supportedActions)))
	}
	return 0
}

func (ptr *QDrag) Exec2(supportedActions core.Qt__DropAction, defaultDropAction core.Qt__DropAction) core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec2(ptr.Pointer(), C.longlong(supportedActions), C.longlong(defaultDropAction)))
	}
	return 0
}

//export callbackQDrag_ActionChanged
func callbackQDrag_ActionChanged(ptr unsafe.Pointer, action C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "actionChanged"); signal != nil {
		signal.(func(core.Qt__DropAction))(core.Qt__DropAction(action))
	}

}

func (ptr *QDrag) ConnectActionChanged(f func(action core.Qt__DropAction)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "actionChanged") {
			C.QDrag_ConnectActionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "actionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actionChanged", func(action core.Qt__DropAction) {
				signal.(func(core.Qt__DropAction))(action)
				f(action)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actionChanged", f)
		}
	}
}

func (ptr *QDrag) DisconnectActionChanged() {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectActionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "actionChanged")
	}
}

func (ptr *QDrag) ActionChanged(action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDrag_ActionChanged(ptr.Pointer(), C.longlong(action))
	}
}

func QDrag_Cancel() {
	C.QDrag_QDrag_Cancel()
}

func (ptr *QDrag) Cancel() {
	C.QDrag_QDrag_Cancel()
}

func (ptr *QDrag) SetDragCursor(cursor QPixmap_ITF, action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDrag_SetDragCursor(ptr.Pointer(), PointerFromQPixmap(cursor), C.longlong(action))
	}
}

func (ptr *QDrag) SetHotSpot(hotspot core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetHotSpot(ptr.Pointer(), core.PointerFromQPoint(hotspot))
	}
}

func (ptr *QDrag) SetMimeData(data core.QMimeData_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(data))
	}
}

func (ptr *QDrag) SetPixmap(pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

//export callbackQDrag_TargetChanged
func callbackQDrag_TargetChanged(ptr unsafe.Pointer, newTarget unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "targetChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(newTarget))
	}

}

func (ptr *QDrag) ConnectTargetChanged(f func(newTarget *core.QObject)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "targetChanged") {
			C.QDrag_ConnectTargetChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "targetChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "targetChanged", func(newTarget *core.QObject) {
				signal.(func(*core.QObject))(newTarget)
				f(newTarget)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "targetChanged", f)
		}
	}
}

func (ptr *QDrag) DisconnectTargetChanged() {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectTargetChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "targetChanged")
	}
}

func (ptr *QDrag) TargetChanged(newTarget core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_TargetChanged(ptr.Pointer(), core.PointerFromQObject(newTarget))
	}
}

func (ptr *QDrag) DestroyQDrag() {
	if ptr.Pointer() != nil {
		C.QDrag_DestroyQDrag(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QDrag) MimeData() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDrag_MimeData(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) Source() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag_Source(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) Target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag_Target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) DragCursor(action core.Qt__DropAction) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QDrag_DragCursor(ptr.Pointer(), C.longlong(action)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) Pixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QDrag_Pixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) HotSpot() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QDrag_HotSpot(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) DefaultAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_DefaultAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) SupportedActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_SupportedActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QDrag___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QDrag) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QDrag___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QDrag) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QDrag) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QDrag___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QDrag) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QDrag) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QDrag___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QDrag) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QDrag) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QDrag___findChildren_newList(ptr.Pointer()))
}

func (ptr *QDrag) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QDrag) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QDrag___children_newList(ptr.Pointer()))
}

//export callbackQDrag_Event
func callbackQDrag_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QDrag) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQDrag_EventFilter
func callbackQDrag_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QDrag) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQDrag_ChildEvent
func callbackQDrag_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QDrag) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQDrag_ConnectNotify
func callbackQDrag_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_CustomEvent
func callbackQDrag_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QDrag) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQDrag_DeleteLater
func callbackQDrag_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQDragFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QDrag) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QDrag_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQDrag_Destroyed
func callbackQDrag_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQDrag_DisconnectNotify
func callbackQDrag_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_ObjectNameChanged
func callbackQDrag_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQDrag_TimerEvent
func callbackQDrag_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QDrag) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQDrag_MetaObject
func callbackQDrag_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQDragFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QDrag) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDrag_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QDragEnterEvent struct {
	QDragMoveEvent
}

type QDragEnterEvent_ITF interface {
	QDragMoveEvent_ITF
	QDragEnterEvent_PTR() *QDragEnterEvent
}

func (ptr *QDragEnterEvent) QDragEnterEvent_PTR() *QDragEnterEvent {
	return ptr
}

func (ptr *QDragEnterEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QDragEnterEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QDragMoveEvent_PTR().SetPointer(p)
	}
}

func PointerFromQDragEnterEvent(ptr QDragEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragEnterEventFromPointer(ptr unsafe.Pointer) *QDragEnterEvent {
	var n = new(QDragEnterEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDragEnterEvent) DestroyQDragEnterEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQDragEnterEvent(point core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QDragEnterEvent {
	return NewQDragEnterEventFromPointer(C.QDragEnterEvent_NewQDragEnterEvent(core.PointerFromQPoint(point), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers)))
}

type QDragLeaveEvent struct {
	core.QEvent
}

type QDragLeaveEvent_ITF interface {
	core.QEvent_ITF
	QDragLeaveEvent_PTR() *QDragLeaveEvent
}

func (ptr *QDragLeaveEvent) QDragLeaveEvent_PTR() *QDragLeaveEvent {
	return ptr
}

func (ptr *QDragLeaveEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QDragLeaveEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQDragLeaveEvent(ptr QDragLeaveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragLeaveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragLeaveEventFromPointer(ptr unsafe.Pointer) *QDragLeaveEvent {
	var n = new(QDragLeaveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDragLeaveEvent) DestroyQDragLeaveEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQDragLeaveEvent() *QDragLeaveEvent {
	return NewQDragLeaveEventFromPointer(C.QDragLeaveEvent_NewQDragLeaveEvent())
}

type QDragMoveEvent struct {
	QDropEvent
}

type QDragMoveEvent_ITF interface {
	QDropEvent_ITF
	QDragMoveEvent_PTR() *QDragMoveEvent
}

func (ptr *QDragMoveEvent) QDragMoveEvent_PTR() *QDragMoveEvent {
	return ptr
}

func (ptr *QDragMoveEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QDropEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QDragMoveEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QDropEvent_PTR().SetPointer(p)
	}
}

func PointerFromQDragMoveEvent(ptr QDragMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragMoveEventFromPointer(ptr unsafe.Pointer) *QDragMoveEvent {
	var n = new(QDragMoveEvent)
	n.SetPointer(ptr)
	return n
}
func NewQDragMoveEvent(pos core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDragMoveEvent {
	return NewQDragMoveEventFromPointer(C.QDragMoveEvent_NewQDragMoveEvent(core.PointerFromQPoint(pos), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers), C.longlong(ty)))
}

func (ptr *QDragMoveEvent) Accept(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Accept(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) Ignore(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Ignore(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) DestroyQDragMoveEvent() {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_DestroyQDragMoveEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QDragMoveEvent) AnswerRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QDragMoveEvent_AnswerRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDragMoveEvent) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QDragMoveEvent_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDragMoveEvent) SetRect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_SetRect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

type QDropEvent struct {
	core.QEvent
}

type QDropEvent_ITF interface {
	core.QEvent_ITF
	QDropEvent_PTR() *QDropEvent
}

func (ptr *QDropEvent) QDropEvent_PTR() *QDropEvent {
	return ptr
}

func (ptr *QDropEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QDropEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQDropEvent(ptr QDropEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDropEvent_PTR().Pointer()
	}
	return nil
}

func NewQDropEventFromPointer(ptr unsafe.Pointer) *QDropEvent {
	var n = new(QDropEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDropEvent) DestroyQDropEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQDropEvent(pos core.QPointF_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDropEvent {
	return NewQDropEventFromPointer(C.QDropEvent_NewQDropEvent(core.PointerFromQPointF(pos), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers), C.longlong(ty)))
}

func (ptr *QDropEvent) AcceptProposedAction() {
	if ptr.Pointer() != nil {
		C.QDropEvent_AcceptProposedAction(ptr.Pointer())
	}
}

func (ptr *QDropEvent) SetDropAction(action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDropAction(ptr.Pointer(), C.longlong(action))
	}
}

func (ptr *QDropEvent) Source() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDropEvent_Source(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QDropEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) DropAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_DropAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) ProposedAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_ProposedAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) PossibleActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_PossibleActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) KeyboardModifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QDropEvent_KeyboardModifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) MouseButtons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QDropEvent_MouseButtons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) MimeData() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDropEvent_MimeData(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QDropEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDropEvent) Act() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Act(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetAct(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetAct(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Default_action() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Default_action(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetDefault_action(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDefault_action(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Drop_action() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Drop_action(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetDrop_action(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDrop_action(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Mdata() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDropEvent_Mdata(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) ModState() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QDropEvent_ModState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetModState(vqt core.Qt__KeyboardModifier) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetModState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QDropEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) P() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QDropEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) SetP(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetP(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

type QEnterEvent struct {
	core.QEvent
}

type QEnterEvent_ITF interface {
	core.QEvent_ITF
	QEnterEvent_PTR() *QEnterEvent
}

func (ptr *QEnterEvent) QEnterEvent_PTR() *QEnterEvent {
	return ptr
}

func (ptr *QEnterEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QEnterEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQEnterEvent(ptr QEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQEnterEventFromPointer(ptr unsafe.Pointer) *QEnterEvent {
	var n = new(QEnterEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QEnterEvent) DestroyQEnterEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQEnterEvent(localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF) *QEnterEvent {
	return NewQEnterEventFromPointer(C.QEnterEvent_NewQEnterEvent(core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos)))
}

func (ptr *QEnterEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QEnterEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QEnterEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QEnterEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QEnterEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_Y(ptr.Pointer())))
	}
	return 0
}

type QExposeEvent struct {
	core.QEvent
}

type QExposeEvent_ITF interface {
	core.QEvent_ITF
	QExposeEvent_PTR() *QExposeEvent
}

func (ptr *QExposeEvent) QExposeEvent_PTR() *QExposeEvent {
	return ptr
}

func (ptr *QExposeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QExposeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQExposeEvent(ptr QExposeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QExposeEvent_PTR().Pointer()
	}
	return nil
}

func NewQExposeEventFromPointer(ptr unsafe.Pointer) *QExposeEvent {
	var n = new(QExposeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QExposeEvent) DestroyQExposeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQExposeEvent(exposeRegion QRegion_ITF) *QExposeEvent {
	return NewQExposeEventFromPointer(C.QExposeEvent_NewQExposeEvent(PointerFromQRegion(exposeRegion)))
}

func (ptr *QExposeEvent) Region() *QRegion {
	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QExposeEvent_Region(ptr.Pointer()))
	}
	return nil
}

func (ptr *QExposeEvent) Rgn() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QExposeEvent_Rgn(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QExposeEvent) SetRgn(vqr QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QExposeEvent_SetRgn(ptr.Pointer(), PointerFromQRegion(vqr))
	}
}

type QFileOpenEvent struct {
	core.QEvent
}

type QFileOpenEvent_ITF interface {
	core.QEvent_ITF
	QFileOpenEvent_PTR() *QFileOpenEvent
}

func (ptr *QFileOpenEvent) QFileOpenEvent_PTR() *QFileOpenEvent {
	return ptr
}

func (ptr *QFileOpenEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QFileOpenEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQFileOpenEvent(ptr QFileOpenEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileOpenEvent_PTR().Pointer()
	}
	return nil
}

func NewQFileOpenEventFromPointer(ptr unsafe.Pointer) *QFileOpenEvent {
	var n = new(QFileOpenEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFileOpenEvent) DestroyQFileOpenEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFileOpenEvent) File() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileOpenEvent_File(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileOpenEvent) Url() *core.QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QFileOpenEvent_Url(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QFileOpenEvent) OpenFile(file core.QFile_ITF, flags core.QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFileOpenEvent_OpenFile(ptr.Pointer(), core.PointerFromQFile(file), C.longlong(flags)) != 0
	}
	return false
}

type QFocusEvent struct {
	core.QEvent
}

type QFocusEvent_ITF interface {
	core.QEvent_ITF
	QFocusEvent_PTR() *QFocusEvent
}

func (ptr *QFocusEvent) QFocusEvent_PTR() *QFocusEvent {
	return ptr
}

func (ptr *QFocusEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QFocusEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQFocusEvent(ptr QFocusEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFocusEvent_PTR().Pointer()
	}
	return nil
}

func NewQFocusEventFromPointer(ptr unsafe.Pointer) *QFocusEvent {
	var n = new(QFocusEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFocusEvent) DestroyQFocusEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQFocusEvent(ty core.QEvent__Type, reason core.Qt__FocusReason) *QFocusEvent {
	return NewQFocusEventFromPointer(C.QFocusEvent_NewQFocusEvent(C.longlong(ty), C.longlong(reason)))
}

func (ptr *QFocusEvent) Reason() core.Qt__FocusReason {
	if ptr.Pointer() != nil {
		return core.Qt__FocusReason(C.QFocusEvent_Reason(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFocusEvent) GotFocus() bool {
	if ptr.Pointer() != nil {
		return C.QFocusEvent_GotFocus(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFocusEvent) LostFocus() bool {
	if ptr.Pointer() != nil {
		return C.QFocusEvent_LostFocus(ptr.Pointer()) != 0
	}
	return false
}

type QFont struct {
	ptr unsafe.Pointer
}

type QFont_ITF interface {
	QFont_PTR() *QFont
}

func (ptr *QFont) QFont_PTR() *QFont {
	return ptr
}

func (ptr *QFont) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QFont) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQFont(ptr QFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFont_PTR().Pointer()
	}
	return nil
}

func NewQFontFromPointer(ptr unsafe.Pointer) *QFont {
	var n = new(QFont)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QFont__Capitalization
//QFont::Capitalization
type QFont__Capitalization int64

const (
	QFont__MixedCase    QFont__Capitalization = QFont__Capitalization(0)
	QFont__AllUppercase QFont__Capitalization = QFont__Capitalization(1)
	QFont__AllLowercase QFont__Capitalization = QFont__Capitalization(2)
	QFont__SmallCaps    QFont__Capitalization = QFont__Capitalization(3)
	QFont__Capitalize   QFont__Capitalization = QFont__Capitalization(4)
)

//go:generate stringer -type=QFont__HintingPreference
//QFont::HintingPreference
type QFont__HintingPreference int64

const (
	QFont__PreferDefaultHinting  QFont__HintingPreference = QFont__HintingPreference(0)
	QFont__PreferNoHinting       QFont__HintingPreference = QFont__HintingPreference(1)
	QFont__PreferVerticalHinting QFont__HintingPreference = QFont__HintingPreference(2)
	QFont__PreferFullHinting     QFont__HintingPreference = QFont__HintingPreference(3)
)

//go:generate stringer -type=QFont__SpacingType
//QFont::SpacingType
type QFont__SpacingType int64

const (
	QFont__PercentageSpacing QFont__SpacingType = QFont__SpacingType(0)
	QFont__AbsoluteSpacing   QFont__SpacingType = QFont__SpacingType(1)
)

//go:generate stringer -type=QFont__Stretch
//QFont::Stretch
type QFont__Stretch int64

const (
	QFont__AnyStretch     QFont__Stretch = QFont__Stretch(0)
	QFont__UltraCondensed QFont__Stretch = QFont__Stretch(50)
	QFont__ExtraCondensed QFont__Stretch = QFont__Stretch(62)
	QFont__Condensed      QFont__Stretch = QFont__Stretch(75)
	QFont__SemiCondensed  QFont__Stretch = QFont__Stretch(87)
	QFont__Unstretched    QFont__Stretch = QFont__Stretch(100)
	QFont__SemiExpanded   QFont__Stretch = QFont__Stretch(112)
	QFont__Expanded       QFont__Stretch = QFont__Stretch(125)
	QFont__ExtraExpanded  QFont__Stretch = QFont__Stretch(150)
	QFont__UltraExpanded  QFont__Stretch = QFont__Stretch(200)
)

//go:generate stringer -type=QFont__Style
//QFont::Style
type QFont__Style int64

var (
	QFont__StyleNormal  QFont__Style = QFont__Style(0)
	QFont__StyleItalic  QFont__Style = QFont__Style(1)
	QFont__StyleOblique QFont__Style = QFont__Style(2)
)

//go:generate stringer -type=QFont__StyleHint
//QFont::StyleHint
type QFont__StyleHint int64

var (
	QFont__Helvetica  QFont__StyleHint = QFont__StyleHint(0)
	QFont__SansSerif  QFont__StyleHint = QFont__StyleHint(QFont__Helvetica)
	QFont__Times      QFont__StyleHint = QFont__StyleHint(C.QFont_Times_Type())
	QFont__Serif      QFont__StyleHint = QFont__StyleHint(QFont__Times)
	QFont__Courier    QFont__StyleHint = QFont__StyleHint(C.QFont_Courier_Type())
	QFont__TypeWriter QFont__StyleHint = QFont__StyleHint(QFont__Courier)
	QFont__OldEnglish QFont__StyleHint = QFont__StyleHint(C.QFont_OldEnglish_Type())
	QFont__Decorative QFont__StyleHint = QFont__StyleHint(QFont__OldEnglish)
	QFont__System     QFont__StyleHint = QFont__StyleHint(C.QFont_System_Type())
	QFont__AnyStyle   QFont__StyleHint = QFont__StyleHint(C.QFont_AnyStyle_Type())
	QFont__Cursive    QFont__StyleHint = QFont__StyleHint(C.QFont_Cursive_Type())
	QFont__Monospace  QFont__StyleHint = QFont__StyleHint(C.QFont_Monospace_Type())
	QFont__Fantasy    QFont__StyleHint = QFont__StyleHint(C.QFont_Fantasy_Type())
)

//go:generate stringer -type=QFont__StyleStrategy
//QFont::StyleStrategy
type QFont__StyleStrategy int64

var (
	QFont__PreferDefault       QFont__StyleStrategy = QFont__StyleStrategy(0x0001)
	QFont__PreferBitmap        QFont__StyleStrategy = QFont__StyleStrategy(0x0002)
	QFont__PreferDevice        QFont__StyleStrategy = QFont__StyleStrategy(0x0004)
	QFont__PreferOutline       QFont__StyleStrategy = QFont__StyleStrategy(0x0008)
	QFont__ForceOutline        QFont__StyleStrategy = QFont__StyleStrategy(0x0010)
	QFont__PreferMatch         QFont__StyleStrategy = QFont__StyleStrategy(0x0020)
	QFont__PreferQuality       QFont__StyleStrategy = QFont__StyleStrategy(0x0040)
	QFont__PreferAntialias     QFont__StyleStrategy = QFont__StyleStrategy(0x0080)
	QFont__NoAntialias         QFont__StyleStrategy = QFont__StyleStrategy(0x0100)
	QFont__OpenGLCompatible    QFont__StyleStrategy = QFont__StyleStrategy(0x0200)
	QFont__ForceIntegerMetrics QFont__StyleStrategy = QFont__StyleStrategy(0x0400)
	QFont__NoSubpixelAntialias QFont__StyleStrategy = QFont__StyleStrategy(0x0800)
	QFont__NoFontMerging       QFont__StyleStrategy = QFont__StyleStrategy(0x8000)
)

//go:generate stringer -type=QFont__Weight
//QFont::Weight
type QFont__Weight int64

const (
	QFont__Thin       QFont__Weight = QFont__Weight(0)
	QFont__ExtraLight QFont__Weight = QFont__Weight(12)
	QFont__Light      QFont__Weight = QFont__Weight(25)
	QFont__Normal     QFont__Weight = QFont__Weight(50)
	QFont__Medium     QFont__Weight = QFont__Weight(57)
	QFont__DemiBold   QFont__Weight = QFont__Weight(63)
	QFont__Bold       QFont__Weight = QFont__Weight(75)
	QFont__ExtraBold  QFont__Weight = QFont__Weight(81)
	QFont__Black      QFont__Weight = QFont__Weight(87)
)

func NewQFont() *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont4(font QFont_ITF) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont4(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont3(font QFont_ITF, pd QPaintDevice_ITF) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont3(PointerFromQFont(font), PointerFromQPaintDevice(pd)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont2(family string, pointSize int, weight int, italic bool) *QFont {
	var familyC *C.char
	if family != "" {
		familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
	}
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont2(familyC, C.int(int32(pointSize)), C.int(int32(weight)), C.char(int8(qt.GoBoolToInt(italic)))))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func QFont_Substitute(familyName string) string {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	return cGoUnpackString(C.QFont_QFont_Substitute(familyNameC))
}

func (ptr *QFont) Substitute(familyName string) string {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	return cGoUnpackString(C.QFont_QFont_Substitute(familyNameC))
}

func QFont_Substitutes(familyName string) []string {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutes(familyNameC)), "|")
}

func (ptr *QFont) Substitutes(familyName string) []string {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutes(familyNameC)), "|")
}

func QFont_Substitutions() []string {
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) Substitutions() []string {
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) FromString(descrip string) bool {
	if ptr.Pointer() != nil {
		var descripC *C.char
		if descrip != "" {
			descripC = C.CString(descrip)
			defer C.free(unsafe.Pointer(descripC))
		}
		return C.QFont_FromString(ptr.Pointer(), descripC) != 0
	}
	return false
}

func QFont_InsertSubstitution(familyName string, substituteName string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	var substituteNameC *C.char
	if substituteName != "" {
		substituteNameC = C.CString(substituteName)
		defer C.free(unsafe.Pointer(substituteNameC))
	}
	C.QFont_QFont_InsertSubstitution(familyNameC, substituteNameC)
}

func (ptr *QFont) InsertSubstitution(familyName string, substituteName string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	var substituteNameC *C.char
	if substituteName != "" {
		substituteNameC = C.CString(substituteName)
		defer C.free(unsafe.Pointer(substituteNameC))
	}
	C.QFont_QFont_InsertSubstitution(familyNameC, substituteNameC)
}

func QFont_InsertSubstitutions(familyName string, substituteNames []string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	var substituteNamesC = C.CString(strings.Join(substituteNames, "|"))
	defer C.free(unsafe.Pointer(substituteNamesC))
	C.QFont_QFont_InsertSubstitutions(familyNameC, substituteNamesC)
}

func (ptr *QFont) InsertSubstitutions(familyName string, substituteNames []string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	var substituteNamesC = C.CString(strings.Join(substituteNames, "|"))
	defer C.free(unsafe.Pointer(substituteNamesC))
	C.QFont_QFont_InsertSubstitutions(familyNameC, substituteNamesC)
}

func QFont_RemoveSubstitutions(familyName string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	C.QFont_QFont_RemoveSubstitutions(familyNameC)
}

func (ptr *QFont) RemoveSubstitutions(familyName string) {
	var familyNameC *C.char
	if familyName != "" {
		familyNameC = C.CString(familyName)
		defer C.free(unsafe.Pointer(familyNameC))
	}
	C.QFont_QFont_RemoveSubstitutions(familyNameC)
}

func (ptr *QFont) SetBold(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetBold(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetCapitalization(caps QFont__Capitalization) {
	if ptr.Pointer() != nil {
		C.QFont_SetCapitalization(ptr.Pointer(), C.longlong(caps))
	}
}

func (ptr *QFont) SetFamily(family string) {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		C.QFont_SetFamily(ptr.Pointer(), familyC)
	}
}

func (ptr *QFont) SetFixedPitch(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetFixedPitch(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetHintingPreference(hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QFont_SetHintingPreference(ptr.Pointer(), C.longlong(hintingPreference))
	}
}

func (ptr *QFont) SetItalic(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetItalic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetKerning(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetKerning(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetLetterSpacing(ty QFont__SpacingType, spacing float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetLetterSpacing(ptr.Pointer(), C.longlong(ty), C.double(spacing))
	}
}

func (ptr *QFont) SetOverline(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetPixelSize(pixelSize int) {
	if ptr.Pointer() != nil {
		C.QFont_SetPixelSize(ptr.Pointer(), C.int(int32(pixelSize)))
	}
}

func (ptr *QFont) SetPointSize(pointSize int) {
	if ptr.Pointer() != nil {
		C.QFont_SetPointSize(ptr.Pointer(), C.int(int32(pointSize)))
	}
}

func (ptr *QFont) SetPointSizeF(pointSize float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetPointSizeF(ptr.Pointer(), C.double(pointSize))
	}
}

func (ptr *QFont) SetStretch(factor int) {
	if ptr.Pointer() != nil {
		C.QFont_SetStretch(ptr.Pointer(), C.int(int32(factor)))
	}
}

func (ptr *QFont) SetStrikeOut(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetStyle(style QFont__Style) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QFont) SetStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyleHint(ptr.Pointer(), C.longlong(hint), C.longlong(strategy))
	}
}

func (ptr *QFont) SetStyleName(styleName string) {
	if ptr.Pointer() != nil {
		var styleNameC *C.char
		if styleName != "" {
			styleNameC = C.CString(styleName)
			defer C.free(unsafe.Pointer(styleNameC))
		}
		C.QFont_SetStyleName(ptr.Pointer(), styleNameC)
	}
}

func (ptr *QFont) SetStyleStrategy(s QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyleStrategy(ptr.Pointer(), C.longlong(s))
	}
}

func (ptr *QFont) SetUnderline(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetWeight(weight int) {
	if ptr.Pointer() != nil {
		C.QFont_SetWeight(ptr.Pointer(), C.int(int32(weight)))
	}
}

func (ptr *QFont) SetWordSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QFont) Swap(other QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QFont_Swap(ptr.Pointer(), PointerFromQFont(other))
	}
}

func (ptr *QFont) DestroyQFont() {
	if ptr.Pointer() != nil {
		C.QFont_DestroyQFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QFont) Capitalization() QFont__Capitalization {
	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QFont_Capitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) HintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) Resolve(other QFont_ITF) *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QFont_Resolve(ptr.Pointer(), PointerFromQFont(other)))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QFont) DefaultFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_DefaultFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) Family() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_LastResortFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFont() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_LastResortFont(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LetterSpacingType() QFont__SpacingType {
	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QFont_LetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFont_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleStrategy() QFont__StyleStrategy {
	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QFont_StyleStrategy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) Bold() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) ExactMatch() bool {
	if ptr.Pointer() != nil {
		return C.QFont_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) FixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QFont_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) IsCopyOf(fo QFont_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFont_IsCopyOf(ptr.Pointer(), PointerFromQFont(fo)) != 0
	}
	return false
}

func (ptr *QFont) Italic() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Kerning() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Kerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Overline() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) StrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QFont_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Underline() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) PixelSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_PixelSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) PointSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_PointSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) Stretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_Stretch(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) LetterSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_LetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) PointSizeF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_PointSizeF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) WordSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_WordSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QFont_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QFontDatabase struct {
	ptr unsafe.Pointer
}

type QFontDatabase_ITF interface {
	QFontDatabase_PTR() *QFontDatabase
}

func (ptr *QFontDatabase) QFontDatabase_PTR() *QFontDatabase {
	return ptr
}

func (ptr *QFontDatabase) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QFontDatabase) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQFontDatabase(ptr QFontDatabase_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontDatabase_PTR().Pointer()
	}
	return nil
}

func NewQFontDatabaseFromPointer(ptr unsafe.Pointer) *QFontDatabase {
	var n = new(QFontDatabase)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFontDatabase) DestroyQFontDatabase() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QFontDatabase__WritingSystem
//QFontDatabase::WritingSystem
type QFontDatabase__WritingSystem int64

var (
	QFontDatabase__Any                 QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(0)
	QFontDatabase__Latin               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(1)
	QFontDatabase__Greek               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(2)
	QFontDatabase__Cyrillic            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(3)
	QFontDatabase__Armenian            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(4)
	QFontDatabase__Hebrew              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(5)
	QFontDatabase__Arabic              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(6)
	QFontDatabase__Syriac              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(7)
	QFontDatabase__Thaana              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(8)
	QFontDatabase__Devanagari          QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(9)
	QFontDatabase__Bengali             QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(10)
	QFontDatabase__Gurmukhi            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(11)
	QFontDatabase__Gujarati            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(12)
	QFontDatabase__Oriya               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(13)
	QFontDatabase__Tamil               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(14)
	QFontDatabase__Telugu              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(15)
	QFontDatabase__Kannada             QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(16)
	QFontDatabase__Malayalam           QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(17)
	QFontDatabase__Sinhala             QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(18)
	QFontDatabase__Thai                QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(19)
	QFontDatabase__Lao                 QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(20)
	QFontDatabase__Tibetan             QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(21)
	QFontDatabase__Myanmar             QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(22)
	QFontDatabase__Georgian            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(23)
	QFontDatabase__Khmer               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(24)
	QFontDatabase__SimplifiedChinese   QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(25)
	QFontDatabase__TraditionalChinese  QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(26)
	QFontDatabase__Japanese            QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(27)
	QFontDatabase__Korean              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(28)
	QFontDatabase__Vietnamese          QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(29)
	QFontDatabase__Symbol              QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(30)
	QFontDatabase__Other               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(QFontDatabase__Symbol)
	QFontDatabase__Ogham               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(C.QFontDatabase_Ogham_Type())
	QFontDatabase__Runic               QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(C.QFontDatabase_Runic_Type())
	QFontDatabase__Nko                 QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(C.QFontDatabase_Nko_Type())
	QFontDatabase__WritingSystemsCount QFontDatabase__WritingSystem = QFontDatabase__WritingSystem(C.QFontDatabase_WritingSystemsCount_Type())
)

//go:generate stringer -type=QFontDatabase__SystemFont
//QFontDatabase::SystemFont
type QFontDatabase__SystemFont int64

const (
	QFontDatabase__GeneralFont          QFontDatabase__SystemFont = QFontDatabase__SystemFont(0)
	QFontDatabase__FixedFont            QFontDatabase__SystemFont = QFontDatabase__SystemFont(1)
	QFontDatabase__TitleFont            QFontDatabase__SystemFont = QFontDatabase__SystemFont(2)
	QFontDatabase__SmallestReadableFont QFontDatabase__SystemFont = QFontDatabase__SystemFont(3)
)

func (ptr *QFontDatabase) PointSizes(family string, styleName string) []int {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleNameC *C.char
		if styleName != "" {
			styleNameC = C.CString(styleName)
			defer C.free(unsafe.Pointer(styleNameC))
		}
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQFontDatabaseFromPointer(l.data).__pointSizes_atList(i)
			}
			return out
		}(C.QFontDatabase_PointSizes(ptr.Pointer(), familyC, styleNameC))
	}
	return make([]int, 0)
}

func (ptr *QFontDatabase) SmoothSizes(family string, styleName string) []int {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleNameC *C.char
		if styleName != "" {
			styleNameC = C.CString(styleName)
			defer C.free(unsafe.Pointer(styleNameC))
		}
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQFontDatabaseFromPointer(l.data).__smoothSizes_atList(i)
			}
			return out
		}(C.QFontDatabase_SmoothSizes(ptr.Pointer(), familyC, styleNameC))
	}
	return make([]int, 0)
}

func QFontDatabase_RemoveAllApplicationFonts() bool {
	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func (ptr *QFontDatabase) RemoveAllApplicationFonts() bool {
	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func QFontDatabase_RemoveApplicationFont(id int) bool {
	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(int32(id))) != 0
}

func (ptr *QFontDatabase) RemoveApplicationFont(id int) bool {
	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(int32(id))) != 0
}

func QFontDatabase_SystemFont(ty QFontDatabase__SystemFont) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QFontDatabase) SystemFont(ty QFontDatabase__SystemFont) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFontDatabase() *QFontDatabase {
	var tmpValue = NewQFontDatabaseFromPointer(C.QFontDatabase_NewQFontDatabase())
	runtime.SetFinalizer(tmpValue, (*QFontDatabase).DestroyQFontDatabase)
	return tmpValue
}

func QFontDatabase_StandardSizes() []int {
	return func(l C.struct_QtGui_PackedList) []int {
		var out = make([]int, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQFontDatabaseFromPointer(l.data).__standardSizes_atList(i)
		}
		return out
	}(C.QFontDatabase_QFontDatabase_StandardSizes())
}

func (ptr *QFontDatabase) StandardSizes() []int {
	return func(l C.struct_QtGui_PackedList) []int {
		var out = make([]int, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQFontDatabaseFromPointer(l.data).__standardSizes_atList(i)
		}
		return out
	}(C.QFontDatabase_QFontDatabase_StandardSizes())
}

func (ptr *QFontDatabase) StyleString(font QFont_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontDatabase_StyleString(ptr.Pointer(), PointerFromQFont(font)))
	}
	return ""
}

func (ptr *QFontDatabase) StyleString2(fontInfo QFontInfo_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontDatabase_StyleString2(ptr.Pointer(), PointerFromQFontInfo(fontInfo)))
	}
	return ""
}

func QFontDatabase_ApplicationFontFamilies(id int) []string {
	return strings.Split(cGoUnpackString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(int32(id)))), "|")
}

func (ptr *QFontDatabase) ApplicationFontFamilies(id int) []string {
	return strings.Split(cGoUnpackString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(int32(id)))), "|")
}

func QFontDatabase_AddApplicationFont(fileName string) int {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFont(fileNameC)))
}

func (ptr *QFontDatabase) AddApplicationFont(fileName string) int {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFont(fileNameC)))
}

func QFontDatabase_AddApplicationFontFromData(fontData core.QByteArray_ITF) int {
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(core.PointerFromQByteArray(fontData))))
}

func (ptr *QFontDatabase) AddApplicationFontFromData(fontData core.QByteArray_ITF) int {
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(core.PointerFromQByteArray(fontData))))
}

func (ptr *QFontDatabase) Font(family string, style string, pointSize int) *QFont {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		var tmpValue = NewQFontFromPointer(C.QFontDatabase_Font(ptr.Pointer(), familyC, styleC, C.int(int32(pointSize))))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QFontDatabase) Families(writingSystem QFontDatabase__WritingSystem) []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFontDatabase_Families(ptr.Pointer(), C.longlong(writingSystem))), "|")
	}
	return make([]string, 0)
}

func (ptr *QFontDatabase) Styles(family string) []string {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		return strings.Split(cGoUnpackString(C.QFontDatabase_Styles(ptr.Pointer(), familyC)), "|")
	}
	return make([]string, 0)
}

func (ptr *QFontDatabase) Bold(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_Bold(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsBitmapScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_IsBitmapScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsFixedPitch(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_IsFixedPitch(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsPrivateFamily(family string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		return C.QFontDatabase_IsPrivateFamily(ptr.Pointer(), familyC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_IsScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsSmoothlyScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_IsSmoothlyScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) Italic(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return C.QFontDatabase_Italic(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) Weight(family string, style string) int {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		var styleC *C.char
		if style != "" {
			styleC = C.CString(style)
			defer C.free(unsafe.Pointer(styleC))
		}
		return int(int32(C.QFontDatabase_Weight(ptr.Pointer(), familyC, styleC)))
	}
	return 0
}

func (ptr *QFontDatabase) __pointSizes_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontDatabase___pointSizes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QFontDatabase) __pointSizes_setList(i int) {
	if ptr.Pointer() != nil {
		C.QFontDatabase___pointSizes_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QFontDatabase) __pointSizes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QFontDatabase___pointSizes_newList(ptr.Pointer()))
}

func (ptr *QFontDatabase) __smoothSizes_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontDatabase___smoothSizes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QFontDatabase) __smoothSizes_setList(i int) {
	if ptr.Pointer() != nil {
		C.QFontDatabase___smoothSizes_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QFontDatabase) __smoothSizes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QFontDatabase___smoothSizes_newList(ptr.Pointer()))
}

func (ptr *QFontDatabase) __standardSizes_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontDatabase___standardSizes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QFontDatabase) __standardSizes_setList(i int) {
	if ptr.Pointer() != nil {
		C.QFontDatabase___standardSizes_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QFontDatabase) __standardSizes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QFontDatabase___standardSizes_newList(ptr.Pointer()))
}

type QFontInfo struct {
	ptr unsafe.Pointer
}

type QFontInfo_ITF interface {
	QFontInfo_PTR() *QFontInfo
}

func (ptr *QFontInfo) QFontInfo_PTR() *QFontInfo {
	return ptr
}

func (ptr *QFontInfo) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QFontInfo) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQFontInfo(ptr QFontInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontInfo_PTR().Pointer()
	}
	return nil
}

func NewQFontInfoFromPointer(ptr unsafe.Pointer) *QFontInfo {
	var n = new(QFontInfo)
	n.SetPointer(ptr)
	return n
}
func NewQFontInfo(font QFont_ITF) *QFontInfo {
	var tmpValue = NewQFontInfoFromPointer(C.QFontInfo_NewQFontInfo(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
	return tmpValue
}

func NewQFontInfo2(fi QFontInfo_ITF) *QFontInfo {
	var tmpValue = NewQFontInfoFromPointer(C.QFontInfo_NewQFontInfo2(PointerFromQFontInfo(fi)))
	runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
	return tmpValue
}

func (ptr *QFontInfo) Swap(other QFontInfo_ITF) {
	if ptr.Pointer() != nil {
		C.QFontInfo_Swap(ptr.Pointer(), PointerFromQFontInfo(other))
	}
}

func (ptr *QFontInfo) DestroyQFontInfo() {
	if ptr.Pointer() != nil {
		C.QFontInfo_DestroyQFontInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QFontInfo) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QFontInfo_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) StyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFontInfo_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) Family() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontInfo_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontInfo_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) Bold() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) ExactMatch() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) FixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) Italic() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) PixelSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_PixelSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) PointSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_PointSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) PointSizeF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontInfo_PointSizeF(ptr.Pointer()))
	}
	return 0
}

type QFontMetrics struct {
	ptr unsafe.Pointer
}

type QFontMetrics_ITF interface {
	QFontMetrics_PTR() *QFontMetrics
}

func (ptr *QFontMetrics) QFontMetrics_PTR() *QFontMetrics {
	return ptr
}

func (ptr *QFontMetrics) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QFontMetrics) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQFontMetrics(ptr QFontMetrics_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetrics_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFromPointer(ptr unsafe.Pointer) *QFontMetrics {
	var n = new(QFontMetrics)
	n.SetPointer(ptr)
	return n
}
func NewQFontMetrics(font QFont_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func NewQFontMetrics2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func NewQFontMetrics3(fm QFontMetrics_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics3(PointerFromQFontMetrics(fm)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func (ptr *QFontMetrics) Swap(other QFontMetrics_ITF) {
	if ptr.Pointer() != nil {
		C.QFontMetrics_Swap(ptr.Pointer(), PointerFromQFontMetrics(other))
	}
}

func (ptr *QFontMetrics) DestroyQFontMetrics() {
	if ptr.Pointer() != nil {
		C.QFontMetrics_DestroyQFontMetrics(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QFontMetrics) BoundingRect(ch core.QChar_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect(ptr.Pointer(), core.PointerFromQChar(ch)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect3(rect core.QRect_ITF, flags int, text string, tabStops int, tabArray int) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect3(ptr.Pointer(), core.PointerFromQRect(rect), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect2(text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect2(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect4(x int, y int, width int, height int, flags int, text string, tabStops int, tabArray int) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect4(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) TightBoundingRect(text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_TightBoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) Size(flags int, text string, tabStops int, tabArray int) *core.QSize {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQSizeFromPointer(C.QFontMetrics_Size(ptr.Pointer(), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) ElidedText(text string, mode core.Qt__TextElideMode, width int, flags int) string {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return cGoUnpackString(C.QFontMetrics_ElidedText(ptr.Pointer(), textC, C.longlong(mode), C.int(int32(width)), C.int(int32(flags))))
	}
	return ""
}

func (ptr *QFontMetrics) InFont(ch core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetrics_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetrics) InFontUcs4(ucs4 uint) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetrics_InFontUcs4(ptr.Pointer(), C.uint(uint32(ucs4))) != 0
	}
	return false
}

func (ptr *QFontMetrics) Ascent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Ascent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) AverageCharWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_AverageCharWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) CapHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_CapHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Descent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Descent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Leading() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Leading(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) LeftBearing(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) LineSpacing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LineSpacing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) LineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MaxWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MaxWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MinLeftBearing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MinLeftBearing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MinRightBearing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MinRightBearing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) OverlinePos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_OverlinePos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) RightBearing(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) StrikeOutPos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_StrikeOutPos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) UnderlinePos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_UnderlinePos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Width3(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Width3(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) Width(text string, len int) int {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return int(int32(C.QFontMetrics_Width(ptr.Pointer(), textC, C.int(int32(len)))))
	}
	return 0
}

func (ptr *QFontMetrics) XHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_XHeight(ptr.Pointer())))
	}
	return 0
}

type QFontMetricsF struct {
	ptr unsafe.Pointer
}

type QFontMetricsF_ITF interface {
	QFontMetricsF_PTR() *QFontMetricsF
}

func (ptr *QFontMetricsF) QFontMetricsF_PTR() *QFontMetricsF {
	return ptr
}

func (ptr *QFontMetricsF) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QFontMetricsF) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQFontMetricsF(ptr QFontMetricsF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetricsF_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFFromPointer(ptr unsafe.Pointer) *QFontMetricsF {
	var n = new(QFontMetricsF)
	n.SetPointer(ptr)
	return n
}
func NewQFontMetricsF(font QFont_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF3(fontMetrics QFontMetrics_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF3(PointerFromQFontMetrics(fontMetrics)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF4(fm QFontMetricsF_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF4(PointerFromQFontMetricsF(fm)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func (ptr *QFontMetricsF) Swap(other QFontMetricsF_ITF) {
	if ptr.Pointer() != nil {
		C.QFontMetricsF_Swap(ptr.Pointer(), PointerFromQFontMetricsF(other))
	}
}

func (ptr *QFontMetricsF) DestroyQFontMetricsF() {
	if ptr.Pointer() != nil {
		C.QFontMetricsF_DestroyQFontMetricsF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QFontMetricsF) BoundingRect2(ch core.QChar_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect2(ptr.Pointer(), core.PointerFromQChar(ch)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect3(rect core.QRectF_ITF, flags int, text string, tabStops int, tabArray int) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect3(ptr.Pointer(), core.PointerFromQRectF(rect), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect(text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) TightBoundingRect(text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_TightBoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) Size(flags int, text string, tabStops int, tabArray int) *core.QSizeF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQSizeFFromPointer(C.QFontMetricsF_Size(ptr.Pointer(), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) ElidedText(text string, mode core.Qt__TextElideMode, width float64, flags int) string {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return cGoUnpackString(C.QFontMetricsF_ElidedText(ptr.Pointer(), textC, C.longlong(mode), C.double(width), C.int(int32(flags))))
	}
	return ""
}

func (ptr *QFontMetricsF) InFont(ch core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetricsF_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetricsF) InFontUcs4(ch uint) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetricsF_InFontUcs4(ptr.Pointer(), C.uint(uint32(ch))) != 0
	}
	return false
}

func (ptr *QFontMetricsF) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) AverageCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) CapHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_CapHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LeftBearing(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) LineSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LineWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MaxWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MaxWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinLeftBearing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinLeftBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinRightBearing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinRightBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) OverlinePos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_OverlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) RightBearing(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) StrikeOutPos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_StrikeOutPos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) UnderlinePos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_UnderlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Width2(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Width2(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) Width(text string) float64 {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return float64(C.QFontMetricsF_Width(ptr.Pointer(), textC))
	}
	return 0
}

func (ptr *QFontMetricsF) XHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_XHeight(ptr.Pointer()))
	}
	return 0
}

type QGenericMatrix struct {
	ptr unsafe.Pointer
}

type QGenericMatrix_ITF interface {
	QGenericMatrix_PTR() *QGenericMatrix
}

func (ptr *QGenericMatrix) QGenericMatrix_PTR() *QGenericMatrix {
	return ptr
}

func (ptr *QGenericMatrix) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGenericMatrix) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGenericMatrix(ptr QGenericMatrix_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericMatrix_PTR().Pointer()
	}
	return nil
}

func NewQGenericMatrixFromPointer(ptr unsafe.Pointer) *QGenericMatrix {
	var n = new(QGenericMatrix)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericMatrix) DestroyQGenericMatrix() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QGenericPlugin struct {
	core.QObject
}

type QGenericPlugin_ITF interface {
	core.QObject_ITF
	QGenericPlugin_PTR() *QGenericPlugin
}

func (ptr *QGenericPlugin) QGenericPlugin_PTR() *QGenericPlugin {
	return ptr
}

func (ptr *QGenericPlugin) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGenericPlugin) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQGenericPlugin(ptr QGenericPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPlugin_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFromPointer(ptr unsafe.Pointer) *QGenericPlugin {
	var n = new(QGenericPlugin)
	n.SetPointer(ptr)
	return n
}
func NewQGenericPlugin(parent core.QObject_ITF) *QGenericPlugin {
	var tmpValue = NewQGenericPluginFromPointer(C.QGenericPlugin_NewQGenericPlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGenericPlugin_Create
func callbackQGenericPlugin_Create(ptr unsafe.Pointer, key C.struct_QtGui_PackedString, specification C.struct_QtGui_PackedString) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "create"); signal != nil {
		return core.PointerFromQObject(signal.(func(string, string) *core.QObject)(cGoUnpackString(key), cGoUnpackString(specification)))
	}

	return core.PointerFromQObject(core.NewQObject(nil))
}

func (ptr *QGenericPlugin) ConnectCreate(f func(key string, specification string) *core.QObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "create"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", func(key string, specification string) *core.QObject {
				signal.(func(string, string) *core.QObject)(key, specification)
				return f(key, specification)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", f)
		}
	}
}

func (ptr *QGenericPlugin) DisconnectCreate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "create")
	}
}

func (ptr *QGenericPlugin) Create(key string, specification string) *core.QObject {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		var specificationC *C.char
		if specification != "" {
			specificationC = C.CString(specification)
			defer C.free(unsafe.Pointer(specificationC))
		}
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin_Create(ptr.Pointer(), keyC, specificationC))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) DestroyQGenericPlugin() {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DestroyQGenericPlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGenericPlugin) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QGenericPlugin___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGenericPlugin) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGenericPlugin___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QGenericPlugin) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGenericPlugin) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QGenericPlugin___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QGenericPlugin) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGenericPlugin) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QGenericPlugin___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QGenericPlugin) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGenericPlugin) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGenericPlugin___findChildren_newList(ptr.Pointer()))
}

func (ptr *QGenericPlugin) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGenericPlugin) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGenericPlugin___children_newList(ptr.Pointer()))
}

//export callbackQGenericPlugin_Event
func callbackQGenericPlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QGenericPlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQGenericPlugin_EventFilter
func callbackQGenericPlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGenericPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGenericPlugin_ChildEvent
func callbackQGenericPlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGenericPlugin_ConnectNotify
func callbackQGenericPlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_CustomEvent
func callbackQGenericPlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGenericPlugin_DeleteLater
func callbackQGenericPlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQGenericPluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGenericPlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGenericPlugin_Destroyed
func callbackQGenericPlugin_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGenericPlugin_DisconnectNotify
func callbackQGenericPlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_ObjectNameChanged
func callbackQGenericPlugin_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQGenericPlugin_TimerEvent
func callbackQGenericPlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGenericPlugin_MetaObject
func callbackQGenericPlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGenericPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGenericPlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGenericPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QGenericPluginFactory struct {
	ptr unsafe.Pointer
}

type QGenericPluginFactory_ITF interface {
	QGenericPluginFactory_PTR() *QGenericPluginFactory
}

func (ptr *QGenericPluginFactory) QGenericPluginFactory_PTR() *QGenericPluginFactory {
	return ptr
}

func (ptr *QGenericPluginFactory) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGenericPluginFactory) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGenericPluginFactory(ptr QGenericPluginFactory_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPluginFactory_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFactoryFromPointer(ptr unsafe.Pointer) *QGenericPluginFactory {
	var n = new(QGenericPluginFactory)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericPluginFactory) DestroyQGenericPluginFactory() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QGenericPluginFactory_Create(key string, specification string) *core.QObject {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	var specificationC *C.char
	if specification != "" {
		specificationC = C.CString(specification)
		defer C.free(unsafe.Pointer(specificationC))
	}
	var tmpValue = core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(keyC, specificationC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGenericPluginFactory) Create(key string, specification string) *core.QObject {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	var specificationC *C.char
	if specification != "" {
		specificationC = C.CString(specification)
		defer C.free(unsafe.Pointer(specificationC))
	}
	var tmpValue = core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(keyC, specificationC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGenericPluginFactory_Keys() []string {
	return strings.Split(cGoUnpackString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

func (ptr *QGenericPluginFactory) Keys() []string {
	return strings.Split(cGoUnpackString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

type QGlyphRun struct {
	ptr unsafe.Pointer
}

type QGlyphRun_ITF interface {
	QGlyphRun_PTR() *QGlyphRun
}

func (ptr *QGlyphRun) QGlyphRun_PTR() *QGlyphRun {
	return ptr
}

func (ptr *QGlyphRun) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGlyphRun) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGlyphRun(ptr QGlyphRun_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGlyphRun_PTR().Pointer()
	}
	return nil
}

func NewQGlyphRunFromPointer(ptr unsafe.Pointer) *QGlyphRun {
	var n = new(QGlyphRun)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QGlyphRun__GlyphRunFlag
//QGlyphRun::GlyphRunFlag
type QGlyphRun__GlyphRunFlag int64

const (
	QGlyphRun__Overline      QGlyphRun__GlyphRunFlag = QGlyphRun__GlyphRunFlag(0x01)
	QGlyphRun__Underline     QGlyphRun__GlyphRunFlag = QGlyphRun__GlyphRunFlag(0x02)
	QGlyphRun__StrikeOut     QGlyphRun__GlyphRunFlag = QGlyphRun__GlyphRunFlag(0x04)
	QGlyphRun__RightToLeft   QGlyphRun__GlyphRunFlag = QGlyphRun__GlyphRunFlag(0x08)
	QGlyphRun__SplitLigature QGlyphRun__GlyphRunFlag = QGlyphRun__GlyphRunFlag(0x10)
)

func NewQGlyphRun() *QGlyphRun {
	var tmpValue = NewQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun())
	runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
	return tmpValue
}

func NewQGlyphRun2(other QGlyphRun_ITF) *QGlyphRun {
	var tmpValue = NewQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun2(PointerFromQGlyphRun(other)))
	runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
	return tmpValue
}

func (ptr *QGlyphRun) Clear() {
	if ptr.Pointer() != nil {
		C.QGlyphRun_Clear(ptr.Pointer())
	}
}

func (ptr *QGlyphRun) SetBoundingRect(boundingRect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetBoundingRect(ptr.Pointer(), core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QGlyphRun) SetFlag(flag QGlyphRun__GlyphRunFlag, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlag(ptr.Pointer(), C.longlong(flag), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGlyphRun) SetFlags(flags QGlyphRun__GlyphRunFlag) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGlyphRun) SetGlyphIndexes(glyphIndexes []uint) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetGlyphIndexes(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQGlyphRunFromPointer(NewQGlyphRunFromPointer(nil).__setGlyphIndexes_glyphIndexes_newList())
			for _, v := range glyphIndexes {
				tmpList.__setGlyphIndexes_glyphIndexes_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QGlyphRun) SetOverline(overline bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(overline))))
	}
}

func (ptr *QGlyphRun) SetPositions(positions []*core.QPointF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetPositions(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQGlyphRunFromPointer(NewQGlyphRunFromPointer(nil).__setPositions_positions_newList())
			for _, v := range positions {
				tmpList.__setPositions_positions_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QGlyphRun) SetRawData(glyphIndexArray uint, glyphPositionArray core.QPointF_ITF, size int) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRawData(ptr.Pointer(), C.uint(uint32(glyphIndexArray)), core.PointerFromQPointF(glyphPositionArray), C.int(int32(size)))
	}
}

func (ptr *QGlyphRun) SetRawFont(rawFont QRawFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRawFont(ptr.Pointer(), PointerFromQRawFont(rawFont))
	}
}

func (ptr *QGlyphRun) SetRightToLeft(rightToLeft bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRightToLeft(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(rightToLeft))))
	}
}

func (ptr *QGlyphRun) SetStrikeOut(strikeOut bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(strikeOut))))
	}
}

func (ptr *QGlyphRun) SetUnderline(underline bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(underline))))
	}
}

func (ptr *QGlyphRun) Swap(other QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_Swap(ptr.Pointer(), PointerFromQGlyphRun(other))
	}
}

func (ptr *QGlyphRun) DestroyQGlyphRun() {
	if ptr.Pointer() != nil {
		C.QGlyphRun_DestroyQGlyphRun(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QGlyphRun) Flags() QGlyphRun__GlyphRunFlag {
	if ptr.Pointer() != nil {
		return QGlyphRun__GlyphRunFlag(C.QGlyphRun_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGlyphRun) RawFont() *QRawFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRawFontFromPointer(C.QGlyphRun_RawFont(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QGlyphRun_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) Positions() []*core.QPointF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QPointF {
			var out = make([]*core.QPointF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQGlyphRunFromPointer(l.data).__positions_atList(i)
			}
			return out
		}(C.QGlyphRun_Positions(ptr.Pointer()))
	}
	return make([]*core.QPointF, 0)
}

func (ptr *QGlyphRun) GlyphIndexes() []uint {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []uint {
			var out = make([]uint, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQGlyphRunFromPointer(l.data).__glyphIndexes_atList(i)
			}
			return out
		}(C.QGlyphRun_GlyphIndexes(ptr.Pointer()))
	}
	return make([]uint, 0)
}

func (ptr *QGlyphRun) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) IsRightToLeft() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsRightToLeft(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Overline() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) StrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Underline() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) __setGlyphIndexes_glyphIndexes_atList(i int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QGlyphRun___setGlyphIndexes_glyphIndexes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QGlyphRun) __setGlyphIndexes_glyphIndexes_setList(i uint) {
	if ptr.Pointer() != nil {
		C.QGlyphRun___setGlyphIndexes_glyphIndexes_setList(ptr.Pointer(), C.uint(uint32(i)))
	}
}

func (ptr *QGlyphRun) __setGlyphIndexes_glyphIndexes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGlyphRun___setGlyphIndexes_glyphIndexes_newList(ptr.Pointer()))
}

func (ptr *QGlyphRun) __setPositions_positions_atList(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QGlyphRun___setPositions_positions_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) __setPositions_positions_setList(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun___setPositions_positions_setList(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QGlyphRun) __setPositions_positions_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGlyphRun___setPositions_positions_newList(ptr.Pointer()))
}

func (ptr *QGlyphRun) __positions_atList(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QGlyphRun___positions_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) __positions_setList(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun___positions_setList(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QGlyphRun) __positions_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGlyphRun___positions_newList(ptr.Pointer()))
}

func (ptr *QGlyphRun) __glyphIndexes_atList(i int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QGlyphRun___glyphIndexes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QGlyphRun) __glyphIndexes_setList(i uint) {
	if ptr.Pointer() != nil {
		C.QGlyphRun___glyphIndexes_setList(ptr.Pointer(), C.uint(uint32(i)))
	}
}

func (ptr *QGlyphRun) __glyphIndexes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGlyphRun___glyphIndexes_newList(ptr.Pointer()))
}

type QGradient struct {
	ptr unsafe.Pointer
}

type QGradient_ITF interface {
	QGradient_PTR() *QGradient
}

func (ptr *QGradient) QGradient_PTR() *QGradient {
	return ptr
}

func (ptr *QGradient) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGradient) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGradient(ptr QGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func NewQGradientFromPointer(ptr unsafe.Pointer) *QGradient {
	var n = new(QGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGradient) DestroyQGradient() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QGradient__Type
//QGradient::Type
type QGradient__Type int64

const (
	QGradient__LinearGradient  QGradient__Type = QGradient__Type(0)
	QGradient__RadialGradient  QGradient__Type = QGradient__Type(1)
	QGradient__ConicalGradient QGradient__Type = QGradient__Type(2)
	QGradient__NoGradient      QGradient__Type = QGradient__Type(3)
)

//go:generate stringer -type=QGradient__CoordinateMode
//QGradient::CoordinateMode
type QGradient__CoordinateMode int64

const (
	QGradient__LogicalMode         QGradient__CoordinateMode = QGradient__CoordinateMode(0)
	QGradient__StretchToDeviceMode QGradient__CoordinateMode = QGradient__CoordinateMode(1)
	QGradient__ObjectBoundingMode  QGradient__CoordinateMode = QGradient__CoordinateMode(2)
)

//go:generate stringer -type=QGradient__Spread
//QGradient::Spread
type QGradient__Spread int64

const (
	QGradient__PadSpread     QGradient__Spread = QGradient__Spread(0)
	QGradient__ReflectSpread QGradient__Spread = QGradient__Spread(1)
	QGradient__RepeatSpread  QGradient__Spread = QGradient__Spread(2)
)

func (ptr *QGradient) SetColorAt(position float64, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QGradient_SetColorAt(ptr.Pointer(), C.double(position), PointerFromQColor(color))
	}
}

func (ptr *QGradient) SetCoordinateMode(mode QGradient__CoordinateMode) {
	if ptr.Pointer() != nil {
		C.QGradient_SetCoordinateMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGradient) SetSpread(method QGradient__Spread) {
	if ptr.Pointer() != nil {
		C.QGradient_SetSpread(ptr.Pointer(), C.longlong(method))
	}
}

func (ptr *QGradient) CoordinateMode() QGradient__CoordinateMode {
	if ptr.Pointer() != nil {
		return QGradient__CoordinateMode(C.QGradient_CoordinateMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) Spread() QGradient__Spread {
	if ptr.Pointer() != nil {
		return QGradient__Spread(C.QGradient_Spread(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) Type() QGradient__Type {
	if ptr.Pointer() != nil {
		return QGradient__Type(C.QGradient_Type(ptr.Pointer()))
	}
	return 0
}

type QGuiApplication struct {
	core.QCoreApplication
}

type QGuiApplication_ITF interface {
	core.QCoreApplication_ITF
	QGuiApplication_PTR() *QGuiApplication
}

func (ptr *QGuiApplication) QGuiApplication_PTR() *QGuiApplication {
	return ptr
}

func (ptr *QGuiApplication) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QCoreApplication_PTR().Pointer()
	}
	return nil
}

func (ptr *QGuiApplication) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QCoreApplication_PTR().SetPointer(p)
	}
}

func PointerFromQGuiApplication(ptr QGuiApplication_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGuiApplication_PTR().Pointer()
	}
	return nil
}

func NewQGuiApplicationFromPointer(ptr unsafe.Pointer) *QGuiApplication {
	var n = new(QGuiApplication)
	n.SetPointer(ptr)
	return n
}
func QGuiApplication_Clipboard() *QClipboard {
	var tmpValue = NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) Clipboard() *QClipboard {
	var tmpValue = NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_OverrideCursor() *QCursor {
	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func (ptr *QGuiApplication) OverrideCursor() *QCursor {
	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func QGuiApplication_Font() *QFont {
	var tmpValue = NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QGuiApplication) Font() *QFont {
	var tmpValue = NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQGuiApplication(argc int, argv []string) *QGuiApplication {
	var argvC = C.CString(strings.Join(argv, "|"))
	defer C.free(unsafe.Pointer(argvC))
	var tmpValue = NewQGuiApplicationFromPointer(C.QGuiApplication_NewQGuiApplication(C.int(int32(argc)), argvC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_WindowIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QGuiApplication) WindowIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func QGuiApplication_InputMethod() *QInputMethod {
	var tmpValue = NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) InputMethod() *QInputMethod {
	var tmpValue = NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_Screens() []*QScreen {
	return func(l C.struct_QtGui_PackedList) []*QScreen {
		var out = make([]*QScreen, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQGuiApplicationFromPointer(l.data).__screens_atList(i)
		}
		return out
	}(C.QGuiApplication_QGuiApplication_Screens())
}

func (ptr *QGuiApplication) Screens() []*QScreen {
	return func(l C.struct_QtGui_PackedList) []*QScreen {
		var out = make([]*QScreen, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQGuiApplicationFromPointer(l.data).__screens_atList(i)
		}
		return out
	}(C.QGuiApplication_QGuiApplication_Screens())
}

func QGuiApplication_FocusObject() *core.QObject {
	var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) FocusObject() *core.QObject {
	var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_Palette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QGuiApplication) Palette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func QGuiApplication_PrimaryScreen() *QScreen {
	var tmpValue = NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) PrimaryScreen() *QScreen {
	var tmpValue = NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_ApplicationDisplayName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func (ptr *QGuiApplication) ApplicationDisplayName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func QGuiApplication_DesktopFileName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_DesktopFileName())
}

func (ptr *QGuiApplication) DesktopFileName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_DesktopFileName())
}

func QGuiApplication_PlatformName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func (ptr *QGuiApplication) PlatformName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func QGuiApplication_StyleHints() *QStyleHints {
	var tmpValue = NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) StyleHints() *QStyleHints {
	var tmpValue = NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_FocusWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) FocusWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_ModalWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) ModalWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_TopLevelAt(pos core.QPoint_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) TopLevelAt(pos core.QPoint_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_ApplicationState() core.Qt__ApplicationState {
	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func (ptr *QGuiApplication) ApplicationState() core.Qt__ApplicationState {
	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func QGuiApplication_KeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

func (ptr *QGuiApplication) KeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

func QGuiApplication_QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func (ptr *QGuiApplication) QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func QGuiApplication_LayoutDirection() core.Qt__LayoutDirection {
	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func (ptr *QGuiApplication) LayoutDirection() core.Qt__LayoutDirection {
	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func QGuiApplication_MouseButtons() core.Qt__MouseButton {
	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func (ptr *QGuiApplication) MouseButtons() core.Qt__MouseButton {
	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func QGuiApplication_DesktopSettingsAware() bool {
	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

func (ptr *QGuiApplication) DesktopSettingsAware() bool {
	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

//export callbackQGuiApplication_Event
func callbackQGuiApplication_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGuiApplicationFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QGuiApplication) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func QGuiApplication_IsFallbackSessionManagementEnabled() bool {
	return C.QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled() != 0
}

func (ptr *QGuiApplication) IsFallbackSessionManagementEnabled() bool {
	return C.QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled() != 0
}

func QGuiApplication_IsLeftToRight() bool {
	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func (ptr *QGuiApplication) IsLeftToRight() bool {
	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func QGuiApplication_IsRightToLeft() bool {
	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func (ptr *QGuiApplication) IsRightToLeft() bool {
	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func QGuiApplication_QuitOnLastWindowClosed() bool {
	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func (ptr *QGuiApplication) QuitOnLastWindowClosed() bool {
	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func QGuiApplication_Exec() int {
	return int(int32(C.QGuiApplication_QGuiApplication_Exec()))
}

func (ptr *QGuiApplication) Exec() int {
	return int(int32(C.QGuiApplication_QGuiApplication_Exec()))
}

//export callbackQGuiApplication_ApplicationDisplayNameChanged
func callbackQGuiApplication_ApplicationDisplayNameChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "applicationDisplayNameChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectApplicationDisplayNameChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "applicationDisplayNameChanged") {
			C.QGuiApplication_ConnectApplicationDisplayNameChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "applicationDisplayNameChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "applicationDisplayNameChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "applicationDisplayNameChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectApplicationDisplayNameChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectApplicationDisplayNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "applicationDisplayNameChanged")
	}
}

func (ptr *QGuiApplication) ApplicationDisplayNameChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ApplicationDisplayNameChanged(ptr.Pointer())
	}
}

//export callbackQGuiApplication_ApplicationStateChanged
func callbackQGuiApplication_ApplicationStateChanged(ptr unsafe.Pointer, state C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "applicationStateChanged"); signal != nil {
		signal.(func(core.Qt__ApplicationState))(core.Qt__ApplicationState(state))
	}

}

func (ptr *QGuiApplication) ConnectApplicationStateChanged(f func(state core.Qt__ApplicationState)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "applicationStateChanged") {
			C.QGuiApplication_ConnectApplicationStateChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "applicationStateChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "applicationStateChanged", func(state core.Qt__ApplicationState) {
				signal.(func(core.Qt__ApplicationState))(state)
				f(state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "applicationStateChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectApplicationStateChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectApplicationStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "applicationStateChanged")
	}
}

func (ptr *QGuiApplication) ApplicationStateChanged(state core.Qt__ApplicationState) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ApplicationStateChanged(ptr.Pointer(), C.longlong(state))
	}
}

func QGuiApplication_ChangeOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) ChangeOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

//export callbackQGuiApplication_CommitDataRequest
func callbackQGuiApplication_CommitDataRequest(ptr unsafe.Pointer, manager unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "commitDataRequest"); signal != nil {
		signal.(func(*QSessionManager))(NewQSessionManagerFromPointer(manager))
	}

}

func (ptr *QGuiApplication) ConnectCommitDataRequest(f func(manager *QSessionManager)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "commitDataRequest") {
			C.QGuiApplication_ConnectCommitDataRequest(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "commitDataRequest"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "commitDataRequest", func(manager *QSessionManager) {
				signal.(func(*QSessionManager))(manager)
				f(manager)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "commitDataRequest", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectCommitDataRequest() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectCommitDataRequest(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "commitDataRequest")
	}
}

func (ptr *QGuiApplication) CommitDataRequest(manager QSessionManager_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_CommitDataRequest(ptr.Pointer(), PointerFromQSessionManager(manager))
	}
}

//export callbackQGuiApplication_FocusObjectChanged
func callbackQGuiApplication_FocusObjectChanged(ptr unsafe.Pointer, focusObject unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(focusObject))
	}

}

func (ptr *QGuiApplication) ConnectFocusObjectChanged(f func(focusObject *core.QObject)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged") {
			C.QGuiApplication_ConnectFocusObjectChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged", func(focusObject *core.QObject) {
				signal.(func(*core.QObject))(focusObject)
				f(focusObject)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectFocusObjectChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged")
	}
}

func (ptr *QGuiApplication) FocusObjectChanged(focusObject core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(focusObject))
	}
}

//export callbackQGuiApplication_FocusWindowChanged
func callbackQGuiApplication_FocusWindowChanged(ptr unsafe.Pointer, focusWindow unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusWindowChanged"); signal != nil {
		signal.(func(*QWindow))(NewQWindowFromPointer(focusWindow))
	}

}

func (ptr *QGuiApplication) ConnectFocusWindowChanged(f func(focusWindow *QWindow)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "focusWindowChanged") {
			C.QGuiApplication_ConnectFocusWindowChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusWindowChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusWindowChanged", func(focusWindow *QWindow) {
				signal.(func(*QWindow))(focusWindow)
				f(focusWindow)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusWindowChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectFocusWindowChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusWindowChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusWindowChanged")
	}
}

func (ptr *QGuiApplication) FocusWindowChanged(focusWindow QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusWindowChanged(ptr.Pointer(), PointerFromQWindow(focusWindow))
	}
}

//export callbackQGuiApplication_FontDatabaseChanged
func callbackQGuiApplication_FontDatabaseChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "fontDatabaseChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectFontDatabaseChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "fontDatabaseChanged") {
			C.QGuiApplication_ConnectFontDatabaseChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "fontDatabaseChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "fontDatabaseChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "fontDatabaseChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectFontDatabaseChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFontDatabaseChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "fontDatabaseChanged")
	}
}

func (ptr *QGuiApplication) FontDatabaseChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FontDatabaseChanged(ptr.Pointer())
	}
}

//export callbackQGuiApplication_LastWindowClosed
func callbackQGuiApplication_LastWindowClosed(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "lastWindowClosed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectLastWindowClosed(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "lastWindowClosed") {
			C.QGuiApplication_ConnectLastWindowClosed(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "lastWindowClosed"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "lastWindowClosed", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "lastWindowClosed", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectLastWindowClosed() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLastWindowClosed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "lastWindowClosed")
	}
}

func (ptr *QGuiApplication) LastWindowClosed() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_LastWindowClosed(ptr.Pointer())
	}
}

//export callbackQGuiApplication_LayoutDirectionChanged
func callbackQGuiApplication_LayoutDirectionChanged(ptr unsafe.Pointer, direction C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "layoutDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(direction))
	}

}

func (ptr *QGuiApplication) ConnectLayoutDirectionChanged(f func(direction core.Qt__LayoutDirection)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "layoutDirectionChanged") {
			C.QGuiApplication_ConnectLayoutDirectionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "layoutDirectionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "layoutDirectionChanged", func(direction core.Qt__LayoutDirection) {
				signal.(func(core.Qt__LayoutDirection))(direction)
				f(direction)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "layoutDirectionChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectLayoutDirectionChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLayoutDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "layoutDirectionChanged")
	}
}

func (ptr *QGuiApplication) LayoutDirectionChanged(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_LayoutDirectionChanged(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQGuiApplication_PaletteChanged
func callbackQGuiApplication_PaletteChanged(ptr unsafe.Pointer, palette unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paletteChanged"); signal != nil {
		signal.(func(*QPalette))(NewQPaletteFromPointer(palette))
	}

}

func (ptr *QGuiApplication) ConnectPaletteChanged(f func(palette *QPalette)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "paletteChanged") {
			C.QGuiApplication_ConnectPaletteChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "paletteChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paletteChanged", func(palette *QPalette) {
				signal.(func(*QPalette))(palette)
				f(palette)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paletteChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectPaletteChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectPaletteChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "paletteChanged")
	}
}

func (ptr *QGuiApplication) PaletteChanged(palette QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_PaletteChanged(ptr.Pointer(), PointerFromQPalette(palette))
	}
}

//export callbackQGuiApplication_PrimaryScreenChanged
func callbackQGuiApplication_PrimaryScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "primaryScreenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectPrimaryScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "primaryScreenChanged") {
			C.QGuiApplication_ConnectPrimaryScreenChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "primaryScreenChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "primaryScreenChanged", func(screen *QScreen) {
				signal.(func(*QScreen))(screen)
				f(screen)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "primaryScreenChanged", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectPrimaryScreenChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectPrimaryScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "primaryScreenChanged")
	}
}

func (ptr *QGuiApplication) PrimaryScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_PrimaryScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func QGuiApplication_RestoreOverrideCursor() {
	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

func (ptr *QGuiApplication) RestoreOverrideCursor() {
	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

//export callbackQGuiApplication_SaveStateRequest
func callbackQGuiApplication_SaveStateRequest(ptr unsafe.Pointer, manager unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "saveStateRequest"); signal != nil {
		signal.(func(*QSessionManager))(NewQSessionManagerFromPointer(manager))
	}

}

func (ptr *QGuiApplication) ConnectSaveStateRequest(f func(manager *QSessionManager)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "saveStateRequest") {
			C.QGuiApplication_ConnectSaveStateRequest(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "saveStateRequest"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "saveStateRequest", func(manager *QSessionManager) {
				signal.(func(*QSessionManager))(manager)
				f(manager)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "saveStateRequest", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectSaveStateRequest() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectSaveStateRequest(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "saveStateRequest")
	}
}

func (ptr *QGuiApplication) SaveStateRequest(manager QSessionManager_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_SaveStateRequest(ptr.Pointer(), PointerFromQSessionManager(manager))
	}
}

//export callbackQGuiApplication_ScreenAdded
func callbackQGuiApplication_ScreenAdded(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "screenAdded"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenAdded(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "screenAdded") {
			C.QGuiApplication_ConnectScreenAdded(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "screenAdded"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenAdded", func(screen *QScreen) {
				signal.(func(*QScreen))(screen)
				f(screen)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenAdded", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectScreenAdded() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenAdded(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "screenAdded")
	}
}

func (ptr *QGuiApplication) ScreenAdded(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenAdded(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

//export callbackQGuiApplication_ScreenRemoved
func callbackQGuiApplication_ScreenRemoved(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "screenRemoved"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenRemoved(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "screenRemoved") {
			C.QGuiApplication_ConnectScreenRemoved(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "screenRemoved"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenRemoved", func(screen *QScreen) {
				signal.(func(*QScreen))(screen)
				f(screen)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenRemoved", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectScreenRemoved() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "screenRemoved")
	}
}

func (ptr *QGuiApplication) ScreenRemoved(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenRemoved(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func QGuiApplication_SetApplicationDisplayName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(nameC)
}

func (ptr *QGuiApplication) SetApplicationDisplayName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(nameC)
}

func QGuiApplication_SetDesktopFileName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QGuiApplication_QGuiApplication_SetDesktopFileName(nameC)
}

func (ptr *QGuiApplication) SetDesktopFileName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QGuiApplication_QGuiApplication_SetDesktopFileName(nameC)
}

func QGuiApplication_SetDesktopSettingsAware(on bool) {
	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.char(int8(qt.GoBoolToInt(on))))
}

func (ptr *QGuiApplication) SetDesktopSettingsAware(on bool) {
	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.char(int8(qt.GoBoolToInt(on))))
}

func QGuiApplication_SetFallbackSessionManagementEnabled(enabled bool) {
	C.QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func (ptr *QGuiApplication) SetFallbackSessionManagementEnabled(enabled bool) {
	C.QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func QGuiApplication_SetFont(font QFont_ITF) {
	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func (ptr *QGuiApplication) SetFont(font QFont_ITF) {
	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func QGuiApplication_SetLayoutDirection(direction core.Qt__LayoutDirection) {
	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.longlong(direction))
}

func (ptr *QGuiApplication) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.longlong(direction))
}

func QGuiApplication_SetOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) SetOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func QGuiApplication_SetPalette(pal QPalette_ITF) {
	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func (ptr *QGuiApplication) SetPalette(pal QPalette_ITF) {
	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func QGuiApplication_SetQuitOnLastWindowClosed(quit bool) {
	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.char(int8(qt.GoBoolToInt(quit))))
}

func (ptr *QGuiApplication) SetQuitOnLastWindowClosed(quit bool) {
	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.char(int8(qt.GoBoolToInt(quit))))
}

func QGuiApplication_SetWindowIcon(icon QIcon_ITF) {
	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func (ptr *QGuiApplication) SetWindowIcon(icon QIcon_ITF) {
	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func QGuiApplication_Sync() {
	C.QGuiApplication_QGuiApplication_Sync()
}

func (ptr *QGuiApplication) Sync() {
	C.QGuiApplication_QGuiApplication_Sync()
}

//export callbackQGuiApplication_DestroyQGuiApplication
func callbackQGuiApplication_DestroyQGuiApplication(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QGuiApplication"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).DestroyQGuiApplicationDefault()
	}
}

func (ptr *QGuiApplication) ConnectDestroyQGuiApplication(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QGuiApplication"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QGuiApplication", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QGuiApplication", f)
		}
	}
}

func (ptr *QGuiApplication) DisconnectDestroyQGuiApplication() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QGuiApplication")
	}
}

func (ptr *QGuiApplication) DestroyQGuiApplication() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DestroyQGuiApplication(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGuiApplication) DestroyQGuiApplicationDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DestroyQGuiApplicationDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGuiApplication) SessionId() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGuiApplication_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGuiApplication) SessionKey() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGuiApplication_SessionKey(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGuiApplication) IsSavingSession() bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSavingSession(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGuiApplication) IsSessionRestored() bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSessionRestored(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGuiApplication) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGuiApplication_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGuiApplication) __screens_atList(i int) *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QGuiApplication___screens_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __screens_setList(i QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___screens_setList(ptr.Pointer(), PointerFromQScreen(i))
	}
}

func (ptr *QGuiApplication) __screens_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___screens_newList(ptr.Pointer()))
}

func (ptr *QGuiApplication) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QGuiApplication___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGuiApplication) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QGuiApplication) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGuiApplication) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QGuiApplication) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGuiApplication) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QGuiApplication) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGuiApplication) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___findChildren_newList(ptr.Pointer()))
}

func (ptr *QGuiApplication) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGuiApplication) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGuiApplication) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QGuiApplication___children_newList(ptr.Pointer()))
}

//export callbackQGuiApplication_AboutToQuit
func callbackQGuiApplication_AboutToQuit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "aboutToQuit"); signal != nil {
		signal.(func())()
	}

}

//export callbackQGuiApplication_Quit
func callbackQGuiApplication_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "quit"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).QuitDefault()
	}
}

func (ptr *QGuiApplication) QuitDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_QuitDefault(ptr.Pointer())
	}
}

//export callbackQGuiApplication_EventFilter
func callbackQGuiApplication_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGuiApplicationFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGuiApplication) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGuiApplication_ChildEvent
func callbackQGuiApplication_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGuiApplication_ConnectNotify
func callbackQGuiApplication_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_CustomEvent
func callbackQGuiApplication_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGuiApplication_DeleteLater
func callbackQGuiApplication_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGuiApplication) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGuiApplication_Destroyed
func callbackQGuiApplication_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGuiApplication_DisconnectNotify
func callbackQGuiApplication_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_ObjectNameChanged
func callbackQGuiApplication_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQGuiApplication_TimerEvent
func callbackQGuiApplication_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGuiApplication_MetaObject
func callbackQGuiApplication_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGuiApplicationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGuiApplication) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGuiApplication_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QHelpEvent struct {
	core.QEvent
}

type QHelpEvent_ITF interface {
	core.QEvent_ITF
	QHelpEvent_PTR() *QHelpEvent
}

func (ptr *QHelpEvent) QHelpEvent_PTR() *QHelpEvent {
	return ptr
}

func (ptr *QHelpEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QHelpEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQHelpEvent(ptr QHelpEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHelpEvent_PTR().Pointer()
	}
	return nil
}

func NewQHelpEventFromPointer(ptr unsafe.Pointer) *QHelpEvent {
	var n = new(QHelpEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHelpEvent) DestroyQHelpEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQHelpEvent(ty core.QEvent__Type, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QHelpEvent {
	return NewQHelpEventFromPointer(C.QHelpEvent_NewQHelpEvent(C.longlong(ty), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
}

func (ptr *QHelpEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_Y(ptr.Pointer())))
	}
	return 0
}

type QHideEvent struct {
	core.QEvent
}

type QHideEvent_ITF interface {
	core.QEvent_ITF
	QHideEvent_PTR() *QHideEvent
}

func (ptr *QHideEvent) QHideEvent_PTR() *QHideEvent {
	return ptr
}

func (ptr *QHideEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QHideEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQHideEvent(ptr QHideEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHideEvent_PTR().Pointer()
	}
	return nil
}

func NewQHideEventFromPointer(ptr unsafe.Pointer) *QHideEvent {
	var n = new(QHideEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHideEvent) DestroyQHideEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQHideEvent() *QHideEvent {
	return NewQHideEventFromPointer(C.QHideEvent_NewQHideEvent())
}

type QHoverEvent struct {
	QInputEvent
}

type QHoverEvent_ITF interface {
	QInputEvent_ITF
	QHoverEvent_PTR() *QHoverEvent
}

func (ptr *QHoverEvent) QHoverEvent_PTR() *QHoverEvent {
	return ptr
}

func (ptr *QHoverEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QHoverEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQHoverEvent(ptr QHoverEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHoverEvent_PTR().Pointer()
	}
	return nil
}

func NewQHoverEventFromPointer(ptr unsafe.Pointer) *QHoverEvent {
	var n = new(QHoverEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHoverEvent) DestroyQHoverEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQHoverEvent(ty core.QEvent__Type, pos core.QPointF_ITF, oldPos core.QPointF_ITF, modifiers core.Qt__KeyboardModifier) *QHoverEvent {
	return NewQHoverEventFromPointer(C.QHoverEvent_NewQHoverEvent(C.longlong(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(oldPos), C.longlong(modifiers)))
}

func (ptr *QHoverEvent) OldPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QHoverEvent_OldPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QHoverEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QHoverEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QHoverEvent) OldPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_OldPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHoverEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_PosF(ptr.Pointer()))
	}
	return nil
}

type QIcon struct {
	ptr unsafe.Pointer
}

type QIcon_ITF interface {
	QIcon_PTR() *QIcon
}

func (ptr *QIcon) QIcon_PTR() *QIcon {
	return ptr
}

func (ptr *QIcon) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QIcon) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQIcon(ptr QIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIcon_PTR().Pointer()
	}
	return nil
}

func NewQIconFromPointer(ptr unsafe.Pointer) *QIcon {
	var n = new(QIcon)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QIcon__Mode
//QIcon::Mode
type QIcon__Mode int64

const (
	QIcon__Normal   QIcon__Mode = QIcon__Mode(0)
	QIcon__Disabled QIcon__Mode = QIcon__Mode(1)
	QIcon__Active   QIcon__Mode = QIcon__Mode(2)
	QIcon__Selected QIcon__Mode = QIcon__Mode(3)
)

//go:generate stringer -type=QIcon__State
//QIcon::State
type QIcon__State int64

const (
	QIcon__On  QIcon__State = QIcon__State(0)
	QIcon__Off QIcon__State = QIcon__State(1)
)

func QIcon_FromTheme(name string) *QIcon {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme(nameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QIcon) FromTheme(name string) *QIcon {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme(nameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func QIcon_FromTheme2(name string, fallback QIcon_ITF) *QIcon {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme2(nameC, PointerFromQIcon(fallback)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QIcon) FromTheme2(name string, fallback QIcon_ITF) *QIcon {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme2(nameC, PointerFromQIcon(fallback)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon4(other QIcon_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon4(PointerFromQIcon(other)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon6(engine QIconEngine_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon6(PointerFromQIconEngine(engine)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon3(other QIcon_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon3(PointerFromQIcon(other)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon2(pixmap QPixmap_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon2(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon5(fileName string) *QIcon {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon5(fileNameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func QIcon_ThemeName() string {
	return cGoUnpackString(C.QIcon_QIcon_ThemeName())
}

func (ptr *QIcon) ThemeName() string {
	return cGoUnpackString(C.QIcon_QIcon_ThemeName())
}

func QIcon_ThemeSearchPaths() []string {
	return strings.Split(cGoUnpackString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func (ptr *QIcon) ThemeSearchPaths() []string {
	return strings.Split(cGoUnpackString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func QIcon_HasThemeIcon(name string) bool {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	return C.QIcon_QIcon_HasThemeIcon(nameC) != 0
}

func (ptr *QIcon) HasThemeIcon(name string) bool {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	return C.QIcon_QIcon_HasThemeIcon(nameC) != 0
}

func (ptr *QIcon) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QIcon_AddFile(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) SetIsMask(isMask bool) {
	if ptr.Pointer() != nil {
		C.QIcon_SetIsMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(isMask))))
	}
}

func QIcon_SetThemeName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QIcon_QIcon_SetThemeName(nameC)
}

func (ptr *QIcon) SetThemeName(name string) {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	C.QIcon_QIcon_SetThemeName(nameC)
}

func QIcon_SetThemeSearchPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QIcon_QIcon_SetThemeSearchPaths(pathsC)
}

func (ptr *QIcon) SetThemeSearchPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QIcon_QIcon_SetThemeSearchPaths(pathsC)
}

func (ptr *QIcon) Swap(other QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QIcon_Swap(ptr.Pointer(), PointerFromQIcon(other))
	}
}

func (ptr *QIcon) DestroyQIcon() {
	if ptr.Pointer() != nil {
		C.QIcon_DestroyQIcon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QIcon) AvailableSizes(mode QIcon__Mode, state QIcon__State) []*core.QSize {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QSize {
			var out = make([]*core.QSize, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQIconFromPointer(l.data).__availableSizes_atList(i)
			}
			return out
		}(C.QIcon_AvailableSizes(ptr.Pointer(), C.longlong(mode), C.longlong(state)))
	}
	return make([]*core.QSize, 0)
}

func (ptr *QIcon) Pixmap4(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap4(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap3(extent int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap3(ptr.Pointer(), C.int(int32(extent)), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap2(w int, h int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) ActualSize2(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon_ActualSize2(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIcon_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIcon) IsMask() bool {
	if ptr.Pointer() != nil {
		return C.QIcon_IsMask(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIcon) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QIcon_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIcon) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIcon_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIcon) Paint(painter QPainter_ITF, rect core.QRect_ITF, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.longlong(alignment), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) Paint2(painter QPainter_ITF, x int, y int, w int, h int, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_Paint2(ptr.Pointer(), PointerFromQPainter(painter), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.longlong(alignment), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) __availableSizes_atList(i int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon___availableSizes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) __availableSizes_setList(i core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QIcon___availableSizes_setList(ptr.Pointer(), core.PointerFromQSize(i))
	}
}

func (ptr *QIcon) __availableSizes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QIcon___availableSizes_newList(ptr.Pointer()))
}

type QIconDragEvent struct {
	core.QEvent
}

type QIconDragEvent_ITF interface {
	core.QEvent_ITF
	QIconDragEvent_PTR() *QIconDragEvent
}

func (ptr *QIconDragEvent) QIconDragEvent_PTR() *QIconDragEvent {
	return ptr
}

func (ptr *QIconDragEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QIconDragEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQIconDragEvent(ptr QIconDragEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconDragEvent_PTR().Pointer()
	}
	return nil
}

func NewQIconDragEventFromPointer(ptr unsafe.Pointer) *QIconDragEvent {
	var n = new(QIconDragEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QIconDragEvent) DestroyQIconDragEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQIconDragEvent() *QIconDragEvent {
	return NewQIconDragEventFromPointer(C.QIconDragEvent_NewQIconDragEvent())
}

type QIconEngine struct {
	ptr unsafe.Pointer
}

type QIconEngine_ITF interface {
	QIconEngine_PTR() *QIconEngine
}

func (ptr *QIconEngine) QIconEngine_PTR() *QIconEngine {
	return ptr
}

func (ptr *QIconEngine) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QIconEngine) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQIconEngine(ptr QIconEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEngine_PTR().Pointer()
	}
	return nil
}

func NewQIconEngineFromPointer(ptr unsafe.Pointer) *QIconEngine {
	var n = new(QIconEngine)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QIconEngine__IconEngineHook
//QIconEngine::IconEngineHook
type QIconEngine__IconEngineHook int64

const (
	QIconEngine__AvailableSizesHook QIconEngine__IconEngineHook = QIconEngine__IconEngineHook(1)
	QIconEngine__IconNameHook       QIconEngine__IconEngineHook = QIconEngine__IconEngineHook(2)
	QIconEngine__IsNullHook         QIconEngine__IconEngineHook = QIconEngine__IconEngineHook(3)
)

func NewQIconEngine() *QIconEngine {
	return NewQIconEngineFromPointer(C.QIconEngine_NewQIconEngine())
}

//export callbackQIconEngine_Pixmap
func callbackQIconEngine_Pixmap(ptr unsafe.Pointer, size unsafe.Pointer, mode C.longlong, state C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "pixmap"); signal != nil {
		return PointerFromQPixmap(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *QPixmap)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return PointerFromQPixmap(NewQIconEngineFromPointer(ptr).PixmapDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectPixmap(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *QPixmap) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "pixmap"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pixmap", func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *QPixmap {
				signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *QPixmap)(size, mode, state)
				return f(size, mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "pixmap", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "pixmap")
	}
}

func (ptr *QIconEngine) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIconEngine_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEngine) PixmapDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIconEngine_PixmapDefault(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

//export callbackQIconEngine_ActualSize
func callbackQIconEngine_ActualSize(ptr unsafe.Pointer, size unsafe.Pointer, mode C.longlong, state C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "actualSize"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *core.QSize)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return core.PointerFromQSize(NewQIconEngineFromPointer(ptr).ActualSizeDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectActualSize(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "actualSize"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actualSize", func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *core.QSize {
				signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *core.QSize)(size, mode, state)
				return f(size, mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "actualSize", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectActualSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "actualSize")
	}
}

func (ptr *QIconEngine) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEngine) ActualSizeDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine_ActualSizeDefault(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQIconEngine_Read
func callbackQIconEngine_Read(ptr unsafe.Pointer, in unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "read"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QDataStream) bool)(core.NewQDataStreamFromPointer(in)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEngineFromPointer(ptr).ReadDefault(core.NewQDataStreamFromPointer(in)))))
}

func (ptr *QIconEngine) ConnectRead(f func(in *core.QDataStream) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "read"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", func(in *core.QDataStream) bool {
				signal.(func(*core.QDataStream) bool)(in)
				return f(in)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "read")
	}
}

func (ptr *QIconEngine) Read(in core.QDataStream_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_Read(ptr.Pointer(), core.PointerFromQDataStream(in)) != 0
	}
	return false
}

func (ptr *QIconEngine) ReadDefault(in core.QDataStream_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_ReadDefault(ptr.Pointer(), core.PointerFromQDataStream(in)) != 0
	}
	return false
}

//export callbackQIconEngine_AddFile
func callbackQIconEngine_AddFile(ptr unsafe.Pointer, fileName C.struct_QtGui_PackedString, size unsafe.Pointer, mode C.longlong, state C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "addFile"); signal != nil {
		signal.(func(string, *core.QSize, QIcon__Mode, QIcon__State))(cGoUnpackString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddFileDefault(cGoUnpackString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddFile(f func(fileName string, size *core.QSize, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "addFile"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addFile", func(fileName string, size *core.QSize, mode QIcon__Mode, state QIcon__State) {
				signal.(func(string, *core.QSize, QIcon__Mode, QIcon__State))(fileName, size, mode, state)
				f(fileName, size, mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addFile", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectAddFile() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "addFile")
	}
}

func (ptr *QIconEngine) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QIconEngine_AddFile(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIconEngine) AddFileDefault(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QIconEngine_AddFileDefault(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_AddPixmap
func callbackQIconEngine_AddPixmap(ptr unsafe.Pointer, pixmap unsafe.Pointer, mode C.longlong, state C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "addPixmap"); signal != nil {
		signal.(func(*QPixmap, QIcon__Mode, QIcon__State))(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddPixmapDefault(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddPixmap(f func(pixmap *QPixmap, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "addPixmap"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addPixmap", func(pixmap *QPixmap, mode QIcon__Mode, state QIcon__State) {
				signal.(func(*QPixmap, QIcon__Mode, QIcon__State))(pixmap, mode, state)
				f(pixmap, mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "addPixmap", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectAddPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "addPixmap")
	}
}

func (ptr *QIconEngine) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIconEngine) AddPixmapDefault(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmapDefault(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_Paint
func callbackQIconEngine_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer, mode C.longlong, state C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paint"); signal != nil {
		signal.(func(*QPainter, *core.QRect, QIcon__Mode, QIcon__State))(NewQPainterFromPointer(painter), core.NewQRectFromPointer(rect), QIcon__Mode(mode), QIcon__State(state))
	}

}

func (ptr *QIconEngine) ConnectPaint(f func(painter *QPainter, rect *core.QRect, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "paint"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paint", func(painter *QPainter, rect *core.QRect, mode QIcon__Mode, state QIcon__State) {
				signal.(func(*QPainter, *core.QRect, QIcon__Mode, QIcon__State))(painter, rect, mode, state)
				f(painter, rect, mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paint", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "paint")
	}
}

func (ptr *QIconEngine) Paint(painter QPainter_ITF, rect core.QRect_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_Virtual_hook
func callbackQIconEngine_Virtual_hook(ptr unsafe.Pointer, id C.int, data unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "virtual_hook"); signal != nil {
		signal.(func(int, unsafe.Pointer))(int(int32(id)), data)
	} else {
		NewQIconEngineFromPointer(ptr).Virtual_hookDefault(int(int32(id)), data)
	}
}

func (ptr *QIconEngine) ConnectVirtual_hook(f func(id int, data unsafe.Pointer)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "virtual_hook"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "virtual_hook", func(id int, data unsafe.Pointer) {
				signal.(func(int, unsafe.Pointer))(id, data)
				f(id, data)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "virtual_hook", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectVirtual_hook() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "virtual_hook")
	}
}

func (ptr *QIconEngine) Virtual_hook(id int, data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hook(ptr.Pointer(), C.int(int32(id)), data)
	}
}

func (ptr *QIconEngine) Virtual_hookDefault(id int, data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hookDefault(ptr.Pointer(), C.int(int32(id)), data)
	}
}

//export callbackQIconEngine_DestroyQIconEngine
func callbackQIconEngine_DestroyQIconEngine(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QIconEngine"); signal != nil {
		signal.(func())()
	} else {
		NewQIconEngineFromPointer(ptr).DestroyQIconEngineDefault()
	}
}

func (ptr *QIconEngine) ConnectDestroyQIconEngine(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QIconEngine"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QIconEngine", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QIconEngine", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectDestroyQIconEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QIconEngine")
	}
}

func (ptr *QIconEngine) DestroyQIconEngine() {
	if ptr.Pointer() != nil {
		C.QIconEngine_DestroyQIconEngine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEngine) DestroyQIconEngineDefault() {
	if ptr.Pointer() != nil {
		C.QIconEngine_DestroyQIconEngineDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEngine_Clone
func callbackQIconEngine_Clone(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "clone"); signal != nil {
		return PointerFromQIconEngine(signal.(func() *QIconEngine)())
	}

	return PointerFromQIconEngine(NewQIconEngine())
}

func (ptr *QIconEngine) ConnectClone(f func() *QIconEngine) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "clone"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clone", func() *QIconEngine {
				signal.(func() *QIconEngine)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clone", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectClone() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "clone")
	}
}

func (ptr *QIconEngine) Clone() *QIconEngine {
	if ptr.Pointer() != nil {
		return NewQIconEngineFromPointer(C.QIconEngine_Clone(ptr.Pointer()))
	}
	return nil
}

//export callbackQIconEngine_AvailableSizes
func callbackQIconEngine_AvailableSizes(ptr unsafe.Pointer, mode C.longlong, state C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "availableSizes"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQIconEngineFromPointer(NewQIconEngineFromPointer(nil).__availableSizes_newList())
			for _, v := range signal.(func(QIcon__Mode, QIcon__State) []*core.QSize)(QIcon__Mode(mode), QIcon__State(state)) {
				tmpList.__availableSizes_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQIconEngineFromPointer(NewQIconEngineFromPointer(nil).__availableSizes_newList())
		for _, v := range NewQIconEngineFromPointer(ptr).AvailableSizesDefault(QIcon__Mode(mode), QIcon__State(state)) {
			tmpList.__availableSizes_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QIconEngine) ConnectAvailableSizes(f func(mode QIcon__Mode, state QIcon__State) []*core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "availableSizes"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "availableSizes", func(mode QIcon__Mode, state QIcon__State) []*core.QSize {
				signal.(func(QIcon__Mode, QIcon__State) []*core.QSize)(mode, state)
				return f(mode, state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "availableSizes", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectAvailableSizes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "availableSizes")
	}
}

func (ptr *QIconEngine) AvailableSizes(mode QIcon__Mode, state QIcon__State) []*core.QSize {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QSize {
			var out = make([]*core.QSize, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQIconEngineFromPointer(l.data).__availableSizes_atList(i)
			}
			return out
		}(C.QIconEngine_AvailableSizes(ptr.Pointer(), C.longlong(mode), C.longlong(state)))
	}
	return make([]*core.QSize, 0)
}

func (ptr *QIconEngine) AvailableSizesDefault(mode QIcon__Mode, state QIcon__State) []*core.QSize {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QSize {
			var out = make([]*core.QSize, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQIconEngineFromPointer(l.data).__availableSizes_atList(i)
			}
			return out
		}(C.QIconEngine_AvailableSizesDefault(ptr.Pointer(), C.longlong(mode), C.longlong(state)))
	}
	return make([]*core.QSize, 0)
}

//export callbackQIconEngine_IconName
func callbackQIconEngine_IconName(ptr unsafe.Pointer) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "iconName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).IconNameDefault())
}

func (ptr *QIconEngine) ConnectIconName(f func() string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "iconName"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "iconName", func() string {
				signal.(func() string)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "iconName", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectIconName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "iconName")
	}
}

func (ptr *QIconEngine) IconName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_IconName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) IconNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_IconNameDefault(ptr.Pointer()))
	}
	return ""
}

//export callbackQIconEngine_Key
func callbackQIconEngine_Key(ptr unsafe.Pointer) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "key"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).KeyDefault())
}

func (ptr *QIconEngine) ConnectKey(f func() string) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "key"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "key", func() string {
				signal.(func() string)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "key", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectKey() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "key")
	}
}

func (ptr *QIconEngine) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) KeyDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_KeyDefault(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_IsNull(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIconEngine_Write
func callbackQIconEngine_Write(ptr unsafe.Pointer, out unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "write"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QDataStream) bool)(core.NewQDataStreamFromPointer(out)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEngineFromPointer(ptr).WriteDefault(core.NewQDataStreamFromPointer(out)))))
}

func (ptr *QIconEngine) ConnectWrite(f func(out *core.QDataStream) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "write"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", func(out *core.QDataStream) bool {
				signal.(func(*core.QDataStream) bool)(out)
				return f(out)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", f)
		}
	}
}

func (ptr *QIconEngine) DisconnectWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "write")
	}
}

func (ptr *QIconEngine) Write(out core.QDataStream_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_Write(ptr.Pointer(), core.PointerFromQDataStream(out)) != 0
	}
	return false
}

func (ptr *QIconEngine) WriteDefault(out core.QDataStream_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_WriteDefault(ptr.Pointer(), core.PointerFromQDataStream(out)) != 0
	}
	return false
}

func (ptr *QIconEngine) __availableSizes_atList(i int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine___availableSizes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEngine) __availableSizes_setList(i core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEngine___availableSizes_setList(ptr.Pointer(), core.PointerFromQSize(i))
	}
}

func (ptr *QIconEngine) __availableSizes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEngine___availableSizes_newList(ptr.Pointer()))
}

type QIconEnginePlugin struct {
	core.QObject
}

type QIconEnginePlugin_ITF interface {
	core.QObject_ITF
	QIconEnginePlugin_PTR() *QIconEnginePlugin
}

func (ptr *QIconEnginePlugin) QIconEnginePlugin_PTR() *QIconEnginePlugin {
	return ptr
}

func (ptr *QIconEnginePlugin) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QIconEnginePlugin) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQIconEnginePlugin(ptr QIconEnginePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEnginePlugin_PTR().Pointer()
	}
	return nil
}

func NewQIconEnginePluginFromPointer(ptr unsafe.Pointer) *QIconEnginePlugin {
	var n = new(QIconEnginePlugin)
	n.SetPointer(ptr)
	return n
}

//export callbackQIconEnginePlugin_Create
func callbackQIconEnginePlugin_Create(ptr unsafe.Pointer, filename C.struct_QtGui_PackedString) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "create"); signal != nil {
		return PointerFromQIconEngine(signal.(func(string) *QIconEngine)(cGoUnpackString(filename)))
	}

	return PointerFromQIconEngine(NewQIconEngine())
}

func (ptr *QIconEnginePlugin) ConnectCreate(f func(filename string) *QIconEngine) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "create"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", func(filename string) *QIconEngine {
				signal.(func(string) *QIconEngine)(filename)
				return f(filename)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", f)
		}
	}
}

func (ptr *QIconEnginePlugin) DisconnectCreate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "create")
	}
}

func (ptr *QIconEnginePlugin) Create(filename string) *QIconEngine {
	if ptr.Pointer() != nil {
		var filenameC *C.char
		if filename != "" {
			filenameC = C.CString(filename)
			defer C.free(unsafe.Pointer(filenameC))
		}
		return NewQIconEngineFromPointer(C.QIconEnginePlugin_Create(ptr.Pointer(), filenameC))
	}
	return nil
}

func NewQIconEnginePlugin(parent core.QObject_ITF) *QIconEnginePlugin {
	var tmpValue = NewQIconEnginePluginFromPointer(C.QIconEnginePlugin_NewQIconEnginePlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QIconEnginePlugin) DestroyQIconEnginePlugin() {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DestroyQIconEnginePlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEnginePlugin) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QIconEnginePlugin___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEnginePlugin) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QIconEnginePlugin) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEnginePlugin___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QIconEnginePlugin) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QIconEnginePlugin___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QIconEnginePlugin) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QIconEnginePlugin) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEnginePlugin___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QIconEnginePlugin) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QIconEnginePlugin___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QIconEnginePlugin) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QIconEnginePlugin) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEnginePlugin___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QIconEnginePlugin) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QIconEnginePlugin___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QIconEnginePlugin) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QIconEnginePlugin) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEnginePlugin___findChildren_newList(ptr.Pointer()))
}

func (ptr *QIconEnginePlugin) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QIconEnginePlugin___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QIconEnginePlugin) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QIconEnginePlugin) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QIconEnginePlugin___children_newList(ptr.Pointer()))
}

//export callbackQIconEnginePlugin_Event
func callbackQIconEnginePlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QIconEnginePlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_EventFilter
func callbackQIconEnginePlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QIconEnginePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_ChildEvent
func callbackQIconEnginePlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQIconEnginePlugin_ConnectNotify
func callbackQIconEnginePlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_CustomEvent
func callbackQIconEnginePlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQIconEnginePlugin_DeleteLater
func callbackQIconEnginePlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQIconEnginePluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QIconEnginePlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEnginePlugin_Destroyed
func callbackQIconEnginePlugin_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQIconEnginePlugin_DisconnectNotify
func callbackQIconEnginePlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_ObjectNameChanged
func callbackQIconEnginePlugin_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQIconEnginePlugin_TimerEvent
func callbackQIconEnginePlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQIconEnginePlugin_MetaObject
func callbackQIconEnginePlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQIconEnginePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIconEnginePlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIconEnginePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QImage struct {
	QPaintDevice
}

type QImage_ITF interface {
	QPaintDevice_ITF
	QImage_PTR() *QImage
}

func (ptr *QImage) QImage_PTR() *QImage {
	return ptr
}

func (ptr *QImage) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (ptr *QImage) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQImage(ptr QImage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImage_PTR().Pointer()
	}
	return nil
}

func NewQImageFromPointer(ptr unsafe.Pointer) *QImage {
	var n = new(QImage)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QImage__Format
//QImage::Format
type QImage__Format int64

const (
	QImage__Format_Invalid                QImage__Format = QImage__Format(0)
	QImage__Format_Mono                   QImage__Format = QImage__Format(1)
	QImage__Format_MonoLSB                QImage__Format = QImage__Format(2)
	QImage__Format_Indexed8               QImage__Format = QImage__Format(3)
	QImage__Format_RGB32                  QImage__Format = QImage__Format(4)
	QImage__Format_ARGB32                 QImage__Format = QImage__Format(5)
	QImage__Format_ARGB32_Premultiplied   QImage__Format = QImage__Format(6)
	QImage__Format_RGB16                  QImage__Format = QImage__Format(7)
	QImage__Format_ARGB8565_Premultiplied QImage__Format = QImage__Format(8)
	QImage__Format_RGB666                 QImage__Format = QImage__Format(9)
	QImage__Format_ARGB6666_Premultiplied QImage__Format = QImage__Format(10)
	QImage__Format_RGB555                 QImage__Format = QImage__Format(11)
	QImage__Format_ARGB8555_Premultiplied QImage__Format = QImage__Format(12)
	QImage__Format_RGB888                 QImage__Format = QImage__Format(13)
	QImage__Format_RGB444                 QImage__Format = QImage__Format(14)
	QImage__Format_ARGB4444_Premultiplied QImage__Format = QImage__Format(15)
	QImage__Format_RGBX8888               QImage__Format = QImage__Format(16)
	QImage__Format_RGBA8888               QImage__Format = QImage__Format(17)
	QImage__Format_RGBA8888_Premultiplied QImage__Format = QImage__Format(18)
	QImage__Format_BGR30                  QImage__Format = QImage__Format(19)
	QImage__Format_A2BGR30_Premultiplied  QImage__Format = QImage__Format(20)
	QImage__Format_RGB30                  QImage__Format = QImage__Format(21)
	QImage__Format_A2RGB30_Premultiplied  QImage__Format = QImage__Format(22)
	QImage__Format_Alpha8                 QImage__Format = QImage__Format(23)
	QImage__Format_Grayscale8             QImage__Format = QImage__Format(24)
)

//go:generate stringer -type=QImage__InvertMode
//QImage::InvertMode
type QImage__InvertMode int64

const (
	QImage__InvertRgb  QImage__InvertMode = QImage__InvertMode(0)
	QImage__InvertRgba QImage__InvertMode = QImage__InvertMode(1)
)

func QImage_FromData2(data core.QByteArray_ITF, format string) *QImage {
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData2(core.PointerFromQByteArray(data), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) FromData2(data core.QByteArray_ITF, format string) *QImage {
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData2(core.PointerFromQByteArray(data), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func QImage_FromData(data string, size int, format string) *QImage {
	var dataC *C.char
	if data != "" {
		dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
	}
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData(dataC, C.int(int32(size)), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) FromData(data string, size int, format string) *QImage {
	var dataC *C.char
	if data != "" {
		dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
	}
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData(dataC, C.int(int32(size)), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage() *QImage {
	return NewQImageFromPointer(C.QImage_NewQImage())
}

func NewQImage11(other QImage_ITF) *QImage {
	return NewQImageFromPointer(C.QImage_NewQImage11(PointerFromQImage(other)))
}

func NewQImage10(image QImage_ITF) *QImage {
	return NewQImageFromPointer(C.QImage_NewQImage10(PointerFromQImage(image)))
}

func NewQImage2(size core.QSize_ITF, format QImage__Format) *QImage {
	return NewQImageFromPointer(C.QImage_NewQImage2(core.PointerFromQSize(size), C.longlong(format)))
}

func NewQImage9(fileName string, format string) *QImage {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	return NewQImageFromPointer(C.QImage_NewQImage9(fileNameC, formatC))
}

func NewQImage3(width int, height int, format QImage__Format) *QImage {
	return NewQImageFromPointer(C.QImage_NewQImage3(C.int(int32(width)), C.int(int32(height)), C.longlong(format)))
}

func QImage_ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func (ptr *QImage) ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func QImage_ToPixelFormat(format QImage__Format) *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QImage_QImage_ToPixelFormat(C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func (ptr *QImage) ToPixelFormat(format QImage__Format) *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QImage_QImage_ToPixelFormat(C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func QImage_TrueMatrix2(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QImage_QImage_TrueMatrix2(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QImage) TrueMatrix2(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QImage_QImage_TrueMatrix2(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QImage) Load2(device core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_Load2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC) != 0
	}
	return false
}

func (ptr *QImage) Load(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_Load(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QImage) LoadFromData2(data core.QByteArray_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_LoadFromData2(ptr.Pointer(), core.PointerFromQByteArray(data), formatC) != 0
	}
	return false
}

func (ptr *QImage) LoadFromData(data string, len int, format string) bool {
	if ptr.Pointer() != nil {
		var dataC *C.char
		if data != "" {
			dataC = C.CString(data)
			defer C.free(unsafe.Pointer(dataC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_LoadFromData(ptr.Pointer(), dataC, C.int(int32(len)), formatC) != 0
	}
	return false
}

func (ptr *QImage) Bits() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_Bits(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) ScanLine(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ScanLine(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) Fill3(color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QImage_Fill3(ptr.Pointer(), C.longlong(color))
	}
}

func (ptr *QImage) Fill2(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_Fill2(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImage) Fill(pixelValue uint) {
	if ptr.Pointer() != nil {
		C.QImage_Fill(ptr.Pointer(), C.uint(uint32(pixelValue)))
	}
}

func (ptr *QImage) InvertPixels(mode QImage__InvertMode) {
	if ptr.Pointer() != nil {
		C.QImage_InvertPixels(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QImage) SetColorCount(colorCount int) {
	if ptr.Pointer() != nil {
		C.QImage_SetColorCount(ptr.Pointer(), C.int(int32(colorCount)))
	}
}

func (ptr *QImage) SetDevicePixelRatio(scaleFactor float64) {
	if ptr.Pointer() != nil {
		C.QImage_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QImage) SetDotsPerMeterX(x int) {
	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QImage) SetDotsPerMeterY(y int) {
	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterY(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QImage) SetOffset(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetOffset(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QImage) SetPixel(position core.QPoint_ITF, index_or_rgb uint) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixel(ptr.Pointer(), core.PointerFromQPoint(position), C.uint(uint32(index_or_rgb)))
	}
}

func (ptr *QImage) SetPixel2(x int, y int, index_or_rgb uint) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixel2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.uint(uint32(index_or_rgb)))
	}
}

func (ptr *QImage) SetPixelColor(position core.QPoint_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixelColor(ptr.Pointer(), core.PointerFromQPoint(position), PointerFromQColor(color))
	}
}

func (ptr *QImage) SetPixelColor2(x int, y int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixelColor2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQColor(color))
	}
}

func (ptr *QImage) SetText(key string, text string) {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QImage_SetText(ptr.Pointer(), keyC, textC)
	}
}

func (ptr *QImage) Swap(other QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_Swap(ptr.Pointer(), PointerFromQImage(other))
	}
}

func (ptr *QImage) DestroyQImage() {
	if ptr.Pointer() != nil {
		C.QImage_DestroyQImage(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImage) Format() QImage__Format {
	if ptr.Pointer() != nil {
		return QImage__Format(C.QImage_Format(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) PixelColor(position core.QPoint_ITF) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImage_PixelColor(ptr.Pointer(), core.PointerFromQPoint(position)))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) PixelColor2(x int, y int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImage_PixelColor2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ConvertToFormat(format QImage__Format, flags core.Qt__ImageConversionFlag) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ConvertToFormat(ptr.Pointer(), C.longlong(format), C.longlong(flags)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Copy(rectangle core.QRect_ITF) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Copy2(x int, y int, width int, height int) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Copy2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) CreateAlphaMask(flags core.Qt__ImageConversionFlag) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_CreateAlphaMask(ptr.Pointer(), C.longlong(flags)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) CreateHeuristicMask(clipTight bool) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_CreateHeuristicMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(clipTight)))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Mirrored(horizontal bool, vertical bool) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Mirrored(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(horizontal))), C.char(int8(qt.GoBoolToInt(vertical)))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) RgbSwapped() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_RgbSwapped(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Scaled2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ScaledToHeight(ptr.Pointer(), C.int(int32(height)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ScaledToWidth(ptr.Pointer(), C.int(int32(width)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) SmoothScaled(w int, h int) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_SmoothScaled(ptr.Pointer(), C.int(int32(w)), C.int(int32(h))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Transformed2(matrix QTransform_ITF, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Transformed2(ptr.Pointer(), PointerFromQTransform(matrix), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) PixelFormat() *QPixelFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixelFormatFromPointer(C.QImage_PixelFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Offset() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QImage_Offset(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImage_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImage_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Text(key string) string {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		return cGoUnpackString(C.QImage_Text(ptr.Pointer(), keyC))
	}
	return ""
}

func (ptr *QImage) TextKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QImage_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QImage) AllGray() bool {
	if ptr.Pointer() != nil {
		return C.QImage_AllGray(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) HasAlphaChannel() bool {
	if ptr.Pointer() != nil {
		return C.QImage_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) IsGrayscale() bool {
	if ptr.Pointer() != nil {
		return C.QImage_IsGrayscale(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QImage_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QImage) Save(fileName string, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QImage_Save(ptr.Pointer(), fileNameC, formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QImage) Valid(pos core.QPoint_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImage_Valid(ptr.Pointer(), core.PointerFromQPoint(pos)) != 0
	}
	return false
}

func (ptr *QImage) Valid2(x int, y int) bool {
	if ptr.Pointer() != nil {
		return C.QImage_Valid2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))) != 0
	}
	return false
}

func (ptr *QImage) Bits2() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_Bits2(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) ConstBits() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ConstBits(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) ConstScanLine(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ConstScanLine(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) ScanLine2(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ScanLine2(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) BitPlaneCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_BitPlaneCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) ByteCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_ByteCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) BytesPerLine() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_BytesPerLine(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_DotsPerMeterX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_DotsPerMeterY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) PixelIndex(position core.QPoint_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_PixelIndex(ptr.Pointer(), core.PointerFromQPoint(position))))
	}
	return 0
}

func (ptr *QImage) PixelIndex2(x int, y int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_PixelIndex2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))))
	}
	return 0
}

func (ptr *QImage) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QImage_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QImage_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImage_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) __setColorTable_colors_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImage___setColorTable_colors_newList(ptr.Pointer()))
}

func (ptr *QImage) __convertToFormat_colorTable_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QImage___convertToFormat_colorTable_newList2(ptr.Pointer()))
}

func (ptr *QImage) __colorTable_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImage___colorTable_newList(ptr.Pointer()))
}

//export callbackQImage_PaintEngine
func callbackQImage_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQImageFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QImage) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QImage_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImage) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QImage_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QImageIOHandler struct {
	ptr unsafe.Pointer
}

type QImageIOHandler_ITF interface {
	QImageIOHandler_PTR() *QImageIOHandler
}

func (ptr *QImageIOHandler) QImageIOHandler_PTR() *QImageIOHandler {
	return ptr
}

func (ptr *QImageIOHandler) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QImageIOHandler) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQImageIOHandler(ptr QImageIOHandler_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOHandler_PTR().Pointer()
	}
	return nil
}

func NewQImageIOHandlerFromPointer(ptr unsafe.Pointer) *QImageIOHandler {
	var n = new(QImageIOHandler)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QImageIOHandler__ImageOption
//QImageIOHandler::ImageOption
type QImageIOHandler__ImageOption int64

const (
	QImageIOHandler__Size                 QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(0)
	QImageIOHandler__ClipRect             QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(1)
	QImageIOHandler__Description          QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(2)
	QImageIOHandler__ScaledClipRect       QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(3)
	QImageIOHandler__ScaledSize           QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(4)
	QImageIOHandler__CompressionRatio     QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(5)
	QImageIOHandler__Gamma                QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(6)
	QImageIOHandler__Quality              QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(7)
	QImageIOHandler__Name                 QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(8)
	QImageIOHandler__SubType              QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(9)
	QImageIOHandler__IncrementalReading   QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(10)
	QImageIOHandler__Endianness           QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(11)
	QImageIOHandler__Animation            QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(12)
	QImageIOHandler__BackgroundColor      QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(13)
	QImageIOHandler__ImageFormat          QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(14)
	QImageIOHandler__SupportedSubTypes    QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(15)
	QImageIOHandler__OptimizedWrite       QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(16)
	QImageIOHandler__ProgressiveScanWrite QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(17)
	QImageIOHandler__ImageTransformation  QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(18)
	QImageIOHandler__TransformedByDefault QImageIOHandler__ImageOption = QImageIOHandler__ImageOption(19)
)

//go:generate stringer -type=QImageIOHandler__Transformation
//QImageIOHandler::Transformation
type QImageIOHandler__Transformation int64

const (
	QImageIOHandler__TransformationNone              QImageIOHandler__Transformation = QImageIOHandler__Transformation(0)
	QImageIOHandler__TransformationMirror            QImageIOHandler__Transformation = QImageIOHandler__Transformation(1)
	QImageIOHandler__TransformationFlip              QImageIOHandler__Transformation = QImageIOHandler__Transformation(2)
	QImageIOHandler__TransformationRotate180         QImageIOHandler__Transformation = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationFlip)
	QImageIOHandler__TransformationRotate90          QImageIOHandler__Transformation = QImageIOHandler__Transformation(4)
	QImageIOHandler__TransformationMirrorAndRotate90 QImageIOHandler__Transformation = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationFlipAndRotate90   QImageIOHandler__Transformation = QImageIOHandler__Transformation(QImageIOHandler__TransformationFlip | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationRotate270         QImageIOHandler__Transformation = QImageIOHandler__Transformation(QImageIOHandler__TransformationRotate180 | QImageIOHandler__TransformationRotate90)
)

func NewQImageIOHandler() *QImageIOHandler {
	return NewQImageIOHandlerFromPointer(C.QImageIOHandler_NewQImageIOHandler())
}

//export callbackQImageIOHandler_JumpToImage
func callbackQImageIOHandler_JumpToImage(ptr unsafe.Pointer, imageNumber C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "jumpToImage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(imageNumber))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToImageDefault(int(int32(imageNumber))))))
}

func (ptr *QImageIOHandler) ConnectJumpToImage(f func(imageNumber int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "jumpToImage"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToImage", func(imageNumber int) bool {
				signal.(func(int) bool)(imageNumber)
				return f(imageNumber)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToImage", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToImage")
	}
}

func (ptr *QImageIOHandler) JumpToImage(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImage(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToImageDefault(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImageDefault(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

//export callbackQImageIOHandler_JumpToNextImage
func callbackQImageIOHandler_JumpToNextImage(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "jumpToNextImage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToNextImageDefault())))
}

func (ptr *QImageIOHandler) ConnectJumpToNextImage(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextImage"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextImage", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextImage", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToNextImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextImage")
	}
}

func (ptr *QImageIOHandler) JumpToNextImage() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToNextImageDefault() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImageDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_Read
func callbackQImageIOHandler_Read(ptr unsafe.Pointer, image unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "read"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QImageIOHandler) ConnectRead(f func(image *QImage) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "read"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", func(image *QImage) bool {
				signal.(func(*QImage) bool)(image)
				return f(image)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "read")
	}
}

func (ptr *QImageIOHandler) Read(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Read(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

//export callbackQImageIOHandler_Write
func callbackQImageIOHandler_Write(ptr unsafe.Pointer, image unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "write"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).WriteDefault(NewQImageFromPointer(image)))))
}

func (ptr *QImageIOHandler) ConnectWrite(f func(image *QImage) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "write"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", func(image *QImage) bool {
				signal.(func(*QImage) bool)(image)
				return f(image)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "write")
	}
}

func (ptr *QImageIOHandler) Write(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) WriteDefault(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_WriteDefault(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageIOHandler) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

//export callbackQImageIOHandler_SetOption
func callbackQImageIOHandler_SetOption(ptr unsafe.Pointer, option C.longlong, value unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setOption"); signal != nil {
		signal.(func(QImageIOHandler__ImageOption, *core.QVariant))(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	} else {
		NewQImageIOHandlerFromPointer(ptr).SetOptionDefault(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	}
}

func (ptr *QImageIOHandler) ConnectSetOption(f func(option QImageIOHandler__ImageOption, value *core.QVariant)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setOption"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setOption", func(option QImageIOHandler__ImageOption, value *core.QVariant) {
				signal.(func(QImageIOHandler__ImageOption, *core.QVariant))(option, value)
				f(option, value)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setOption", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectSetOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setOption")
	}
}

func (ptr *QImageIOHandler) SetOption(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOption(ptr.Pointer(), C.longlong(option), core.PointerFromQVariant(value))
	}
}

func (ptr *QImageIOHandler) SetOptionDefault(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOptionDefault(ptr.Pointer(), C.longlong(option), core.PointerFromQVariant(value))
	}
}

//export callbackQImageIOHandler_DestroyQImageIOHandler
func callbackQImageIOHandler_DestroyQImageIOHandler(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QImageIOHandler"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOHandlerFromPointer(ptr).DestroyQImageIOHandlerDefault()
	}
}

func (ptr *QImageIOHandler) ConnectDestroyQImageIOHandler(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOHandler"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOHandler", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOHandler", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectDestroyQImageIOHandler() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOHandler")
	}
}

func (ptr *QImageIOHandler) DestroyQImageIOHandler() {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_DestroyQImageIOHandler(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOHandler) DestroyQImageIOHandlerDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_DestroyQImageIOHandlerDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOHandler) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageIOHandler_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageIOHandler_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQImageIOHandler_CurrentImageRect
func callbackQImageIOHandler_CurrentImageRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "currentImageRect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQImageIOHandlerFromPointer(ptr).CurrentImageRectDefault())
}

func (ptr *QImageIOHandler) ConnectCurrentImageRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "currentImageRect"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageRect", func() *core.QRect {
				signal.(func() *core.QRect)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageRect", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageRect")
	}
}

func (ptr *QImageIOHandler) CurrentImageRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) CurrentImageRectDefault() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQImageIOHandler_Option
func callbackQImageIOHandler_Option(ptr unsafe.Pointer, option C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "option"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QImageIOHandler__ImageOption) *core.QVariant)(QImageIOHandler__ImageOption(option)))
	}

	return core.PointerFromQVariant(NewQImageIOHandlerFromPointer(ptr).OptionDefault(QImageIOHandler__ImageOption(option)))
}

func (ptr *QImageIOHandler) ConnectOption(f func(option QImageIOHandler__ImageOption) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "option"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "option", func(option QImageIOHandler__ImageOption) *core.QVariant {
				signal.(func(QImageIOHandler__ImageOption) *core.QVariant)(option)
				return f(option)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "option", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "option")
	}
}

func (ptr *QImageIOHandler) Option(option QImageIOHandler__ImageOption) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImageIOHandler_Option(ptr.Pointer(), C.longlong(option)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) OptionDefault(option QImageIOHandler__ImageOption) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImageIOHandler_OptionDefault(ptr.Pointer(), C.longlong(option)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQImageIOHandler_CanRead
func callbackQImageIOHandler_CanRead(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "canRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QImageIOHandler) ConnectCanRead(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "canRead"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "canRead", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "canRead", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectCanRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "canRead")
	}
}

func (ptr *QImageIOHandler) CanRead() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_CanRead(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_SupportsOption
func callbackQImageIOHandler_SupportsOption(ptr unsafe.Pointer, option C.longlong) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "supportsOption"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QImageIOHandler__ImageOption) bool)(QImageIOHandler__ImageOption(option)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).SupportsOptionDefault(QImageIOHandler__ImageOption(option)))))
}

func (ptr *QImageIOHandler) ConnectSupportsOption(f func(option QImageIOHandler__ImageOption) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "supportsOption"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "supportsOption", func(option QImageIOHandler__ImageOption) bool {
				signal.(func(QImageIOHandler__ImageOption) bool)(option)
				return f(option)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "supportsOption", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectSupportsOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "supportsOption")
	}
}

func (ptr *QImageIOHandler) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SupportsOptionDefault(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOptionDefault(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

//export callbackQImageIOHandler_CurrentImageNumber
func callbackQImageIOHandler_CurrentImageNumber(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "currentImageNumber"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).CurrentImageNumberDefault()))
}

func (ptr *QImageIOHandler) ConnectCurrentImageNumber(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "currentImageNumber"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageNumber", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageNumber", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageNumber() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "currentImageNumber")
	}
}

func (ptr *QImageIOHandler) CurrentImageNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_CurrentImageNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) CurrentImageNumberDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_CurrentImageNumberDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_ImageCount
func callbackQImageIOHandler_ImageCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "imageCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).ImageCountDefault()))
}

func (ptr *QImageIOHandler) ConnectImageCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "imageCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "imageCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "imageCount", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectImageCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "imageCount")
	}
}

func (ptr *QImageIOHandler) ImageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_ImageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) ImageCountDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_ImageCountDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_LoopCount
func callbackQImageIOHandler_LoopCount(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "loopCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).LoopCountDefault()))
}

func (ptr *QImageIOHandler) ConnectLoopCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "loopCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "loopCount", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "loopCount", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectLoopCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "loopCount")
	}
}

func (ptr *QImageIOHandler) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) LoopCountDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_LoopCountDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_NextImageDelay
func callbackQImageIOHandler_NextImageDelay(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "nextImageDelay"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).NextImageDelayDefault()))
}

func (ptr *QImageIOHandler) ConnectNextImageDelay(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "nextImageDelay"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "nextImageDelay", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "nextImageDelay", f)
		}
	}
}

func (ptr *QImageIOHandler) DisconnectNextImageDelay() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "nextImageDelay")
	}
}

func (ptr *QImageIOHandler) NextImageDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_NextImageDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) NextImageDelayDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_NextImageDelayDefault(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) SetFormat2(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat2(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

type QImageIOPlugin struct {
	core.QObject
}

type QImageIOPlugin_ITF interface {
	core.QObject_ITF
	QImageIOPlugin_PTR() *QImageIOPlugin
}

func (ptr *QImageIOPlugin) QImageIOPlugin_PTR() *QImageIOPlugin {
	return ptr
}

func (ptr *QImageIOPlugin) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QImageIOPlugin) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQImageIOPlugin(ptr QImageIOPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOPlugin_PTR().Pointer()
	}
	return nil
}

func NewQImageIOPluginFromPointer(ptr unsafe.Pointer) *QImageIOPlugin {
	var n = new(QImageIOPlugin)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QImageIOPlugin__Capability
//QImageIOPlugin::Capability
type QImageIOPlugin__Capability int64

const (
	QImageIOPlugin__CanRead            QImageIOPlugin__Capability = QImageIOPlugin__Capability(0x1)
	QImageIOPlugin__CanWrite           QImageIOPlugin__Capability = QImageIOPlugin__Capability(0x2)
	QImageIOPlugin__CanReadIncremental QImageIOPlugin__Capability = QImageIOPlugin__Capability(0x4)
)

func NewQImageIOPlugin(parent core.QObject_ITF) *QImageIOPlugin {
	var tmpValue = NewQImageIOPluginFromPointer(C.QImageIOPlugin_NewQImageIOPlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQImageIOPlugin_DestroyQImageIOPlugin
func callbackQImageIOPlugin_DestroyQImageIOPlugin(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QImageIOPlugin"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOPluginFromPointer(ptr).DestroyQImageIOPluginDefault()
	}
}

func (ptr *QImageIOPlugin) ConnectDestroyQImageIOPlugin(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOPlugin"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOPlugin", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOPlugin", f)
		}
	}
}

func (ptr *QImageIOPlugin) DisconnectDestroyQImageIOPlugin() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QImageIOPlugin")
	}
}

func (ptr *QImageIOPlugin) DestroyQImageIOPlugin() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DestroyQImageIOPlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOPlugin) DestroyQImageIOPluginDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DestroyQImageIOPluginDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_Capabilities
func callbackQImageIOPlugin_Capabilities(ptr unsafe.Pointer, device unsafe.Pointer, format unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "capabilities"); signal != nil {
		return C.longlong(signal.(func(*core.QIODevice, *core.QByteArray) QImageIOPlugin__Capability)(core.NewQIODeviceFromPointer(device), core.NewQByteArrayFromPointer(format)))
	}

	return C.longlong(0)
}

func (ptr *QImageIOPlugin) ConnectCapabilities(f func(device *core.QIODevice, format *core.QByteArray) QImageIOPlugin__Capability) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "capabilities"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "capabilities", func(device *core.QIODevice, format *core.QByteArray) QImageIOPlugin__Capability {
				signal.(func(*core.QIODevice, *core.QByteArray) QImageIOPlugin__Capability)(device, format)
				return f(device, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "capabilities", f)
		}
	}
}

func (ptr *QImageIOPlugin) DisconnectCapabilities() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "capabilities")
	}
}

func (ptr *QImageIOPlugin) Capabilities(device core.QIODevice_ITF, format core.QByteArray_ITF) QImageIOPlugin__Capability {
	if ptr.Pointer() != nil {
		return QImageIOPlugin__Capability(C.QImageIOPlugin_Capabilities(ptr.Pointer(), core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	}
	return 0
}

//export callbackQImageIOPlugin_Create
func callbackQImageIOPlugin_Create(ptr unsafe.Pointer, device unsafe.Pointer, format unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "create"); signal != nil {
		return PointerFromQImageIOHandler(signal.(func(*core.QIODevice, *core.QByteArray) *QImageIOHandler)(core.NewQIODeviceFromPointer(device), core.NewQByteArrayFromPointer(format)))
	}

	return PointerFromQImageIOHandler(NewQImageIOHandler())
}

func (ptr *QImageIOPlugin) ConnectCreate(f func(device *core.QIODevice, format *core.QByteArray) *QImageIOHandler) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "create"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", func(device *core.QIODevice, format *core.QByteArray) *QImageIOHandler {
				signal.(func(*core.QIODevice, *core.QByteArray) *QImageIOHandler)(device, format)
				return f(device, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "create", f)
		}
	}
}

func (ptr *QImageIOPlugin) DisconnectCreate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "create")
	}
}

func (ptr *QImageIOPlugin) Create(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageIOHandler {
	if ptr.Pointer() != nil {
		return NewQImageIOHandlerFromPointer(C.QImageIOPlugin_Create(ptr.Pointer(), core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	}
	return nil
}

func (ptr *QImageIOPlugin) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageIOPlugin___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOPlugin) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageIOPlugin) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageIOPlugin___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QImageIOPlugin) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QImageIOPlugin___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOPlugin) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QImageIOPlugin) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QImageIOPlugin___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QImageIOPlugin) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QImageIOPlugin___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOPlugin) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QImageIOPlugin) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QImageIOPlugin___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QImageIOPlugin) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QImageIOPlugin___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOPlugin) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QImageIOPlugin) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageIOPlugin___findChildren_newList(ptr.Pointer()))
}

func (ptr *QImageIOPlugin) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QImageIOPlugin___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOPlugin) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QImageIOPlugin) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageIOPlugin___children_newList(ptr.Pointer()))
}

//export callbackQImageIOPlugin_Event
func callbackQImageIOPlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QImageIOPlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_EventFilter
func callbackQImageIOPlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QImageIOPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_ChildEvent
func callbackQImageIOPlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQImageIOPlugin_ConnectNotify
func callbackQImageIOPlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_CustomEvent
func callbackQImageIOPlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQImageIOPlugin_DeleteLater
func callbackQImageIOPlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOPluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QImageIOPlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_Destroyed
func callbackQImageIOPlugin_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQImageIOPlugin_DisconnectNotify
func callbackQImageIOPlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_ObjectNameChanged
func callbackQImageIOPlugin_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQImageIOPlugin_TimerEvent
func callbackQImageIOPlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQImageIOPlugin_MetaObject
func callbackQImageIOPlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQImageIOPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QImageIOPlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageIOPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QImageReader struct {
	ptr unsafe.Pointer
}

type QImageReader_ITF interface {
	QImageReader_PTR() *QImageReader
}

func (ptr *QImageReader) QImageReader_PTR() *QImageReader {
	return ptr
}

func (ptr *QImageReader) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QImageReader) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQImageReader(ptr QImageReader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageReader_PTR().Pointer()
	}
	return nil
}

func NewQImageReaderFromPointer(ptr unsafe.Pointer) *QImageReader {
	var n = new(QImageReader)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QImageReader__ImageReaderError
//QImageReader::ImageReaderError
type QImageReader__ImageReaderError int64

const (
	QImageReader__UnknownError           QImageReader__ImageReaderError = QImageReader__ImageReaderError(0)
	QImageReader__FileNotFoundError      QImageReader__ImageReaderError = QImageReader__ImageReaderError(1)
	QImageReader__DeviceError            QImageReader__ImageReaderError = QImageReader__ImageReaderError(2)
	QImageReader__UnsupportedFormatError QImageReader__ImageReaderError = QImageReader__ImageReaderError(3)
	QImageReader__InvalidDataError       QImageReader__ImageReaderError = QImageReader__ImageReaderError(4)
)

func QImageReader_ImageFormat3(device core.QIODevice_ITF) *core.QByteArray {
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) ImageFormat3(device core.QIODevice_ITF) *core.QByteArray {
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func QImageReader_ImageFormat2(fileName string) *core.QByteArray {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat2(fileNameC))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) ImageFormat2(fileName string) *core.QByteArray {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat2(fileNameC))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) Read() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImageReader_Read(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func NewQImageReader() *QImageReader {
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader())
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func NewQImageReader2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageReader {
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func NewQImageReader3(fileName string, format core.QByteArray_ITF) *QImageReader {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func QImageReader_SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).__supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedImageFormats())
}

func (ptr *QImageReader) SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).__supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedImageFormats())
}

func QImageReader_SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).__supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedMimeTypes())
}

func (ptr *QImageReader) SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).__supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedMimeTypes())
}

func (ptr *QImageReader) JumpToImage(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToImage(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

func (ptr *QImageReader) JumpToNextImage() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) Read2(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_Read2(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageReader) SetAutoDetectImageFormat(enabled bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoDetectImageFormat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QImageReader) SetAutoTransform(enabled bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoTransform(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QImageReader) SetBackgroundColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImageReader) SetClipRect(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetDecideFormatFromContent(ignored bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetDecideFormatFromContent(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ignored))))
	}
}

func (ptr *QImageReader) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageReader) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QImageReader_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QImageReader) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QImageReader) SetGamma(gamma float32) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetGamma(ptr.Pointer(), C.float(gamma))
	}
}

func (ptr *QImageReader) SetQuality(quality int) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetQuality(ptr.Pointer(), C.int(int32(quality)))
	}
}

func (ptr *QImageReader) SetScaledClipRect(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetScaledSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QImageReader) DestroyQImageReader() {
	if ptr.Pointer() != nil {
		C.QImageReader_DestroyQImageReader(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageReader) Error() QImageReader__ImageReaderError {
	if ptr.Pointer() != nil {
		return QImageReader__ImageReaderError(C.QImageReader_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) SubType() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_SubType(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImageReader_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageReader_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) ImageFormat() QImage__Format {
	if ptr.Pointer() != nil {
		return QImage__Format(C.QImageReader_ImageFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) Transformation() QImageIOHandler__Transformation {
	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageReader_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) SupportedSubTypes() []*core.QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
			var out = make([]*core.QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQImageReaderFromPointer(l.data).__supportedSubTypes_atList(i)
			}
			return out
		}(C.QImageReader_SupportedSubTypes(ptr.Pointer()))
	}
	return make([]*core.QByteArray, 0)
}

func (ptr *QImageReader) ClipRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_ClipRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) CurrentImageRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_CurrentImageRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) ScaledClipRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_ScaledClipRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) ScaledSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImageReader_ScaledSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImageReader_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageReader_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageReader_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) Text(key string) string {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		return cGoUnpackString(C.QImageReader_Text(ptr.Pointer(), keyC))
	}
	return ""
}

func (ptr *QImageReader) TextKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QImageReader_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QImageReader) AutoDetectImageFormat() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_AutoDetectImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) AutoTransform() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_AutoTransform(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) CanRead() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_CanRead(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) DecideFormatFromContent() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_DecideFormatFromContent(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) SupportsAnimation() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsAnimation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageReader) Gamma() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QImageReader_Gamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) CurrentImageNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_CurrentImageNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) ImageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_ImageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) NextImageDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_NextImageDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) Quality() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_Quality(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) __supportedImageFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader___supportedImageFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) __supportedImageFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader___supportedImageFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageReader) __supportedImageFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageReader___supportedImageFormats_newList(ptr.Pointer()))
}

func (ptr *QImageReader) __supportedMimeTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader___supportedMimeTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) __supportedMimeTypes_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader___supportedMimeTypes_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageReader) __supportedMimeTypes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageReader___supportedMimeTypes_newList(ptr.Pointer()))
}

func (ptr *QImageReader) __supportedSubTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader___supportedSubTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) __supportedSubTypes_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader___supportedSubTypes_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageReader) __supportedSubTypes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageReader___supportedSubTypes_newList(ptr.Pointer()))
}

type QImageWriter struct {
	ptr unsafe.Pointer
}

type QImageWriter_ITF interface {
	QImageWriter_PTR() *QImageWriter
}

func (ptr *QImageWriter) QImageWriter_PTR() *QImageWriter {
	return ptr
}

func (ptr *QImageWriter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QImageWriter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQImageWriter(ptr QImageWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageWriter_PTR().Pointer()
	}
	return nil
}

func NewQImageWriterFromPointer(ptr unsafe.Pointer) *QImageWriter {
	var n = new(QImageWriter)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QImageWriter__ImageWriterError
//QImageWriter::ImageWriterError
type QImageWriter__ImageWriterError int64

const (
	QImageWriter__UnknownError           QImageWriter__ImageWriterError = QImageWriter__ImageWriterError(0)
	QImageWriter__DeviceError            QImageWriter__ImageWriterError = QImageWriter__ImageWriterError(1)
	QImageWriter__UnsupportedFormatError QImageWriter__ImageWriterError = QImageWriter__ImageWriterError(2)
)

func NewQImageWriter() *QImageWriter {
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter())
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func NewQImageWriter2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageWriter {
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func NewQImageWriter3(fileName string, format core.QByteArray_ITF) *QImageWriter {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func QImageWriter_SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).__supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedImageFormats())
}

func (ptr *QImageWriter) SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).__supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedImageFormats())
}

func QImageWriter_SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).__supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedMimeTypes())
}

func (ptr *QImageWriter) SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).__supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedMimeTypes())
}

func (ptr *QImageWriter) Write(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageWriter) SetCompression(compression int) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetCompression(ptr.Pointer(), C.int(int32(compression)))
	}
}

func (ptr *QImageWriter) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageWriter) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QImageWriter_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QImageWriter) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QImageWriter) SetGamma(gamma float32) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetGamma(ptr.Pointer(), C.float(gamma))
	}
}

func (ptr *QImageWriter) SetOptimizedWrite(optimize bool) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetOptimizedWrite(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(optimize))))
	}
}

func (ptr *QImageWriter) SetProgressiveScanWrite(progressive bool) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetProgressiveScanWrite(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(progressive))))
	}
}

func (ptr *QImageWriter) SetQuality(quality int) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetQuality(ptr.Pointer(), C.int(int32(quality)))
	}
}

func (ptr *QImageWriter) SetSubType(ty core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetSubType(ptr.Pointer(), core.PointerFromQByteArray(ty))
	}
}

func (ptr *QImageWriter) SetText(key string, text string) {
	if ptr.Pointer() != nil {
		var keyC *C.char
		if key != "" {
			keyC = C.CString(key)
			defer C.free(unsafe.Pointer(keyC))
		}
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QImageWriter_SetText(ptr.Pointer(), keyC, textC)
	}
}

func (ptr *QImageWriter) SetTransformation(transform QImageIOHandler__Transformation) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetTransformation(ptr.Pointer(), C.longlong(transform))
	}
}

func (ptr *QImageWriter) DestroyQImageWriter() {
	if ptr.Pointer() != nil {
		C.QImageWriter_DestroyQImageWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageWriter) Error() QImageWriter__ImageWriterError {
	if ptr.Pointer() != nil {
		return QImageWriter__ImageWriterError(C.QImageWriter_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) SubType() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_SubType(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageWriter_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) Transformation() QImageIOHandler__Transformation {
	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageWriter_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) SupportedSubTypes() []*core.QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
			var out = make([]*core.QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQImageWriterFromPointer(l.data).__supportedSubTypes_atList(i)
			}
			return out
		}(C.QImageWriter_SupportedSubTypes(ptr.Pointer()))
	}
	return make([]*core.QByteArray, 0)
}

func (ptr *QImageWriter) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageWriter_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) CanWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_CanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) OptimizedWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_OptimizedWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) ProgressiveScanWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_ProgressiveScanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageWriter) Gamma() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QImageWriter_Gamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) Compression() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageWriter_Compression(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageWriter) Quality() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageWriter_Quality(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageWriter) __supportedImageFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter___supportedImageFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) __supportedImageFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter___supportedImageFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageWriter) __supportedImageFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageWriter___supportedImageFormats_newList(ptr.Pointer()))
}

func (ptr *QImageWriter) __supportedMimeTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter___supportedMimeTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) __supportedMimeTypes_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter___supportedMimeTypes_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageWriter) __supportedMimeTypes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageWriter___supportedMimeTypes_newList(ptr.Pointer()))
}

func (ptr *QImageWriter) __supportedSubTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter___supportedSubTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) __supportedSubTypes_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter___supportedSubTypes_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QImageWriter) __supportedSubTypes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QImageWriter___supportedSubTypes_newList(ptr.Pointer()))
}

type QInputEvent struct {
	core.QEvent
}

type QInputEvent_ITF interface {
	core.QEvent_ITF
	QInputEvent_PTR() *QInputEvent
}

func (ptr *QInputEvent) QInputEvent_PTR() *QInputEvent {
	return ptr
}

func (ptr *QInputEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QInputEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQInputEvent(ptr QInputEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputEventFromPointer(ptr unsafe.Pointer) *QInputEvent {
	var n = new(QInputEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputEvent) DestroyQInputEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QInputEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QInputEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputEvent) Timestamp() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QInputEvent_Timestamp(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputEvent) ModState() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QInputEvent_ModState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputEvent) SetModState(vqt core.Qt__KeyboardModifier) {
	if ptr.Pointer() != nil {
		C.QInputEvent_SetModState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QInputEvent) Ts() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QInputEvent_Ts(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputEvent) SetTs(vul uint) {
	if ptr.Pointer() != nil {
		C.QInputEvent_SetTs(ptr.Pointer(), C.ulong(uint32(vul)))
	}
}

type QInputMethod struct {
	core.QObject
}

type QInputMethod_ITF interface {
	core.QObject_ITF
	QInputMethod_PTR() *QInputMethod
}

func (ptr *QInputMethod) QInputMethod_PTR() *QInputMethod {
	return ptr
}

func (ptr *QInputMethod) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QInputMethod) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQInputMethod(ptr QInputMethod_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethod_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodFromPointer(ptr unsafe.Pointer) *QInputMethod {
	var n = new(QInputMethod)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputMethod) DestroyQInputMethod() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QInputMethod__Action
//QInputMethod::Action
type QInputMethod__Action int64

const (
	QInputMethod__Click       QInputMethod__Action = QInputMethod__Action(0)
	QInputMethod__ContextMenu QInputMethod__Action = QInputMethod__Action(1)
)

func QInputMethod_QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	var tmpValue = core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.longlong(query), core.PointerFromQVariant(argument)))
	runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
	return tmpValue
}

func (ptr *QInputMethod) QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	var tmpValue = core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.longlong(query), core.PointerFromQVariant(argument)))
	runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
	return tmpValue
}

//export callbackQInputMethod_AnchorRectangleChanged
func callbackQInputMethod_AnchorRectangleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "anchorRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectAnchorRectangleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "anchorRectangleChanged") {
			C.QInputMethod_ConnectAnchorRectangleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "anchorRectangleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "anchorRectangleChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "anchorRectangleChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectAnchorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectAnchorRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "anchorRectangleChanged")
	}
}

func (ptr *QInputMethod) AnchorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_AnchorRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_AnimatingChanged
func callbackQInputMethod_AnimatingChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "animatingChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectAnimatingChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "animatingChanged") {
			C.QInputMethod_ConnectAnimatingChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "animatingChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "animatingChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "animatingChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectAnimatingChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectAnimatingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "animatingChanged")
	}
}

func (ptr *QInputMethod) AnimatingChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_AnimatingChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Commit
func callbackQInputMethod_Commit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "commit"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).CommitDefault()
	}
}

func (ptr *QInputMethod) ConnectCommit(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "commit"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "commit", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "commit", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectCommit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "commit")
	}
}

func (ptr *QInputMethod) Commit() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Commit(ptr.Pointer())
	}
}

func (ptr *QInputMethod) CommitDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_CommitDefault(ptr.Pointer())
	}
}

//export callbackQInputMethod_CursorRectangleChanged
func callbackQInputMethod_CursorRectangleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "cursorRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectCursorRectangleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "cursorRectangleChanged") {
			C.QInputMethod_ConnectCursorRectangleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "cursorRectangleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorRectangleChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorRectangleChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectCursorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectCursorRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "cursorRectangleChanged")
	}
}

func (ptr *QInputMethod) CursorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_CursorRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Hide
func callbackQInputMethod_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "hide"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).HideDefault()
	}
}

func (ptr *QInputMethod) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "hide"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hide", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hide", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "hide")
	}
}

func (ptr *QInputMethod) Hide() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Hide(ptr.Pointer())
	}
}

func (ptr *QInputMethod) HideDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_HideDefault(ptr.Pointer())
	}
}

//export callbackQInputMethod_InputDirectionChanged
func callbackQInputMethod_InputDirectionChanged(ptr unsafe.Pointer, newDirection C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "inputDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(newDirection))
	}

}

func (ptr *QInputMethod) ConnectInputDirectionChanged(f func(newDirection core.Qt__LayoutDirection)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "inputDirectionChanged") {
			C.QInputMethod_ConnectInputDirectionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "inputDirectionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "inputDirectionChanged", func(newDirection core.Qt__LayoutDirection) {
				signal.(func(core.Qt__LayoutDirection))(newDirection)
				f(newDirection)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "inputDirectionChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectInputDirectionChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectInputDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "inputDirectionChanged")
	}
}

func (ptr *QInputMethod) InputDirectionChanged(newDirection core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QInputMethod_InputDirectionChanged(ptr.Pointer(), C.longlong(newDirection))
	}
}

//export callbackQInputMethod_InputItemClipRectangleChanged
func callbackQInputMethod_InputItemClipRectangleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "inputItemClipRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectInputItemClipRectangleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "inputItemClipRectangleChanged") {
			C.QInputMethod_ConnectInputItemClipRectangleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "inputItemClipRectangleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "inputItemClipRectangleChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "inputItemClipRectangleChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectInputItemClipRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectInputItemClipRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "inputItemClipRectangleChanged")
	}
}

func (ptr *QInputMethod) InputItemClipRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_InputItemClipRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_InvokeAction
func callbackQInputMethod_InvokeAction(ptr unsafe.Pointer, a C.longlong, cursorPosition C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "invokeAction"); signal != nil {
		signal.(func(QInputMethod__Action, int))(QInputMethod__Action(a), int(int32(cursorPosition)))
	} else {
		NewQInputMethodFromPointer(ptr).InvokeActionDefault(QInputMethod__Action(a), int(int32(cursorPosition)))
	}
}

func (ptr *QInputMethod) ConnectInvokeAction(f func(a QInputMethod__Action, cursorPosition int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "invokeAction"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "invokeAction", func(a QInputMethod__Action, cursorPosition int) {
				signal.(func(QInputMethod__Action, int))(a, cursorPosition)
				f(a, cursorPosition)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "invokeAction", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectInvokeAction() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "invokeAction")
	}
}

func (ptr *QInputMethod) InvokeAction(a QInputMethod__Action, cursorPosition int) {
	if ptr.Pointer() != nil {
		C.QInputMethod_InvokeAction(ptr.Pointer(), C.longlong(a), C.int(int32(cursorPosition)))
	}
}

func (ptr *QInputMethod) InvokeActionDefault(a QInputMethod__Action, cursorPosition int) {
	if ptr.Pointer() != nil {
		C.QInputMethod_InvokeActionDefault(ptr.Pointer(), C.longlong(a), C.int(int32(cursorPosition)))
	}
}

//export callbackQInputMethod_KeyboardRectangleChanged
func callbackQInputMethod_KeyboardRectangleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "keyboardRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectKeyboardRectangleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "keyboardRectangleChanged") {
			C.QInputMethod_ConnectKeyboardRectangleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "keyboardRectangleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardRectangleChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardRectangleChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectKeyboardRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectKeyboardRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardRectangleChanged")
	}
}

func (ptr *QInputMethod) KeyboardRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_KeyboardRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_LocaleChanged
func callbackQInputMethod_LocaleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "localeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectLocaleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "localeChanged") {
			C.QInputMethod_ConnectLocaleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "localeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localeChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "localeChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectLocaleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectLocaleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "localeChanged")
	}
}

func (ptr *QInputMethod) LocaleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_LocaleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Reset
func callbackQInputMethod_Reset(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "reset"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).ResetDefault()
	}
}

func (ptr *QInputMethod) ConnectReset(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "reset"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "reset", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "reset", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "reset")
	}
}

func (ptr *QInputMethod) Reset() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Reset(ptr.Pointer())
	}
}

func (ptr *QInputMethod) ResetDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_ResetDefault(ptr.Pointer())
	}
}

func (ptr *QInputMethod) SetInputItemRectangle(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemRectangle(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QInputMethod) SetInputItemTransform(transform QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemTransform(ptr.Pointer(), PointerFromQTransform(transform))
	}
}

func (ptr *QInputMethod) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQInputMethod_Show
func callbackQInputMethod_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "show"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QInputMethod) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "show"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "show", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "show", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "show")
	}
}

func (ptr *QInputMethod) Show() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Show(ptr.Pointer())
	}
}

func (ptr *QInputMethod) ShowDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_ShowDefault(ptr.Pointer())
	}
}

//export callbackQInputMethod_Update
func callbackQInputMethod_Update(ptr unsafe.Pointer, queries C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "update"); signal != nil {
		signal.(func(core.Qt__InputMethodQuery))(core.Qt__InputMethodQuery(queries))
	} else {
		NewQInputMethodFromPointer(ptr).UpdateDefault(core.Qt__InputMethodQuery(queries))
	}
}

func (ptr *QInputMethod) ConnectUpdate(f func(queries core.Qt__InputMethodQuery)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "update"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update", func(queries core.Qt__InputMethodQuery) {
				signal.(func(core.Qt__InputMethodQuery))(queries)
				f(queries)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "update")
	}
}

func (ptr *QInputMethod) Update(queries core.Qt__InputMethodQuery) {
	if ptr.Pointer() != nil {
		C.QInputMethod_Update(ptr.Pointer(), C.longlong(queries))
	}
}

func (ptr *QInputMethod) UpdateDefault(queries core.Qt__InputMethodQuery) {
	if ptr.Pointer() != nil {
		C.QInputMethod_UpdateDefault(ptr.Pointer(), C.longlong(queries))
	}
}

//export callbackQInputMethod_VisibleChanged
func callbackQInputMethod_VisibleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "visibleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectVisibleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged") {
			C.QInputMethod_ConnectVisibleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged", f)
		}
	}
}

func (ptr *QInputMethod) DisconnectVisibleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged")
	}
}

func (ptr *QInputMethod) VisibleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_VisibleChanged(ptr.Pointer())
	}
}

func (ptr *QInputMethod) Locale() *core.QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLocaleFromPointer(C.QInputMethod_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) AnchorRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_AnchorRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) CursorRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_CursorRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputItemClipRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_InputItemClipRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputItemRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_InputItemRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) KeyboardRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_KeyboardRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputItemTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QInputMethod_InputItemTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QInputMethod_InputDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethod) IsAnimating() bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_IsAnimating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QInputMethod___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QInputMethod) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QInputMethod___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QInputMethod) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QInputMethod___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QInputMethod) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QInputMethod___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QInputMethod) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QInputMethod___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QInputMethod) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QInputMethod___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QInputMethod) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QInputMethod___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QInputMethod) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QInputMethod___findChildren_newList(ptr.Pointer()))
}

func (ptr *QInputMethod) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QInputMethod___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QInputMethod) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QInputMethod___children_newList(ptr.Pointer()))
}

//export callbackQInputMethod_Event
func callbackQInputMethod_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QInputMethod) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQInputMethod_EventFilter
func callbackQInputMethod_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QInputMethod) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQInputMethod_ChildEvent
func callbackQInputMethod_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQInputMethod_ConnectNotify
func callbackQInputMethod_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_CustomEvent
func callbackQInputMethod_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QInputMethod) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQInputMethod_DeleteLater
func callbackQInputMethod_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QInputMethod) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQInputMethod_Destroyed
func callbackQInputMethod_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQInputMethod_DisconnectNotify
func callbackQInputMethod_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_ObjectNameChanged
func callbackQInputMethod_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQInputMethod_TimerEvent
func callbackQInputMethod_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QInputMethod) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQInputMethod_MetaObject
func callbackQInputMethod_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQInputMethodFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QInputMethod) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QInputMethod_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QInputMethodEvent struct {
	core.QEvent
}

type QInputMethodEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodEvent_PTR() *QInputMethodEvent
}

func (ptr *QInputMethodEvent) QInputMethodEvent_PTR() *QInputMethodEvent {
	return ptr
}

func (ptr *QInputMethodEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QInputMethodEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQInputMethodEvent(ptr QInputMethodEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodEventFromPointer(ptr unsafe.Pointer) *QInputMethodEvent {
	var n = new(QInputMethodEvent)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QInputMethodEvent__AttributeType
//QInputMethodEvent::AttributeType
type QInputMethodEvent__AttributeType int64

const (
	QInputMethodEvent__TextFormat QInputMethodEvent__AttributeType = QInputMethodEvent__AttributeType(0)
	QInputMethodEvent__Cursor     QInputMethodEvent__AttributeType = QInputMethodEvent__AttributeType(1)
	QInputMethodEvent__Language   QInputMethodEvent__AttributeType = QInputMethodEvent__AttributeType(2)
	QInputMethodEvent__Ruby       QInputMethodEvent__AttributeType = QInputMethodEvent__AttributeType(3)
	QInputMethodEvent__Selection  QInputMethodEvent__AttributeType = QInputMethodEvent__AttributeType(4)
)

func NewQInputMethodEvent3(other QInputMethodEvent_ITF) *QInputMethodEvent {
	return NewQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent3(PointerFromQInputMethodEvent(other)))
}

func (ptr *QInputMethodEvent) SetCommitString(commitString string, replaceFrom int, replaceLength int) {
	if ptr.Pointer() != nil {
		var commitStringC *C.char
		if commitString != "" {
			commitStringC = C.CString(commitString)
			defer C.free(unsafe.Pointer(commitStringC))
		}
		C.QInputMethodEvent_SetCommitString(ptr.Pointer(), commitStringC, C.int(int32(replaceFrom)), C.int(int32(replaceLength)))
	}
}

func (ptr *QInputMethodEvent) DestroyQInputMethodEvent() {
	if ptr.Pointer() != nil {
		C.QInputMethodEvent_DestroyQInputMethodEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQInputMethodEvent() *QInputMethodEvent {
	return NewQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent())
}

func (ptr *QInputMethodEvent) CommitString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QInputMethodEvent_CommitString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) PreeditString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QInputMethodEvent_PreeditString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) ReplacementLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QInputMethodEvent_ReplacementLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputMethodEvent) ReplacementStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QInputMethodEvent_ReplacementStart(ptr.Pointer())))
	}
	return 0
}

type QInputMethodQueryEvent struct {
	core.QEvent
}

type QInputMethodQueryEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent
}

func (ptr *QInputMethodQueryEvent) QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent {
	return ptr
}

func (ptr *QInputMethodQueryEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QInputMethodQueryEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQInputMethodQueryEvent(ptr QInputMethodQueryEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodQueryEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodQueryEventFromPointer(ptr unsafe.Pointer) *QInputMethodQueryEvent {
	var n = new(QInputMethodQueryEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputMethodQueryEvent) DestroyQInputMethodQueryEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQInputMethodQueryEvent(queries core.Qt__InputMethodQuery) *QInputMethodQueryEvent {
	return NewQInputMethodQueryEventFromPointer(C.QInputMethodQueryEvent_NewQInputMethodQueryEvent(C.longlong(queries)))
}

func (ptr *QInputMethodQueryEvent) SetValue(query core.Qt__InputMethodQuery, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethodQueryEvent_SetValue(ptr.Pointer(), C.longlong(query), core.PointerFromQVariant(value))
	}
}

func (ptr *QInputMethodQueryEvent) Value(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QInputMethodQueryEvent_Value(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethodQueryEvent) Queries() core.Qt__InputMethodQuery {
	if ptr.Pointer() != nil {
		return core.Qt__InputMethodQuery(C.QInputMethodQueryEvent_Queries(ptr.Pointer()))
	}
	return 0
}

type QIntValidator struct {
	QValidator
}

type QIntValidator_ITF interface {
	QValidator_ITF
	QIntValidator_PTR() *QIntValidator
}

func (ptr *QIntValidator) QIntValidator_PTR() *QIntValidator {
	return ptr
}

func (ptr *QIntValidator) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func (ptr *QIntValidator) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QValidator_PTR().SetPointer(p)
	}
}

func PointerFromQIntValidator(ptr QIntValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIntValidator_PTR().Pointer()
	}
	return nil
}

func NewQIntValidatorFromPointer(ptr unsafe.Pointer) *QIntValidator {
	var n = new(QIntValidator)
	n.SetPointer(ptr)
	return n
}
func NewQIntValidator(parent core.QObject_ITF) *QIntValidator {
	var tmpValue = NewQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQIntValidator2(minimum int, maximum int, parent core.QObject_ITF) *QIntValidator {
	var tmpValue = NewQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator2(C.int(int32(minimum)), C.int(int32(maximum)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QIntValidator) SetBottom(vin int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetBottom(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQIntValidator_SetRange
func callbackQIntValidator_SetRange(ptr unsafe.Pointer, bottom C.int, top C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setRange"); signal != nil {
		signal.(func(int, int))(int(int32(bottom)), int(int32(top)))
	} else {
		NewQIntValidatorFromPointer(ptr).SetRangeDefault(int(int32(bottom)), int(int32(top)))
	}
}

func (ptr *QIntValidator) ConnectSetRange(f func(bottom int, top int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setRange"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRange", func(bottom int, top int) {
				signal.(func(int, int))(bottom, top)
				f(bottom, top)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRange", f)
		}
	}
}

func (ptr *QIntValidator) DisconnectSetRange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setRange")
	}
}

func (ptr *QIntValidator) SetRange(bottom int, top int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetRange(ptr.Pointer(), C.int(int32(bottom)), C.int(int32(top)))
	}
}

func (ptr *QIntValidator) SetRangeDefault(bottom int, top int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetRangeDefault(ptr.Pointer(), C.int(int32(bottom)), C.int(int32(top)))
	}
}

func (ptr *QIntValidator) SetTop(vin int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetTop(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QIntValidator) DestroyQIntValidator() {
	if ptr.Pointer() != nil {
		C.QIntValidator_DestroyQIntValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIntValidator_Validate
func callbackQIntValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQIntValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QIntValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "validate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", func(input string, pos int) QValidator__State {
				signal.(func(string, int) QValidator__State)(input, pos)
				return f(input, pos)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", f)
		}
	}
}

func (ptr *QIntValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "validate")
	}
}

func (ptr *QIntValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QIntValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QIntValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QIntValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QIntValidator) Bottom() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIntValidator_Bottom(ptr.Pointer())))
	}
	return 0
}

func (ptr *QIntValidator) Top() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIntValidator_Top(ptr.Pointer())))
	}
	return 0
}

type QKeyEvent struct {
	QInputEvent
}

type QKeyEvent_ITF interface {
	QInputEvent_ITF
	QKeyEvent_PTR() *QKeyEvent
}

func (ptr *QKeyEvent) QKeyEvent_PTR() *QKeyEvent {
	return ptr
}

func (ptr *QKeyEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QKeyEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQKeyEvent(ptr QKeyEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeyEvent_PTR().Pointer()
	}
	return nil
}

func NewQKeyEventFromPointer(ptr unsafe.Pointer) *QKeyEvent {
	var n = new(QKeyEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QKeyEvent) DestroyQKeyEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQKeyEvent(ty core.QEvent__Type, key int, modifiers core.Qt__KeyboardModifier, text string, autorep bool, count uint16) *QKeyEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQKeyEventFromPointer(C.QKeyEvent_NewQKeyEvent(C.longlong(ty), C.int(int32(key)), C.longlong(modifiers), textC, C.char(int8(qt.GoBoolToInt(autorep))), C.ushort(count)))
}

func NewQKeyEvent2(ty core.QEvent__Type, key int, modifiers core.Qt__KeyboardModifier, nativeScanCode uint, nativeVirtualKey uint, nativeModifiers uint, text string, autorep bool, count uint16) *QKeyEvent {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQKeyEventFromPointer(C.QKeyEvent_NewQKeyEvent2(C.longlong(ty), C.int(int32(key)), C.longlong(modifiers), C.uint(uint32(nativeScanCode)), C.uint(uint32(nativeVirtualKey)), C.uint(uint32(nativeModifiers)), textC, C.char(int8(qt.GoBoolToInt(autorep))), C.ushort(count)))
}

func (ptr *QKeyEvent) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeyEvent_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QKeyEvent) IsAutoRepeat() bool {
	if ptr.Pointer() != nil {
		return C.QKeyEvent_IsAutoRepeat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QKeyEvent) Matches(key QKeySequence__StandardKey) bool {
	if ptr.Pointer() != nil {
		return C.QKeyEvent_Matches(ptr.Pointer(), C.longlong(key)) != 0
	}
	return false
}

func (ptr *QKeyEvent) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) Key() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_Key(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) NativeModifiers() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeModifiers(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) NativeScanCode() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeScanCode(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) NativeVirtualKey() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeVirtualKey(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) C() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QKeyEvent_C(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) SetC(vus uint16) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetC(ptr.Pointer(), C.ushort(vus))
	}
}

func (ptr *QKeyEvent) K() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_K(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetK(vin int) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetK(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QKeyEvent) NModifiers() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NModifiers(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNModifiers(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNModifiers(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) NScanCode() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NScanCode(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNScanCode(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNScanCode(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) NVirtualKey() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NVirtualKey(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNVirtualKey(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNVirtualKey(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) Txt() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeyEvent_Txt(ptr.Pointer()))
	}
	return ""
}

func (ptr *QKeyEvent) SetTxt(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QKeyEvent_SetTxt(ptr.Pointer(), vqsC)
	}
}

type QKeySequence struct {
	ptr unsafe.Pointer
}

type QKeySequence_ITF interface {
	QKeySequence_PTR() *QKeySequence
}

func (ptr *QKeySequence) QKeySequence_PTR() *QKeySequence {
	return ptr
}

func (ptr *QKeySequence) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QKeySequence) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQKeySequence(ptr QKeySequence_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeySequence_PTR().Pointer()
	}
	return nil
}

func NewQKeySequenceFromPointer(ptr unsafe.Pointer) *QKeySequence {
	var n = new(QKeySequence)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QKeySequence__SequenceFormat
//QKeySequence::SequenceFormat
type QKeySequence__SequenceFormat int64

const (
	QKeySequence__NativeText   QKeySequence__SequenceFormat = QKeySequence__SequenceFormat(0)
	QKeySequence__PortableText QKeySequence__SequenceFormat = QKeySequence__SequenceFormat(1)
)

//go:generate stringer -type=QKeySequence__SequenceMatch
//QKeySequence::SequenceMatch
type QKeySequence__SequenceMatch int64

const (
	QKeySequence__NoMatch      QKeySequence__SequenceMatch = QKeySequence__SequenceMatch(0)
	QKeySequence__PartialMatch QKeySequence__SequenceMatch = QKeySequence__SequenceMatch(1)
	QKeySequence__ExactMatch   QKeySequence__SequenceMatch = QKeySequence__SequenceMatch(2)
)

//go:generate stringer -type=QKeySequence__StandardKey
//QKeySequence::StandardKey
type QKeySequence__StandardKey int64

const (
	QKeySequence__UnknownKey               QKeySequence__StandardKey = QKeySequence__StandardKey(0)
	QKeySequence__HelpContents             QKeySequence__StandardKey = QKeySequence__StandardKey(1)
	QKeySequence__WhatsThis                QKeySequence__StandardKey = QKeySequence__StandardKey(2)
	QKeySequence__Open                     QKeySequence__StandardKey = QKeySequence__StandardKey(3)
	QKeySequence__Close                    QKeySequence__StandardKey = QKeySequence__StandardKey(4)
	QKeySequence__Save                     QKeySequence__StandardKey = QKeySequence__StandardKey(5)
	QKeySequence__New                      QKeySequence__StandardKey = QKeySequence__StandardKey(6)
	QKeySequence__Delete                   QKeySequence__StandardKey = QKeySequence__StandardKey(7)
	QKeySequence__Cut                      QKeySequence__StandardKey = QKeySequence__StandardKey(8)
	QKeySequence__Copy                     QKeySequence__StandardKey = QKeySequence__StandardKey(9)
	QKeySequence__Paste                    QKeySequence__StandardKey = QKeySequence__StandardKey(10)
	QKeySequence__Undo                     QKeySequence__StandardKey = QKeySequence__StandardKey(11)
	QKeySequence__Redo                     QKeySequence__StandardKey = QKeySequence__StandardKey(12)
	QKeySequence__Back                     QKeySequence__StandardKey = QKeySequence__StandardKey(13)
	QKeySequence__Forward                  QKeySequence__StandardKey = QKeySequence__StandardKey(14)
	QKeySequence__Refresh                  QKeySequence__StandardKey = QKeySequence__StandardKey(15)
	QKeySequence__ZoomIn                   QKeySequence__StandardKey = QKeySequence__StandardKey(16)
	QKeySequence__ZoomOut                  QKeySequence__StandardKey = QKeySequence__StandardKey(17)
	QKeySequence__Print                    QKeySequence__StandardKey = QKeySequence__StandardKey(18)
	QKeySequence__AddTab                   QKeySequence__StandardKey = QKeySequence__StandardKey(19)
	QKeySequence__NextChild                QKeySequence__StandardKey = QKeySequence__StandardKey(20)
	QKeySequence__PreviousChild            QKeySequence__StandardKey = QKeySequence__StandardKey(21)
	QKeySequence__Find                     QKeySequence__StandardKey = QKeySequence__StandardKey(22)
	QKeySequence__FindNext                 QKeySequence__StandardKey = QKeySequence__StandardKey(23)
	QKeySequence__FindPrevious             QKeySequence__StandardKey = QKeySequence__StandardKey(24)
	QKeySequence__Replace                  QKeySequence__StandardKey = QKeySequence__StandardKey(25)
	QKeySequence__SelectAll                QKeySequence__StandardKey = QKeySequence__StandardKey(26)
	QKeySequence__Bold                     QKeySequence__StandardKey = QKeySequence__StandardKey(27)
	QKeySequence__Italic                   QKeySequence__StandardKey = QKeySequence__StandardKey(28)
	QKeySequence__Underline                QKeySequence__StandardKey = QKeySequence__StandardKey(29)
	QKeySequence__MoveToNextChar           QKeySequence__StandardKey = QKeySequence__StandardKey(30)
	QKeySequence__MoveToPreviousChar       QKeySequence__StandardKey = QKeySequence__StandardKey(31)
	QKeySequence__MoveToNextWord           QKeySequence__StandardKey = QKeySequence__StandardKey(32)
	QKeySequence__MoveToPreviousWord       QKeySequence__StandardKey = QKeySequence__StandardKey(33)
	QKeySequence__MoveToNextLine           QKeySequence__StandardKey = QKeySequence__StandardKey(34)
	QKeySequence__MoveToPreviousLine       QKeySequence__StandardKey = QKeySequence__StandardKey(35)
	QKeySequence__MoveToNextPage           QKeySequence__StandardKey = QKeySequence__StandardKey(36)
	QKeySequence__MoveToPreviousPage       QKeySequence__StandardKey = QKeySequence__StandardKey(37)
	QKeySequence__MoveToStartOfLine        QKeySequence__StandardKey = QKeySequence__StandardKey(38)
	QKeySequence__MoveToEndOfLine          QKeySequence__StandardKey = QKeySequence__StandardKey(39)
	QKeySequence__MoveToStartOfBlock       QKeySequence__StandardKey = QKeySequence__StandardKey(40)
	QKeySequence__MoveToEndOfBlock         QKeySequence__StandardKey = QKeySequence__StandardKey(41)
	QKeySequence__MoveToStartOfDocument    QKeySequence__StandardKey = QKeySequence__StandardKey(42)
	QKeySequence__MoveToEndOfDocument      QKeySequence__StandardKey = QKeySequence__StandardKey(43)
	QKeySequence__SelectNextChar           QKeySequence__StandardKey = QKeySequence__StandardKey(44)
	QKeySequence__SelectPreviousChar       QKeySequence__StandardKey = QKeySequence__StandardKey(45)
	QKeySequence__SelectNextWord           QKeySequence__StandardKey = QKeySequence__StandardKey(46)
	QKeySequence__SelectPreviousWord       QKeySequence__StandardKey = QKeySequence__StandardKey(47)
	QKeySequence__SelectNextLine           QKeySequence__StandardKey = QKeySequence__StandardKey(48)
	QKeySequence__SelectPreviousLine       QKeySequence__StandardKey = QKeySequence__StandardKey(49)
	QKeySequence__SelectNextPage           QKeySequence__StandardKey = QKeySequence__StandardKey(50)
	QKeySequence__SelectPreviousPage       QKeySequence__StandardKey = QKeySequence__StandardKey(51)
	QKeySequence__SelectStartOfLine        QKeySequence__StandardKey = QKeySequence__StandardKey(52)
	QKeySequence__SelectEndOfLine          QKeySequence__StandardKey = QKeySequence__StandardKey(53)
	QKeySequence__SelectStartOfBlock       QKeySequence__StandardKey = QKeySequence__StandardKey(54)
	QKeySequence__SelectEndOfBlock         QKeySequence__StandardKey = QKeySequence__StandardKey(55)
	QKeySequence__SelectStartOfDocument    QKeySequence__StandardKey = QKeySequence__StandardKey(56)
	QKeySequence__SelectEndOfDocument      QKeySequence__StandardKey = QKeySequence__StandardKey(57)
	QKeySequence__DeleteStartOfWord        QKeySequence__StandardKey = QKeySequence__StandardKey(58)
	QKeySequence__DeleteEndOfWord          QKeySequence__StandardKey = QKeySequence__StandardKey(59)
	QKeySequence__DeleteEndOfLine          QKeySequence__StandardKey = QKeySequence__StandardKey(60)
	QKeySequence__InsertParagraphSeparator QKeySequence__StandardKey = QKeySequence__StandardKey(61)
	QKeySequence__InsertLineSeparator      QKeySequence__StandardKey = QKeySequence__StandardKey(62)
	QKeySequence__SaveAs                   QKeySequence__StandardKey = QKeySequence__StandardKey(63)
	QKeySequence__Preferences              QKeySequence__StandardKey = QKeySequence__StandardKey(64)
	QKeySequence__Quit                     QKeySequence__StandardKey = QKeySequence__StandardKey(65)
	QKeySequence__FullScreen               QKeySequence__StandardKey = QKeySequence__StandardKey(66)
	QKeySequence__Deselect                 QKeySequence__StandardKey = QKeySequence__StandardKey(67)
	QKeySequence__DeleteCompleteLine       QKeySequence__StandardKey = QKeySequence__StandardKey(68)
	QKeySequence__Backspace                QKeySequence__StandardKey = QKeySequence__StandardKey(69)
	QKeySequence__Cancel                   QKeySequence__StandardKey = QKeySequence__StandardKey(70)
)

func QKeySequence_FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	var strC *C.char
	if str != "" {
		strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
	}
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(strC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	var strC *C.char
	if str != "" {
		strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
	}
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(strC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func QKeySequence_Mnemonic(text string) *QKeySequence {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(textC))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) Mnemonic(text string) *QKeySequence {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(textC))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence() *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence())
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence5(key QKeySequence__StandardKey) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence5(C.longlong(key)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence4(keysequence QKeySequence_ITF) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence4(PointerFromQKeySequence(keysequence)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence2(key string, format QKeySequence__SequenceFormat) *QKeySequence {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence2(keyC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence3(k1 int, k2 int, k3 int, k4 int) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence3(C.int(int32(k1)), C.int(int32(k2)), C.int(int32(k3)), C.int(int32(k4))))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func QKeySequence_KeyBindings(key QKeySequence__StandardKey) []*QKeySequence {
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).__keyBindings_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_KeyBindings(C.longlong(key)))
}

func (ptr *QKeySequence) KeyBindings(key QKeySequence__StandardKey) []*QKeySequence {
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).__keyBindings_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_KeyBindings(C.longlong(key)))
}

func QKeySequence_ListFromString(str string, format QKeySequence__SequenceFormat) []*QKeySequence {
	var strC *C.char
	if str != "" {
		strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
	}
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).__listFromString_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_ListFromString(strC, C.longlong(format)))
}

func (ptr *QKeySequence) ListFromString(str string, format QKeySequence__SequenceFormat) []*QKeySequence {
	var strC *C.char
	if str != "" {
		strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
	}
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).__listFromString_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_ListFromString(strC, C.longlong(format)))
}

func QKeySequence_ListToString(list []*QKeySequence, format QKeySequence__SequenceFormat) string {
	return cGoUnpackString(C.QKeySequence_QKeySequence_ListToString(func() unsafe.Pointer {
		var tmpList = NewQKeySequenceFromPointer(NewQKeySequenceFromPointer(nil).__listToString_list_newList())
		for _, v := range list {
			tmpList.__listToString_list_setList(v)
		}
		return tmpList.Pointer()
	}(), C.longlong(format)))
}

func (ptr *QKeySequence) ListToString(list []*QKeySequence, format QKeySequence__SequenceFormat) string {
	return cGoUnpackString(C.QKeySequence_QKeySequence_ListToString(func() unsafe.Pointer {
		var tmpList = NewQKeySequenceFromPointer(NewQKeySequenceFromPointer(nil).__listToString_list_newList())
		for _, v := range list {
			tmpList.__listToString_list_setList(v)
		}
		return tmpList.Pointer()
	}(), C.longlong(format)))
}

func (ptr *QKeySequence) Swap(other QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QKeySequence_Swap(ptr.Pointer(), PointerFromQKeySequence(other))
	}
}

func (ptr *QKeySequence) DestroyQKeySequence() {
	if ptr.Pointer() != nil {
		C.QKeySequence_DestroyQKeySequence(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QKeySequence) ToString(format QKeySequence__SequenceFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeySequence_ToString(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QKeySequence) Matches(seq QKeySequence_ITF) QKeySequence__SequenceMatch {
	if ptr.Pointer() != nil {
		return QKeySequence__SequenceMatch(C.QKeySequence_Matches(ptr.Pointer(), PointerFromQKeySequence(seq)))
	}
	return 0
}

func (ptr *QKeySequence) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QKeySequence_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QKeySequence) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeySequence_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeySequence) __keyBindings_atList(i int) *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence___keyBindings_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QKeySequence) __keyBindings_setList(i QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QKeySequence___keyBindings_setList(ptr.Pointer(), PointerFromQKeySequence(i))
	}
}

func (ptr *QKeySequence) __keyBindings_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QKeySequence___keyBindings_newList(ptr.Pointer()))
}

func (ptr *QKeySequence) __listFromString_atList(i int) *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence___listFromString_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QKeySequence) __listFromString_setList(i QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QKeySequence___listFromString_setList(ptr.Pointer(), PointerFromQKeySequence(i))
	}
}

func (ptr *QKeySequence) __listFromString_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QKeySequence___listFromString_newList(ptr.Pointer()))
}

func (ptr *QKeySequence) __listToString_list_atList(i int) *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence___listToString_list_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QKeySequence) __listToString_list_setList(i QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QKeySequence___listToString_list_setList(ptr.Pointer(), PointerFromQKeySequence(i))
	}
}

func (ptr *QKeySequence) __listToString_list_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QKeySequence___listToString_list_newList(ptr.Pointer()))
}

type QLinearGradient struct {
	QGradient
}

type QLinearGradient_ITF interface {
	QGradient_ITF
	QLinearGradient_PTR() *QLinearGradient
}

func (ptr *QLinearGradient) QLinearGradient_PTR() *QLinearGradient {
	return ptr
}

func (ptr *QLinearGradient) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func (ptr *QLinearGradient) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGradient_PTR().SetPointer(p)
	}
}

func PointerFromQLinearGradient(ptr QLinearGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLinearGradient_PTR().Pointer()
	}
	return nil
}

func NewQLinearGradientFromPointer(ptr unsafe.Pointer) *QLinearGradient {
	var n = new(QLinearGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLinearGradient) DestroyQLinearGradient() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQLinearGradient() *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient())
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func NewQLinearGradient2(start core.QPointF_ITF, finalStop core.QPointF_ITF) *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient2(core.PointerFromQPointF(start), core.PointerFromQPointF(finalStop)))
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func NewQLinearGradient3(x1 float64, y1 float64, x2 float64, y2 float64) *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient3(C.double(x1), C.double(y1), C.double(x2), C.double(y2)))
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func (ptr *QLinearGradient) SetFinalStop(stop core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop(ptr.Pointer(), core.PointerFromQPointF(stop))
	}
}

func (ptr *QLinearGradient) SetFinalStop2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) SetStart(start core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart(ptr.Pointer(), core.PointerFromQPointF(start))
	}
}

func (ptr *QLinearGradient) SetStart2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) FinalStop() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QLinearGradient_FinalStop(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QLinearGradient) Start() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QLinearGradient_Start(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

type QMatrix4x4 struct {
	ptr unsafe.Pointer
}

type QMatrix4x4_ITF interface {
	QMatrix4x4_PTR() *QMatrix4x4
}

func (ptr *QMatrix4x4) QMatrix4x4_PTR() *QMatrix4x4 {
	return ptr
}

func (ptr *QMatrix4x4) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QMatrix4x4) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQMatrix4x4(ptr QMatrix4x4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMatrix4x4_PTR().Pointer()
	}
	return nil
}

func NewQMatrix4x4FromPointer(ptr unsafe.Pointer) *QMatrix4x4 {
	var n = new(QMatrix4x4)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMatrix4x4) DestroyQMatrix4x4() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQMatrix4x4() *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x4())
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x47(transform QTransform_ITF) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x47(PointerFromQTransform(transform)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x43(values float32) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x43(C.float(values)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x44(m11 float32, m12 float32, m13 float32, m14 float32, m21 float32, m22 float32, m23 float32, m24 float32, m31 float32, m32 float32, m33 float32, m34 float32, m41 float32, m42 float32, m43 float32, m44 float32) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x44(C.float(m11), C.float(m12), C.float(m13), C.float(m14), C.float(m21), C.float(m22), C.float(m23), C.float(m24), C.float(m31), C.float(m32), C.float(m33), C.float(m34), C.float(m41), C.float(m42), C.float(m43), C.float(m44)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func (ptr *QMatrix4x4) Data() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_Data(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Fill(value float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Fill(ptr.Pointer(), C.float(value))
	}
}

func (ptr *QMatrix4x4) Frustum(left float32, right float32, bottom float32, top float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Frustum(ptr.Pointer(), C.float(left), C.float(right), C.float(bottom), C.float(top), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) LookAt(eye QVector3D_ITF, center QVector3D_ITF, up QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_LookAt(ptr.Pointer(), PointerFromQVector3D(eye), PointerFromQVector3D(center), PointerFromQVector3D(up))
	}
}

func (ptr *QMatrix4x4) Optimize() {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Optimize(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) Ortho3(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho3(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMatrix4x4) Ortho2(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho2(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QMatrix4x4) Ortho(left float32, right float32, bottom float32, top float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho(ptr.Pointer(), C.float(left), C.float(right), C.float(bottom), C.float(top), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Perspective(verticalAngle float32, aspectRatio float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Perspective(ptr.Pointer(), C.float(verticalAngle), C.float(aspectRatio), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Rotate3(quaternion QQuaternion_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate3(ptr.Pointer(), PointerFromQQuaternion(quaternion))
	}
}

func (ptr *QMatrix4x4) Rotate(angle float32, vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate(ptr.Pointer(), C.float(angle), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Rotate2(angle float32, x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate2(ptr.Pointer(), C.float(angle), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) Scale(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Scale4(factor float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale4(ptr.Pointer(), C.float(factor))
	}
}

func (ptr *QMatrix4x4) Scale2(x float32, y float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale2(ptr.Pointer(), C.float(x), C.float(y))
	}
}

func (ptr *QMatrix4x4) Scale3(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale3(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) SetColumn(index int, value QVector4D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetColumn(ptr.Pointer(), C.int(int32(index)), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetRow(index int, value QVector4D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetRow(ptr.Pointer(), C.int(int32(index)), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetToIdentity() {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetToIdentity(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) Translate(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Translate2(x float32, y float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate2(ptr.Pointer(), C.float(x), C.float(y))
	}
}

func (ptr *QMatrix4x4) Translate3(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate3(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) Viewport2(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Viewport2(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QMatrix4x4) Viewport(left float32, bottom float32, width float32, height float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Viewport(ptr.Pointer(), C.float(left), C.float(bottom), C.float(width), C.float(height), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Inverted(invertible bool) *QMatrix4x4 {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_Inverted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(invertible)))))
		runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Transposed() *QMatrix4x4 {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map(point core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMatrix4x4_Map(ptr.Pointer(), core.PointerFromQPoint(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map2(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QMatrix4x4_Map2(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect(rect core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QMatrix4x4_MapRect(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect2(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QMatrix4x4_MapRect2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) ToTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QMatrix4x4_ToTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) ToTransform2(distanceToPlane float32) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QMatrix4x4_ToTransform2(ptr.Pointer(), C.float(distanceToPlane)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map3(point QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QMatrix4x4_Map3(ptr.Pointer(), PointerFromQVector3D(point)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapVector(vector QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QMatrix4x4_MapVector(ptr.Pointer(), PointerFromQVector3D(vector)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Column(index int) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Column(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map4(point QVector4D_ITF) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Map4(ptr.Pointer(), PointerFromQVector4D(point)))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Row(index int) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Row(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) IsAffine() bool {
	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) ConstData() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_ConstData(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Data2() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_Data2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Determinant() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMatrix4x4_Determinant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) CopyDataTo(values float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_CopyDataTo(ptr.Pointer(), C.float(values))
	}
}

type QMouseEvent struct {
	QInputEvent
}

type QMouseEvent_ITF interface {
	QInputEvent_ITF
	QMouseEvent_PTR() *QMouseEvent
}

func (ptr *QMouseEvent) QMouseEvent_PTR() *QMouseEvent {
	return ptr
}

func (ptr *QMouseEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QMouseEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQMouseEvent(ptr QMouseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMouseEvent_PTR().Pointer()
	}
	return nil
}

func NewQMouseEventFromPointer(ptr unsafe.Pointer) *QMouseEvent {
	var n = new(QMouseEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMouseEvent) DestroyQMouseEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQMouseEvent(ty core.QEvent__Type, localPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	return NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent(C.longlong(ty), core.PointerFromQPointF(localPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
}

func NewQMouseEvent2(ty core.QEvent__Type, localPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	return NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent2(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
}

func NewQMouseEvent3(ty core.QEvent__Type, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	return NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent3(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
}

func NewQMouseEvent4(ty core.QEvent__Type, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, source core.Qt__MouseEventSource) *QMouseEvent {
	return NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent4(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers), C.longlong(source)))
}

func (ptr *QMouseEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMouseEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMouseEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) Button() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Flags() core.Qt__MouseEventFlag {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventFlag(C.QMouseEvent_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Source() core.Qt__MouseEventSource {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QMouseEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) B() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_B(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) SetB(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetB(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QMouseEvent) Caps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_Caps(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) SetCaps(vin int) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetCaps(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QMouseEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QMouseEvent) Velocity() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QMouseEvent_Velocity(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) SetVelocity(vqv QVector2D_ITF) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetVelocity(ptr.Pointer(), PointerFromQVector2D(vqv))
	}
}

type QMoveEvent struct {
	core.QEvent
}

type QMoveEvent_ITF interface {
	core.QEvent_ITF
	QMoveEvent_PTR() *QMoveEvent
}

func (ptr *QMoveEvent) QMoveEvent_PTR() *QMoveEvent {
	return ptr
}

func (ptr *QMoveEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QMoveEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQMoveEvent(ptr QMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQMoveEventFromPointer(ptr unsafe.Pointer) *QMoveEvent {
	var n = new(QMoveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMoveEvent) DestroyQMoveEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQMoveEvent(pos core.QPoint_ITF, oldPos core.QPoint_ITF) *QMoveEvent {
	return NewQMoveEventFromPointer(C.QMoveEvent_NewQMoveEvent(core.PointerFromQPoint(pos), core.PointerFromQPoint(oldPos)))
}

func (ptr *QMoveEvent) OldPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_OldPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMoveEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_Pos(ptr.Pointer()))
	}
	return nil
}

type QMovie struct {
	core.QObject
}

type QMovie_ITF interface {
	core.QObject_ITF
	QMovie_PTR() *QMovie
}

func (ptr *QMovie) QMovie_PTR() *QMovie {
	return ptr
}

func (ptr *QMovie) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QMovie) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQMovie(ptr QMovie_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMovie_PTR().Pointer()
	}
	return nil
}

func NewQMovieFromPointer(ptr unsafe.Pointer) *QMovie {
	var n = new(QMovie)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QMovie__CacheMode
//QMovie::CacheMode
type QMovie__CacheMode int64

const (
	QMovie__CacheNone QMovie__CacheMode = QMovie__CacheMode(0)
	QMovie__CacheAll  QMovie__CacheMode = QMovie__CacheMode(1)
)

//go:generate stringer -type=QMovie__MovieState
//QMovie::MovieState
type QMovie__MovieState int64

const (
	QMovie__NotRunning QMovie__MovieState = QMovie__MovieState(0)
	QMovie__Paused     QMovie__MovieState = QMovie__MovieState(1)
	QMovie__Running    QMovie__MovieState = QMovie__MovieState(2)
)

func QMovie_SupportedFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQMovieFromPointer(l.data).__supportedFormats_atList(i)
		}
		return out
	}(C.QMovie_QMovie_SupportedFormats())
}

func (ptr *QMovie) SupportedFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQMovieFromPointer(l.data).__supportedFormats_atList(i)
		}
		return out
	}(C.QMovie_QMovie_SupportedFormats())
}

func NewQMovie2(device core.QIODevice_ITF, format core.QByteArray_ITF, parent core.QObject_ITF) *QMovie {
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQMovie(parent core.QObject_ITF) *QMovie {
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQMovie3(fileName string, format core.QByteArray_ITF, parent core.QObject_ITF) *QMovie {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie3(fileNameC, core.PointerFromQByteArray(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMovie) ScaledSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QMovie_ScaledSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) JumpToFrame(frameNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_JumpToFrame(ptr.Pointer(), C.int(int32(frameNumber))) != 0
	}
	return false
}

//export callbackQMovie_JumpToNextFrame
func callbackQMovie_JumpToNextFrame(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "jumpToNextFrame"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMovieFromPointer(ptr).JumpToNextFrameDefault())))
}

func (ptr *QMovie) ConnectJumpToNextFrame(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextFrame"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextFrame", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextFrame", f)
		}
	}
}

func (ptr *QMovie) DisconnectJumpToNextFrame() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "jumpToNextFrame")
	}
}

func (ptr *QMovie) JumpToNextFrame() bool {
	if ptr.Pointer() != nil {
		return C.QMovie_JumpToNextFrame(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) JumpToNextFrameDefault() bool {
	if ptr.Pointer() != nil {
		return C.QMovie_JumpToNextFrameDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMovie_Error
func callbackQMovie_Error(ptr unsafe.Pointer, error C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "error"); signal != nil {
		signal.(func(QImageReader__ImageReaderError))(QImageReader__ImageReaderError(error))
	}

}

func (ptr *QMovie) ConnectError(f func(error QImageReader__ImageReaderError)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "error") {
			C.QMovie_ConnectError(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "error"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "error", func(error QImageReader__ImageReaderError) {
				signal.(func(QImageReader__ImageReaderError))(error)
				f(error)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "error", f)
		}
	}
}

func (ptr *QMovie) DisconnectError() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "error")
	}
}

func (ptr *QMovie) Error(error QImageReader__ImageReaderError) {
	if ptr.Pointer() != nil {
		C.QMovie_Error(ptr.Pointer(), C.longlong(error))
	}
}

//export callbackQMovie_Finished
func callbackQMovie_Finished(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "finished") {
			C.QMovie_ConnectFinished(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "finished"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "finished", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "finished", f)
		}
	}
}

func (ptr *QMovie) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "finished")
	}
}

func (ptr *QMovie) Finished() {
	if ptr.Pointer() != nil {
		C.QMovie_Finished(ptr.Pointer())
	}
}

//export callbackQMovie_FrameChanged
func callbackQMovie_FrameChanged(ptr unsafe.Pointer, frameNumber C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "frameChanged"); signal != nil {
		signal.(func(int))(int(int32(frameNumber)))
	}

}

func (ptr *QMovie) ConnectFrameChanged(f func(frameNumber int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "frameChanged") {
			C.QMovie_ConnectFrameChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "frameChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "frameChanged", func(frameNumber int) {
				signal.(func(int))(frameNumber)
				f(frameNumber)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "frameChanged", f)
		}
	}
}

func (ptr *QMovie) DisconnectFrameChanged() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFrameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "frameChanged")
	}
}

func (ptr *QMovie) FrameChanged(frameNumber int) {
	if ptr.Pointer() != nil {
		C.QMovie_FrameChanged(ptr.Pointer(), C.int(int32(frameNumber)))
	}
}

//export callbackQMovie_Resized
func callbackQMovie_Resized(ptr unsafe.Pointer, size unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "resized"); signal != nil {
		signal.(func(*core.QSize))(core.NewQSizeFromPointer(size))
	}

}

func (ptr *QMovie) ConnectResized(f func(size *core.QSize)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "resized") {
			C.QMovie_ConnectResized(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "resized"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resized", func(size *core.QSize) {
				signal.(func(*core.QSize))(size)
				f(size)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resized", f)
		}
	}
}

func (ptr *QMovie) DisconnectResized() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectResized(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "resized")
	}
}

func (ptr *QMovie) Resized(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_Resized(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QMovie) SetBackgroundColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QMovie) SetCacheMode(mode QMovie__CacheMode) {
	if ptr.Pointer() != nil {
		C.QMovie_SetCacheMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QMovie) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QMovie) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QMovie_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QMovie) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

//export callbackQMovie_SetPaused
func callbackQMovie_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQMovieFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QMovie) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setPaused"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPaused", func(paused bool) {
				signal.(func(bool))(paused)
				f(paused)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPaused", f)
		}
	}
}

func (ptr *QMovie) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setPaused")
	}
}

func (ptr *QMovie) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QMovie_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QMovie) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QMovie_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QMovie) SetScaledSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

//export callbackQMovie_SetSpeed
func callbackQMovie_SetSpeed(ptr unsafe.Pointer, percentSpeed C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setSpeed"); signal != nil {
		signal.(func(int))(int(int32(percentSpeed)))
	} else {
		NewQMovieFromPointer(ptr).SetSpeedDefault(int(int32(percentSpeed)))
	}
}

func (ptr *QMovie) ConnectSetSpeed(f func(percentSpeed int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setSpeed"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setSpeed", func(percentSpeed int) {
				signal.(func(int))(percentSpeed)
				f(percentSpeed)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setSpeed", f)
		}
	}
}

func (ptr *QMovie) DisconnectSetSpeed() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setSpeed")
	}
}

func (ptr *QMovie) SetSpeed(percentSpeed int) {
	if ptr.Pointer() != nil {
		C.QMovie_SetSpeed(ptr.Pointer(), C.int(int32(percentSpeed)))
	}
}

func (ptr *QMovie) SetSpeedDefault(percentSpeed int) {
	if ptr.Pointer() != nil {
		C.QMovie_SetSpeedDefault(ptr.Pointer(), C.int(int32(percentSpeed)))
	}
}

//export callbackQMovie_Start
func callbackQMovie_Start(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "start"); signal != nil {
		signal.(func())()
	} else {
		NewQMovieFromPointer(ptr).StartDefault()
	}
}

func (ptr *QMovie) ConnectStart(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "start"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "start", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "start", f)
		}
	}
}

func (ptr *QMovie) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "start")
	}
}

func (ptr *QMovie) Start() {
	if ptr.Pointer() != nil {
		C.QMovie_Start(ptr.Pointer())
	}
}

func (ptr *QMovie) StartDefault() {
	if ptr.Pointer() != nil {
		C.QMovie_StartDefault(ptr.Pointer())
	}
}

//export callbackQMovie_Started
func callbackQMovie_Started(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "started"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStarted(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "started") {
			C.QMovie_ConnectStarted(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "started"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "started", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "started", f)
		}
	}
}

func (ptr *QMovie) DisconnectStarted() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStarted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "started")
	}
}

func (ptr *QMovie) Started() {
	if ptr.Pointer() != nil {
		C.QMovie_Started(ptr.Pointer())
	}
}

//export callbackQMovie_StateChanged
func callbackQMovie_StateChanged(ptr unsafe.Pointer, state C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "stateChanged"); signal != nil {
		signal.(func(QMovie__MovieState))(QMovie__MovieState(state))
	}

}

func (ptr *QMovie) ConnectStateChanged(f func(state QMovie__MovieState)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "stateChanged") {
			C.QMovie_ConnectStateChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "stateChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "stateChanged", func(state QMovie__MovieState) {
				signal.(func(QMovie__MovieState))(state)
				f(state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "stateChanged", f)
		}
	}
}

func (ptr *QMovie) DisconnectStateChanged() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "stateChanged")
	}
}

func (ptr *QMovie) StateChanged(state QMovie__MovieState) {
	if ptr.Pointer() != nil {
		C.QMovie_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMovie_Stop
func callbackQMovie_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "stop"); signal != nil {
		signal.(func())()
	} else {
		NewQMovieFromPointer(ptr).StopDefault()
	}
}

func (ptr *QMovie) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "stop"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "stop", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "stop", f)
		}
	}
}

func (ptr *QMovie) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "stop")
	}
}

func (ptr *QMovie) Stop() {
	if ptr.Pointer() != nil {
		C.QMovie_Stop(ptr.Pointer())
	}
}

func (ptr *QMovie) StopDefault() {
	if ptr.Pointer() != nil {
		C.QMovie_StopDefault(ptr.Pointer())
	}
}

//export callbackQMovie_Updated
func callbackQMovie_Updated(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "updated"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QMovie) ConnectUpdated(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "updated") {
			C.QMovie_ConnectUpdated(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "updated"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updated", func(rect *core.QRect) {
				signal.(func(*core.QRect))(rect)
				f(rect)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updated", f)
		}
	}
}

func (ptr *QMovie) DisconnectUpdated() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectUpdated(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "updated")
	}
}

func (ptr *QMovie) Updated(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_Updated(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMovie) DestroyQMovie() {
	if ptr.Pointer() != nil {
		C.QMovie_DestroyQMovie(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMovie) CacheMode() QMovie__CacheMode {
	if ptr.Pointer() != nil {
		return QMovie__CacheMode(C.QMovie_CacheMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) State() QMovie__MovieState {
	if ptr.Pointer() != nil {
		return QMovie__MovieState(C.QMovie_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QMovie_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QMovie_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QMovie_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) CurrentImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QMovie_CurrentImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) CurrentPixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QMovie_CurrentPixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) FrameRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QMovie_FrameRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMovie_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMovie) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMovie_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) CurrentFrameNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_CurrentFrameNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) FrameCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_FrameCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) NextFrameDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_NextFrameDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) Speed() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_Speed(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) __supportedFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QMovie___supportedFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __supportedFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___supportedFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QMovie) __supportedFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___supportedFormats_newList(ptr.Pointer()))
}

func (ptr *QMovie) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QMovie___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QMovie) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QMovie) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QMovie___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QMovie) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QMovie) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QMovie___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QMovie) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QMovie) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QMovie___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QMovie) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___findChildren_newList(ptr.Pointer()))
}

func (ptr *QMovie) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QMovie___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QMovie) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QMovie___children_newList(ptr.Pointer()))
}

//export callbackQMovie_Event
func callbackQMovie_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMovie) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMovie_EventFilter
func callbackQMovie_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMovie) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMovie_ChildEvent
func callbackQMovie_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMovie) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMovie_ConnectNotify
func callbackQMovie_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_CustomEvent
func callbackQMovie_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMovie) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMovie_DeleteLater
func callbackQMovie_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMovieFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMovie) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QMovie_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMovie_Destroyed
func callbackQMovie_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQMovie_DisconnectNotify
func callbackQMovie_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_ObjectNameChanged
func callbackQMovie_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQMovie_TimerEvent
func callbackQMovie_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMovie) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMovie_MetaObject
func callbackQMovie_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMovieFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMovie) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMovie_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QNativeGestureEvent struct {
	QInputEvent
}

type QNativeGestureEvent_ITF interface {
	QInputEvent_ITF
	QNativeGestureEvent_PTR() *QNativeGestureEvent
}

func (ptr *QNativeGestureEvent) QNativeGestureEvent_PTR() *QNativeGestureEvent {
	return ptr
}

func (ptr *QNativeGestureEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQNativeGestureEvent(ptr QNativeGestureEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QNativeGestureEvent_PTR().Pointer()
	}
	return nil
}

func NewQNativeGestureEventFromPointer(ptr unsafe.Pointer) *QNativeGestureEvent {
	var n = new(QNativeGestureEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QNativeGestureEvent) DestroyQNativeGestureEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQNativeGestureEvent(ty core.Qt__NativeGestureType, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, realValue float64, sequenceId uint, intValue uint64) *QNativeGestureEvent {
	return NewQNativeGestureEventFromPointer(C.QNativeGestureEvent_NewQNativeGestureEvent(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.double(realValue), C.ulong(uint32(sequenceId)), C.ulonglong(intValue)))
}

func (ptr *QNativeGestureEvent) GestureType() core.Qt__NativeGestureType {
	if ptr.Pointer() != nil {
		return core.Qt__NativeGestureType(C.QNativeGestureEvent_GestureType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QNativeGestureEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QNativeGestureEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) Value() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QNativeGestureEvent_Value(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) MGestureType() core.Qt__NativeGestureType {
	if ptr.Pointer() != nil {
		return core.Qt__NativeGestureType(C.QNativeGestureEvent_MGestureType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMGestureType(vqt core.Qt__NativeGestureType) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMGestureType(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QNativeGestureEvent) MIntValue() uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QNativeGestureEvent_MIntValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMIntValue(vqu uint64) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMIntValue(ptr.Pointer(), C.ulonglong(vqu))
	}
}

func (ptr *QNativeGestureEvent) MLocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MLocalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMLocalPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMLocalPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QNativeGestureEvent) MRealValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QNativeGestureEvent_MRealValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMRealValue(vqr float64) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMRealValue(ptr.Pointer(), C.double(vqr))
	}
}

func (ptr *QNativeGestureEvent) MScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMScreenPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMScreenPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QNativeGestureEvent) MSequenceId() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QNativeGestureEvent_MSequenceId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMSequenceId(vul uint) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMSequenceId(ptr.Pointer(), C.ulong(uint32(vul)))
	}
}

func (ptr *QNativeGestureEvent) MWindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MWindowPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMWindowPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMWindowPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

type QOffscreenSurface struct {
	core.QObject
	QSurface
}

type QOffscreenSurface_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QOffscreenSurface_PTR() *QOffscreenSurface
}

func (ptr *QOffscreenSurface) QOffscreenSurface_PTR() *QOffscreenSurface {
	return ptr
}

func (ptr *QOffscreenSurface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOffscreenSurface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QSurface_PTR().SetPointer(p)
	}
}

func PointerFromQOffscreenSurface(ptr QOffscreenSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOffscreenSurface_PTR().Pointer()
	}
	return nil
}

func NewQOffscreenSurfaceFromPointer(ptr unsafe.Pointer) *QOffscreenSurface {
	var n = new(QOffscreenSurface)
	n.SetPointer(ptr)
	return n
}
func NewQOffscreenSurface(targetScreen QScreen_ITF) *QOffscreenSurface {
	var tmpValue = NewQOffscreenSurfaceFromPointer(C.QOffscreenSurface_NewQOffscreenSurface(PointerFromQScreen(targetScreen)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QOffscreenSurface) Create() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Create(ptr.Pointer())
	}
}

func (ptr *QOffscreenSurface) Destroy() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Destroy(ptr.Pointer())
	}
}

//export callbackQOffscreenSurface_ScreenChanged
func callbackQOffscreenSurface_ScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QOffscreenSurface) ConnectScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "screenChanged") {
			C.QOffscreenSurface_ConnectScreenChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "screenChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged", func(screen *QScreen) {
				signal.(func(*QScreen))(screen)
				f(screen)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged", f)
		}
	}
}

func (ptr *QOffscreenSurface) DisconnectScreenChanged() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged")
	}
}

func (ptr *QOffscreenSurface) ScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QOffscreenSurface) SetFormat(format QSurfaceFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QOffscreenSurface) SetScreen(newScreen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

//export callbackQOffscreenSurface_DestroyQOffscreenSurface
func callbackQOffscreenSurface_DestroyQOffscreenSurface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QOffscreenSurface"); signal != nil {
		signal.(func())()
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DestroyQOffscreenSurfaceDefault()
	}
}

func (ptr *QOffscreenSurface) ConnectDestroyQOffscreenSurface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QOffscreenSurface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QOffscreenSurface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QOffscreenSurface", f)
		}
	}
}

func (ptr *QOffscreenSurface) DisconnectDestroyQOffscreenSurface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QOffscreenSurface")
	}
}

func (ptr *QOffscreenSurface) DestroyQOffscreenSurface() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DestroyQOffscreenSurface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QOffscreenSurface) DestroyQOffscreenSurfaceDefault() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DestroyQOffscreenSurfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QOffscreenSurface) Screen() *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QOffscreenSurface_Screen(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQOffscreenSurface_Size
func callbackQOffscreenSurface_Size(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQOffscreenSurfaceFromPointer(ptr).SizeDefault())
}

func (ptr *QOffscreenSurface) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "size"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", func() *core.QSize {
				signal.(func() *core.QSize)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", f)
		}
	}
}

func (ptr *QOffscreenSurface) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "size")
	}
}

func (ptr *QOffscreenSurface) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QOffscreenSurface_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QOffscreenSurface_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQOffscreenSurface_Format
func callbackQOffscreenSurface_Format(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQOffscreenSurfaceFromPointer(ptr).FormatDefault())
}

func (ptr *QOffscreenSurface) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "format"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", func() *QSurfaceFormat {
				signal.(func() *QSurfaceFormat)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", f)
		}
	}
}

func (ptr *QOffscreenSurface) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "format")
	}
}

func (ptr *QOffscreenSurface) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) RequestedFormat() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_RequestedFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQOffscreenSurface_SurfaceType
func callbackQOffscreenSurface_SurfaceType(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQOffscreenSurfaceFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QOffscreenSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "surfaceType"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", func() QSurface__SurfaceType {
				signal.(func() QSurface__SurfaceType)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", f)
		}
	}
}

func (ptr *QOffscreenSurface) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType")
	}
}

func (ptr *QOffscreenSurface) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QOffscreenSurface) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QOffscreenSurface) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QOffscreenSurface___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QOffscreenSurface) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QOffscreenSurface___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QOffscreenSurface) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QOffscreenSurface___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QOffscreenSurface) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QOffscreenSurface___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QOffscreenSurface) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QOffscreenSurface___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QOffscreenSurface) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QOffscreenSurface___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QOffscreenSurface) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QOffscreenSurface___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QOffscreenSurface) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QOffscreenSurface___findChildren_newList(ptr.Pointer()))
}

func (ptr *QOffscreenSurface) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QOffscreenSurface___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QOffscreenSurface) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QOffscreenSurface___children_newList(ptr.Pointer()))
}

//export callbackQOffscreenSurface_Event
func callbackQOffscreenSurface_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QOffscreenSurface) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_EventFilter
func callbackQOffscreenSurface_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QOffscreenSurface) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_ChildEvent
func callbackQOffscreenSurface_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QOffscreenSurface) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQOffscreenSurface_ConnectNotify
func callbackQOffscreenSurface_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_CustomEvent
func callbackQOffscreenSurface_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QOffscreenSurface) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQOffscreenSurface_DeleteLater
func callbackQOffscreenSurface_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QOffscreenSurface) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QOffscreenSurface) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQOffscreenSurface_Destroyed
func callbackQOffscreenSurface_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQOffscreenSurface_DisconnectNotify
func callbackQOffscreenSurface_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_ObjectNameChanged
func callbackQOffscreenSurface_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQOffscreenSurface_TimerEvent
func callbackQOffscreenSurface_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QOffscreenSurface) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQOffscreenSurface_MetaObject
func callbackQOffscreenSurface_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQOffscreenSurfaceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QOffscreenSurface) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QOpenGLBuffer struct {
	ptr unsafe.Pointer
}

type QOpenGLBuffer_ITF interface {
	QOpenGLBuffer_PTR() *QOpenGLBuffer
}

func (ptr *QOpenGLBuffer) QOpenGLBuffer_PTR() *QOpenGLBuffer {
	return ptr
}

func (ptr *QOpenGLBuffer) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLBuffer) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLBuffer(ptr QOpenGLBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLBuffer_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLBufferFromPointer(ptr unsafe.Pointer) *QOpenGLBuffer {
	var n = new(QOpenGLBuffer)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLBuffer__Access
//QOpenGLBuffer::Access
type QOpenGLBuffer__Access int64

const (
	QOpenGLBuffer__ReadOnly  QOpenGLBuffer__Access = QOpenGLBuffer__Access(0x88B8)
	QOpenGLBuffer__WriteOnly QOpenGLBuffer__Access = QOpenGLBuffer__Access(0x88B9)
	QOpenGLBuffer__ReadWrite QOpenGLBuffer__Access = QOpenGLBuffer__Access(0x88BA)
)

//go:generate stringer -type=QOpenGLBuffer__RangeAccessFlag
//QOpenGLBuffer::RangeAccessFlag
type QOpenGLBuffer__RangeAccessFlag int64

const (
	QOpenGLBuffer__RangeRead             QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0001)
	QOpenGLBuffer__RangeWrite            QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0002)
	QOpenGLBuffer__RangeInvalidate       QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0004)
	QOpenGLBuffer__RangeInvalidateBuffer QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0008)
	QOpenGLBuffer__RangeFlushExplicit    QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0010)
	QOpenGLBuffer__RangeUnsynchronized   QOpenGLBuffer__RangeAccessFlag = QOpenGLBuffer__RangeAccessFlag(0x0020)
)

//go:generate stringer -type=QOpenGLBuffer__Type
//QOpenGLBuffer::Type
type QOpenGLBuffer__Type int64

const (
	QOpenGLBuffer__VertexBuffer      QOpenGLBuffer__Type = QOpenGLBuffer__Type(0x8892)
	QOpenGLBuffer__IndexBuffer       QOpenGLBuffer__Type = QOpenGLBuffer__Type(0x8893)
	QOpenGLBuffer__PixelPackBuffer   QOpenGLBuffer__Type = QOpenGLBuffer__Type(0x88EB)
	QOpenGLBuffer__PixelUnpackBuffer QOpenGLBuffer__Type = QOpenGLBuffer__Type(0x88EC)
)

//go:generate stringer -type=QOpenGLBuffer__UsagePattern
//QOpenGLBuffer::UsagePattern
type QOpenGLBuffer__UsagePattern int64

const (
	QOpenGLBuffer__StreamDraw  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E0)
	QOpenGLBuffer__StreamRead  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E1)
	QOpenGLBuffer__StreamCopy  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E2)
	QOpenGLBuffer__StaticDraw  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E4)
	QOpenGLBuffer__StaticRead  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E5)
	QOpenGLBuffer__StaticCopy  QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E6)
	QOpenGLBuffer__DynamicDraw QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E8)
	QOpenGLBuffer__DynamicRead QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88E9)
	QOpenGLBuffer__DynamicCopy QOpenGLBuffer__UsagePattern = QOpenGLBuffer__UsagePattern(0x88EA)
)

type QOpenGLContext struct {
	core.QObject
}

type QOpenGLContext_ITF interface {
	core.QObject_ITF
	QOpenGLContext_PTR() *QOpenGLContext
}

func (ptr *QOpenGLContext) QOpenGLContext_PTR() *QOpenGLContext {
	return ptr
}

func (ptr *QOpenGLContext) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLContext) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLContext(ptr QOpenGLContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContext_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextFromPointer(ptr unsafe.Pointer) *QOpenGLContext {
	var n = new(QOpenGLContext)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLContext__OpenGLModuleType
//QOpenGLContext::OpenGLModuleType
type QOpenGLContext__OpenGLModuleType int64

const (
	QOpenGLContext__LibGL   QOpenGLContext__OpenGLModuleType = QOpenGLContext__OpenGLModuleType(0)
	QOpenGLContext__LibGLES QOpenGLContext__OpenGLModuleType = QOpenGLContext__OpenGLModuleType(1)
)

type QOpenGLContextGroup struct {
	core.QObject
}

type QOpenGLContextGroup_ITF interface {
	core.QObject_ITF
	QOpenGLContextGroup_PTR() *QOpenGLContextGroup
}

func (ptr *QOpenGLContextGroup) QOpenGLContextGroup_PTR() *QOpenGLContextGroup {
	return ptr
}

func (ptr *QOpenGLContextGroup) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLContextGroup) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLContextGroup(ptr QOpenGLContextGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContextGroup_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextGroupFromPointer(ptr unsafe.Pointer) *QOpenGLContextGroup {
	var n = new(QOpenGLContextGroup)
	n.SetPointer(ptr)
	return n
}

func (ptr *QOpenGLContextGroup) DestroyQOpenGLContextGroup() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QOpenGLDebugLogger struct {
	core.QObject
}

type QOpenGLDebugLogger_ITF interface {
	core.QObject_ITF
	QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger
}

func (ptr *QOpenGLDebugLogger) QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger {
	return ptr
}

func (ptr *QOpenGLDebugLogger) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLDebugLogger) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLDebugLogger(ptr QOpenGLDebugLogger_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugLogger_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugLoggerFromPointer(ptr unsafe.Pointer) *QOpenGLDebugLogger {
	var n = new(QOpenGLDebugLogger)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLDebugLogger__LoggingMode
//QOpenGLDebugLogger::LoggingMode
type QOpenGLDebugLogger__LoggingMode int64

const (
	QOpenGLDebugLogger__AsynchronousLogging QOpenGLDebugLogger__LoggingMode = QOpenGLDebugLogger__LoggingMode(0)
	QOpenGLDebugLogger__SynchronousLogging  QOpenGLDebugLogger__LoggingMode = QOpenGLDebugLogger__LoggingMode(1)
)

type QOpenGLDebugMessage struct {
	ptr unsafe.Pointer
}

type QOpenGLDebugMessage_ITF interface {
	QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage
}

func (ptr *QOpenGLDebugMessage) QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage {
	return ptr
}

func (ptr *QOpenGLDebugMessage) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLDebugMessage) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLDebugMessage(ptr QOpenGLDebugMessage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugMessage_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugMessageFromPointer(ptr unsafe.Pointer) *QOpenGLDebugMessage {
	var n = new(QOpenGLDebugMessage)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLDebugMessage__Severity
//QOpenGLDebugMessage::Severity
type QOpenGLDebugMessage__Severity int64

const (
	QOpenGLDebugMessage__InvalidSeverity      QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0x00000000)
	QOpenGLDebugMessage__HighSeverity         QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0x00000001)
	QOpenGLDebugMessage__MediumSeverity       QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0x00000002)
	QOpenGLDebugMessage__LowSeverity          QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0x00000004)
	QOpenGLDebugMessage__NotificationSeverity QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0x00000008)
	QOpenGLDebugMessage__LastSeverity         QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(QOpenGLDebugMessage__NotificationSeverity)
	QOpenGLDebugMessage__AnySeverity          QOpenGLDebugMessage__Severity = QOpenGLDebugMessage__Severity(0xffffffff)
)

//go:generate stringer -type=QOpenGLDebugMessage__Source
//QOpenGLDebugMessage::Source
type QOpenGLDebugMessage__Source int64

const (
	QOpenGLDebugMessage__InvalidSource        QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000000)
	QOpenGLDebugMessage__APISource            QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000001)
	QOpenGLDebugMessage__WindowSystemSource   QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000002)
	QOpenGLDebugMessage__ShaderCompilerSource QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000004)
	QOpenGLDebugMessage__ThirdPartySource     QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000008)
	QOpenGLDebugMessage__ApplicationSource    QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000010)
	QOpenGLDebugMessage__OtherSource          QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0x00000020)
	QOpenGLDebugMessage__LastSource           QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(QOpenGLDebugMessage__OtherSource)
	QOpenGLDebugMessage__AnySource            QOpenGLDebugMessage__Source = QOpenGLDebugMessage__Source(0xffffffff)
)

//go:generate stringer -type=QOpenGLDebugMessage__Type
//QOpenGLDebugMessage::Type
type QOpenGLDebugMessage__Type int64

const (
	QOpenGLDebugMessage__InvalidType            QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000000)
	QOpenGLDebugMessage__ErrorType              QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000001)
	QOpenGLDebugMessage__DeprecatedBehaviorType QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000002)
	QOpenGLDebugMessage__UndefinedBehaviorType  QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000004)
	QOpenGLDebugMessage__PortabilityType        QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000008)
	QOpenGLDebugMessage__PerformanceType        QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000010)
	QOpenGLDebugMessage__OtherType              QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000020)
	QOpenGLDebugMessage__MarkerType             QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000040)
	QOpenGLDebugMessage__GroupPushType          QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000080)
	QOpenGLDebugMessage__GroupPopType           QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0x00000100)
	QOpenGLDebugMessage__LastType               QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(QOpenGLDebugMessage__GroupPopType)
	QOpenGLDebugMessage__AnyType                QOpenGLDebugMessage__Type = QOpenGLDebugMessage__Type(0xffffffff)
)

type QOpenGLExtraFunctions struct {
	QOpenGLFunctions
}

type QOpenGLExtraFunctions_ITF interface {
	QOpenGLFunctions_ITF
	QOpenGLExtraFunctions_PTR() *QOpenGLExtraFunctions
}

func (ptr *QOpenGLExtraFunctions) QOpenGLExtraFunctions_PTR() *QOpenGLExtraFunctions {
	return ptr
}

func (ptr *QOpenGLExtraFunctions) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLExtraFunctions) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLExtraFunctions(ptr QOpenGLExtraFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLExtraFunctions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLExtraFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLExtraFunctions {
	var n = new(QOpenGLExtraFunctions)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFramebufferObject struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObject_ITF interface {
	QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject
}

func (ptr *QOpenGLFramebufferObject) QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject {
	return ptr
}

func (ptr *QOpenGLFramebufferObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLFramebufferObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLFramebufferObject(ptr QOpenGLFramebufferObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObject {
	var n = new(QOpenGLFramebufferObject)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLFramebufferObject__Attachment
//QOpenGLFramebufferObject::Attachment
type QOpenGLFramebufferObject__Attachment int64

const (
	QOpenGLFramebufferObject__NoAttachment         QOpenGLFramebufferObject__Attachment = QOpenGLFramebufferObject__Attachment(0)
	QOpenGLFramebufferObject__CombinedDepthStencil QOpenGLFramebufferObject__Attachment = QOpenGLFramebufferObject__Attachment(1)
	QOpenGLFramebufferObject__Depth                QOpenGLFramebufferObject__Attachment = QOpenGLFramebufferObject__Attachment(2)
)

//go:generate stringer -type=QOpenGLFramebufferObject__FramebufferRestorePolicy
//QOpenGLFramebufferObject::FramebufferRestorePolicy
type QOpenGLFramebufferObject__FramebufferRestorePolicy int64

const (
	QOpenGLFramebufferObject__DontRestoreFramebufferBinding      QOpenGLFramebufferObject__FramebufferRestorePolicy = QOpenGLFramebufferObject__FramebufferRestorePolicy(0)
	QOpenGLFramebufferObject__RestoreFramebufferBindingToDefault QOpenGLFramebufferObject__FramebufferRestorePolicy = QOpenGLFramebufferObject__FramebufferRestorePolicy(1)
	QOpenGLFramebufferObject__RestoreFrameBufferBinding          QOpenGLFramebufferObject__FramebufferRestorePolicy = QOpenGLFramebufferObject__FramebufferRestorePolicy(2)
)

type QOpenGLFramebufferObjectFormat struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObjectFormat_ITF interface {
	QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat
}

func (ptr *QOpenGLFramebufferObjectFormat) QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat {
	return ptr
}

func (ptr *QOpenGLFramebufferObjectFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLFramebufferObjectFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLFramebufferObjectFormat(ptr QOpenGLFramebufferObjectFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObjectFormat_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFormatFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObjectFormat {
	var n = new(QOpenGLFramebufferObjectFormat)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QOpenGLFunctions_ITF interface {
	QOpenGLFunctions_PTR() *QOpenGLFunctions
}

func (ptr *QOpenGLFunctions) QOpenGLFunctions_PTR() *QOpenGLFunctions {
	return ptr
}

func (ptr *QOpenGLFunctions) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLFunctions) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLFunctions(ptr QOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions {
	var n = new(QOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLFunctions__OpenGLFeature
//QOpenGLFunctions::OpenGLFeature
type QOpenGLFunctions__OpenGLFeature int64

const (
	QOpenGLFunctions__Multitexture          QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0001)
	QOpenGLFunctions__Shaders               QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0002)
	QOpenGLFunctions__Buffers               QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0004)
	QOpenGLFunctions__Framebuffers          QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0008)
	QOpenGLFunctions__BlendColor            QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0010)
	QOpenGLFunctions__BlendEquation         QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0020)
	QOpenGLFunctions__BlendEquationSeparate QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0040)
	QOpenGLFunctions__BlendFuncSeparate     QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0080)
	QOpenGLFunctions__BlendSubtract         QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0100)
	QOpenGLFunctions__CompressedTextures    QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0200)
	QOpenGLFunctions__Multisample           QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0400)
	QOpenGLFunctions__StencilSeparate       QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x0800)
	QOpenGLFunctions__NPOTTextures          QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x1000)
	QOpenGLFunctions__NPOTTextureRepeat     QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x2000)
	QOpenGLFunctions__FixedFunctionPipeline QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x4000)
	QOpenGLFunctions__TextureRGFormats      QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x8000)
	QOpenGLFunctions__MultipleRenderTargets QOpenGLFunctions__OpenGLFeature = QOpenGLFunctions__OpenGLFeature(0x10000)
)

type QOpenGLFunctions_1_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0
}

func (ptr *QOpenGLFunctions_1_0) QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_0) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_0) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_0(ptr QOpenGLFunctions_1_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_0 {
	var n = new(QOpenGLFunctions_1_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1
}

func (ptr *QOpenGLFunctions_1_1) QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_1) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_1) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_1(ptr QOpenGLFunctions_1_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_1 {
	var n = new(QOpenGLFunctions_1_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2
}

func (ptr *QOpenGLFunctions_1_2) QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_2) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_2) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_2(ptr QOpenGLFunctions_1_2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_2 {
	var n = new(QOpenGLFunctions_1_2)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_3 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_3_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3
}

func (ptr *QOpenGLFunctions_1_3) QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_3) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_3) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_3(ptr QOpenGLFunctions_1_3_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_3_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_3FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_3 {
	var n = new(QOpenGLFunctions_1_3)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_4 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_4_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4
}

func (ptr *QOpenGLFunctions_1_4) QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_4) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_4) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_4(ptr QOpenGLFunctions_1_4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_4_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_4FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_4 {
	var n = new(QOpenGLFunctions_1_4)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_5 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_5_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5
}

func (ptr *QOpenGLFunctions_1_5) QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5 {
	return ptr
}

func (ptr *QOpenGLFunctions_1_5) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_1_5) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_1_5(ptr QOpenGLFunctions_1_5_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_5_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_5FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_5 {
	var n = new(QOpenGLFunctions_1_5)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_2_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0
}

func (ptr *QOpenGLFunctions_2_0) QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0 {
	return ptr
}

func (ptr *QOpenGLFunctions_2_0) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_2_0) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_2_0(ptr QOpenGLFunctions_2_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_0 {
	var n = new(QOpenGLFunctions_2_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_2_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1
}

func (ptr *QOpenGLFunctions_2_1) QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1 {
	return ptr
}

func (ptr *QOpenGLFunctions_2_1) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_2_1) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_2_1(ptr QOpenGLFunctions_2_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_1 {
	var n = new(QOpenGLFunctions_2_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0
}

func (ptr *QOpenGLFunctions_3_0) QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0 {
	return ptr
}

func (ptr *QOpenGLFunctions_3_0) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_0) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_0(ptr QOpenGLFunctions_3_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_0 {
	var n = new(QOpenGLFunctions_3_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1
}

func (ptr *QOpenGLFunctions_3_1) QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1 {
	return ptr
}

func (ptr *QOpenGLFunctions_3_1) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_1) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_1(ptr QOpenGLFunctions_3_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_1 {
	var n = new(QOpenGLFunctions_3_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility
}

func (ptr *QOpenGLFunctions_3_2_Compatibility) QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_3_2_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_2_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_2_Compatibility(ptr QOpenGLFunctions_3_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Compatibility {
	var n = new(QOpenGLFunctions_3_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core
}

func (ptr *QOpenGLFunctions_3_2_Core) QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_3_2_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_2_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_2_Core(ptr QOpenGLFunctions_3_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Core {
	var n = new(QOpenGLFunctions_3_2_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility
}

func (ptr *QOpenGLFunctions_3_3_Compatibility) QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_3_3_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_3_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_3_Compatibility(ptr QOpenGLFunctions_3_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Compatibility {
	var n = new(QOpenGLFunctions_3_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core
}

func (ptr *QOpenGLFunctions_3_3_Core) QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_3_3_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_3_3_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_3_3_Core(ptr QOpenGLFunctions_3_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Core {
	var n = new(QOpenGLFunctions_3_3_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility
}

func (ptr *QOpenGLFunctions_4_0_Compatibility) QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_0_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_0_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_0_Compatibility(ptr QOpenGLFunctions_4_0_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Compatibility {
	var n = new(QOpenGLFunctions_4_0_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core
}

func (ptr *QOpenGLFunctions_4_0_Core) QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_0_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_0_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_0_Core(ptr QOpenGLFunctions_4_0_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Core {
	var n = new(QOpenGLFunctions_4_0_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility
}

func (ptr *QOpenGLFunctions_4_1_Compatibility) QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_1_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_1_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_1_Compatibility(ptr QOpenGLFunctions_4_1_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Compatibility {
	var n = new(QOpenGLFunctions_4_1_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core
}

func (ptr *QOpenGLFunctions_4_1_Core) QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_1_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_1_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_1_Core(ptr QOpenGLFunctions_4_1_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Core {
	var n = new(QOpenGLFunctions_4_1_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility
}

func (ptr *QOpenGLFunctions_4_2_Compatibility) QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_2_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_2_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_2_Compatibility(ptr QOpenGLFunctions_4_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Compatibility {
	var n = new(QOpenGLFunctions_4_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core
}

func (ptr *QOpenGLFunctions_4_2_Core) QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_2_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_2_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_2_Core(ptr QOpenGLFunctions_4_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Core {
	var n = new(QOpenGLFunctions_4_2_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility
}

func (ptr *QOpenGLFunctions_4_3_Compatibility) QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_3_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_3_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_3_Compatibility(ptr QOpenGLFunctions_4_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Compatibility {
	var n = new(QOpenGLFunctions_4_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core
}

func (ptr *QOpenGLFunctions_4_3_Core) QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_3_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_3_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_3_Core(ptr QOpenGLFunctions_4_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Core {
	var n = new(QOpenGLFunctions_4_3_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility
}

func (ptr *QOpenGLFunctions_4_4_Compatibility) QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_4_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_4_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_4_Compatibility(ptr QOpenGLFunctions_4_4_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Compatibility {
	var n = new(QOpenGLFunctions_4_4_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core
}

func (ptr *QOpenGLFunctions_4_4_Core) QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_4_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_4_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_4_Core(ptr QOpenGLFunctions_4_4_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Core {
	var n = new(QOpenGLFunctions_4_4_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility
}

func (ptr *QOpenGLFunctions_4_5_Compatibility) QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility {
	return ptr
}

func (ptr *QOpenGLFunctions_4_5_Compatibility) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_5_Compatibility) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_5_Compatibility(ptr QOpenGLFunctions_4_5_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Compatibility {
	var n = new(QOpenGLFunctions_4_5_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core
}

func (ptr *QOpenGLFunctions_4_5_Core) QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core {
	return ptr
}

func (ptr *QOpenGLFunctions_4_5_Core) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_4_5_Core) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_4_5_Core(ptr QOpenGLFunctions_4_5_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Core {
	var n = new(QOpenGLFunctions_4_5_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_ES2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_ES2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2
}

func (ptr *QOpenGLFunctions_ES2) QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2 {
	return ptr
}

func (ptr *QOpenGLFunctions_ES2) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLFunctions_ES2) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractOpenGLFunctions_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLFunctions_ES2(ptr QOpenGLFunctions_ES2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_ES2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_ES2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_ES2 {
	var n = new(QOpenGLFunctions_ES2)
	n.SetPointer(ptr)
	return n
}

type QOpenGLPaintDevice struct {
	QPaintDevice
}

type QOpenGLPaintDevice_ITF interface {
	QPaintDevice_ITF
	QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice
}

func (ptr *QOpenGLPaintDevice) QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice {
	return ptr
}

func (ptr *QOpenGLPaintDevice) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLPaintDevice) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLPaintDevice(ptr QOpenGLPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPaintDeviceFromPointer(ptr unsafe.Pointer) *QOpenGLPaintDevice {
	var n = new(QOpenGLPaintDevice)
	n.SetPointer(ptr)
	return n
}

type QOpenGLPixelTransferOptions struct {
	ptr unsafe.Pointer
}

type QOpenGLPixelTransferOptions_ITF interface {
	QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions
}

func (ptr *QOpenGLPixelTransferOptions) QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions {
	return ptr
}

func (ptr *QOpenGLPixelTransferOptions) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLPixelTransferOptions) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLPixelTransferOptions(ptr QOpenGLPixelTransferOptions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPixelTransferOptions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPixelTransferOptionsFromPointer(ptr unsafe.Pointer) *QOpenGLPixelTransferOptions {
	var n = new(QOpenGLPixelTransferOptions)
	n.SetPointer(ptr)
	return n
}

type QOpenGLShader struct {
	core.QObject
}

type QOpenGLShader_ITF interface {
	core.QObject_ITF
	QOpenGLShader_PTR() *QOpenGLShader
}

func (ptr *QOpenGLShader) QOpenGLShader_PTR() *QOpenGLShader {
	return ptr
}

func (ptr *QOpenGLShader) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLShader) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLShader(ptr QOpenGLShader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShader_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderFromPointer(ptr unsafe.Pointer) *QOpenGLShader {
	var n = new(QOpenGLShader)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLShader__ShaderTypeBit
//QOpenGLShader::ShaderTypeBit
type QOpenGLShader__ShaderTypeBit int64

const (
	QOpenGLShader__Vertex                 QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0001)
	QOpenGLShader__Fragment               QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0002)
	QOpenGLShader__Geometry               QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0004)
	QOpenGLShader__TessellationControl    QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0008)
	QOpenGLShader__TessellationEvaluation QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0010)
	QOpenGLShader__Compute                QOpenGLShader__ShaderTypeBit = QOpenGLShader__ShaderTypeBit(0x0020)
)

type QOpenGLShaderProgram struct {
	core.QObject
}

type QOpenGLShaderProgram_ITF interface {
	core.QObject_ITF
	QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram
}

func (ptr *QOpenGLShaderProgram) QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram {
	return ptr
}

func (ptr *QOpenGLShaderProgram) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLShaderProgram) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLShaderProgram(ptr QOpenGLShaderProgram_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShaderProgram_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderProgramFromPointer(ptr unsafe.Pointer) *QOpenGLShaderProgram {
	var n = new(QOpenGLShaderProgram)
	n.SetPointer(ptr)
	return n
}

type QOpenGLTexture struct {
	ptr unsafe.Pointer
}

type QOpenGLTexture_ITF interface {
	QOpenGLTexture_PTR() *QOpenGLTexture
}

func (ptr *QOpenGLTexture) QOpenGLTexture_PTR() *QOpenGLTexture {
	return ptr
}

func (ptr *QOpenGLTexture) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLTexture) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLTexture(ptr QOpenGLTexture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTexture_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTextureFromPointer(ptr unsafe.Pointer) *QOpenGLTexture {
	var n = new(QOpenGLTexture)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLTexture__BindingTarget
//QOpenGLTexture::BindingTarget
type QOpenGLTexture__BindingTarget int64

const (
	QOpenGLTexture__BindingTarget1D                 QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8068)
	QOpenGLTexture__BindingTarget1DArray            QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8C1C)
	QOpenGLTexture__BindingTarget2D                 QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8069)
	QOpenGLTexture__BindingTarget2DArray            QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8C1D)
	QOpenGLTexture__BindingTarget3D                 QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x806A)
	QOpenGLTexture__BindingTargetCubeMap            QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8514)
	QOpenGLTexture__BindingTargetCubeMapArray       QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x900A)
	QOpenGLTexture__BindingTarget2DMultisample      QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x9104)
	QOpenGLTexture__BindingTarget2DMultisampleArray QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x9105)
	QOpenGLTexture__BindingTargetRectangle          QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x84F6)
	QOpenGLTexture__BindingTargetBuffer             QOpenGLTexture__BindingTarget = QOpenGLTexture__BindingTarget(0x8C2C)
)

//go:generate stringer -type=QOpenGLTexture__ComparisonFunction
//QOpenGLTexture::ComparisonFunction
type QOpenGLTexture__ComparisonFunction int64

const (
	QOpenGLTexture__CompareLessEqual    QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0203)
	QOpenGLTexture__CompareGreaterEqual QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0206)
	QOpenGLTexture__CompareLess         QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0201)
	QOpenGLTexture__CompareGreater      QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0204)
	QOpenGLTexture__CompareEqual        QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0202)
	QOpenGLTexture__CommpareNotEqual    QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0205)
	QOpenGLTexture__CompareAlways       QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0207)
	QOpenGLTexture__CompareNever        QOpenGLTexture__ComparisonFunction = QOpenGLTexture__ComparisonFunction(0x0200)
)

//go:generate stringer -type=QOpenGLTexture__ComparisonMode
//QOpenGLTexture::ComparisonMode
type QOpenGLTexture__ComparisonMode int64

const (
	QOpenGLTexture__CompareRefToTexture QOpenGLTexture__ComparisonMode = QOpenGLTexture__ComparisonMode(0x884E)
	QOpenGLTexture__CompareNone         QOpenGLTexture__ComparisonMode = QOpenGLTexture__ComparisonMode(0x0000)
)

//go:generate stringer -type=QOpenGLTexture__CoordinateDirection
//QOpenGLTexture::CoordinateDirection
type QOpenGLTexture__CoordinateDirection int64

const (
	QOpenGLTexture__DirectionS QOpenGLTexture__CoordinateDirection = QOpenGLTexture__CoordinateDirection(0x2802)
	QOpenGLTexture__DirectionT QOpenGLTexture__CoordinateDirection = QOpenGLTexture__CoordinateDirection(0x2803)
	QOpenGLTexture__DirectionR QOpenGLTexture__CoordinateDirection = QOpenGLTexture__CoordinateDirection(0x8072)
)

//go:generate stringer -type=QOpenGLTexture__CubeMapFace
//QOpenGLTexture::CubeMapFace
type QOpenGLTexture__CubeMapFace int64

const (
	QOpenGLTexture__CubeMapPositiveX QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x8515)
	QOpenGLTexture__CubeMapNegativeX QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x8516)
	QOpenGLTexture__CubeMapPositiveY QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x8517)
	QOpenGLTexture__CubeMapNegativeY QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x8518)
	QOpenGLTexture__CubeMapPositiveZ QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x8519)
	QOpenGLTexture__CubeMapNegativeZ QOpenGLTexture__CubeMapFace = QOpenGLTexture__CubeMapFace(0x851A)
)

//go:generate stringer -type=QOpenGLTexture__DepthStencilMode
//QOpenGLTexture::DepthStencilMode
type QOpenGLTexture__DepthStencilMode int64

const (
	QOpenGLTexture__DepthMode   QOpenGLTexture__DepthStencilMode = QOpenGLTexture__DepthStencilMode(0x1902)
	QOpenGLTexture__StencilMode QOpenGLTexture__DepthStencilMode = QOpenGLTexture__DepthStencilMode(0x1901)
)

//go:generate stringer -type=QOpenGLTexture__Feature
//QOpenGLTexture::Feature
type QOpenGLTexture__Feature int64

const (
	QOpenGLTexture__ImmutableStorage            QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000001)
	QOpenGLTexture__ImmutableMultisampleStorage QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000002)
	QOpenGLTexture__TextureRectangle            QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000004)
	QOpenGLTexture__TextureArrays               QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000008)
	QOpenGLTexture__Texture3D                   QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000010)
	QOpenGLTexture__TextureMultisample          QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000020)
	QOpenGLTexture__TextureBuffer               QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000040)
	QOpenGLTexture__TextureCubeMapArrays        QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000080)
	QOpenGLTexture__Swizzle                     QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000100)
	QOpenGLTexture__StencilTexturing            QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000200)
	QOpenGLTexture__AnisotropicFiltering        QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000400)
	QOpenGLTexture__NPOTTextures                QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00000800)
	QOpenGLTexture__NPOTTextureRepeat           QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00001000)
	QOpenGLTexture__Texture1D                   QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00002000)
	QOpenGLTexture__TextureComparisonOperators  QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00004000)
	QOpenGLTexture__TextureMipMapLevel          QOpenGLTexture__Feature = QOpenGLTexture__Feature(0x00008000)
)

//go:generate stringer -type=QOpenGLTexture__Filter
//QOpenGLTexture::Filter
type QOpenGLTexture__Filter int64

const (
	QOpenGLTexture__Nearest              QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2600)
	QOpenGLTexture__Linear               QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2601)
	QOpenGLTexture__NearestMipMapNearest QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2700)
	QOpenGLTexture__NearestMipMapLinear  QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2702)
	QOpenGLTexture__LinearMipMapNearest  QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2701)
	QOpenGLTexture__LinearMipMapLinear   QOpenGLTexture__Filter = QOpenGLTexture__Filter(0x2703)
)

//go:generate stringer -type=QOpenGLTexture__MipMapGeneration
//QOpenGLTexture::MipMapGeneration
type QOpenGLTexture__MipMapGeneration int64

const (
	QOpenGLTexture__GenerateMipMaps     QOpenGLTexture__MipMapGeneration = QOpenGLTexture__MipMapGeneration(0)
	QOpenGLTexture__DontGenerateMipMaps QOpenGLTexture__MipMapGeneration = QOpenGLTexture__MipMapGeneration(1)
)

//go:generate stringer -type=QOpenGLTexture__PixelFormat
//QOpenGLTexture::PixelFormat
type QOpenGLTexture__PixelFormat int64

const (
	QOpenGLTexture__NoSourceFormat QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0)
	QOpenGLTexture__Red            QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1903)
	QOpenGLTexture__RG             QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8227)
	QOpenGLTexture__RGB            QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1907)
	QOpenGLTexture__BGR            QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x80E0)
	QOpenGLTexture__RGBA           QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1908)
	QOpenGLTexture__BGRA           QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x80E1)
	QOpenGLTexture__Red_Integer    QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8D94)
	QOpenGLTexture__RG_Integer     QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8228)
	QOpenGLTexture__RGB_Integer    QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8D98)
	QOpenGLTexture__BGR_Integer    QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8D9A)
	QOpenGLTexture__RGBA_Integer   QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8D99)
	QOpenGLTexture__BGRA_Integer   QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x8D9B)
	QOpenGLTexture__Stencil        QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1901)
	QOpenGLTexture__Depth          QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1902)
	QOpenGLTexture__DepthStencil   QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x84F9)
	QOpenGLTexture__Alpha          QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1906)
	QOpenGLTexture__Luminance      QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x1909)
	QOpenGLTexture__LuminanceAlpha QOpenGLTexture__PixelFormat = QOpenGLTexture__PixelFormat(0x190A)
)

//go:generate stringer -type=QOpenGLTexture__PixelType
//QOpenGLTexture::PixelType
type QOpenGLTexture__PixelType int64

const (
	QOpenGLTexture__NoPixelType               QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0)
	QOpenGLTexture__Int8                      QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1400)
	QOpenGLTexture__UInt8                     QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1401)
	QOpenGLTexture__Int16                     QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1402)
	QOpenGLTexture__UInt16                    QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1403)
	QOpenGLTexture__Int32                     QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1404)
	QOpenGLTexture__UInt32                    QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1405)
	QOpenGLTexture__Float16                   QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x140B)
	QOpenGLTexture__Float16OES                QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8D61)
	QOpenGLTexture__Float32                   QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x1406)
	QOpenGLTexture__UInt32_RGB9_E5            QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8C3E)
	QOpenGLTexture__UInt32_RG11B10F           QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8C3B)
	QOpenGLTexture__UInt8_RG3B2               QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8032)
	QOpenGLTexture__UInt8_RG3B2_Rev           QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8362)
	QOpenGLTexture__UInt16_RGB5A1             QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8034)
	QOpenGLTexture__UInt16_RGB5A1_Rev         QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8366)
	QOpenGLTexture__UInt16_R5G6B5             QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8363)
	QOpenGLTexture__UInt16_R5G6B5_Rev         QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8364)
	QOpenGLTexture__UInt16_RGBA4              QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8033)
	QOpenGLTexture__UInt16_RGBA4_Rev          QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8365)
	QOpenGLTexture__UInt32_RGBA8              QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8035)
	QOpenGLTexture__UInt32_RGBA8_Rev          QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8367)
	QOpenGLTexture__UInt32_RGB10A2            QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8036)
	QOpenGLTexture__UInt32_RGB10A2_Rev        QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8368)
	QOpenGLTexture__UInt32_D24S8              QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x84FA)
	QOpenGLTexture__Float32_D32_UInt32_S8_X24 QOpenGLTexture__PixelType = QOpenGLTexture__PixelType(0x8DAD)
)

//go:generate stringer -type=QOpenGLTexture__SwizzleComponent
//QOpenGLTexture::SwizzleComponent
type QOpenGLTexture__SwizzleComponent int64

const (
	QOpenGLTexture__SwizzleRed   QOpenGLTexture__SwizzleComponent = QOpenGLTexture__SwizzleComponent(0x8E42)
	QOpenGLTexture__SwizzleGreen QOpenGLTexture__SwizzleComponent = QOpenGLTexture__SwizzleComponent(0x8E43)
	QOpenGLTexture__SwizzleBlue  QOpenGLTexture__SwizzleComponent = QOpenGLTexture__SwizzleComponent(0x8E44)
	QOpenGLTexture__SwizzleAlpha QOpenGLTexture__SwizzleComponent = QOpenGLTexture__SwizzleComponent(0x8E45)
)

//go:generate stringer -type=QOpenGLTexture__SwizzleValue
//QOpenGLTexture::SwizzleValue
type QOpenGLTexture__SwizzleValue int64

const (
	QOpenGLTexture__RedValue   QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(0x1903)
	QOpenGLTexture__GreenValue QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(0x1904)
	QOpenGLTexture__BlueValue  QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(0x1905)
	QOpenGLTexture__AlphaValue QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(0x1906)
	QOpenGLTexture__ZeroValue  QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(0)
	QOpenGLTexture__OneValue   QOpenGLTexture__SwizzleValue = QOpenGLTexture__SwizzleValue(1)
)

//go:generate stringer -type=QOpenGLTexture__Target
//QOpenGLTexture::Target
type QOpenGLTexture__Target int64

const (
	QOpenGLTexture__Target1D                 QOpenGLTexture__Target = QOpenGLTexture__Target(0x0DE0)
	QOpenGLTexture__Target1DArray            QOpenGLTexture__Target = QOpenGLTexture__Target(0x8C18)
	QOpenGLTexture__Target2D                 QOpenGLTexture__Target = QOpenGLTexture__Target(0x0DE1)
	QOpenGLTexture__Target2DArray            QOpenGLTexture__Target = QOpenGLTexture__Target(0x8C1A)
	QOpenGLTexture__Target3D                 QOpenGLTexture__Target = QOpenGLTexture__Target(0x806F)
	QOpenGLTexture__TargetCubeMap            QOpenGLTexture__Target = QOpenGLTexture__Target(0x8513)
	QOpenGLTexture__TargetCubeMapArray       QOpenGLTexture__Target = QOpenGLTexture__Target(0x9009)
	QOpenGLTexture__Target2DMultisample      QOpenGLTexture__Target = QOpenGLTexture__Target(0x9100)
	QOpenGLTexture__Target2DMultisampleArray QOpenGLTexture__Target = QOpenGLTexture__Target(0x9102)
	QOpenGLTexture__TargetRectangle          QOpenGLTexture__Target = QOpenGLTexture__Target(0x84F5)
	QOpenGLTexture__TargetBuffer             QOpenGLTexture__Target = QOpenGLTexture__Target(0x8C2A)
)

//go:generate stringer -type=QOpenGLTexture__TextureFormat
//QOpenGLTexture::TextureFormat
type QOpenGLTexture__TextureFormat int64

const (
	QOpenGLTexture__NoFormat                       QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0)
	QOpenGLTexture__R8_UNorm                       QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8229)
	QOpenGLTexture__RG8_UNorm                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822B)
	QOpenGLTexture__RGB8_UNorm                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8051)
	QOpenGLTexture__RGBA8_UNorm                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8058)
	QOpenGLTexture__R16_UNorm                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822A)
	QOpenGLTexture__RG16_UNorm                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822C)
	QOpenGLTexture__RGB16_UNorm                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8054)
	QOpenGLTexture__RGBA16_UNorm                   QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x805B)
	QOpenGLTexture__R8_SNorm                       QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F94)
	QOpenGLTexture__RG8_SNorm                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F95)
	QOpenGLTexture__RGB8_SNorm                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F96)
	QOpenGLTexture__RGBA8_SNorm                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F97)
	QOpenGLTexture__R16_SNorm                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F98)
	QOpenGLTexture__RG16_SNorm                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F99)
	QOpenGLTexture__RGB16_SNorm                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F9A)
	QOpenGLTexture__RGBA16_SNorm                   QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8F9B)
	QOpenGLTexture__R8U                            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8232)
	QOpenGLTexture__RG8U                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8238)
	QOpenGLTexture__RGB8U                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D7D)
	QOpenGLTexture__RGBA8U                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D7C)
	QOpenGLTexture__R16U                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8234)
	QOpenGLTexture__RG16U                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x823A)
	QOpenGLTexture__RGB16U                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D77)
	QOpenGLTexture__RGBA16U                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D76)
	QOpenGLTexture__R32U                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8236)
	QOpenGLTexture__RG32U                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x823C)
	QOpenGLTexture__RGB32U                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D71)
	QOpenGLTexture__RGBA32U                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D70)
	QOpenGLTexture__R8I                            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8231)
	QOpenGLTexture__RG8I                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8237)
	QOpenGLTexture__RGB8I                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D8F)
	QOpenGLTexture__RGBA8I                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D8E)
	QOpenGLTexture__R16I                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8233)
	QOpenGLTexture__RG16I                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8239)
	QOpenGLTexture__RGB16I                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D89)
	QOpenGLTexture__RGBA16I                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D88)
	QOpenGLTexture__R32I                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8235)
	QOpenGLTexture__RG32I                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x823B)
	QOpenGLTexture__RGB32I                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D83)
	QOpenGLTexture__RGBA32I                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D82)
	QOpenGLTexture__R16F                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822D)
	QOpenGLTexture__RG16F                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822F)
	QOpenGLTexture__RGB16F                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x881B)
	QOpenGLTexture__RGBA16F                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x881A)
	QOpenGLTexture__R32F                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x822E)
	QOpenGLTexture__RG32F                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8230)
	QOpenGLTexture__RGB32F                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8815)
	QOpenGLTexture__RGBA32F                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8814)
	QOpenGLTexture__RGB9E5                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C3D)
	QOpenGLTexture__RG11B10F                       QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C3A)
	QOpenGLTexture__RG3B2                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x2A10)
	QOpenGLTexture__R5G6B5                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D62)
	QOpenGLTexture__RGB5A1                         QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8057)
	QOpenGLTexture__RGBA4                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8056)
	QOpenGLTexture__RGB10A2                        QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x906F)
	QOpenGLTexture__D16                            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x81A5)
	QOpenGLTexture__D24                            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x81A6)
	QOpenGLTexture__D24S8                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x88F0)
	QOpenGLTexture__D32                            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x81A7)
	QOpenGLTexture__D32F                           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8CAC)
	QOpenGLTexture__D32FS8X24                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8CAD)
	QOpenGLTexture__S8                             QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D48)
	QOpenGLTexture__RGB_DXT1                       QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x83F0)
	QOpenGLTexture__RGBA_DXT1                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x83F1)
	QOpenGLTexture__RGBA_DXT3                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x83F2)
	QOpenGLTexture__RGBA_DXT5                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x83F3)
	QOpenGLTexture__R_ATI1N_UNorm                  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8DBB)
	QOpenGLTexture__R_ATI1N_SNorm                  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8DBC)
	QOpenGLTexture__RG_ATI2N_UNorm                 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8DBD)
	QOpenGLTexture__RG_ATI2N_SNorm                 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8DBE)
	QOpenGLTexture__RGB_BP_UNSIGNED_FLOAT          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8E8F)
	QOpenGLTexture__RGB_BP_SIGNED_FLOAT            QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8E8E)
	QOpenGLTexture__RGB_BP_UNorm                   QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8E8C)
	QOpenGLTexture__R11_EAC_UNorm                  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9270)
	QOpenGLTexture__R11_EAC_SNorm                  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9271)
	QOpenGLTexture__RG11_EAC_UNorm                 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9272)
	QOpenGLTexture__RG11_EAC_SNorm                 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9273)
	QOpenGLTexture__RGB8_ETC2                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9274)
	QOpenGLTexture__SRGB8_ETC2                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9275)
	QOpenGLTexture__RGB8_PunchThrough_Alpha1_ETC2  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9276)
	QOpenGLTexture__SRGB8_PunchThrough_Alpha1_ETC2 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9277)
	QOpenGLTexture__RGBA8_ETC2_EAC                 QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9278)
	QOpenGLTexture__SRGB8_Alpha8_ETC2_EAC          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x9279)
	QOpenGLTexture__RGB8_ETC1                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8D64)
	QOpenGLTexture__SRGB8                          QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C41)
	QOpenGLTexture__SRGB8_Alpha8                   QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C43)
	QOpenGLTexture__SRGB_DXT1                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C4C)
	QOpenGLTexture__SRGB_Alpha_DXT1                QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C4D)
	QOpenGLTexture__SRGB_Alpha_DXT3                QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C4E)
	QOpenGLTexture__SRGB_Alpha_DXT5                QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8C4F)
	QOpenGLTexture__SRGB_BP_UNorm                  QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x8E8D)
	QOpenGLTexture__DepthFormat                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x1902)
	QOpenGLTexture__AlphaFormat                    QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x1906)
	QOpenGLTexture__RGBFormat                      QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x1907)
	QOpenGLTexture__RGBAFormat                     QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x1908)
	QOpenGLTexture__LuminanceFormat                QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x1909)
	QOpenGLTexture__LuminanceAlphaFormat           QOpenGLTexture__TextureFormat = QOpenGLTexture__TextureFormat(0x190A)
)

//go:generate stringer -type=QOpenGLTexture__TextureUnitReset
//QOpenGLTexture::TextureUnitReset
type QOpenGLTexture__TextureUnitReset int64

const (
	QOpenGLTexture__ResetTextureUnit     QOpenGLTexture__TextureUnitReset = QOpenGLTexture__TextureUnitReset(0)
	QOpenGLTexture__DontResetTextureUnit QOpenGLTexture__TextureUnitReset = QOpenGLTexture__TextureUnitReset(1)
)

//go:generate stringer -type=QOpenGLTexture__WrapMode
//QOpenGLTexture::WrapMode
type QOpenGLTexture__WrapMode int64

const (
	QOpenGLTexture__Repeat         QOpenGLTexture__WrapMode = QOpenGLTexture__WrapMode(0x2901)
	QOpenGLTexture__MirroredRepeat QOpenGLTexture__WrapMode = QOpenGLTexture__WrapMode(0x8370)
	QOpenGLTexture__ClampToEdge    QOpenGLTexture__WrapMode = QOpenGLTexture__WrapMode(0x812F)
	QOpenGLTexture__ClampToBorder  QOpenGLTexture__WrapMode = QOpenGLTexture__WrapMode(0x812D)
)

type QOpenGLTextureBlitter struct {
	ptr unsafe.Pointer
}

type QOpenGLTextureBlitter_ITF interface {
	QOpenGLTextureBlitter_PTR() *QOpenGLTextureBlitter
}

func (ptr *QOpenGLTextureBlitter) QOpenGLTextureBlitter_PTR() *QOpenGLTextureBlitter {
	return ptr
}

func (ptr *QOpenGLTextureBlitter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLTextureBlitter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLTextureBlitter(ptr QOpenGLTextureBlitter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTextureBlitter_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTextureBlitterFromPointer(ptr unsafe.Pointer) *QOpenGLTextureBlitter {
	var n = new(QOpenGLTextureBlitter)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLTextureBlitter__Origin
//QOpenGLTextureBlitter::Origin
type QOpenGLTextureBlitter__Origin int64

const (
	QOpenGLTextureBlitter__OriginBottomLeft QOpenGLTextureBlitter__Origin = QOpenGLTextureBlitter__Origin(0)
	QOpenGLTextureBlitter__OriginTopLeft    QOpenGLTextureBlitter__Origin = QOpenGLTextureBlitter__Origin(1)
)

type QOpenGLTimeMonitor struct {
	core.QObject
}

type QOpenGLTimeMonitor_ITF interface {
	core.QObject_ITF
	QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor
}

func (ptr *QOpenGLTimeMonitor) QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor {
	return ptr
}

func (ptr *QOpenGLTimeMonitor) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLTimeMonitor) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLTimeMonitor(ptr QOpenGLTimeMonitor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimeMonitor_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimeMonitorFromPointer(ptr unsafe.Pointer) *QOpenGLTimeMonitor {
	var n = new(QOpenGLTimeMonitor)
	n.SetPointer(ptr)
	return n
}

type QOpenGLTimerQuery struct {
	core.QObject
}

type QOpenGLTimerQuery_ITF interface {
	core.QObject_ITF
	QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery
}

func (ptr *QOpenGLTimerQuery) QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery {
	return ptr
}

func (ptr *QOpenGLTimerQuery) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLTimerQuery) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLTimerQuery(ptr QOpenGLTimerQuery_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimerQuery_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimerQueryFromPointer(ptr unsafe.Pointer) *QOpenGLTimerQuery {
	var n = new(QOpenGLTimerQuery)
	n.SetPointer(ptr)
	return n
}

type QOpenGLVersionProfile struct {
	ptr unsafe.Pointer
}

type QOpenGLVersionProfile_ITF interface {
	QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile
}

func (ptr *QOpenGLVersionProfile) QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile {
	return ptr
}

func (ptr *QOpenGLVersionProfile) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QOpenGLVersionProfile) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQOpenGLVersionProfile(ptr QOpenGLVersionProfile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVersionProfile_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVersionProfileFromPointer(ptr unsafe.Pointer) *QOpenGLVersionProfile {
	var n = new(QOpenGLVersionProfile)
	n.SetPointer(ptr)
	return n
}

type QOpenGLVertexArrayObject struct {
	core.QObject
}

type QOpenGLVertexArrayObject_ITF interface {
	core.QObject_ITF
	QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject
}

func (ptr *QOpenGLVertexArrayObject) QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject {
	return ptr
}

func (ptr *QOpenGLVertexArrayObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLVertexArrayObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLVertexArrayObject(ptr QOpenGLVertexArrayObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVertexArrayObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVertexArrayObjectFromPointer(ptr unsafe.Pointer) *QOpenGLVertexArrayObject {
	var n = new(QOpenGLVertexArrayObject)
	n.SetPointer(ptr)
	return n
}

type QOpenGLWindow struct {
	QPaintDeviceWindow
}

type QOpenGLWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QOpenGLWindow_PTR() *QOpenGLWindow
}

func (ptr *QOpenGLWindow) QOpenGLWindow_PTR() *QOpenGLWindow {
	return ptr
}

func (ptr *QOpenGLWindow) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (ptr *QOpenGLWindow) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDeviceWindow_PTR().SetPointer(p)
	}
}

func PointerFromQOpenGLWindow(ptr QOpenGLWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLWindow_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLWindowFromPointer(ptr unsafe.Pointer) *QOpenGLWindow {
	var n = new(QOpenGLWindow)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QOpenGLWindow__UpdateBehavior
//QOpenGLWindow::UpdateBehavior
type QOpenGLWindow__UpdateBehavior int64

const (
	QOpenGLWindow__NoPartialUpdate    QOpenGLWindow__UpdateBehavior = QOpenGLWindow__UpdateBehavior(0)
	QOpenGLWindow__PartialUpdateBlit  QOpenGLWindow__UpdateBehavior = QOpenGLWindow__UpdateBehavior(1)
	QOpenGLWindow__PartialUpdateBlend QOpenGLWindow__UpdateBehavior = QOpenGLWindow__UpdateBehavior(2)
)

type QPageLayout struct {
	ptr unsafe.Pointer
}

type QPageLayout_ITF interface {
	QPageLayout_PTR() *QPageLayout
}

func (ptr *QPageLayout) QPageLayout_PTR() *QPageLayout {
	return ptr
}

func (ptr *QPageLayout) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPageLayout) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPageLayout(ptr QPageLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageLayout_PTR().Pointer()
	}
	return nil
}

func NewQPageLayoutFromPointer(ptr unsafe.Pointer) *QPageLayout {
	var n = new(QPageLayout)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPageLayout__Mode
//QPageLayout::Mode
type QPageLayout__Mode int64

const (
	QPageLayout__StandardMode QPageLayout__Mode = QPageLayout__Mode(0)
	QPageLayout__FullPageMode QPageLayout__Mode = QPageLayout__Mode(1)
)

//go:generate stringer -type=QPageLayout__Orientation
//QPageLayout::Orientation
type QPageLayout__Orientation int64

const (
	QPageLayout__Portrait  QPageLayout__Orientation = QPageLayout__Orientation(0)
	QPageLayout__Landscape QPageLayout__Orientation = QPageLayout__Orientation(1)
)

//go:generate stringer -type=QPageLayout__Unit
//QPageLayout::Unit
type QPageLayout__Unit int64

const (
	QPageLayout__Millimeter QPageLayout__Unit = QPageLayout__Unit(0)
	QPageLayout__Point      QPageLayout__Unit = QPageLayout__Unit(1)
	QPageLayout__Inch       QPageLayout__Unit = QPageLayout__Unit(2)
	QPageLayout__Pica       QPageLayout__Unit = QPageLayout__Unit(3)
	QPageLayout__Didot      QPageLayout__Unit = QPageLayout__Unit(4)
	QPageLayout__Cicero     QPageLayout__Unit = QPageLayout__Unit(5)
)

func NewQPageLayout() *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout())
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func NewQPageLayout3(other QPageLayout_ITF) *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout3(PointerFromQPageLayout(other)))
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func NewQPageLayout2(pageSize QPageSize_ITF, orientation QPageLayout__Orientation, margins core.QMarginsF_ITF, units QPageLayout__Unit, minMargins core.QMarginsF_ITF) *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout2(PointerFromQPageSize(pageSize), C.longlong(orientation), core.PointerFromQMarginsF(margins), C.longlong(units), core.PointerFromQMarginsF(minMargins)))
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func (ptr *QPageLayout) SetBottomMargin(bottomMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetBottomMargin(ptr.Pointer(), C.double(bottomMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetLeftMargin(leftMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetLeftMargin(ptr.Pointer(), C.double(leftMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMargins(margins core.QMarginsF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetRightMargin(rightMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetRightMargin(ptr.Pointer(), C.double(rightMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetTopMargin(topMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetTopMargin(ptr.Pointer(), C.double(topMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMinimumMargins(minMargins core.QMarginsF_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetMinimumMargins(ptr.Pointer(), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetMode(mode QPageLayout__Mode) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPageLayout) SetOrientation(orientation QPageLayout__Orientation) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetOrientation(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QPageLayout) SetPageSize(pageSize QPageSize_ITF, minMargins core.QMarginsF_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetUnits(units QPageLayout__Unit) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetUnits(ptr.Pointer(), C.longlong(units))
	}
}

func (ptr *QPageLayout) Swap(other QPageLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_Swap(ptr.Pointer(), PointerFromQPageLayout(other))
	}
}

func (ptr *QPageLayout) DestroyQPageLayout() {
	if ptr.Pointer() != nil {
		C.QPageLayout_DestroyQPageLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPageLayout) Mode() QPageLayout__Mode {
	if ptr.Pointer() != nil {
		return QPageLayout__Mode(C.QPageLayout_Mode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) Orientation() QPageLayout__Orientation {
	if ptr.Pointer() != nil {
		return QPageLayout__Orientation(C.QPageLayout_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) MarginsPixels(resolution int) *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QPageLayout_MarginsPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MarginsPoints() *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QPageLayout_MarginsPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) Margins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_Margins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) Margins2(units QPageLayout__Unit) *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_Margins2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MaximumMargins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_MaximumMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MinimumMargins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_MinimumMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PageSize() *QPageSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPageSizeFromPointer(C.QPageLayout_PageSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_FullRectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_FullRectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_PaintRectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_PaintRectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_FullRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRect2(units QPageLayout__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_FullRect2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_PaintRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRect2(units QPageLayout__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_PaintRect2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) Units() QPageLayout__Unit {
	if ptr.Pointer() != nil {
		return QPageLayout__Unit(C.QPageLayout_Units(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) IsEquivalentTo(other QPageLayout_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_IsEquivalentTo(ptr.Pointer(), PointerFromQPageLayout(other)) != 0
	}
	return false
}

func (ptr *QPageLayout) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_IsValid(ptr.Pointer()) != 0
	}
	return false
}

type QPageSize struct {
	ptr unsafe.Pointer
}

type QPageSize_ITF interface {
	QPageSize_PTR() *QPageSize
}

func (ptr *QPageSize) QPageSize_PTR() *QPageSize {
	return ptr
}

func (ptr *QPageSize) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPageSize) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPageSize(ptr QPageSize_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageSize_PTR().Pointer()
	}
	return nil
}

func NewQPageSizeFromPointer(ptr unsafe.Pointer) *QPageSize {
	var n = new(QPageSize)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPageSize__PageSizeId
//QPageSize::PageSizeId
type QPageSize__PageSizeId int64

const (
	QPageSize__A4                 QPageSize__PageSizeId = QPageSize__PageSizeId(0)
	QPageSize__B5                 QPageSize__PageSizeId = QPageSize__PageSizeId(1)
	QPageSize__Letter             QPageSize__PageSizeId = QPageSize__PageSizeId(2)
	QPageSize__Legal              QPageSize__PageSizeId = QPageSize__PageSizeId(3)
	QPageSize__Executive          QPageSize__PageSizeId = QPageSize__PageSizeId(4)
	QPageSize__A0                 QPageSize__PageSizeId = QPageSize__PageSizeId(5)
	QPageSize__A1                 QPageSize__PageSizeId = QPageSize__PageSizeId(6)
	QPageSize__A2                 QPageSize__PageSizeId = QPageSize__PageSizeId(7)
	QPageSize__A3                 QPageSize__PageSizeId = QPageSize__PageSizeId(8)
	QPageSize__A5                 QPageSize__PageSizeId = QPageSize__PageSizeId(9)
	QPageSize__A6                 QPageSize__PageSizeId = QPageSize__PageSizeId(10)
	QPageSize__A7                 QPageSize__PageSizeId = QPageSize__PageSizeId(11)
	QPageSize__A8                 QPageSize__PageSizeId = QPageSize__PageSizeId(12)
	QPageSize__A9                 QPageSize__PageSizeId = QPageSize__PageSizeId(13)
	QPageSize__B0                 QPageSize__PageSizeId = QPageSize__PageSizeId(14)
	QPageSize__B1                 QPageSize__PageSizeId = QPageSize__PageSizeId(15)
	QPageSize__B10                QPageSize__PageSizeId = QPageSize__PageSizeId(16)
	QPageSize__B2                 QPageSize__PageSizeId = QPageSize__PageSizeId(17)
	QPageSize__B3                 QPageSize__PageSizeId = QPageSize__PageSizeId(18)
	QPageSize__B4                 QPageSize__PageSizeId = QPageSize__PageSizeId(19)
	QPageSize__B6                 QPageSize__PageSizeId = QPageSize__PageSizeId(20)
	QPageSize__B7                 QPageSize__PageSizeId = QPageSize__PageSizeId(21)
	QPageSize__B8                 QPageSize__PageSizeId = QPageSize__PageSizeId(22)
	QPageSize__B9                 QPageSize__PageSizeId = QPageSize__PageSizeId(23)
	QPageSize__C5E                QPageSize__PageSizeId = QPageSize__PageSizeId(24)
	QPageSize__Comm10E            QPageSize__PageSizeId = QPageSize__PageSizeId(25)
	QPageSize__DLE                QPageSize__PageSizeId = QPageSize__PageSizeId(26)
	QPageSize__Folio              QPageSize__PageSizeId = QPageSize__PageSizeId(27)
	QPageSize__Ledger             QPageSize__PageSizeId = QPageSize__PageSizeId(28)
	QPageSize__Tabloid            QPageSize__PageSizeId = QPageSize__PageSizeId(29)
	QPageSize__Custom             QPageSize__PageSizeId = QPageSize__PageSizeId(30)
	QPageSize__A10                QPageSize__PageSizeId = QPageSize__PageSizeId(31)
	QPageSize__A3Extra            QPageSize__PageSizeId = QPageSize__PageSizeId(32)
	QPageSize__A4Extra            QPageSize__PageSizeId = QPageSize__PageSizeId(33)
	QPageSize__A4Plus             QPageSize__PageSizeId = QPageSize__PageSizeId(34)
	QPageSize__A4Small            QPageSize__PageSizeId = QPageSize__PageSizeId(35)
	QPageSize__A5Extra            QPageSize__PageSizeId = QPageSize__PageSizeId(36)
	QPageSize__B5Extra            QPageSize__PageSizeId = QPageSize__PageSizeId(37)
	QPageSize__JisB0              QPageSize__PageSizeId = QPageSize__PageSizeId(38)
	QPageSize__JisB1              QPageSize__PageSizeId = QPageSize__PageSizeId(39)
	QPageSize__JisB2              QPageSize__PageSizeId = QPageSize__PageSizeId(40)
	QPageSize__JisB3              QPageSize__PageSizeId = QPageSize__PageSizeId(41)
	QPageSize__JisB4              QPageSize__PageSizeId = QPageSize__PageSizeId(42)
	QPageSize__JisB5              QPageSize__PageSizeId = QPageSize__PageSizeId(43)
	QPageSize__JisB6              QPageSize__PageSizeId = QPageSize__PageSizeId(44)
	QPageSize__JisB7              QPageSize__PageSizeId = QPageSize__PageSizeId(45)
	QPageSize__JisB8              QPageSize__PageSizeId = QPageSize__PageSizeId(46)
	QPageSize__JisB9              QPageSize__PageSizeId = QPageSize__PageSizeId(47)
	QPageSize__JisB10             QPageSize__PageSizeId = QPageSize__PageSizeId(48)
	QPageSize__AnsiC              QPageSize__PageSizeId = QPageSize__PageSizeId(49)
	QPageSize__AnsiD              QPageSize__PageSizeId = QPageSize__PageSizeId(50)
	QPageSize__AnsiE              QPageSize__PageSizeId = QPageSize__PageSizeId(51)
	QPageSize__LegalExtra         QPageSize__PageSizeId = QPageSize__PageSizeId(52)
	QPageSize__LetterExtra        QPageSize__PageSizeId = QPageSize__PageSizeId(53)
	QPageSize__LetterPlus         QPageSize__PageSizeId = QPageSize__PageSizeId(54)
	QPageSize__LetterSmall        QPageSize__PageSizeId = QPageSize__PageSizeId(55)
	QPageSize__TabloidExtra       QPageSize__PageSizeId = QPageSize__PageSizeId(56)
	QPageSize__ArchA              QPageSize__PageSizeId = QPageSize__PageSizeId(57)
	QPageSize__ArchB              QPageSize__PageSizeId = QPageSize__PageSizeId(58)
	QPageSize__ArchC              QPageSize__PageSizeId = QPageSize__PageSizeId(59)
	QPageSize__ArchD              QPageSize__PageSizeId = QPageSize__PageSizeId(60)
	QPageSize__ArchE              QPageSize__PageSizeId = QPageSize__PageSizeId(61)
	QPageSize__Imperial7x9        QPageSize__PageSizeId = QPageSize__PageSizeId(62)
	QPageSize__Imperial8x10       QPageSize__PageSizeId = QPageSize__PageSizeId(63)
	QPageSize__Imperial9x11       QPageSize__PageSizeId = QPageSize__PageSizeId(64)
	QPageSize__Imperial9x12       QPageSize__PageSizeId = QPageSize__PageSizeId(65)
	QPageSize__Imperial10x11      QPageSize__PageSizeId = QPageSize__PageSizeId(66)
	QPageSize__Imperial10x13      QPageSize__PageSizeId = QPageSize__PageSizeId(67)
	QPageSize__Imperial10x14      QPageSize__PageSizeId = QPageSize__PageSizeId(68)
	QPageSize__Imperial12x11      QPageSize__PageSizeId = QPageSize__PageSizeId(69)
	QPageSize__Imperial15x11      QPageSize__PageSizeId = QPageSize__PageSizeId(70)
	QPageSize__ExecutiveStandard  QPageSize__PageSizeId = QPageSize__PageSizeId(71)
	QPageSize__Note               QPageSize__PageSizeId = QPageSize__PageSizeId(72)
	QPageSize__Quarto             QPageSize__PageSizeId = QPageSize__PageSizeId(73)
	QPageSize__Statement          QPageSize__PageSizeId = QPageSize__PageSizeId(74)
	QPageSize__SuperA             QPageSize__PageSizeId = QPageSize__PageSizeId(75)
	QPageSize__SuperB             QPageSize__PageSizeId = QPageSize__PageSizeId(76)
	QPageSize__Postcard           QPageSize__PageSizeId = QPageSize__PageSizeId(77)
	QPageSize__DoublePostcard     QPageSize__PageSizeId = QPageSize__PageSizeId(78)
	QPageSize__Prc16K             QPageSize__PageSizeId = QPageSize__PageSizeId(79)
	QPageSize__Prc32K             QPageSize__PageSizeId = QPageSize__PageSizeId(80)
	QPageSize__Prc32KBig          QPageSize__PageSizeId = QPageSize__PageSizeId(81)
	QPageSize__FanFoldUS          QPageSize__PageSizeId = QPageSize__PageSizeId(82)
	QPageSize__FanFoldGerman      QPageSize__PageSizeId = QPageSize__PageSizeId(83)
	QPageSize__FanFoldGermanLegal QPageSize__PageSizeId = QPageSize__PageSizeId(84)
	QPageSize__EnvelopeB4         QPageSize__PageSizeId = QPageSize__PageSizeId(85)
	QPageSize__EnvelopeB5         QPageSize__PageSizeId = QPageSize__PageSizeId(86)
	QPageSize__EnvelopeB6         QPageSize__PageSizeId = QPageSize__PageSizeId(87)
	QPageSize__EnvelopeC0         QPageSize__PageSizeId = QPageSize__PageSizeId(88)
	QPageSize__EnvelopeC1         QPageSize__PageSizeId = QPageSize__PageSizeId(89)
	QPageSize__EnvelopeC2         QPageSize__PageSizeId = QPageSize__PageSizeId(90)
	QPageSize__EnvelopeC3         QPageSize__PageSizeId = QPageSize__PageSizeId(91)
	QPageSize__EnvelopeC4         QPageSize__PageSizeId = QPageSize__PageSizeId(92)
	QPageSize__EnvelopeC6         QPageSize__PageSizeId = QPageSize__PageSizeId(93)
	QPageSize__EnvelopeC65        QPageSize__PageSizeId = QPageSize__PageSizeId(94)
	QPageSize__EnvelopeC7         QPageSize__PageSizeId = QPageSize__PageSizeId(95)
	QPageSize__Envelope9          QPageSize__PageSizeId = QPageSize__PageSizeId(96)
	QPageSize__Envelope11         QPageSize__PageSizeId = QPageSize__PageSizeId(97)
	QPageSize__Envelope12         QPageSize__PageSizeId = QPageSize__PageSizeId(98)
	QPageSize__Envelope14         QPageSize__PageSizeId = QPageSize__PageSizeId(99)
	QPageSize__EnvelopeMonarch    QPageSize__PageSizeId = QPageSize__PageSizeId(100)
	QPageSize__EnvelopePersonal   QPageSize__PageSizeId = QPageSize__PageSizeId(101)
	QPageSize__EnvelopeChou3      QPageSize__PageSizeId = QPageSize__PageSizeId(102)
	QPageSize__EnvelopeChou4      QPageSize__PageSizeId = QPageSize__PageSizeId(103)
	QPageSize__EnvelopeInvite     QPageSize__PageSizeId = QPageSize__PageSizeId(104)
	QPageSize__EnvelopeItalian    QPageSize__PageSizeId = QPageSize__PageSizeId(105)
	QPageSize__EnvelopeKaku2      QPageSize__PageSizeId = QPageSize__PageSizeId(106)
	QPageSize__EnvelopeKaku3      QPageSize__PageSizeId = QPageSize__PageSizeId(107)
	QPageSize__EnvelopePrc1       QPageSize__PageSizeId = QPageSize__PageSizeId(108)
	QPageSize__EnvelopePrc2       QPageSize__PageSizeId = QPageSize__PageSizeId(109)
	QPageSize__EnvelopePrc3       QPageSize__PageSizeId = QPageSize__PageSizeId(110)
	QPageSize__EnvelopePrc4       QPageSize__PageSizeId = QPageSize__PageSizeId(111)
	QPageSize__EnvelopePrc5       QPageSize__PageSizeId = QPageSize__PageSizeId(112)
	QPageSize__EnvelopePrc6       QPageSize__PageSizeId = QPageSize__PageSizeId(113)
	QPageSize__EnvelopePrc7       QPageSize__PageSizeId = QPageSize__PageSizeId(114)
	QPageSize__EnvelopePrc8       QPageSize__PageSizeId = QPageSize__PageSizeId(115)
	QPageSize__EnvelopePrc9       QPageSize__PageSizeId = QPageSize__PageSizeId(116)
	QPageSize__EnvelopePrc10      QPageSize__PageSizeId = QPageSize__PageSizeId(117)
	QPageSize__EnvelopeYou4       QPageSize__PageSizeId = QPageSize__PageSizeId(118)
	QPageSize__LastPageSize       QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__EnvelopeYou4)
	QPageSize__NPageSize          QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__NPaperSize         QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__AnsiA              QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__Letter)
	QPageSize__AnsiB              QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__Ledger)
	QPageSize__EnvelopeC5         QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__C5E)
	QPageSize__EnvelopeDL         QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__DLE)
	QPageSize__Envelope10         QPageSize__PageSizeId = QPageSize__PageSizeId(QPageSize__Comm10E)
)

//go:generate stringer -type=QPageSize__SizeMatchPolicy
//QPageSize::SizeMatchPolicy
type QPageSize__SizeMatchPolicy int64

const (
	QPageSize__FuzzyMatch            QPageSize__SizeMatchPolicy = QPageSize__SizeMatchPolicy(0)
	QPageSize__FuzzyOrientationMatch QPageSize__SizeMatchPolicy = QPageSize__SizeMatchPolicy(1)
	QPageSize__ExactMatch            QPageSize__SizeMatchPolicy = QPageSize__SizeMatchPolicy(2)
)

//go:generate stringer -type=QPageSize__Unit
//QPageSize::Unit
type QPageSize__Unit int64

const (
	QPageSize__Millimeter QPageSize__Unit = QPageSize__Unit(0)
	QPageSize__Point      QPageSize__Unit = QPageSize__Unit(1)
	QPageSize__Inch       QPageSize__Unit = QPageSize__Unit(2)
	QPageSize__Pica       QPageSize__Unit = QPageSize__Unit(3)
	QPageSize__Didot      QPageSize__Unit = QPageSize__Unit(4)
	QPageSize__Cicero     QPageSize__Unit = QPageSize__Unit(5)
)

func QPageSize_Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.longlong(matchPolicy)))
}

func (ptr *QPageSize) Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.longlong(matchPolicy)))
}

func QPageSize_Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.longlong(units), C.longlong(matchPolicy)))
}

func (ptr *QPageSize) Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.longlong(units), C.longlong(matchPolicy)))
}

func QPageSize_Id4(windowsId int) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(int32(windowsId))))
}

func (ptr *QPageSize) Id4(windowsId int) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(int32(windowsId))))
}

func NewQPageSize() *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize())
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize2(pageSize QPageSize__PageSizeId) *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize2(C.longlong(pageSize)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize5(other QPageSize_ITF) *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize5(PointerFromQPageSize(other)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize3(pointSize core.QSize_ITF, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize3(core.PointerFromQSize(pointSize), nameC, C.longlong(matchPolicy)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize4(size core.QSizeF_ITF, units QPageSize__Unit, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	var nameC *C.char
	if name != "" {
		nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
	}
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize4(core.PointerFromQSizeF(size), C.longlong(units), nameC, C.longlong(matchPolicy)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func QPageSize_SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.longlong(pageSizeId), C.int(int32(resolution))))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.longlong(pageSizeId), C.int(int32(resolution))))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func QPageSize_SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func QPageSize_DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func QPageSize_Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.longlong(pageSizeId), C.longlong(units)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.longlong(pageSizeId), C.longlong(units)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func QPageSize_Key2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Key2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Key2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Key2(C.longlong(pageSizeId)))
}

func QPageSize_Name2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Name2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Name2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Name2(C.longlong(pageSizeId)))
}

func QPageSize_DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.longlong(pageSizeId)))
}

func QPageSize_WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	return int(int32(C.QPageSize_QPageSize_WindowsId2(C.longlong(pageSizeId))))
}

func (ptr *QPageSize) WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	return int(int32(C.QPageSize_QPageSize_WindowsId2(C.longlong(pageSizeId))))
}

func (ptr *QPageSize) Swap(other QPageSize_ITF) {
	if ptr.Pointer() != nil {
		C.QPageSize_Swap(ptr.Pointer(), PointerFromQPageSize(other))
	}
}

func (ptr *QPageSize) DestroyQPageSize() {
	if ptr.Pointer() != nil {
		C.QPageSize_DestroyQPageSize(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPageSize) Id() QPageSize__PageSizeId {
	if ptr.Pointer() != nil {
		return QPageSize__PageSizeId(C.QPageSize_Id(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageSize) RectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageSize_RectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) RectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageSize_RectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) Rect(units QPageSize__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageSize_Rect(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) SizePixels(resolution int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPageSize_SizePixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) SizePoints() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPageSize_SizePoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) DefinitionSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_DefinitionSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) Size(units QPageSize__Unit) *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_Size(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPageSize_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPageSize) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPageSize_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPageSize) DefinitionUnits() QPageSize__Unit {
	if ptr.Pointer() != nil {
		return QPageSize__Unit(C.QPageSize_DefinitionUnits(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageSize) IsEquivalentTo(other QPageSize_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageSize_IsEquivalentTo(ptr.Pointer(), PointerFromQPageSize(other)) != 0
	}
	return false
}

func (ptr *QPageSize) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPageSize_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPageSize) WindowsId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPageSize_WindowsId(ptr.Pointer())))
	}
	return 0
}

type QPagedPaintDevice struct {
	QPaintDevice
}

type QPagedPaintDevice_ITF interface {
	QPaintDevice_ITF
	QPagedPaintDevice_PTR() *QPagedPaintDevice
}

func (ptr *QPagedPaintDevice) QPagedPaintDevice_PTR() *QPagedPaintDevice {
	return ptr
}

func (ptr *QPagedPaintDevice) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (ptr *QPagedPaintDevice) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQPagedPaintDevice(ptr QPagedPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPagedPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPagedPaintDeviceFromPointer(ptr unsafe.Pointer) *QPagedPaintDevice {
	var n = new(QPagedPaintDevice)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPagedPaintDevice__PageSize
//QPagedPaintDevice::PageSize
type QPagedPaintDevice__PageSize int64

const (
	QPagedPaintDevice__A4                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(0)
	QPagedPaintDevice__B5                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(1)
	QPagedPaintDevice__Letter             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(2)
	QPagedPaintDevice__Legal              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(3)
	QPagedPaintDevice__Executive          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(4)
	QPagedPaintDevice__A0                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(5)
	QPagedPaintDevice__A1                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(6)
	QPagedPaintDevice__A2                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(7)
	QPagedPaintDevice__A3                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(8)
	QPagedPaintDevice__A5                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(9)
	QPagedPaintDevice__A6                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(10)
	QPagedPaintDevice__A7                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(11)
	QPagedPaintDevice__A8                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(12)
	QPagedPaintDevice__A9                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(13)
	QPagedPaintDevice__B0                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(14)
	QPagedPaintDevice__B1                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(15)
	QPagedPaintDevice__B10                QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(16)
	QPagedPaintDevice__B2                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(17)
	QPagedPaintDevice__B3                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(18)
	QPagedPaintDevice__B4                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(19)
	QPagedPaintDevice__B6                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(20)
	QPagedPaintDevice__B7                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(21)
	QPagedPaintDevice__B8                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(22)
	QPagedPaintDevice__B9                 QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(23)
	QPagedPaintDevice__C5E                QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(24)
	QPagedPaintDevice__Comm10E            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(25)
	QPagedPaintDevice__DLE                QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(26)
	QPagedPaintDevice__Folio              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(27)
	QPagedPaintDevice__Ledger             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(28)
	QPagedPaintDevice__Tabloid            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(29)
	QPagedPaintDevice__Custom             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(30)
	QPagedPaintDevice__A10                QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(31)
	QPagedPaintDevice__A3Extra            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(32)
	QPagedPaintDevice__A4Extra            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(33)
	QPagedPaintDevice__A4Plus             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(34)
	QPagedPaintDevice__A4Small            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(35)
	QPagedPaintDevice__A5Extra            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(36)
	QPagedPaintDevice__B5Extra            QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(37)
	QPagedPaintDevice__JisB0              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(38)
	QPagedPaintDevice__JisB1              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(39)
	QPagedPaintDevice__JisB2              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(40)
	QPagedPaintDevice__JisB3              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(41)
	QPagedPaintDevice__JisB4              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(42)
	QPagedPaintDevice__JisB5              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(43)
	QPagedPaintDevice__JisB6              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(44)
	QPagedPaintDevice__JisB7              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(45)
	QPagedPaintDevice__JisB8              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(46)
	QPagedPaintDevice__JisB9              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(47)
	QPagedPaintDevice__JisB10             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(48)
	QPagedPaintDevice__AnsiC              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(49)
	QPagedPaintDevice__AnsiD              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(50)
	QPagedPaintDevice__AnsiE              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(51)
	QPagedPaintDevice__LegalExtra         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(52)
	QPagedPaintDevice__LetterExtra        QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(53)
	QPagedPaintDevice__LetterPlus         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(54)
	QPagedPaintDevice__LetterSmall        QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(55)
	QPagedPaintDevice__TabloidExtra       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(56)
	QPagedPaintDevice__ArchA              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(57)
	QPagedPaintDevice__ArchB              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(58)
	QPagedPaintDevice__ArchC              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(59)
	QPagedPaintDevice__ArchD              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(60)
	QPagedPaintDevice__ArchE              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(61)
	QPagedPaintDevice__Imperial7x9        QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(62)
	QPagedPaintDevice__Imperial8x10       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(63)
	QPagedPaintDevice__Imperial9x11       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(64)
	QPagedPaintDevice__Imperial9x12       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(65)
	QPagedPaintDevice__Imperial10x11      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(66)
	QPagedPaintDevice__Imperial10x13      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(67)
	QPagedPaintDevice__Imperial10x14      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(68)
	QPagedPaintDevice__Imperial12x11      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(69)
	QPagedPaintDevice__Imperial15x11      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(70)
	QPagedPaintDevice__ExecutiveStandard  QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(71)
	QPagedPaintDevice__Note               QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(72)
	QPagedPaintDevice__Quarto             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(73)
	QPagedPaintDevice__Statement          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(74)
	QPagedPaintDevice__SuperA             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(75)
	QPagedPaintDevice__SuperB             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(76)
	QPagedPaintDevice__Postcard           QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(77)
	QPagedPaintDevice__DoublePostcard     QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(78)
	QPagedPaintDevice__Prc16K             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(79)
	QPagedPaintDevice__Prc32K             QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(80)
	QPagedPaintDevice__Prc32KBig          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(81)
	QPagedPaintDevice__FanFoldUS          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(82)
	QPagedPaintDevice__FanFoldGerman      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(83)
	QPagedPaintDevice__FanFoldGermanLegal QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(84)
	QPagedPaintDevice__EnvelopeB4         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(85)
	QPagedPaintDevice__EnvelopeB5         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(86)
	QPagedPaintDevice__EnvelopeB6         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(87)
	QPagedPaintDevice__EnvelopeC0         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(88)
	QPagedPaintDevice__EnvelopeC1         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(89)
	QPagedPaintDevice__EnvelopeC2         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(90)
	QPagedPaintDevice__EnvelopeC3         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(91)
	QPagedPaintDevice__EnvelopeC4         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(92)
	QPagedPaintDevice__EnvelopeC6         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(93)
	QPagedPaintDevice__EnvelopeC65        QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(94)
	QPagedPaintDevice__EnvelopeC7         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(95)
	QPagedPaintDevice__Envelope9          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(96)
	QPagedPaintDevice__Envelope11         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(97)
	QPagedPaintDevice__Envelope12         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(98)
	QPagedPaintDevice__Envelope14         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(99)
	QPagedPaintDevice__EnvelopeMonarch    QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(100)
	QPagedPaintDevice__EnvelopePersonal   QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(101)
	QPagedPaintDevice__EnvelopeChou3      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(102)
	QPagedPaintDevice__EnvelopeChou4      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(103)
	QPagedPaintDevice__EnvelopeInvite     QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(104)
	QPagedPaintDevice__EnvelopeItalian    QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(105)
	QPagedPaintDevice__EnvelopeKaku2      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(106)
	QPagedPaintDevice__EnvelopeKaku3      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(107)
	QPagedPaintDevice__EnvelopePrc1       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(108)
	QPagedPaintDevice__EnvelopePrc2       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(109)
	QPagedPaintDevice__EnvelopePrc3       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(110)
	QPagedPaintDevice__EnvelopePrc4       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(111)
	QPagedPaintDevice__EnvelopePrc5       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(112)
	QPagedPaintDevice__EnvelopePrc6       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(113)
	QPagedPaintDevice__EnvelopePrc7       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(114)
	QPagedPaintDevice__EnvelopePrc8       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(115)
	QPagedPaintDevice__EnvelopePrc9       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(116)
	QPagedPaintDevice__EnvelopePrc10      QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(117)
	QPagedPaintDevice__EnvelopeYou4       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(118)
	QPagedPaintDevice__LastPageSize       QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__EnvelopeYou4)
	QPagedPaintDevice__NPageSize          QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__NPaperSize         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__AnsiA              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__Letter)
	QPagedPaintDevice__AnsiB              QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__Ledger)
	QPagedPaintDevice__EnvelopeC5         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__C5E)
	QPagedPaintDevice__EnvelopeDL         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__DLE)
	QPagedPaintDevice__Envelope10         QPagedPaintDevice__PageSize = QPagedPaintDevice__PageSize(QPagedPaintDevice__Comm10E)
)

func NewQPagedPaintDevice() *QPagedPaintDevice {
	return NewQPagedPaintDeviceFromPointer(C.QPagedPaintDevice_NewQPagedPaintDevice())
}

//export callbackQPagedPaintDevice_NewPage
func callbackQPagedPaintDevice_NewPage(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "newPage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPagedPaintDevice) ConnectNewPage(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "newPage"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "newPage", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "newPage", f)
		}
	}
}

func (ptr *QPagedPaintDevice) DisconnectNewPage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "newPage")
	}
}

func (ptr *QPagedPaintDevice) NewPage() bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageLayout(newPageLayout QPageLayout_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageLayout(ptr.Pointer(), PointerFromQPageLayout(newPageLayout)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins(margins core.QMarginsF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins2(margins core.QMarginsF_ITF, units QPageLayout__Unit) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins2(ptr.Pointer(), core.PointerFromQMarginsF(margins), C.longlong(units)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageOrientation(orientation QPageLayout__Orientation) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageOrientation(ptr.Pointer(), C.longlong(orientation)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageSize(pageSize QPageSize_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize)) != 0
	}
	return false
}

//export callbackQPagedPaintDevice_SetPageSize2
func callbackQPagedPaintDevice_SetPageSize2(ptr unsafe.Pointer, size C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setPageSize2"); signal != nil {
		signal.(func(QPagedPaintDevice__PageSize))(QPagedPaintDevice__PageSize(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSize2Default(QPagedPaintDevice__PageSize(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSize2(f func(size QPagedPaintDevice__PageSize)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setPageSize2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSize2", func(size QPagedPaintDevice__PageSize) {
				signal.(func(QPagedPaintDevice__PageSize))(size)
				f(size)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSize2", f)
		}
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSize2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSize2")
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2(ptr.Pointer(), C.longlong(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2Default(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2Default(ptr.Pointer(), C.longlong(size))
	}
}

//export callbackQPagedPaintDevice_SetPageSizeMM
func callbackQPagedPaintDevice_SetPageSizeMM(ptr unsafe.Pointer, size unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setPageSizeMM"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSizeMMDefault(core.NewQSizeFFromPointer(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSizeMM(f func(size *core.QSizeF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setPageSizeMM"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSizeMM", func(size *core.QSizeF) {
				signal.(func(*core.QSizeF))(size)
				f(size)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSizeMM", f)
		}
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSizeMM() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setPageSizeMM")
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMM(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMM(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMMDefault(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMMDefault(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) DestroyQPagedPaintDevice() {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_DestroyQPagedPaintDevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPagedPaintDevice) PageSize() QPagedPaintDevice__PageSize {
	if ptr.Pointer() != nil {
		return QPagedPaintDevice__PageSize(C.QPagedPaintDevice_PageSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPagedPaintDevice) PageLayout() *QPageLayout {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPageLayoutFromPointer(C.QPagedPaintDevice_PageLayout(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
		return tmpValue
	}
	return nil
}

func (ptr *QPagedPaintDevice) PageSizeMM() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPagedPaintDevice_PageSizeMM(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//export callbackQPagedPaintDevice_PaintEngine
func callbackQPagedPaintDevice_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPagedPaintDeviceFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPagedPaintDevice) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPagedPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPagedPaintDevice) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPagedPaintDevice_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QPaintDevice struct {
	ptr unsafe.Pointer
}

type QPaintDevice_ITF interface {
	QPaintDevice_PTR() *QPaintDevice
}

func (ptr *QPaintDevice) QPaintDevice_PTR() *QPaintDevice {
	return ptr
}

func (ptr *QPaintDevice) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPaintDevice) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPaintDevice(ptr QPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceFromPointer(ptr unsafe.Pointer) *QPaintDevice {
	var n = new(QPaintDevice)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPaintDevice__PaintDeviceMetric
//QPaintDevice::PaintDeviceMetric
type QPaintDevice__PaintDeviceMetric int64

const (
	QPaintDevice__PdmWidth                  QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(1)
	QPaintDevice__PdmHeight                 QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(2)
	QPaintDevice__PdmWidthMM                QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(3)
	QPaintDevice__PdmHeightMM               QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(4)
	QPaintDevice__PdmNumColors              QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(5)
	QPaintDevice__PdmDepth                  QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(6)
	QPaintDevice__PdmDpiX                   QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(7)
	QPaintDevice__PdmDpiY                   QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(8)
	QPaintDevice__PdmPhysicalDpiX           QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(9)
	QPaintDevice__PdmPhysicalDpiY           QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(10)
	QPaintDevice__PdmDevicePixelRatio       QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(11)
	QPaintDevice__PdmDevicePixelRatioScaled QPaintDevice__PaintDeviceMetric = QPaintDevice__PaintDeviceMetric(12)
)

func NewQPaintDevice() *QPaintDevice {
	return NewQPaintDeviceFromPointer(C.QPaintDevice_NewQPaintDevice())
}

//export callbackQPaintDevice_DestroyQPaintDevice
func callbackQPaintDevice_DestroyQPaintDevice(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QPaintDevice"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceFromPointer(ptr).DestroyQPaintDeviceDefault()
	}
}

func (ptr *QPaintDevice) ConnectDestroyQPaintDevice(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QPaintDevice"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintDevice", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintDevice", f)
		}
	}
}

func (ptr *QPaintDevice) DisconnectDestroyQPaintDevice() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintDevice")
	}
}

func (ptr *QPaintDevice) DestroyQPaintDevice() {
	if ptr.Pointer() != nil {
		C.QPaintDevice_DestroyQPaintDevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintDevice) DestroyQPaintDeviceDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDevice_DestroyQPaintDeviceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPaintDevice_PaintEngine
func callbackQPaintDevice_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPaintEngine(0))
}

func (ptr *QPaintDevice) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "paintEngine"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paintEngine", func() *QPaintEngine {
				signal.(func() *QPaintEngine)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paintEngine", f)
		}
	}
}

func (ptr *QPaintDevice) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "paintEngine")
	}
}

func (ptr *QPaintDevice) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDevice) PaintingActive() bool {
	if ptr.Pointer() != nil {
		return C.QPaintDevice_PaintingActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintDevice) ColorCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_ColorCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Depth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) DevicePixelRatio() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_DevicePixelRatio(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) HeightMM() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_HeightMM(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_LogicalDpiX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_LogicalDpiY(ptr.Pointer())))
	}
	return 0
}

//export callbackQPaintDevice_Metric
func callbackQPaintDevice_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPaintDeviceFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPaintDevice) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "metric"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "metric", func(metric QPaintDevice__PaintDeviceMetric) int {
				signal.(func(QPaintDevice__PaintDeviceMetric) int)(metric)
				return f(metric)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "metric", f)
		}
	}
}

func (ptr *QPaintDevice) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "metric")
	}
}

func (ptr *QPaintDevice) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPaintDevice) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPaintDevice) PhysicalDpiX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_PhysicalDpiX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) PhysicalDpiY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_PhysicalDpiY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) WidthMM() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_WidthMM(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) DevicePixelRatioF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPaintDevice_DevicePixelRatioF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) Painters() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QPaintDevice_Painters(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) SetPainters(vus uint16) {
	if ptr.Pointer() != nil {
		C.QPaintDevice_SetPainters(ptr.Pointer(), C.ushort(vus))
	}
}

type QPaintDeviceWindow struct {
	QWindow
	QPaintDevice
}

type QPaintDeviceWindow_ITF interface {
	QWindow_ITF
	QPaintDevice_ITF
	QPaintDeviceWindow_PTR() *QPaintDeviceWindow
}

func (ptr *QPaintDeviceWindow) QPaintDeviceWindow_PTR() *QPaintDeviceWindow {
	return ptr
}

func (ptr *QPaintDeviceWindow) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindow_PTR().Pointer()
	}
	return nil
}

func (ptr *QPaintDeviceWindow) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QWindow_PTR().SetPointer(p)
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQPaintDeviceWindow(ptr QPaintDeviceWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceWindowFromPointer(ptr unsafe.Pointer) *QPaintDeviceWindow {
	var n = new(QPaintDeviceWindow)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintDeviceWindow) DestroyQPaintDeviceWindow() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPaintDeviceWindow_PaintEvent
func callbackQPaintDeviceWindow_PaintEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEvent"); signal != nil {
		signal.(func(*QPaintEvent))(NewQPaintEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).PaintEventDefault(NewQPaintEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectPaintEvent(f func(event *QPaintEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "paintEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paintEvent", func(event *QPaintEvent) {
				signal.(func(*QPaintEvent))(event)
				f(event)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "paintEvent", f)
		}
	}
}

func (ptr *QPaintDeviceWindow) DisconnectPaintEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "paintEvent")
	}
}

func (ptr *QPaintDeviceWindow) PaintEvent(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEvent(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) PaintEventDefault(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEventDefault(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

//export callbackQPaintDeviceWindow_Update3
func callbackQPaintDeviceWindow_Update3(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "update3"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).Update3Default()
	}
}

func (ptr *QPaintDeviceWindow) ConnectUpdate3(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "update3"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update3", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "update3", f)
		}
	}
}

func (ptr *QPaintDeviceWindow) DisconnectUpdate3() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "update3")
	}
}

func (ptr *QPaintDeviceWindow) Update3() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update3(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) Update3Default() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update3Default(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) Update(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintDeviceWindow) Update2(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update2(ptr.Pointer(), PointerFromQRegion(region))
	}
}

//export callbackQPaintDeviceWindow_PaintEngine
func callbackQPaintDeviceWindow_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPaintDeviceWindowFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPaintDeviceWindow) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDeviceWindow_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDeviceWindow_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QPaintEngine struct {
	ptr unsafe.Pointer
}

type QPaintEngine_ITF interface {
	QPaintEngine_PTR() *QPaintEngine
}

func (ptr *QPaintEngine) QPaintEngine_PTR() *QPaintEngine {
	return ptr
}

func (ptr *QPaintEngine) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPaintEngine) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPaintEngine(ptr QPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineFromPointer(ptr unsafe.Pointer) *QPaintEngine {
	var n = new(QPaintEngine)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPaintEngine__DirtyFlag
//QPaintEngine::DirtyFlag
type QPaintEngine__DirtyFlag int64

const (
	QPaintEngine__DirtyPen             QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0001)
	QPaintEngine__DirtyBrush           QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0002)
	QPaintEngine__DirtyBrushOrigin     QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0004)
	QPaintEngine__DirtyFont            QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0008)
	QPaintEngine__DirtyBackground      QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0010)
	QPaintEngine__DirtyBackgroundMode  QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0020)
	QPaintEngine__DirtyTransform       QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0040)
	QPaintEngine__DirtyClipRegion      QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0080)
	QPaintEngine__DirtyClipPath        QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0100)
	QPaintEngine__DirtyHints           QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0200)
	QPaintEngine__DirtyCompositionMode QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0400)
	QPaintEngine__DirtyClipEnabled     QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x0800)
	QPaintEngine__DirtyOpacity         QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0x1000)
	QPaintEngine__AllDirty             QPaintEngine__DirtyFlag = QPaintEngine__DirtyFlag(0xffff)
)

//go:generate stringer -type=QPaintEngine__PaintEngineFeature
//QPaintEngine::PaintEngineFeature
type QPaintEngine__PaintEngineFeature int64

const (
	QPaintEngine__PrimitiveTransform          QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000001)
	QPaintEngine__PatternTransform            QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000002)
	QPaintEngine__PixmapTransform             QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000004)
	QPaintEngine__PatternBrush                QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000008)
	QPaintEngine__LinearGradientFill          QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000010)
	QPaintEngine__RadialGradientFill          QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000020)
	QPaintEngine__ConicalGradientFill         QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000040)
	QPaintEngine__AlphaBlend                  QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000080)
	QPaintEngine__PorterDuff                  QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000100)
	QPaintEngine__PainterPaths                QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000200)
	QPaintEngine__Antialiasing                QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000400)
	QPaintEngine__BrushStroke                 QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00000800)
	QPaintEngine__ConstantOpacity             QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00001000)
	QPaintEngine__MaskedBrush                 QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00002000)
	QPaintEngine__PerspectiveTransform        QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00004000)
	QPaintEngine__BlendModes                  QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00008000)
	QPaintEngine__ObjectBoundingModeGradients QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00010000)
	QPaintEngine__RasterOpModes               QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x00020000)
	QPaintEngine__PaintOutsidePaintEvent      QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0x20000000)
	QPaintEngine__AllFeatures                 QPaintEngine__PaintEngineFeature = QPaintEngine__PaintEngineFeature(0xffffffff)
)

//go:generate stringer -type=QPaintEngine__PolygonDrawMode
//QPaintEngine::PolygonDrawMode
type QPaintEngine__PolygonDrawMode int64

const (
	QPaintEngine__OddEvenMode  QPaintEngine__PolygonDrawMode = QPaintEngine__PolygonDrawMode(0)
	QPaintEngine__WindingMode  QPaintEngine__PolygonDrawMode = QPaintEngine__PolygonDrawMode(1)
	QPaintEngine__ConvexMode   QPaintEngine__PolygonDrawMode = QPaintEngine__PolygonDrawMode(2)
	QPaintEngine__PolylineMode QPaintEngine__PolygonDrawMode = QPaintEngine__PolygonDrawMode(3)
)

//go:generate stringer -type=QPaintEngine__Type
//QPaintEngine::Type
type QPaintEngine__Type int64

const (
	QPaintEngine__X11           QPaintEngine__Type = QPaintEngine__Type(0)
	QPaintEngine__Windows       QPaintEngine__Type = QPaintEngine__Type(1)
	QPaintEngine__QuickDraw     QPaintEngine__Type = QPaintEngine__Type(2)
	QPaintEngine__CoreGraphics  QPaintEngine__Type = QPaintEngine__Type(3)
	QPaintEngine__MacPrinter    QPaintEngine__Type = QPaintEngine__Type(4)
	QPaintEngine__QWindowSystem QPaintEngine__Type = QPaintEngine__Type(5)
	QPaintEngine__PostScript    QPaintEngine__Type = QPaintEngine__Type(6)
	QPaintEngine__OpenGL        QPaintEngine__Type = QPaintEngine__Type(7)
	QPaintEngine__Picture       QPaintEngine__Type = QPaintEngine__Type(8)
	QPaintEngine__SVG           QPaintEngine__Type = QPaintEngine__Type(9)
	QPaintEngine__Raster        QPaintEngine__Type = QPaintEngine__Type(10)
	QPaintEngine__Direct3D      QPaintEngine__Type = QPaintEngine__Type(11)
	QPaintEngine__Pdf           QPaintEngine__Type = QPaintEngine__Type(12)
	QPaintEngine__OpenVG        QPaintEngine__Type = QPaintEngine__Type(13)
	QPaintEngine__OpenGL2       QPaintEngine__Type = QPaintEngine__Type(14)
	QPaintEngine__PaintBuffer   QPaintEngine__Type = QPaintEngine__Type(15)
	QPaintEngine__Blitter       QPaintEngine__Type = QPaintEngine__Type(16)
	QPaintEngine__Direct2D      QPaintEngine__Type = QPaintEngine__Type(17)
	QPaintEngine__User          QPaintEngine__Type = QPaintEngine__Type(50)
	QPaintEngine__MaxUser       QPaintEngine__Type = QPaintEngine__Type(100)
)

//export callbackQPaintEngine_End
func callbackQPaintEngine_End(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "end"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPaintEngine) ConnectEnd(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "end"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "end", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "end", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "end")
	}
}

func (ptr *QPaintEngine) End() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_End(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQPaintEngine_DrawEllipse
func callbackQPaintEngine_DrawEllipse(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawEllipse"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipseDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse", func(rect *core.QRectF) {
				signal.(func(*core.QRectF))(rect)
				f(rect)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse")
	}
}

func (ptr *QPaintEngine) DrawEllipse(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipseDefault(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipseDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQPaintEngine_DrawImage
func callbackQPaintEngine_DrawImage(ptr unsafe.Pointer, rectangle unsafe.Pointer, image unsafe.Pointer, sr unsafe.Pointer, flags C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawImage"); signal != nil {
		signal.(func(*core.QRectF, *QImage, *core.QRectF, core.Qt__ImageConversionFlag))(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawImageDefault(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	}
}

func (ptr *QPaintEngine) ConnectDrawImage(f func(rectangle *core.QRectF, image *QImage, sr *core.QRectF, flags core.Qt__ImageConversionFlag)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawImage"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawImage", func(rectangle *core.QRectF, image *QImage, sr *core.QRectF, flags core.Qt__ImageConversionFlag) {
				signal.(func(*core.QRectF, *QImage, *core.QRectF, core.Qt__ImageConversionFlag))(rectangle, image, sr, flags)
				f(rectangle, image, sr, flags)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawImage", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawImage")
	}
}

func (ptr *QPaintEngine) DrawImage(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImage(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.longlong(flags))
	}
}

func (ptr *QPaintEngine) DrawImageDefault(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImageDefault(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.longlong(flags))
	}
}

//export callbackQPaintEngine_DrawPolygon
func callbackQPaintEngine_DrawPolygon(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int, mode C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPolygon"); signal != nil {
		signal.(func(*core.QPointF, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygonDefault(core.NewQPointFFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon(f func(points *core.QPointF, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon", func(points *core.QPointF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
				signal.(func(*core.QPointF, int, QPaintEngine__PolygonDrawMode))(points, pointCount, mode)
				f(points, pointCount, mode)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon")
	}
}

func (ptr *QPaintEngine) DrawPolygon(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygonDefault(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygonDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func NewQPaintEngine(caps QPaintEngine__PaintEngineFeature) *QPaintEngine {
	return NewQPaintEngineFromPointer(C.QPaintEngine_NewQPaintEngine(C.longlong(caps)))
}

//export callbackQPaintEngine_Begin
func callbackQPaintEngine_Begin(ptr unsafe.Pointer, pdev unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "begin"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QPaintDevice) bool)(NewQPaintDeviceFromPointer(pdev)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPaintEngine) ConnectBegin(f func(pdev *QPaintDevice) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "begin"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "begin", func(pdev *QPaintDevice) bool {
				signal.(func(*QPaintDevice) bool)(pdev)
				return f(pdev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "begin", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectBegin() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "begin")
	}
}

func (ptr *QPaintEngine) Begin(pdev QPaintDevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_Begin(ptr.Pointer(), PointerFromQPaintDevice(pdev)) != 0
	}
	return false
}

//export callbackQPaintEngine_DrawEllipse2
func callbackQPaintEngine_DrawEllipse2(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawEllipse2"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipse2Default(core.NewQRectFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse2(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse2", func(rect *core.QRect) {
				signal.(func(*core.QRect))(rect)
				f(rect)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse2", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawEllipse2")
	}
}

func (ptr *QPaintEngine) DrawEllipse2(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipse2Default(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2Default(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

//export callbackQPaintEngine_DrawLines2
func callbackQPaintEngine_DrawLines2(ptr unsafe.Pointer, lines unsafe.Pointer, lineCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawLines2"); signal != nil {
		signal.(func(*core.QLine, int))(core.NewQLineFromPointer(lines), int(int32(lineCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLines2Default(core.NewQLineFromPointer(lines), int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines2(f func(lines *core.QLine, lineCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawLines2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines2", func(lines *core.QLine, lineCount int) {
				signal.(func(*core.QLine, int))(lines, lineCount)
				f(lines, lineCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines2", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines2")
	}
}

func (ptr *QPaintEngine) DrawLines2(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) DrawLines2Default(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2Default(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

//export callbackQPaintEngine_DrawLines
func callbackQPaintEngine_DrawLines(ptr unsafe.Pointer, lines unsafe.Pointer, lineCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawLines"); signal != nil {
		signal.(func(*core.QLineF, int))(core.NewQLineFFromPointer(lines), int(int32(lineCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLinesDefault(core.NewQLineFFromPointer(lines), int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines(f func(lines *core.QLineF, lineCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawLines"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines", func(lines *core.QLineF, lineCount int) {
				signal.(func(*core.QLineF, int))(lines, lineCount)
				f(lines, lineCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawLines")
	}
}

func (ptr *QPaintEngine) DrawLines(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) DrawLinesDefault(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLinesDefault(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

//export callbackQPaintEngine_DrawPath
func callbackQPaintEngine_DrawPath(ptr unsafe.Pointer, path unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPath"); signal != nil {
		signal.(func(*QPainterPath))(NewQPainterPathFromPointer(path))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPathDefault(NewQPainterPathFromPointer(path))
	}
}

func (ptr *QPaintEngine) ConnectDrawPath(f func(path *QPainterPath)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPath"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPath", func(path *QPainterPath) {
				signal.(func(*QPainterPath))(path)
				f(path)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPath", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPath() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPath")
	}
}

func (ptr *QPaintEngine) DrawPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPaintEngine) DrawPathDefault(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPathDefault(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

//export callbackQPaintEngine_DrawPixmap
func callbackQPaintEngine_DrawPixmap(ptr unsafe.Pointer, r unsafe.Pointer, pm unsafe.Pointer, sr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QRectF))(core.NewQRectFFromPointer(r), NewQPixmapFromPointer(pm), core.NewQRectFFromPointer(sr))
	}

}

func (ptr *QPaintEngine) ConnectDrawPixmap(f func(r *core.QRectF, pm *QPixmap, sr *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPixmap"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPixmap", func(r *core.QRectF, pm *QPixmap, sr *core.QRectF) {
				signal.(func(*core.QRectF, *QPixmap, *core.QRectF))(r, pm, sr)
				f(r, pm, sr)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPixmap", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPixmap")
	}
}

func (ptr *QPaintEngine) DrawPixmap(r core.QRectF_ITF, pm QPixmap_ITF, sr core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(r), PointerFromQPixmap(pm), core.PointerFromQRectF(sr))
	}
}

//export callbackQPaintEngine_DrawPoints2
func callbackQPaintEngine_DrawPoints2(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPoints2"); signal != nil {
		signal.(func(*core.QPoint, int))(core.NewQPointFromPointer(points), int(int32(pointCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPoints2Default(core.NewQPointFromPointer(points), int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints2(f func(points *core.QPoint, pointCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPoints2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints2", func(points *core.QPoint, pointCount int) {
				signal.(func(*core.QPoint, int))(points, pointCount)
				f(points, pointCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints2", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints2")
	}
}

func (ptr *QPaintEngine) DrawPoints2(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) DrawPoints2Default(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

//export callbackQPaintEngine_DrawPoints
func callbackQPaintEngine_DrawPoints(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPoints"); signal != nil {
		signal.(func(*core.QPointF, int))(core.NewQPointFFromPointer(points), int(int32(pointCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPointsDefault(core.NewQPointFFromPointer(points), int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints(f func(points *core.QPointF, pointCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPoints"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints", func(points *core.QPointF, pointCount int) {
				signal.(func(*core.QPointF, int))(points, pointCount)
				f(points, pointCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPoints")
	}
}

func (ptr *QPaintEngine) DrawPoints(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) DrawPointsDefault(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPointsDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

//export callbackQPaintEngine_DrawPolygon2
func callbackQPaintEngine_DrawPolygon2(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int, mode C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawPolygon2"); signal != nil {
		signal.(func(*core.QPoint, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygon2Default(core.NewQPointFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon2(f func(points *core.QPoint, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon2", func(points *core.QPoint, pointCount int, mode QPaintEngine__PolygonDrawMode) {
				signal.(func(*core.QPoint, int, QPaintEngine__PolygonDrawMode))(points, pointCount, mode)
				f(points, pointCount, mode)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon2", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawPolygon2")
	}
}

func (ptr *QPaintEngine) DrawPolygon2(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygon2Default(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

//export callbackQPaintEngine_DrawRects2
func callbackQPaintEngine_DrawRects2(ptr unsafe.Pointer, rects unsafe.Pointer, rectCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawRects2"); signal != nil {
		signal.(func(*core.QRect, int))(core.NewQRectFromPointer(rects), int(int32(rectCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRects2Default(core.NewQRectFromPointer(rects), int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects2(f func(rects *core.QRect, rectCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawRects2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects2", func(rects *core.QRect, rectCount int) {
				signal.(func(*core.QRect, int))(rects, rectCount)
				f(rects, rectCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects2", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects2")
	}
}

func (ptr *QPaintEngine) DrawRects2(rects core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) DrawRects2Default(rects core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2Default(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(rectCount)))
	}
}

//export callbackQPaintEngine_DrawRects
func callbackQPaintEngine_DrawRects(ptr unsafe.Pointer, rects unsafe.Pointer, rectCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawRects"); signal != nil {
		signal.(func(*core.QRectF, int))(core.NewQRectFFromPointer(rects), int(int32(rectCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRectsDefault(core.NewQRectFFromPointer(rects), int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects(f func(rects *core.QRectF, rectCount int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawRects"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects", func(rects *core.QRectF, rectCount int) {
				signal.(func(*core.QRectF, int))(rects, rectCount)
				f(rects, rectCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawRects")
	}
}

func (ptr *QPaintEngine) DrawRects(rects core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) DrawRectsDefault(rects core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRectsDefault(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(int32(rectCount)))
	}
}

//export callbackQPaintEngine_DrawTextItem
func callbackQPaintEngine_DrawTextItem(ptr unsafe.Pointer, p unsafe.Pointer, textItem unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawTextItem"); signal != nil {
		signal.(func(*core.QPointF, *QTextItem))(core.NewQPointFFromPointer(p), NewQTextItemFromPointer(textItem))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawTextItemDefault(core.NewQPointFFromPointer(p), NewQTextItemFromPointer(textItem))
	}
}

func (ptr *QPaintEngine) ConnectDrawTextItem(f func(p *core.QPointF, textItem *QTextItem)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawTextItem"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawTextItem", func(p *core.QPointF, textItem *QTextItem) {
				signal.(func(*core.QPointF, *QTextItem))(p, textItem)
				f(p, textItem)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawTextItem", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawTextItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawTextItem")
	}
}

func (ptr *QPaintEngine) DrawTextItem(p core.QPointF_ITF, textItem QTextItem_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTextItem(ptr.Pointer(), core.PointerFromQPointF(p), PointerFromQTextItem(textItem))
	}
}

func (ptr *QPaintEngine) DrawTextItemDefault(p core.QPointF_ITF, textItem QTextItem_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTextItemDefault(ptr.Pointer(), core.PointerFromQPointF(p), PointerFromQTextItem(textItem))
	}
}

//export callbackQPaintEngine_DrawTiledPixmap
func callbackQPaintEngine_DrawTiledPixmap(ptr unsafe.Pointer, rect unsafe.Pointer, pixmap unsafe.Pointer, p unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawTiledPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QPointF))(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawTiledPixmapDefault(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	}
}

func (ptr *QPaintEngine) ConnectDrawTiledPixmap(f func(rect *core.QRectF, pixmap *QPixmap, p *core.QPointF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawTiledPixmap"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawTiledPixmap", func(rect *core.QRectF, pixmap *QPixmap, p *core.QPointF) {
				signal.(func(*core.QRectF, *QPixmap, *core.QPointF))(rect, pixmap, p)
				f(rect, pixmap, p)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawTiledPixmap", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDrawTiledPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawTiledPixmap")
	}
}

func (ptr *QPaintEngine) DrawTiledPixmap(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

func (ptr *QPaintEngine) DrawTiledPixmapDefault(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmapDefault(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

func (ptr *QPaintEngine) SetActive(state bool) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetActive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(state))))
	}
}

//export callbackQPaintEngine_UpdateState
func callbackQPaintEngine_UpdateState(ptr unsafe.Pointer, state unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "updateState"); signal != nil {
		signal.(func(*QPaintEngineState))(NewQPaintEngineStateFromPointer(state))
	}

}

func (ptr *QPaintEngine) ConnectUpdateState(f func(state *QPaintEngineState)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "updateState"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updateState", func(state *QPaintEngineState) {
				signal.(func(*QPaintEngineState))(state)
				f(state)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "updateState", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "updateState")
	}
}

func (ptr *QPaintEngine) UpdateState(state QPaintEngineState_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_UpdateState(ptr.Pointer(), PointerFromQPaintEngineState(state))
	}
}

//export callbackQPaintEngine_DestroyQPaintEngine
func callbackQPaintEngine_DestroyQPaintEngine(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QPaintEngine"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintEngineFromPointer(ptr).DestroyQPaintEngineDefault()
	}
}

func (ptr *QPaintEngine) ConnectDestroyQPaintEngine(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QPaintEngine"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintEngine", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintEngine", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectDestroyQPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QPaintEngine")
	}
}

func (ptr *QPaintEngine) DestroyQPaintEngine() {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DestroyQPaintEngine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngine) DestroyQPaintEngineDefault() {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DestroyQPaintEngineDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngine) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPaintEngine_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) Painter() *QPainter {
	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngine_Painter(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintEngine_Type
func callbackQPaintEngine_Type(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "type"); signal != nil {
		return C.longlong(signal.(func() QPaintEngine__Type)())
	}

	return C.longlong(0)
}

func (ptr *QPaintEngine) ConnectType(f func() QPaintEngine__Type) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "type"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "type", func() QPaintEngine__Type {
				signal.(func() QPaintEngine__Type)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "type", f)
		}
	}
}

func (ptr *QPaintEngine) DisconnectType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "type")
	}
}

func (ptr *QPaintEngine) Type() QPaintEngine__Type {
	if ptr.Pointer() != nil {
		return QPaintEngine__Type(C.QPaintEngine_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngine) HasFeature(feature QPaintEngine__PaintEngineFeature) bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_HasFeature(ptr.Pointer(), C.longlong(feature)) != 0
	}
	return false
}

func (ptr *QPaintEngine) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngine) Gccaps() QPaintEngine__PaintEngineFeature {
	if ptr.Pointer() != nil {
		return QPaintEngine__PaintEngineFeature(C.QPaintEngine_Gccaps(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngine) SetGccaps(vpa QPaintEngine__PaintEngineFeature) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetGccaps(ptr.Pointer(), C.longlong(vpa))
	}
}

func (ptr *QPaintEngine) State() *QPaintEngineState {
	if ptr.Pointer() != nil {
		return NewQPaintEngineStateFromPointer(C.QPaintEngine_State(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) SetState(vqp QPaintEngineState_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetState(ptr.Pointer(), PointerFromQPaintEngineState(vqp))
	}
}

type QPaintEngineState struct {
	ptr unsafe.Pointer
}

type QPaintEngineState_ITF interface {
	QPaintEngineState_PTR() *QPaintEngineState
}

func (ptr *QPaintEngineState) QPaintEngineState_PTR() *QPaintEngineState {
	return ptr
}

func (ptr *QPaintEngineState) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPaintEngineState) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPaintEngineState(ptr QPaintEngineState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngineState_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineStateFromPointer(ptr unsafe.Pointer) *QPaintEngineState {
	var n = new(QPaintEngineState)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintEngineState) DestroyQPaintEngineState() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngineState) BackgroundBrush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPaintEngineState_BackgroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) Brush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPaintEngineState_Brush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QPaintEngineState_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) State() QPaintEngine__DirtyFlag {
	if ptr.Pointer() != nil {
		return QPaintEngine__DirtyFlag(C.QPaintEngineState_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Painter() *QPainter {
	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngineState_Painter(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) CompositionMode() QPainter__CompositionMode {
	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPaintEngineState_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) RenderHints() QPainter__RenderHint {
	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPaintEngineState_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) ClipPath() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPaintEngineState_ClipPath(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) Pen() *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QPaintEngineState_Pen(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) BrushOrigin() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPaintEngineState_BrushOrigin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) ClipRegion() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPaintEngineState_ClipRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) Transform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QPaintEngineState_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) BackgroundMode() core.Qt__BGMode {
	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPaintEngineState_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) ClipOperation() core.Qt__ClipOperation {
	if ptr.Pointer() != nil {
		return core.Qt__ClipOperation(C.QPaintEngineState_ClipOperation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) BrushNeedsResolving() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_BrushNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) IsClipEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_IsClipEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) PenNeedsResolving() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_PenNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPaintEngineState_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) DirtyFlags() QPaintEngine__DirtyFlag {
	if ptr.Pointer() != nil {
		return QPaintEngine__DirtyFlag(C.QPaintEngineState_DirtyFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) SetDirtyFlags(vqp QPaintEngine__DirtyFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngineState_SetDirtyFlags(ptr.Pointer(), C.longlong(vqp))
	}
}

type QPaintEvent struct {
	core.QEvent
}

type QPaintEvent_ITF interface {
	core.QEvent_ITF
	QPaintEvent_PTR() *QPaintEvent
}

func (ptr *QPaintEvent) QPaintEvent_PTR() *QPaintEvent {
	return ptr
}

func (ptr *QPaintEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QPaintEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQPaintEvent(ptr QPaintEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEvent_PTR().Pointer()
	}
	return nil
}

func NewQPaintEventFromPointer(ptr unsafe.Pointer) *QPaintEvent {
	var n = new(QPaintEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintEvent) DestroyQPaintEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQPaintEvent2(paintRect core.QRect_ITF) *QPaintEvent {
	return NewQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent2(core.PointerFromQRect(paintRect)))
}

func NewQPaintEvent(paintRegion QRegion_ITF) *QPaintEvent {
	return NewQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent(PointerFromQRegion(paintRegion)))
}

func (ptr *QPaintEvent) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPaintEvent_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEvent) Region() *QRegion {
	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QPaintEvent_Region(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEvent) M_erased() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEvent_M_erased(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEvent) SetM_erased(vbo bool) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_erased(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QPaintEvent) M_rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPaintEvent_M_rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEvent) SetM_rect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_rect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QPaintEvent) M_region() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPaintEvent_M_region(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEvent) SetM_region(vqr QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_region(ptr.Pointer(), PointerFromQRegion(vqr))
	}
}

type QPainter struct {
	ptr unsafe.Pointer
}

type QPainter_ITF interface {
	QPainter_PTR() *QPainter
}

func (ptr *QPainter) QPainter_PTR() *QPainter {
	return ptr
}

func (ptr *QPainter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPainter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPainter(ptr QPainter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainter_PTR().Pointer()
	}
	return nil
}

func NewQPainterFromPointer(ptr unsafe.Pointer) *QPainter {
	var n = new(QPainter)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPainter__CompositionMode
//QPainter::CompositionMode
type QPainter__CompositionMode int64

const (
	QPainter__CompositionMode_SourceOver          QPainter__CompositionMode = QPainter__CompositionMode(0)
	QPainter__CompositionMode_DestinationOver     QPainter__CompositionMode = QPainter__CompositionMode(1)
	QPainter__CompositionMode_Clear               QPainter__CompositionMode = QPainter__CompositionMode(2)
	QPainter__CompositionMode_Source              QPainter__CompositionMode = QPainter__CompositionMode(3)
	QPainter__CompositionMode_Destination         QPainter__CompositionMode = QPainter__CompositionMode(4)
	QPainter__CompositionMode_SourceIn            QPainter__CompositionMode = QPainter__CompositionMode(5)
	QPainter__CompositionMode_DestinationIn       QPainter__CompositionMode = QPainter__CompositionMode(6)
	QPainter__CompositionMode_SourceOut           QPainter__CompositionMode = QPainter__CompositionMode(7)
	QPainter__CompositionMode_DestinationOut      QPainter__CompositionMode = QPainter__CompositionMode(8)
	QPainter__CompositionMode_SourceAtop          QPainter__CompositionMode = QPainter__CompositionMode(9)
	QPainter__CompositionMode_DestinationAtop     QPainter__CompositionMode = QPainter__CompositionMode(10)
	QPainter__CompositionMode_Xor                 QPainter__CompositionMode = QPainter__CompositionMode(11)
	QPainter__CompositionMode_Plus                QPainter__CompositionMode = QPainter__CompositionMode(12)
	QPainter__CompositionMode_Multiply            QPainter__CompositionMode = QPainter__CompositionMode(13)
	QPainter__CompositionMode_Screen              QPainter__CompositionMode = QPainter__CompositionMode(14)
	QPainter__CompositionMode_Overlay             QPainter__CompositionMode = QPainter__CompositionMode(15)
	QPainter__CompositionMode_Darken              QPainter__CompositionMode = QPainter__CompositionMode(16)
	QPainter__CompositionMode_Lighten             QPainter__CompositionMode = QPainter__CompositionMode(17)
	QPainter__CompositionMode_ColorDodge          QPainter__CompositionMode = QPainter__CompositionMode(18)
	QPainter__CompositionMode_ColorBurn           QPainter__CompositionMode = QPainter__CompositionMode(19)
	QPainter__CompositionMode_HardLight           QPainter__CompositionMode = QPainter__CompositionMode(20)
	QPainter__CompositionMode_SoftLight           QPainter__CompositionMode = QPainter__CompositionMode(21)
	QPainter__CompositionMode_Difference          QPainter__CompositionMode = QPainter__CompositionMode(22)
	QPainter__CompositionMode_Exclusion           QPainter__CompositionMode = QPainter__CompositionMode(23)
	QPainter__RasterOp_SourceOrDestination        QPainter__CompositionMode = QPainter__CompositionMode(24)
	QPainter__RasterOp_SourceAndDestination       QPainter__CompositionMode = QPainter__CompositionMode(25)
	QPainter__RasterOp_SourceXorDestination       QPainter__CompositionMode = QPainter__CompositionMode(26)
	QPainter__RasterOp_NotSourceAndNotDestination QPainter__CompositionMode = QPainter__CompositionMode(27)
	QPainter__RasterOp_NotSourceOrNotDestination  QPainter__CompositionMode = QPainter__CompositionMode(28)
	QPainter__RasterOp_NotSourceXorDestination    QPainter__CompositionMode = QPainter__CompositionMode(29)
	QPainter__RasterOp_NotSource                  QPainter__CompositionMode = QPainter__CompositionMode(30)
	QPainter__RasterOp_NotSourceAndDestination    QPainter__CompositionMode = QPainter__CompositionMode(31)
	QPainter__RasterOp_SourceAndNotDestination    QPainter__CompositionMode = QPainter__CompositionMode(32)
	QPainter__RasterOp_NotSourceOrDestination     QPainter__CompositionMode = QPainter__CompositionMode(33)
	QPainter__RasterOp_SourceOrNotDestination     QPainter__CompositionMode = QPainter__CompositionMode(34)
	QPainter__RasterOp_ClearDestination           QPainter__CompositionMode = QPainter__CompositionMode(35)
	QPainter__RasterOp_SetDestination             QPainter__CompositionMode = QPainter__CompositionMode(36)
	QPainter__RasterOp_NotDestination             QPainter__CompositionMode = QPainter__CompositionMode(37)
)

//go:generate stringer -type=QPainter__PixmapFragmentHint
//QPainter::PixmapFragmentHint
type QPainter__PixmapFragmentHint int64

const (
	QPainter__OpaqueHint QPainter__PixmapFragmentHint = QPainter__PixmapFragmentHint(0x01)
)

//go:generate stringer -type=QPainter__RenderHint
//QPainter::RenderHint
type QPainter__RenderHint int64

const (
	QPainter__Antialiasing            QPainter__RenderHint = QPainter__RenderHint(0x01)
	QPainter__TextAntialiasing        QPainter__RenderHint = QPainter__RenderHint(0x02)
	QPainter__SmoothPixmapTransform   QPainter__RenderHint = QPainter__RenderHint(0x04)
	QPainter__HighQualityAntialiasing QPainter__RenderHint = QPainter__RenderHint(0x08)
	QPainter__NonCosmeticDefaultPen   QPainter__RenderHint = QPainter__RenderHint(0x10)
	QPainter__Qt4CompatiblePainting   QPainter__RenderHint = QPainter__RenderHint(0x20)
)

func NewQPainter2(device QPaintDevice_ITF) *QPainter {
	var tmpValue = NewQPainterFromPointer(C.QPainter_NewQPainter2(PointerFromQPaintDevice(device)))
	runtime.SetFinalizer(tmpValue, (*QPainter).DestroyQPainter)
	return tmpValue
}

func (ptr *QPainter) BoundingRect2(rectangle core.QRect_ITF, flags int, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QPainter_BoundingRect2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BoundingRect4(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_BoundingRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), textC, PointerFromQTextOption(option)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BoundingRect(rectangle core.QRectF_ITF, flags int, text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_BoundingRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Begin(device QPaintDevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainter_Begin(ptr.Pointer(), PointerFromQPaintDevice(device)) != 0
	}
	return false
}

func (ptr *QPainter) DrawArc(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func NewQPainter() *QPainter {
	var tmpValue = NewQPainterFromPointer(C.QPainter_NewQPainter())
	runtime.SetFinalizer(tmpValue, (*QPainter).DestroyQPainter)
	return tmpValue
}

func (ptr *QPainter) BoundingRect3(x int, y int, w int, h int, flags int, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var tmpValue = core.NewQRectFromPointer(C.QPainter_BoundingRect3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) End() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_End(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) BeginNativePainting() {
	if ptr.Pointer() != nil {
		C.QPainter_BeginNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) DrawArc2(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawArc3(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord3(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord2(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawConvexPolygon3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawConvexPolygon(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawConvexPolygon4(polygon QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon4(ptr.Pointer(), PointerFromQPolygon(polygon))
	}
}

func (ptr *QPainter) DrawConvexPolygon2(polygon QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon2(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainter) DrawEllipse5(center core.QPoint_ITF, rx int, ry int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse5(ptr.Pointer(), core.PointerFromQPoint(center), C.int(int32(rx)), C.int(int32(ry)))
	}
}

func (ptr *QPainter) DrawEllipse4(center core.QPointF_ITF, rx float64, ry float64) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse4(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainter) DrawEllipse2(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawEllipse(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawEllipse3(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) DrawGlyphRun(position core.QPointF_ITF, glyphs QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawGlyphRun(ptr.Pointer(), core.PointerFromQPointF(position), PointerFromQGlyphRun(glyphs))
	}
}

func (ptr *QPainter) DrawImage8(point core.QPoint_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage8(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage4(point core.QPoint_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage4(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image), core.PointerFromQRect(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage7(point core.QPointF_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage7(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage3(point core.QPointF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage3(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image), core.PointerFromQRectF(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage6(rectangle core.QRect_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage6(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage2(target core.QRect_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQImage(image), core.PointerFromQRect(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage5(rectangle core.QRectF_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage5(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage(target core.QRectF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQImage(image), core.PointerFromQRectF(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage9(x int, y int, image QImage_ITF, sx int, sy int, sw int, sh int, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQImage(image), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawLine2(line core.QLine_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine2(ptr.Pointer(), core.PointerFromQLine(line))
	}
}

func (ptr *QPainter) DrawLine(line core.QLineF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine(ptr.Pointer(), core.PointerFromQLineF(line))
	}
}

func (ptr *QPainter) DrawLine4(p1 core.QPoint_ITF, p2 core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine4(ptr.Pointer(), core.PointerFromQPoint(p1), core.PointerFromQPoint(p2))
	}
}

func (ptr *QPainter) DrawLine5(p1 core.QPointF_ITF, p2 core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine5(ptr.Pointer(), core.PointerFromQPointF(p1), core.PointerFromQPointF(p2))
	}
}

func (ptr *QPainter) DrawLine3(x1 int, y1 int, x2 int, y2 int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine3(ptr.Pointer(), C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2)))
	}
}

func (ptr *QPainter) DrawLines5(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines5(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines7(pointPairs core.QPoint_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines7(ptr.Pointer(), core.PointerFromQPoint(pointPairs), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines3(pointPairs core.QPointF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines3(ptr.Pointer(), core.PointerFromQPointF(pointPairs), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines6(lines []*core.QLine) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines6(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawLines_lines_newList6())
			for _, v := range lines {
				tmpList.__drawLines_lines_setList6(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawLines2(lines []*core.QLineF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines2(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawLines_lines_newList2())
			for _, v := range lines {
				tmpList.__drawLines_lines_setList2(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawLines8(pointPairs []*core.QPoint) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines8(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawLines_pointPairs_newList8())
			for _, v := range pointPairs {
				tmpList.__drawLines_pointPairs_setList8(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawLines4(pointPairs []*core.QPointF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines4(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawLines_pointPairs_newList4())
			for _, v := range pointPairs {
				tmpList.__drawLines_pointPairs_setList4(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainter) DrawPicture3(point core.QPoint_ITF, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture3(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPicture(point core.QPointF_ITF, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPicture2(x int, y int, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPie3(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPie(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPie2(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPixmap8(point core.QPoint_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap8(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap6(point core.QPoint_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap6(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap7(point core.QPointF_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap7(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap5(point core.QPointF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap5(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawPixmap10(rectangle core.QRect_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap10(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap2(target core.QRect_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap(target core.QRectF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawPixmap9(x int, y int, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap4(x int, y int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap4(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)))
	}
}

func (ptr *QPainter) DrawPixmap3(x int, y int, w int, h int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)))
	}
}

func (ptr *QPainter) DrawPixmap11(x int, y int, width int, height int, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap11(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPoint2(position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawPoint(position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) DrawPoint3(x int, y int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPainter) DrawPoints3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPoints(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPoints4(points QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPoints2(points QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints2(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawPolygon3(points core.QPoint_ITF, pointCount int, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon(points core.QPointF_ITF, pointCount int, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon4(points QPolygon_ITF, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon4(ptr.Pointer(), PointerFromQPolygon(points), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon2(points QPolygonF_ITF, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon2(ptr.Pointer(), PointerFromQPolygonF(points), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolyline3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPolyline(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPolyline4(points QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPolyline2(points QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline2(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawRect3(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect3(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawRect2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) DrawRects3(rectangles core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects3(ptr.Pointer(), core.PointerFromQRect(rectangles), C.int(int32(rectCount)))
	}
}

func (ptr *QPainter) DrawRects(rectangles core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rectangles), C.int(int32(rectCount)))
	}
}

func (ptr *QPainter) DrawRects4(rectangles []*core.QRect) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects4(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawRects_rectangles_newList4())
			for _, v := range rectangles {
				tmpList.__drawRects_rectangles_setList4(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawRects2(rectangles []*core.QRectF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects2(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterFromPointer(NewQPainterFromPointer(nil).__drawRects_rectangles_newList2())
			for _, v := range rectangles {
				tmpList.__drawRects_rectangles_setList2(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainter) DrawRoundedRect3(rect core.QRect_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect3(ptr.Pointer(), core.PointerFromQRect(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect2(x int, y int, w int, h int, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawStaticText2(topLeftPosition core.QPoint_ITF, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText2(ptr.Pointer(), core.PointerFromQPoint(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText(topLeftPosition core.QPointF_ITF, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText(ptr.Pointer(), core.PointerFromQPointF(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText3(left int, top int, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText3(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawText2(position core.QPoint_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText2(ptr.Pointer(), core.PointerFromQPoint(position), textC)
	}
}

func (ptr *QPainter) DrawText(position core.QPointF_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText(ptr.Pointer(), core.PointerFromQPointF(position), textC)
	}
}

func (ptr *QPainter) DrawText6(rectangle core.QRect_ITF, flags int, text string, boundingRect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText6(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(flags)), textC, core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawText8(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText8(ptr.Pointer(), core.PointerFromQRectF(rectangle), textC, PointerFromQTextOption(option))
	}
}

func (ptr *QPainter) DrawText5(rectangle core.QRectF_ITF, flags int, text string, boundingRect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText5(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(flags)), textC, core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QPainter) DrawText3(x int, y int, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), textC)
	}
}

func (ptr *QPainter) DrawText7(x int, y int, width int, height int, flags int, text string, boundingRect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainter_DrawText7(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(flags)), textC, core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawTiledPixmap3(rectangle core.QRect_ITF, pixmap QPixmap_ITF, position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap3(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawTiledPixmap(rectangle core.QRectF_ITF, pixmap QPixmap_ITF, position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) DrawTiledPixmap2(x int, y int, width int, height int, pixmap QPixmap_ITF, sx int, sy int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)))
	}
}

func (ptr *QPainter) EndNativePainting() {
	if ptr.Pointer() != nil {
		C.QPainter_EndNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) EraseRect3(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect3(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) EraseRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) EraseRect2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) FillPath(path QPainterPath_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillPath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect11(rectangle core.QRect_ITF, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect11(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect8(rectangle core.QRect_ITF, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect8(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect3(rectangle core.QRect_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect3(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect6(rectangle core.QRect_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect6(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) FillRect12(rectangle core.QRectF_ITF, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect12(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect9(rectangle core.QRectF_ITF, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect9(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect(rectangle core.QRectF_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect4(rectangle core.QRectF_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) FillRect10(x int, y int, width int, height int, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect10(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect7(x int, y int, width int, height int, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect7(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect2(x int, y int, width int, height int, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect5(x int, y int, width int, height int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect5(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQColor(color))
	}
}

func (ptr *QPainter) ResetTransform() {
	if ptr.Pointer() != nil {
		C.QPainter_ResetTransform(ptr.Pointer())
	}
}

func (ptr *QPainter) Restore() {
	if ptr.Pointer() != nil {
		C.QPainter_Restore(ptr.Pointer())
	}
}

func (ptr *QPainter) Rotate(angle float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Rotate(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QPainter) Save() {
	if ptr.Pointer() != nil {
		C.QPainter_Save(ptr.Pointer())
	}
}

func (ptr *QPainter) Scale(sx float64, sy float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Scale(ptr.Pointer(), C.double(sx), C.double(sy))
	}
}

func (ptr *QPainter) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBackgroundMode(mode core.Qt__BGMode) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBackgroundMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPainter) SetBrush2(style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrush2(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainter) SetBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBrushOrigin2(position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) SetBrushOrigin(position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) SetBrushOrigin3(x int, y int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPainter) SetClipPath(path QPainterPath_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipPath(ptr.Pointer(), PointerFromQPainterPath(path), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRect2(rectangle core.QRect_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRect(rectangle core.QRectF_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRect3(x int, y int, width int, height int, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRegion(region QRegion_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRegion(ptr.Pointer(), PointerFromQRegion(region), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipping(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipping(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetCompositionMode(mode QPainter__CompositionMode) {
	if ptr.Pointer() != nil {
		C.QPainter_SetCompositionMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPainter) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QPainter) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QPainter_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QPainter) SetOpacity(opacity float64) {
	if ptr.Pointer() != nil {
		C.QPainter_SetOpacity(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QPainter) SetPen3(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen3(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainter) SetPen2(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen2(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPainter) SetPen(pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) SetRenderHint(hint QPainter__RenderHint, on bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHint(ptr.Pointer(), C.longlong(hint), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QPainter) SetRenderHints(hints QPainter__RenderHint, on bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHints(ptr.Pointer(), C.longlong(hints), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QPainter) SetTransform(transform QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetTransform(ptr.Pointer(), PointerFromQTransform(transform), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QPainter) SetViewTransformEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewTransformEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetViewport(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewport(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) SetViewport2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewport2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) SetWindow(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWindow(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) SetWindow2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWindow2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) SetWorldMatrixEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWorldMatrixEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetWorldTransform(matrix QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWorldTransform(ptr.Pointer(), PointerFromQTransform(matrix), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QPainter) Shear(sh float64, sv float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Shear(ptr.Pointer(), C.double(sh), C.double(sv))
	}
}

func (ptr *QPainter) StrokePath(path QPainterPath_ITF, pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_StrokePath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) Translate2(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPainter) Translate(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainter) Translate3(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate3(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainter) DestroyQPainter() {
	if ptr.Pointer() != nil {
		C.QPainter_DestroyQPainter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPainter) CompositionMode() QPainter__CompositionMode {
	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPainter_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) FontInfo() *QFontInfo {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontInfoFromPointer(C.QPainter_FontInfo(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) FontMetrics() *QFontMetrics {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontMetricsFromPointer(C.QPainter_FontMetrics(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Device() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPainter_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPainter_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) ClipPath() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainter_ClipPath(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BrushOrigin() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPainter_BrushOrigin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Viewport() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPainter_Viewport(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Window() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPainter_Window(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) ClipBoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_ClipBoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) ClipRegion() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPainter_ClipRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) CombinedTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QPainter_CombinedTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BackgroundMode() core.Qt__BGMode {
	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPainter_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QPainter_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) RenderHints() QPainter__RenderHint {
	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPainter_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) HasClipping() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_HasClipping(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) TestRenderHint(hint QPainter__RenderHint) bool {
	if ptr.Pointer() != nil {
		return C.QPainter_TestRenderHint(ptr.Pointer(), C.longlong(hint)) != 0
	}
	return false
}

func (ptr *QPainter) ViewTransformEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_ViewTransformEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) WorldMatrixEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_WorldMatrixEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) Background() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Background(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Brush() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Brush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Font() *QFont {
	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QPainter_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Pen() *QPen {
	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QPainter_Pen(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) DeviceTransform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_DeviceTransform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Transform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_Transform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) WorldTransform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_WorldTransform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainter_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) __drawLines_lines_atList6(i int) *core.QLine {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFromPointer(C.QPainter___drawLines_lines_atList6(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawLines_lines_setList6(i core.QLine_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawLines_lines_setList6(ptr.Pointer(), core.PointerFromQLine(i))
	}
}

func (ptr *QPainter) __drawLines_lines_newList6() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawLines_lines_newList6(ptr.Pointer()))
}

func (ptr *QPainter) __drawLines_lines_atList2(i int) *core.QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFFromPointer(C.QPainter___drawLines_lines_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawLines_lines_setList2(i core.QLineF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawLines_lines_setList2(ptr.Pointer(), core.PointerFromQLineF(i))
	}
}

func (ptr *QPainter) __drawLines_lines_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawLines_lines_newList2(ptr.Pointer()))
}

func (ptr *QPainter) __drawLines_pointPairs_atList8(i int) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPainter___drawLines_pointPairs_atList8(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawLines_pointPairs_setList8(i core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawLines_pointPairs_setList8(ptr.Pointer(), core.PointerFromQPoint(i))
	}
}

func (ptr *QPainter) __drawLines_pointPairs_newList8() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawLines_pointPairs_newList8(ptr.Pointer()))
}

func (ptr *QPainter) __drawLines_pointPairs_atList4(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPainter___drawLines_pointPairs_atList4(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawLines_pointPairs_setList4(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawLines_pointPairs_setList4(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QPainter) __drawLines_pointPairs_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawLines_pointPairs_newList4(ptr.Pointer()))
}

func (ptr *QPainter) __drawRects_rectangles_atList4(i int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPainter___drawRects_rectangles_atList4(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawRects_rectangles_setList4(i core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawRects_rectangles_setList4(ptr.Pointer(), core.PointerFromQRect(i))
	}
}

func (ptr *QPainter) __drawRects_rectangles_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawRects_rectangles_newList4(ptr.Pointer()))
}

func (ptr *QPainter) __drawRects_rectangles_atList2(i int) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainter___drawRects_rectangles_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) __drawRects_rectangles_setList2(i core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter___drawRects_rectangles_setList2(ptr.Pointer(), core.PointerFromQRectF(i))
	}
}

func (ptr *QPainter) __drawRects_rectangles_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPainter___drawRects_rectangles_newList2(ptr.Pointer()))
}

type QPainterPath struct {
	ptr unsafe.Pointer
}

type QPainterPath_ITF interface {
	QPainterPath_PTR() *QPainterPath
}

func (ptr *QPainterPath) QPainterPath_PTR() *QPainterPath {
	return ptr
}

func (ptr *QPainterPath) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPainterPath) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPainterPath(ptr QPainterPath_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPath_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathFromPointer(ptr unsafe.Pointer) *QPainterPath {
	var n = new(QPainterPath)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPainterPath__ElementType
//QPainterPath::ElementType
type QPainterPath__ElementType int64

const (
	QPainterPath__MoveToElement      QPainterPath__ElementType = QPainterPath__ElementType(0)
	QPainterPath__LineToElement      QPainterPath__ElementType = QPainterPath__ElementType(1)
	QPainterPath__CurveToElement     QPainterPath__ElementType = QPainterPath__ElementType(2)
	QPainterPath__CurveToDataElement QPainterPath__ElementType = QPainterPath__ElementType(3)
)

func NewQPainterPath3(path QPainterPath_ITF) *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath3(PointerFromQPainterPath(path)))
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func (ptr *QPainterPath) AddEllipse(boundingRectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse(ptr.Pointer(), core.PointerFromQRectF(boundingRectangle))
	}
}

func (ptr *QPainterPath) AddPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) AddRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func NewQPainterPath() *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath())
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func NewQPainterPath2(startPoint core.QPointF_ITF) *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath2(core.PointerFromQPointF(startPoint)))
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func (ptr *QPainterPath) AddEllipse3(center core.QPointF_ITF, rx float64, ry float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse3(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainterPath) AddEllipse2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddPolygon(polygon QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddPolygon(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainterPath) AddRect2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddRegion(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRegion(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QPainterPath) AddRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainterPath) AddRoundedRect2(x float64, y float64, w float64, h float64, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainterPath) AddText(point core.QPointF_ITF, font QFont_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainterPath_AddText(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQFont(font), textC)
	}
}

func (ptr *QPainterPath) AddText2(x float64, y float64, font QFont_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QPainterPath_AddText2(ptr.Pointer(), C.double(x), C.double(y), PointerFromQFont(font), textC)
	}
}

func (ptr *QPainterPath) ArcMoveTo(rectangle core.QRectF_ITF, angle float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcMoveTo2(x float64, y float64, width float64, height float64, angle float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcTo(rectangle core.QRectF_ITF, startAngle float64, sweepLength float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) ArcTo2(x float64, y float64, width float64, height float64, startAngle float64, sweepLength float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) CloseSubpath() {
	if ptr.Pointer() != nil {
		C.QPainterPath_CloseSubpath(ptr.Pointer())
	}
}

func (ptr *QPainterPath) ConnectPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ConnectPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) CubicTo(c1 core.QPointF_ITF, c2 core.QPointF_ITF, endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo(ptr.Pointer(), core.PointerFromQPointF(c1), core.PointerFromQPointF(c2), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) CubicTo2(c1X float64, c1Y float64, c2X float64, c2Y float64, endPointX float64, endPointY float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo2(ptr.Pointer(), C.double(c1X), C.double(c1Y), C.double(c2X), C.double(c2Y), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) LineTo(endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo(ptr.Pointer(), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) LineTo2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) MoveTo(point core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

func (ptr *QPainterPath) MoveTo2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) QuadTo(c core.QPointF_ITF, endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo(ptr.Pointer(), core.PointerFromQPointF(c), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) QuadTo2(cx float64, cy float64, endPointX float64, endPointY float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo2(ptr.Pointer(), C.double(cx), C.double(cy), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) SetElementPositionAt(index int, x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_SetElementPositionAt(ptr.Pointer(), C.int(int32(index)), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) SetFillRule(fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainterPath_SetFillRule(ptr.Pointer(), C.longlong(fillRule))
	}
}

func (ptr *QPainterPath) Swap(other QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Swap(ptr.Pointer(), PointerFromQPainterPath(other))
	}
}

func (ptr *QPainterPath) Translate2(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Translate2(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainterPath) Translate(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Translate(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainterPath) DestroyQPainterPath() {
	if ptr.Pointer() != nil {
		C.QPainterPath_DestroyQPainterPath(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPainterPath) ToFillPolygons(matrix QTransform_ITF) []*QPolygonF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QPolygonF {
			var out = make([]*QPolygonF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPainterPathFromPointer(l.data).__toFillPolygons_atList(i)
			}
			return out
		}(C.QPainterPath_ToFillPolygons(ptr.Pointer(), PointerFromQTransform(matrix)))
	}
	return make([]*QPolygonF, 0)
}

func (ptr *QPainterPath) ToSubpathPolygons(matrix QTransform_ITF) []*QPolygonF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QPolygonF {
			var out = make([]*QPolygonF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPainterPathFromPointer(l.data).__toSubpathPolygons_atList(i)
			}
			return out
		}(C.QPainterPath_ToSubpathPolygons(ptr.Pointer(), PointerFromQTransform(matrix)))
	}
	return make([]*QPolygonF, 0)
}

func (ptr *QPainterPath) Intersected(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Intersected(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Simplified() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Simplified(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Subtracted(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Subtracted(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ToReversed() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_ToReversed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Translated2(offset core.QPointF_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Translated2(ptr.Pointer(), core.PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Translated(dx float64, dy float64) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Translated(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) United(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_United(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) CurrentPosition() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPainterPath_CurrentPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) PointAtPercent(t float64) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPainterPath_PointAtPercent(ptr.Pointer(), C.double(t)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ToFillPolygon(matrix QTransform_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath_ToFillPolygon(ptr.Pointer(), PointerFromQTransform(matrix)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainterPath_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ControlPointRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainterPath_ControlPointRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) FillRule() core.Qt__FillRule {
	if ptr.Pointer() != nil {
		return core.Qt__FillRule(C.QPainterPath_FillRule(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) Contains3(p QPainterPath_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains3(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) Contains(point core.QPointF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains(ptr.Pointer(), core.PointerFromQPointF(point)) != 0
	}
	return false
}

func (ptr *QPainterPath) Contains2(rectangle core.QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains2(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) Intersects2(p QPainterPath_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects2(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) Intersects(rectangle core.QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainterPath) ElementCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPainterPath_ElementCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPainterPath) AngleAtPercent(t float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_AngleAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) Length() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) PercentAtLength(len float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_PercentAtLength(ptr.Pointer(), C.double(len)))
	}
	return 0
}

func (ptr *QPainterPath) SlopeAtPercent(t float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_SlopeAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) __toFillPolygons_atList2(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath___toFillPolygons_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) __toFillPolygons_setList2(i QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath___toFillPolygons_setList2(ptr.Pointer(), PointerFromQPolygonF(i))
	}
}

func (ptr *QPainterPath) __toFillPolygons_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPath___toFillPolygons_newList2(ptr.Pointer()))
}

func (ptr *QPainterPath) __toFillPolygons_atList(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath___toFillPolygons_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) __toFillPolygons_setList(i QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath___toFillPolygons_setList(ptr.Pointer(), PointerFromQPolygonF(i))
	}
}

func (ptr *QPainterPath) __toFillPolygons_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPath___toFillPolygons_newList(ptr.Pointer()))
}

func (ptr *QPainterPath) __toSubpathPolygons_atList2(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath___toSubpathPolygons_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) __toSubpathPolygons_setList2(i QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath___toSubpathPolygons_setList2(ptr.Pointer(), PointerFromQPolygonF(i))
	}
}

func (ptr *QPainterPath) __toSubpathPolygons_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPath___toSubpathPolygons_newList2(ptr.Pointer()))
}

func (ptr *QPainterPath) __toSubpathPolygons_atList(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath___toSubpathPolygons_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) __toSubpathPolygons_setList(i QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath___toSubpathPolygons_setList(ptr.Pointer(), PointerFromQPolygonF(i))
	}
}

func (ptr *QPainterPath) __toSubpathPolygons_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPath___toSubpathPolygons_newList(ptr.Pointer()))
}

type QPainterPathStroker struct {
	ptr unsafe.Pointer
}

type QPainterPathStroker_ITF interface {
	QPainterPathStroker_PTR() *QPainterPathStroker
}

func (ptr *QPainterPathStroker) QPainterPathStroker_PTR() *QPainterPathStroker {
	return ptr
}

func (ptr *QPainterPathStroker) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPainterPathStroker) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPainterPathStroker(ptr QPainterPathStroker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPathStroker_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathStrokerFromPointer(ptr unsafe.Pointer) *QPainterPathStroker {
	var n = new(QPainterPathStroker)
	n.SetPointer(ptr)
	return n
}
func NewQPainterPathStroker() *QPainterPathStroker {
	var tmpValue = NewQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker())
	runtime.SetFinalizer(tmpValue, (*QPainterPathStroker).DestroyQPainterPathStroker)
	return tmpValue
}

func NewQPainterPathStroker2(pen QPen_ITF) *QPainterPathStroker {
	var tmpValue = NewQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker2(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPainterPathStroker).DestroyQPainterPathStroker)
	return tmpValue
}

func (ptr *QPainterPathStroker) SetCapStyle(style core.Qt__PenCapStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCapStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetCurveThreshold(threshold float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCurveThreshold(ptr.Pointer(), C.double(threshold))
	}
}

func (ptr *QPainterPathStroker) SetDashOffset(offset float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPainterPathStroker) SetDashPattern(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashPattern(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetDashPattern2(dashPattern []float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashPattern2(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPainterPathStrokerFromPointer(NewQPainterPathStrokerFromPointer(nil).__setDashPattern_dashPattern_newList2())
			for _, v := range dashPattern {
				tmpList.__setDashPattern_dashPattern_setList2(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPainterPathStroker) SetJoinStyle(style core.Qt__PenJoinStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetJoinStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetMiterLimit(limit float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPainterPathStroker) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPainterPathStroker) DestroyQPainterPathStroker() {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_DestroyQPainterPathStroker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPainterPathStroker) CreateStroke(path QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPathStroker_CreateStroke(ptr.Pointer(), PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPathStroker) DashPattern() []float64 {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []float64 {
			var out = make([]float64, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPainterPathStrokerFromPointer(l.data).__dashPattern_atList(i)
			}
			return out
		}(C.QPainterPathStroker_DashPattern(ptr.Pointer()))
	}
	return make([]float64, 0)
}

func (ptr *QPainterPathStroker) CapStyle() core.Qt__PenCapStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPainterPathStroker_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) JoinStyle() core.Qt__PenJoinStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPainterPathStroker_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) CurveThreshold() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_CurveThreshold(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) DashOffset() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) MiterLimit() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) __setDashPattern_dashPattern_atList2(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker___setDashPattern_dashPattern_atList2(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QPainterPathStroker) __setDashPattern_dashPattern_setList2(i float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker___setDashPattern_dashPattern_setList2(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QPainterPathStroker) __setDashPattern_dashPattern_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPathStroker___setDashPattern_dashPattern_newList2(ptr.Pointer()))
}

func (ptr *QPainterPathStroker) __dashPattern_atList(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker___dashPattern_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QPainterPathStroker) __dashPattern_setList(i float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker___dashPattern_setList(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QPainterPathStroker) __dashPattern_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPainterPathStroker___dashPattern_newList(ptr.Pointer()))
}

type QPalette struct {
	ptr unsafe.Pointer
}

type QPalette_ITF interface {
	QPalette_PTR() *QPalette
}

func (ptr *QPalette) QPalette_PTR() *QPalette {
	return ptr
}

func (ptr *QPalette) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPalette) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPalette(ptr QPalette_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPalette_PTR().Pointer()
	}
	return nil
}

func NewQPaletteFromPointer(ptr unsafe.Pointer) *QPalette {
	var n = new(QPalette)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPalette__ColorGroup
//QPalette::ColorGroup
type QPalette__ColorGroup int64

const (
	QPalette__Active       QPalette__ColorGroup = QPalette__ColorGroup(0)
	QPalette__Disabled     QPalette__ColorGroup = QPalette__ColorGroup(1)
	QPalette__Inactive     QPalette__ColorGroup = QPalette__ColorGroup(2)
	QPalette__NColorGroups QPalette__ColorGroup = QPalette__ColorGroup(3)
	QPalette__Current      QPalette__ColorGroup = QPalette__ColorGroup(4)
	QPalette__All          QPalette__ColorGroup = QPalette__ColorGroup(5)
	QPalette__Normal       QPalette__ColorGroup = QPalette__ColorGroup(QPalette__Active)
)

//go:generate stringer -type=QPalette__ColorRole
//QPalette::ColorRole
type QPalette__ColorRole int64

var (
	QPalette__WindowText      QPalette__ColorRole = QPalette__ColorRole(0)
	QPalette__Button          QPalette__ColorRole = QPalette__ColorRole(1)
	QPalette__Light           QPalette__ColorRole = QPalette__ColorRole(2)
	QPalette__Midlight        QPalette__ColorRole = QPalette__ColorRole(3)
	QPalette__Dark            QPalette__ColorRole = QPalette__ColorRole(4)
	QPalette__Mid             QPalette__ColorRole = QPalette__ColorRole(5)
	QPalette__Text            QPalette__ColorRole = QPalette__ColorRole(6)
	QPalette__BrightText      QPalette__ColorRole = QPalette__ColorRole(7)
	QPalette__ButtonText      QPalette__ColorRole = QPalette__ColorRole(8)
	QPalette__Base            QPalette__ColorRole = QPalette__ColorRole(9)
	QPalette__Window          QPalette__ColorRole = QPalette__ColorRole(10)
	QPalette__Shadow          QPalette__ColorRole = QPalette__ColorRole(11)
	QPalette__Highlight       QPalette__ColorRole = QPalette__ColorRole(12)
	QPalette__HighlightedText QPalette__ColorRole = QPalette__ColorRole(13)
	QPalette__Link            QPalette__ColorRole = QPalette__ColorRole(14)
	QPalette__LinkVisited     QPalette__ColorRole = QPalette__ColorRole(15)
	QPalette__AlternateBase   QPalette__ColorRole = QPalette__ColorRole(16)
	QPalette__NoRole          QPalette__ColorRole = QPalette__ColorRole(17)
	QPalette__ToolTipBase     QPalette__ColorRole = QPalette__ColorRole(18)
	QPalette__ToolTipText     QPalette__ColorRole = QPalette__ColorRole(19)
	QPalette__NColorRoles     QPalette__ColorRole = QPalette__ColorRole(C.QPalette_NColorRoles_Type())
	QPalette__Foreground      QPalette__ColorRole = QPalette__ColorRole(QPalette__WindowText)
	QPalette__Background      QPalette__ColorRole = QPalette__ColorRole(QPalette__Window)
)

func NewQPalette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette8(other QPalette_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette8(PointerFromQPalette(other)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette3(button core.Qt__GlobalColor) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette3(C.longlong(button)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette5(windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette5(PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette2(button QColor_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette2(PointerFromQColor(button)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette4(button QColor_ITF, window QColor_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette4(PointerFromQColor(button), PointerFromQColor(window)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette7(p QPalette_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette7(PointerFromQPalette(p)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QPalette) SetBrush2(group QPalette__ColorGroup, role QPalette__ColorRole, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetBrush2(ptr.Pointer(), C.longlong(group), C.longlong(role), PointerFromQBrush(brush))
	}
}

func (ptr *QPalette) SetBrush(role QPalette__ColorRole, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetBrush(ptr.Pointer(), C.longlong(role), PointerFromQBrush(brush))
	}
}

func (ptr *QPalette) SetColor(group QPalette__ColorGroup, role QPalette__ColorRole, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColor(ptr.Pointer(), C.longlong(group), C.longlong(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColor2(role QPalette__ColorRole, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColor2(ptr.Pointer(), C.longlong(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColorGroup(cg QPalette__ColorGroup, windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColorGroup(ptr.Pointer(), C.longlong(cg), PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window))
	}
}

func (ptr *QPalette) SetCurrentColorGroup(cg QPalette__ColorGroup) {
	if ptr.Pointer() != nil {
		C.QPalette_SetCurrentColorGroup(ptr.Pointer(), C.longlong(cg))
	}
}

func (ptr *QPalette) Swap(other QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_Swap(ptr.Pointer(), PointerFromQPalette(other))
	}
}

func (ptr *QPalette) DestroyQPalette() {
	if ptr.Pointer() != nil {
		C.QPalette_DestroyQPalette(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPalette) CurrentColorGroup() QPalette__ColorGroup {
	if ptr.Pointer() != nil {
		return QPalette__ColorGroup(C.QPalette_CurrentColorGroup(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPalette) Resolve(other QPalette_ITF) *QPalette {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPaletteFromPointer(C.QPalette_Resolve(ptr.Pointer(), PointerFromQPalette(other)))
		runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QPalette) IsBrushSet(cg QPalette__ColorGroup, cr QPalette__ColorRole) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsBrushSet(ptr.Pointer(), C.longlong(cg), C.longlong(cr)) != 0
	}
	return false
}

func (ptr *QPalette) IsCopyOf(p QPalette_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsCopyOf(ptr.Pointer(), PointerFromQPalette(p)) != 0
	}
	return false
}

func (ptr *QPalette) IsEqual(cg1 QPalette__ColorGroup, cg2 QPalette__ColorGroup) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsEqual(ptr.Pointer(), C.longlong(cg1), C.longlong(cg2)) != 0
	}
	return false
}

func (ptr *QPalette) AlternateBase() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_AlternateBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Base() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Base(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) BrightText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_BrightText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Brush(group QPalette__ColorGroup, role QPalette__ColorRole) *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush(ptr.Pointer(), C.longlong(group), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) Brush2(role QPalette__ColorRole) *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush2(ptr.Pointer(), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) Button() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Button(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ButtonText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ButtonText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Dark() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Dark(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Highlight() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Highlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) HighlightedText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_HighlightedText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Light() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Light(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Link() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Link(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) LinkVisited() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_LinkVisited(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Mid() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Mid(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Midlight() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Midlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Shadow() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Shadow(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Text() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Text(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipBase() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Window() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) WindowText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_WindowText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Color(group QPalette__ColorGroup, role QPalette__ColorRole) *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color(ptr.Pointer(), C.longlong(group), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) Color2(role QPalette__ColorRole) *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color2(ptr.Pointer(), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QPalette_CacheKey(ptr.Pointer()))
	}
	return 0
}

type QPdf struct {
	ptr unsafe.Pointer
}

type QPdf_ITF interface {
	QPdf_PTR() *QPdf
}

func (ptr *QPdf) QPdf_PTR() *QPdf {
	return ptr
}

func (ptr *QPdf) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPdf) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPdf(ptr QPdf_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPdf_PTR().Pointer()
	}
	return nil
}

func NewQPdfFromPointer(ptr unsafe.Pointer) *QPdf {
	var n = new(QPdf)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPdf) DestroyQPdf() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QPdf__PathFlags
//QPdf::PathFlags
type QPdf__PathFlags int64

const (
	QPdf__ClipPath          QPdf__PathFlags = QPdf__PathFlags(0)
	QPdf__FillPath          QPdf__PathFlags = QPdf__PathFlags(1)
	QPdf__StrokePath        QPdf__PathFlags = QPdf__PathFlags(2)
	QPdf__FillAndStrokePath QPdf__PathFlags = QPdf__PathFlags(3)
)

type QPdfWriter struct {
	core.QObject
	QPagedPaintDevice
}

type QPdfWriter_ITF interface {
	core.QObject_ITF
	QPagedPaintDevice_ITF
	QPdfWriter_PTR() *QPdfWriter
}

func (ptr *QPdfWriter) QPdfWriter_PTR() *QPdfWriter {
	return ptr
}

func (ptr *QPdfWriter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QPdfWriter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QPagedPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQPdfWriter(ptr QPdfWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPdfWriter_PTR().Pointer()
	}
	return nil
}

func NewQPdfWriterFromPointer(ptr unsafe.Pointer) *QPdfWriter {
	var n = new(QPdfWriter)
	n.SetPointer(ptr)
	return n
}
func NewQPdfWriter2(device core.QIODevice_ITF) *QPdfWriter {
	var tmpValue = NewQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter2(core.PointerFromQIODevice(device)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQPdfWriter(filename string) *QPdfWriter {
	var filenameC *C.char
	if filename != "" {
		filenameC = C.CString(filename)
		defer C.free(unsafe.Pointer(filenameC))
	}
	var tmpValue = NewQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter(filenameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QPdfWriter) SetCreator(creator string) {
	if ptr.Pointer() != nil {
		var creatorC *C.char
		if creator != "" {
			creatorC = C.CString(creator)
			defer C.free(unsafe.Pointer(creatorC))
		}
		C.QPdfWriter_SetCreator(ptr.Pointer(), creatorC)
	}
}

func (ptr *QPdfWriter) SetResolution(resolution int) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetResolution(ptr.Pointer(), C.int(int32(resolution)))
	}
}

func (ptr *QPdfWriter) SetTitle(title string) {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		C.QPdfWriter_SetTitle(ptr.Pointer(), titleC)
	}
}

func (ptr *QPdfWriter) DestroyQPdfWriter() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DestroyQPdfWriter(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPdfWriter) Creator() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPdfWriter_Creator(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPdfWriter) Title() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPdfWriter_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPdfWriter) Resolution() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPdfWriter_Resolution(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPdfWriter) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QPdfWriter___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QPdfWriter) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QPdfWriter) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPdfWriter___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QPdfWriter) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPdfWriter___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPdfWriter) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPdfWriter) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QPdfWriter___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QPdfWriter) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPdfWriter___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPdfWriter) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPdfWriter) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QPdfWriter___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QPdfWriter) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPdfWriter___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPdfWriter) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPdfWriter) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPdfWriter___findChildren_newList(ptr.Pointer()))
}

func (ptr *QPdfWriter) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPdfWriter___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPdfWriter) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPdfWriter) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPdfWriter___children_newList(ptr.Pointer()))
}

//export callbackQPdfWriter_Event
func callbackQPdfWriter_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QPdfWriter) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQPdfWriter_EventFilter
func callbackQPdfWriter_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QPdfWriter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPdfWriter_ChildEvent
func callbackQPdfWriter_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QPdfWriter) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQPdfWriter_ConnectNotify
func callbackQPdfWriter_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_CustomEvent
func callbackQPdfWriter_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QPdfWriter) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQPdfWriter_DeleteLater
func callbackQPdfWriter_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPdfWriterFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPdfWriter) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPdfWriter) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPdfWriter_Destroyed
func callbackQPdfWriter_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQPdfWriter_DisconnectNotify
func callbackQPdfWriter_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_ObjectNameChanged
func callbackQPdfWriter_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQPdfWriter_TimerEvent
func callbackQPdfWriter_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QPdfWriter) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQPdfWriter_MetaObject
func callbackQPdfWriter_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQPdfWriterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPdfWriter) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPdfWriter_NewPage
func callbackQPdfWriter_NewPage(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "newPage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).NewPageDefault())))
}

func (ptr *QPdfWriter) NewPage() bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPdfWriter) NewPageDefault() bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPageDefault(ptr.Pointer()) != 0
	}
	return false
}

type QPen struct {
	ptr unsafe.Pointer
}

type QPen_ITF interface {
	QPen_PTR() *QPen
}

func (ptr *QPen) QPen_PTR() *QPen {
	return ptr
}

func (ptr *QPen) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPen) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPen(ptr QPen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPen_PTR().Pointer()
	}
	return nil
}

func NewQPenFromPointer(ptr unsafe.Pointer) *QPen {
	var n = new(QPen)
	n.SetPointer(ptr)
	return n
}
func NewQPen() *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen())
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen6(pen QPen_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen6(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen2(style core.Qt__PenStyle) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen2(C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen4(brush QBrush_ITF, width float64, style core.Qt__PenStyle, cap core.Qt__PenCapStyle, join core.Qt__PenJoinStyle) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen4(PointerFromQBrush(brush), C.double(width), C.longlong(style), C.longlong(cap), C.longlong(join)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen3(color QColor_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen3(PointerFromQColor(color)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen5(pen QPen_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen5(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func (ptr *QPen) SetBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPen) SetCapStyle(style core.Qt__PenCapStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetCapStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPen) SetCosmetic(cosmetic bool) {
	if ptr.Pointer() != nil {
		C.QPen_SetCosmetic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(cosmetic))))
	}
}

func (ptr *QPen) SetDashOffset(offset float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPen) SetDashPattern(pattern []float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetDashPattern(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQPenFromPointer(NewQPenFromPointer(nil).__setDashPattern_pattern_newList())
			for _, v := range pattern {
				tmpList.__setDashPattern_pattern_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QPen) SetJoinStyle(style core.Qt__PenJoinStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetJoinStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetMiterLimit(limit float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPen) SetStyle(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetWidth(width int) {
	if ptr.Pointer() != nil {
		C.QPen_SetWidth(ptr.Pointer(), C.int(int32(width)))
	}
}

func (ptr *QPen) SetWidthF(width float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetWidthF(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPen) Swap(other QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_Swap(ptr.Pointer(), PointerFromQPen(other))
	}
}

func (ptr *QPen) DestroyQPen() {
	if ptr.Pointer() != nil {
		C.QPen_DestroyQPen(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPen) Brush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPen_Brush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPen) Color() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QPen_Color(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QPen) DashPattern() []float64 {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []float64 {
			var out = make([]float64, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPenFromPointer(l.data).__dashPattern_atList(i)
			}
			return out
		}(C.QPen_DashPattern(ptr.Pointer()))
	}
	return make([]float64, 0)
}

func (ptr *QPen) CapStyle() core.Qt__PenCapStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPen_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) JoinStyle() core.Qt__PenJoinStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPen_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) Style() core.Qt__PenStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenStyle(C.QPen_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) IsCosmetic() bool {
	if ptr.Pointer() != nil {
		return C.QPen_IsCosmetic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) IsSolid() bool {
	if ptr.Pointer() != nil {
		return C.QPen_IsSolid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPen_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPen) DashOffset() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) MiterLimit() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) WidthF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_WidthF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) __setDashPattern_pattern_atList(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen___setDashPattern_pattern_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QPen) __setDashPattern_pattern_setList(i float64) {
	if ptr.Pointer() != nil {
		C.QPen___setDashPattern_pattern_setList(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QPen) __setDashPattern_pattern_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPen___setDashPattern_pattern_newList(ptr.Pointer()))
}

func (ptr *QPen) __dashPattern_atList(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen___dashPattern_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QPen) __dashPattern_setList(i float64) {
	if ptr.Pointer() != nil {
		C.QPen___dashPattern_setList(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QPen) __dashPattern_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPen___dashPattern_newList(ptr.Pointer()))
}

type QPicture struct {
	QPaintDevice
}

type QPicture_ITF interface {
	QPaintDevice_ITF
	QPicture_PTR() *QPicture
}

func (ptr *QPicture) QPicture_PTR() *QPicture {
	return ptr
}

func (ptr *QPicture) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (ptr *QPicture) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQPicture(ptr QPicture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPicture_PTR().Pointer()
	}
	return nil
}

func NewQPictureFromPointer(ptr unsafe.Pointer) *QPicture {
	var n = new(QPicture)
	n.SetPointer(ptr)
	return n
}
func NewQPicture2(pic QPicture_ITF) *QPicture {
	return NewQPictureFromPointer(C.QPicture_NewQPicture2(PointerFromQPicture(pic)))
}

func NewQPicture(formatVersion int) *QPicture {
	return NewQPictureFromPointer(C.QPicture_NewQPicture(C.int(int32(formatVersion))))
}

func (ptr *QPicture) Load2(dev core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPicture_Load2(ptr.Pointer(), core.PointerFromQIODevice(dev), formatC) != 0
	}
	return false
}

func (ptr *QPicture) Load(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPicture_Load(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QPicture) Play(painter QPainter_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPicture_Play(ptr.Pointer(), PointerFromQPainter(painter)) != 0
	}
	return false
}

func (ptr *QPicture) Save2(dev core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPicture_Save2(ptr.Pointer(), core.PointerFromQIODevice(dev), formatC) != 0
	}
	return false
}

func (ptr *QPicture) Save(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPicture_Save(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QPicture) SetBoundingRect(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture_SetBoundingRect(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

//export callbackQPicture_SetData
func callbackQPicture_SetData(ptr unsafe.Pointer, data C.struct_QtGui_PackedString, size C.uint) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setData"); signal != nil {
		signal.(func(string, uint))(cGoUnpackString(data), uint(uint32(size)))
	} else {
		NewQPictureFromPointer(ptr).SetDataDefault(cGoUnpackString(data), uint(uint32(size)))
	}
}

func (ptr *QPicture) ConnectSetData(f func(data string, size uint)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setData"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setData", func(data string, size uint) {
				signal.(func(string, uint))(data, size)
				f(data, size)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setData", f)
		}
	}
}

func (ptr *QPicture) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setData")
	}
}

func (ptr *QPicture) SetData(data string, size uint) {
	if ptr.Pointer() != nil {
		var dataC *C.char
		if data != "" {
			dataC = C.CString(data)
			defer C.free(unsafe.Pointer(dataC))
		}
		C.QPicture_SetData(ptr.Pointer(), dataC, C.uint(uint32(size)))
	}
}

func (ptr *QPicture) SetDataDefault(data string, size uint) {
	if ptr.Pointer() != nil {
		var dataC *C.char
		if data != "" {
			dataC = C.CString(data)
			defer C.free(unsafe.Pointer(dataC))
		}
		C.QPicture_SetDataDefault(ptr.Pointer(), dataC, C.uint(uint32(size)))
	}
}

func (ptr *QPicture) Swap(other QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture_Swap(ptr.Pointer(), PointerFromQPicture(other))
	}
}

func (ptr *QPicture) DestroyQPicture() {
	if ptr.Pointer() != nil {
		C.QPicture_DestroyQPicture(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPicture) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPicture_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPicture) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPicture_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPicture) Data() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPicture_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPicture) Size() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QPicture_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPicture) __inputFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QPicture___inputFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QPicture) __inputFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture___inputFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QPicture) __inputFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPicture___inputFormats_newList(ptr.Pointer()))
}

func (ptr *QPicture) __outputFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QPicture___outputFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QPicture) __outputFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture___outputFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QPicture) __outputFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPicture___outputFormats_newList(ptr.Pointer()))
}

//export callbackQPicture_PaintEngine
func callbackQPicture_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPictureFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPicture) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPicture_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPicture) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPicture_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QPixelFormat struct {
	ptr unsafe.Pointer
}

type QPixelFormat_ITF interface {
	QPixelFormat_PTR() *QPixelFormat
}

func (ptr *QPixelFormat) QPixelFormat_PTR() *QPixelFormat {
	return ptr
}

func (ptr *QPixelFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPixelFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPixelFormat(ptr QPixelFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixelFormat_PTR().Pointer()
	}
	return nil
}

func NewQPixelFormatFromPointer(ptr unsafe.Pointer) *QPixelFormat {
	var n = new(QPixelFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPixelFormat) DestroyQPixelFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QPixelFormat__AlphaPosition
//QPixelFormat::AlphaPosition
type QPixelFormat__AlphaPosition int64

const (
	QPixelFormat__AtBeginning QPixelFormat__AlphaPosition = QPixelFormat__AlphaPosition(0)
	QPixelFormat__AtEnd       QPixelFormat__AlphaPosition = QPixelFormat__AlphaPosition(1)
)

//go:generate stringer -type=QPixelFormat__AlphaPremultiplied
//QPixelFormat::AlphaPremultiplied
type QPixelFormat__AlphaPremultiplied int64

const (
	QPixelFormat__NotPremultiplied QPixelFormat__AlphaPremultiplied = QPixelFormat__AlphaPremultiplied(0)
	QPixelFormat__Premultiplied    QPixelFormat__AlphaPremultiplied = QPixelFormat__AlphaPremultiplied(1)
)

//go:generate stringer -type=QPixelFormat__AlphaUsage
//QPixelFormat::AlphaUsage
type QPixelFormat__AlphaUsage int64

const (
	QPixelFormat__UsesAlpha    QPixelFormat__AlphaUsage = QPixelFormat__AlphaUsage(0)
	QPixelFormat__IgnoresAlpha QPixelFormat__AlphaUsage = QPixelFormat__AlphaUsage(1)
)

//go:generate stringer -type=QPixelFormat__ByteOrder
//QPixelFormat::ByteOrder
type QPixelFormat__ByteOrder int64

const (
	QPixelFormat__LittleEndian        QPixelFormat__ByteOrder = QPixelFormat__ByteOrder(0)
	QPixelFormat__BigEndian           QPixelFormat__ByteOrder = QPixelFormat__ByteOrder(1)
	QPixelFormat__CurrentSystemEndian QPixelFormat__ByteOrder = QPixelFormat__ByteOrder(2)
)

//go:generate stringer -type=QPixelFormat__ColorModel
//QPixelFormat::ColorModel
type QPixelFormat__ColorModel int64

const (
	QPixelFormat__RGB       QPixelFormat__ColorModel = QPixelFormat__ColorModel(0)
	QPixelFormat__BGR       QPixelFormat__ColorModel = QPixelFormat__ColorModel(1)
	QPixelFormat__Indexed   QPixelFormat__ColorModel = QPixelFormat__ColorModel(2)
	QPixelFormat__Grayscale QPixelFormat__ColorModel = QPixelFormat__ColorModel(3)
	QPixelFormat__CMYK      QPixelFormat__ColorModel = QPixelFormat__ColorModel(4)
	QPixelFormat__HSL       QPixelFormat__ColorModel = QPixelFormat__ColorModel(5)
	QPixelFormat__HSV       QPixelFormat__ColorModel = QPixelFormat__ColorModel(6)
	QPixelFormat__YUV       QPixelFormat__ColorModel = QPixelFormat__ColorModel(7)
	QPixelFormat__Alpha     QPixelFormat__ColorModel = QPixelFormat__ColorModel(8)
)

//go:generate stringer -type=QPixelFormat__TypeInterpretation
//QPixelFormat::TypeInterpretation
type QPixelFormat__TypeInterpretation int64

const (
	QPixelFormat__UnsignedInteger QPixelFormat__TypeInterpretation = QPixelFormat__TypeInterpretation(0)
	QPixelFormat__UnsignedShort   QPixelFormat__TypeInterpretation = QPixelFormat__TypeInterpretation(1)
	QPixelFormat__UnsignedByte    QPixelFormat__TypeInterpretation = QPixelFormat__TypeInterpretation(2)
	QPixelFormat__FloatingPoint   QPixelFormat__TypeInterpretation = QPixelFormat__TypeInterpretation(3)
)

//go:generate stringer -type=QPixelFormat__YUVLayout
//QPixelFormat::YUVLayout
type QPixelFormat__YUVLayout int64

const (
	QPixelFormat__YUV444   QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(0)
	QPixelFormat__YUV422   QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(1)
	QPixelFormat__YUV411   QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(2)
	QPixelFormat__YUV420P  QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(3)
	QPixelFormat__YUV420SP QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(4)
	QPixelFormat__YV12     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(5)
	QPixelFormat__UYVY     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(6)
	QPixelFormat__YUYV     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(7)
	QPixelFormat__NV12     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(8)
	QPixelFormat__NV21     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(9)
	QPixelFormat__IMC1     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(10)
	QPixelFormat__IMC2     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(11)
	QPixelFormat__IMC3     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(12)
	QPixelFormat__IMC4     QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(13)
	QPixelFormat__Y8       QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(14)
	QPixelFormat__Y16      QPixelFormat__YUVLayout = QPixelFormat__YUVLayout(15)
)

func NewQPixelFormat() *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QPixelFormat_NewQPixelFormat())
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func NewQPixelFormat2(colorModel QPixelFormat__ColorModel, firstSize string, secondSize string, thirdSize string, fourthSize string, fifthSize string, alphaSize string, alphaUsage QPixelFormat__AlphaUsage, alphaPosition QPixelFormat__AlphaPosition, premultiplied QPixelFormat__AlphaPremultiplied, typeInterpretation QPixelFormat__TypeInterpretation, byteOrder QPixelFormat__ByteOrder, subEnum string) *QPixelFormat {
	var firstSizeC *C.char
	if firstSize != "" {
		firstSizeC = C.CString(firstSize)
		defer C.free(unsafe.Pointer(firstSizeC))
	}
	var secondSizeC *C.char
	if secondSize != "" {
		secondSizeC = C.CString(secondSize)
		defer C.free(unsafe.Pointer(secondSizeC))
	}
	var thirdSizeC *C.char
	if thirdSize != "" {
		thirdSizeC = C.CString(thirdSize)
		defer C.free(unsafe.Pointer(thirdSizeC))
	}
	var fourthSizeC *C.char
	if fourthSize != "" {
		fourthSizeC = C.CString(fourthSize)
		defer C.free(unsafe.Pointer(fourthSizeC))
	}
	var fifthSizeC *C.char
	if fifthSize != "" {
		fifthSizeC = C.CString(fifthSize)
		defer C.free(unsafe.Pointer(fifthSizeC))
	}
	var alphaSizeC *C.char
	if alphaSize != "" {
		alphaSizeC = C.CString(alphaSize)
		defer C.free(unsafe.Pointer(alphaSizeC))
	}
	var subEnumC *C.char
	if subEnum != "" {
		subEnumC = C.CString(subEnum)
		defer C.free(unsafe.Pointer(subEnumC))
	}
	var tmpValue = NewQPixelFormatFromPointer(C.QPixelFormat_NewQPixelFormat2(C.longlong(colorModel), firstSizeC, secondSizeC, thirdSizeC, fourthSizeC, fifthSizeC, alphaSizeC, C.longlong(alphaUsage), C.longlong(alphaPosition), C.longlong(premultiplied), C.longlong(typeInterpretation), C.longlong(byteOrder), subEnumC))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func (ptr *QPixelFormat) AlphaPosition() QPixelFormat__AlphaPosition {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPosition(C.QPixelFormat_AlphaPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) Premultiplied() QPixelFormat__AlphaPremultiplied {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPremultiplied(C.QPixelFormat_Premultiplied(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) AlphaUsage() QPixelFormat__AlphaUsage {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaUsage(C.QPixelFormat_AlphaUsage(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) ByteOrder() QPixelFormat__ByteOrder {
	if ptr.Pointer() != nil {
		return QPixelFormat__ByteOrder(C.QPixelFormat_ByteOrder(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) ColorModel() QPixelFormat__ColorModel {
	if ptr.Pointer() != nil {
		return QPixelFormat__ColorModel(C.QPixelFormat_ColorModel(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) TypeInterpretation() QPixelFormat__TypeInterpretation {
	if ptr.Pointer() != nil {
		return QPixelFormat__TypeInterpretation(C.QPixelFormat_TypeInterpretation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) YuvLayout() QPixelFormat__YUVLayout {
	if ptr.Pointer() != nil {
		return QPixelFormat__YUVLayout(C.QPixelFormat_YuvLayout(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) AlphaSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_AlphaSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BitsPerPixel() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BitsPerPixel(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BlackSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BlackSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BlueSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BlueSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BrightnessSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BrightnessSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) ChannelCount() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_ChannelCount(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) CyanSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_CyanSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) GreenSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_GreenSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) HueSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_HueSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) LightnessSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_LightnessSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) MagentaSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_MagentaSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) RedSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_RedSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) SaturationSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_SaturationSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) YellowSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_YellowSize(ptr.Pointer()))
	}
	return ""
}

type QPixmap struct {
	QPaintDevice
}

type QPixmap_ITF interface {
	QPaintDevice_ITF
	QPixmap_PTR() *QPixmap
}

func (ptr *QPixmap) QPixmap_PTR() *QPixmap {
	return ptr
}

func (ptr *QPixmap) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (ptr *QPixmap) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQPixmap(ptr QPixmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmap_PTR().Pointer()
	}
	return nil
}

func NewQPixmapFromPointer(ptr unsafe.Pointer) *QPixmap {
	var n = new(QPixmap)
	n.SetPointer(ptr)
	return n
}
func QPixmap_FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func QPixmap_FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func QPixmap_FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func NewQPixmap() *QPixmap {
	return NewQPixmapFromPointer(C.QPixmap_NewQPixmap())
}

func NewQPixmap7(pixmap QPixmap_ITF) *QPixmap {
	return NewQPixmapFromPointer(C.QPixmap_NewQPixmap7(PointerFromQPixmap(pixmap)))
}

func NewQPixmap4(size core.QSize_ITF) *QPixmap {
	return NewQPixmapFromPointer(C.QPixmap_NewQPixmap4(core.PointerFromQSize(size)))
}

func NewQPixmap5(fileName string, format string, flags core.Qt__ImageConversionFlag) *QPixmap {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var formatC *C.char
	if format != "" {
		formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
	}
	return NewQPixmapFromPointer(C.QPixmap_NewQPixmap5(fileNameC, formatC, C.longlong(flags)))
}

func NewQPixmap3(width int, height int) *QPixmap {
	return NewQPixmapFromPointer(C.QPixmap_NewQPixmap3(C.int(int32(width)), C.int(int32(height))))
}

func QPixmap_TrueMatrix(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QPixmap_QPixmap_TrueMatrix(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QPixmap) TrueMatrix(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QPixmap_QPixmap_TrueMatrix(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QPixmap) ConvertFromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_ConvertFromImage(ptr.Pointer(), PointerFromQImage(image), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Load(fileName string, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPixmap_Load(ptr.Pointer(), fileNameC, formatC, C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) LoadFromData2(data core.QByteArray_ITF, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPixmap_LoadFromData2(ptr.Pointer(), core.PointerFromQByteArray(data), formatC, C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) LoadFromData(data string, len uint, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var dataC *C.char
		if data != "" {
			dataC = C.CString(data)
			defer C.free(unsafe.Pointer(dataC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPixmap_LoadFromData(ptr.Pointer(), dataC, C.uint(uint32(len)), formatC, C.longlong(flags)) != 0
	}
	return false
}

func QPixmap_DefaultDepth() int {
	return int(int32(C.QPixmap_QPixmap_DefaultDepth()))
}

func (ptr *QPixmap) DefaultDepth() int {
	return int(int32(C.QPixmap_QPixmap_DefaultDepth()))
}

func (ptr *QPixmap) Detach() {
	if ptr.Pointer() != nil {
		C.QPixmap_Detach(ptr.Pointer())
	}
}

func (ptr *QPixmap) Fill(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Fill(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPixmap) Scroll2(dx int, dy int, rect core.QRect_ITF, exposed QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Scroll2(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)), core.PointerFromQRect(rect), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) Scroll(dx int, dy int, x int, y int, width int, height int, exposed QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Scroll(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) SetDevicePixelRatio(scaleFactor float64) {
	if ptr.Pointer() != nil {
		C.QPixmap_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QPixmap) SetMask(mask QBitmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_SetMask(ptr.Pointer(), PointerFromQBitmap(mask))
	}
}

func (ptr *QPixmap) Swap(other QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Swap(ptr.Pointer(), PointerFromQPixmap(other))
	}
}

func (ptr *QPixmap) DestroyQPixmap() {
	if ptr.Pointer() != nil {
		C.QPixmap_DestroyQPixmap(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPixmap) CreateHeuristicMask(clipTight bool) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_CreateHeuristicMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(clipTight)))))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) CreateMaskFromColor(maskColor QColor_ITF, mode core.Qt__MaskMode) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_CreateMaskFromColor(ptr.Pointer(), PointerFromQColor(maskColor), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Mask() *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_Mask(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) ToImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QPixmap_ToImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Copy(rectangle core.QRect_ITF) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Copy2(x int, y int, width int, height int) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Copy2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Scaled2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_ScaledToHeight(ptr.Pointer(), C.int(int32(height)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_ScaledToWidth(ptr.Pointer(), C.int(int32(width)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Transformed(transform QTransform_ITF, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Transformed(ptr.Pointer(), PointerFromQTransform(transform), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPixmap_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPixmap_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) HasAlpha() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) HasAlphaChannel() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) IsQBitmap() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_IsQBitmap(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPixmap_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QPixmap) Save(fileName string, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		var formatC *C.char
		if format != "" {
			formatC = C.CString(format)
			defer C.free(unsafe.Pointer(formatC))
		}
		return C.QPixmap_Save(ptr.Pointer(), fileNameC, formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QPixmap) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QPixmap_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPixmap_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

//export callbackQPixmap_PaintEngine
func callbackQPixmap_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPixmapFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPixmap) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPixmap_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPixmap) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPixmap_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QPixmapCache struct {
	ptr unsafe.Pointer
}

type QPixmapCache_ITF interface {
	QPixmapCache_PTR() *QPixmapCache
}

func (ptr *QPixmapCache) QPixmapCache_PTR() *QPixmapCache {
	return ptr
}

func (ptr *QPixmapCache) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPixmapCache) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPixmapCache(ptr QPixmapCache_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmapCache_PTR().Pointer()
	}
	return nil
}

func NewQPixmapCacheFromPointer(ptr unsafe.Pointer) *QPixmapCache {
	var n = new(QPixmapCache)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPixmapCache) DestroyQPixmapCache() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QPixmapCache_Find(key string, pixmap QPixmap_ITF) bool {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	return C.QPixmapCache_QPixmapCache_Find(keyC, PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Find(key string, pixmap QPixmap_ITF) bool {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	return C.QPixmapCache_QPixmapCache_Find(keyC, PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_Insert(key string, pixmap QPixmap_ITF) bool {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	return C.QPixmapCache_QPixmapCache_Insert(keyC, PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Insert(key string, pixmap QPixmap_ITF) bool {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	return C.QPixmapCache_QPixmapCache_Insert(keyC, PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_CacheLimit() int {
	return int(int32(C.QPixmapCache_QPixmapCache_CacheLimit()))
}

func (ptr *QPixmapCache) CacheLimit() int {
	return int(int32(C.QPixmapCache_QPixmapCache_CacheLimit()))
}

func QPixmapCache_Clear() {
	C.QPixmapCache_QPixmapCache_Clear()
}

func (ptr *QPixmapCache) Clear() {
	C.QPixmapCache_QPixmapCache_Clear()
}

func QPixmapCache_Remove(key string) {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	C.QPixmapCache_QPixmapCache_Remove(keyC)
}

func (ptr *QPixmapCache) Remove(key string) {
	var keyC *C.char
	if key != "" {
		keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
	}
	C.QPixmapCache_QPixmapCache_Remove(keyC)
}

func QPixmapCache_SetCacheLimit(n int) {
	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(int32(n)))
}

func (ptr *QPixmapCache) SetCacheLimit(n int) {
	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(int32(n)))
}

type QPlatformGraphicsBuffer struct {
	core.QObject
}

type QPlatformGraphicsBuffer_ITF interface {
	core.QObject_ITF
	QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer
}

func (ptr *QPlatformGraphicsBuffer) QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer {
	return ptr
}

func (ptr *QPlatformGraphicsBuffer) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QPlatformGraphicsBuffer) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQPlatformGraphicsBuffer(ptr QPlatformGraphicsBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformGraphicsBuffer_PTR().Pointer()
	}
	return nil
}

func NewQPlatformGraphicsBufferFromPointer(ptr unsafe.Pointer) *QPlatformGraphicsBuffer {
	var n = new(QPlatformGraphicsBuffer)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QPlatformGraphicsBuffer__AccessType
//QPlatformGraphicsBuffer::AccessType
type QPlatformGraphicsBuffer__AccessType int64

const (
	QPlatformGraphicsBuffer__None          QPlatformGraphicsBuffer__AccessType = QPlatformGraphicsBuffer__AccessType(0x00)
	QPlatformGraphicsBuffer__SWReadAccess  QPlatformGraphicsBuffer__AccessType = QPlatformGraphicsBuffer__AccessType(0x01)
	QPlatformGraphicsBuffer__SWWriteAccess QPlatformGraphicsBuffer__AccessType = QPlatformGraphicsBuffer__AccessType(0x02)
	QPlatformGraphicsBuffer__TextureAccess QPlatformGraphicsBuffer__AccessType = QPlatformGraphicsBuffer__AccessType(0x04)
	QPlatformGraphicsBuffer__HWCompositor  QPlatformGraphicsBuffer__AccessType = QPlatformGraphicsBuffer__AccessType(0x08)
)

//go:generate stringer -type=QPlatformGraphicsBuffer__Origin
//QPlatformGraphicsBuffer::Origin
type QPlatformGraphicsBuffer__Origin int64

const (
	QPlatformGraphicsBuffer__OriginBottomLeft QPlatformGraphicsBuffer__Origin = QPlatformGraphicsBuffer__Origin(0)
	QPlatformGraphicsBuffer__OriginTopLeft    QPlatformGraphicsBuffer__Origin = QPlatformGraphicsBuffer__Origin(1)
)

type QPlatformSurfaceEvent struct {
	core.QEvent
}

type QPlatformSurfaceEvent_ITF interface {
	core.QEvent_ITF
	QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent
}

func (ptr *QPlatformSurfaceEvent) QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent {
	return ptr
}

func (ptr *QPlatformSurfaceEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QPlatformSurfaceEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQPlatformSurfaceEvent(ptr QPlatformSurfaceEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSurfaceEvent_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSurfaceEventFromPointer(ptr unsafe.Pointer) *QPlatformSurfaceEvent {
	var n = new(QPlatformSurfaceEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPlatformSurfaceEvent) DestroyQPlatformSurfaceEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QPlatformSurfaceEvent__SurfaceEventType
//QPlatformSurfaceEvent::SurfaceEventType
type QPlatformSurfaceEvent__SurfaceEventType int64

const (
	QPlatformSurfaceEvent__SurfaceCreated            QPlatformSurfaceEvent__SurfaceEventType = QPlatformSurfaceEvent__SurfaceEventType(0)
	QPlatformSurfaceEvent__SurfaceAboutToBeDestroyed QPlatformSurfaceEvent__SurfaceEventType = QPlatformSurfaceEvent__SurfaceEventType(1)
)

func NewQPlatformSurfaceEvent(surfaceEventType QPlatformSurfaceEvent__SurfaceEventType) *QPlatformSurfaceEvent {
	return NewQPlatformSurfaceEventFromPointer(C.QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(C.longlong(surfaceEventType)))
}

func (ptr *QPlatformSurfaceEvent) SurfaceEventType() QPlatformSurfaceEvent__SurfaceEventType {
	if ptr.Pointer() != nil {
		return QPlatformSurfaceEvent__SurfaceEventType(C.QPlatformSurfaceEvent_SurfaceEventType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPlatformSurfaceEvent) M_surfaceEventType() QPlatformSurfaceEvent__SurfaceEventType {
	if ptr.Pointer() != nil {
		return QPlatformSurfaceEvent__SurfaceEventType(C.QPlatformSurfaceEvent_M_surfaceEventType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPlatformSurfaceEvent) SetM_surfaceEventType(vsu QPlatformSurfaceEvent__SurfaceEventType) {
	if ptr.Pointer() != nil {
		C.QPlatformSurfaceEvent_SetM_surfaceEventType(ptr.Pointer(), C.longlong(vsu))
	}
}

type QPlatformSystemTrayIcon struct {
	core.QObject
}

type QPlatformSystemTrayIcon_ITF interface {
	core.QObject_ITF
	QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon
}

func (ptr *QPlatformSystemTrayIcon) QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon {
	return ptr
}

func (ptr *QPlatformSystemTrayIcon) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QPlatformSystemTrayIcon) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQPlatformSystemTrayIcon(ptr QPlatformSystemTrayIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSystemTrayIcon_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSystemTrayIconFromPointer(ptr unsafe.Pointer) *QPlatformSystemTrayIcon {
	var n = new(QPlatformSystemTrayIcon)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPlatformSystemTrayIcon) DestroyQPlatformSystemTrayIcon() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QPlatformSystemTrayIcon__ActivationReason
//QPlatformSystemTrayIcon::ActivationReason
type QPlatformSystemTrayIcon__ActivationReason int64

const (
	QPlatformSystemTrayIcon__Unknown     QPlatformSystemTrayIcon__ActivationReason = QPlatformSystemTrayIcon__ActivationReason(0)
	QPlatformSystemTrayIcon__Context     QPlatformSystemTrayIcon__ActivationReason = QPlatformSystemTrayIcon__ActivationReason(1)
	QPlatformSystemTrayIcon__DoubleClick QPlatformSystemTrayIcon__ActivationReason = QPlatformSystemTrayIcon__ActivationReason(2)
	QPlatformSystemTrayIcon__Trigger     QPlatformSystemTrayIcon__ActivationReason = QPlatformSystemTrayIcon__ActivationReason(3)
	QPlatformSystemTrayIcon__MiddleClick QPlatformSystemTrayIcon__ActivationReason = QPlatformSystemTrayIcon__ActivationReason(4)
)

//go:generate stringer -type=QPlatformSystemTrayIcon__MessageIcon
//QPlatformSystemTrayIcon::MessageIcon
type QPlatformSystemTrayIcon__MessageIcon int64

const (
	QPlatformSystemTrayIcon__NoIcon      QPlatformSystemTrayIcon__MessageIcon = QPlatformSystemTrayIcon__MessageIcon(0)
	QPlatformSystemTrayIcon__Information QPlatformSystemTrayIcon__MessageIcon = QPlatformSystemTrayIcon__MessageIcon(1)
	QPlatformSystemTrayIcon__Warning     QPlatformSystemTrayIcon__MessageIcon = QPlatformSystemTrayIcon__MessageIcon(2)
	QPlatformSystemTrayIcon__Critical    QPlatformSystemTrayIcon__MessageIcon = QPlatformSystemTrayIcon__MessageIcon(3)
)

type QPointingDeviceUniqueId struct {
	ptr unsafe.Pointer
}

type QPointingDeviceUniqueId_ITF interface {
	QPointingDeviceUniqueId_PTR() *QPointingDeviceUniqueId
}

func (ptr *QPointingDeviceUniqueId) QPointingDeviceUniqueId_PTR() *QPointingDeviceUniqueId {
	return ptr
}

func (ptr *QPointingDeviceUniqueId) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QPointingDeviceUniqueId) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQPointingDeviceUniqueId(ptr QPointingDeviceUniqueId_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPointingDeviceUniqueId_PTR().Pointer()
	}
	return nil
}

func NewQPointingDeviceUniqueIdFromPointer(ptr unsafe.Pointer) *QPointingDeviceUniqueId {
	var n = new(QPointingDeviceUniqueId)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPointingDeviceUniqueId) DestroyQPointingDeviceUniqueId() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QPointingDeviceUniqueId_FromNumericId(id int64) *QPointingDeviceUniqueId {
	var tmpValue = NewQPointingDeviceUniqueIdFromPointer(C.QPointingDeviceUniqueId_QPointingDeviceUniqueId_FromNumericId(C.longlong(id)))
	runtime.SetFinalizer(tmpValue, (*QPointingDeviceUniqueId).DestroyQPointingDeviceUniqueId)
	return tmpValue
}

func (ptr *QPointingDeviceUniqueId) FromNumericId(id int64) *QPointingDeviceUniqueId {
	var tmpValue = NewQPointingDeviceUniqueIdFromPointer(C.QPointingDeviceUniqueId_QPointingDeviceUniqueId_FromNumericId(C.longlong(id)))
	runtime.SetFinalizer(tmpValue, (*QPointingDeviceUniqueId).DestroyQPointingDeviceUniqueId)
	return tmpValue
}

func NewQPointingDeviceUniqueId() *QPointingDeviceUniqueId {
	var tmpValue = NewQPointingDeviceUniqueIdFromPointer(C.QPointingDeviceUniqueId_NewQPointingDeviceUniqueId())
	runtime.SetFinalizer(tmpValue, (*QPointingDeviceUniqueId).DestroyQPointingDeviceUniqueId)
	return tmpValue
}

func (ptr *QPointingDeviceUniqueId) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPointingDeviceUniqueId_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPointingDeviceUniqueId) NumericId() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QPointingDeviceUniqueId_NumericId(ptr.Pointer()))
	}
	return 0
}

type QPolygon struct {
	core.QVector
}

type QPolygon_ITF interface {
	core.QVector_ITF
	QPolygon_PTR() *QPolygon
}

func (ptr *QPolygon) QPolygon_PTR() *QPolygon {
	return ptr
}

func (ptr *QPolygon) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector_PTR().Pointer()
	}
	return nil
}

func (ptr *QPolygon) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QVector_PTR().SetPointer(p)
	}
}

func PointerFromQPolygon(ptr QPolygon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygon_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFromPointer(ptr unsafe.Pointer) *QPolygon {
	var n = new(QPolygon)
	n.SetPointer(ptr)
	return n
}
func NewQPolygon() *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon())
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon8(other QPolygon_ITF) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon8(PointerFromQPolygon(other)))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon4(v []*core.QPoint) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon4(func() unsafe.Pointer {
		var tmpList = NewQPolygonFromPointer(NewQPolygonFromPointer(nil).__QPolygon_v_newList4())
		for _, v := range v {
			tmpList.__QPolygon_v_setList4(v)
		}
		return tmpList.Pointer()
	}()))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon7(polygon QPolygon_ITF) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon7(PointerFromQPolygon(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon5(rectangle core.QRect_ITF, closed bool) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon5(core.PointerFromQRect(rectangle), C.char(int8(qt.GoBoolToInt(closed)))))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon3(points []*core.QPoint) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon3(func() unsafe.Pointer {
		var tmpList = NewQPolygonFromPointer(NewQPolygonFromPointer(nil).__QPolygon_points_newList3())
		for _, v := range points {
			tmpList.__QPolygon_points_setList3(v)
		}
		return tmpList.Pointer()
	}()))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon2(size int) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon2(C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func (ptr *QPolygon) PutPoints3(index int, nPoints int, fromPolygon QPolygon_ITF, fromIndex int) {
	if ptr.Pointer() != nil {
		C.QPolygon_PutPoints3(ptr.Pointer(), C.int(int32(index)), C.int(int32(nPoints)), PointerFromQPolygon(fromPolygon), C.int(int32(fromIndex)))
	}
}

func (ptr *QPolygon) SetPoint2(index int, point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint2(ptr.Pointer(), C.int(int32(index)), core.PointerFromQPoint(point))
	}
}

func (ptr *QPolygon) SetPoint(index int, x int, y int) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint(ptr.Pointer(), C.int(int32(index)), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPolygon) SetPoints(nPoints int, points int) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoints(ptr.Pointer(), C.int(int32(nPoints)), C.int(int32(points)))
	}
}

func (ptr *QPolygon) Swap(other QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_Swap(ptr.Pointer(), PointerFromQPolygon(other))
	}
}

func (ptr *QPolygon) Translate2(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPolygon) Translate(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QPolygon_Translate(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QPolygon) DestroyQPolygon() {
	if ptr.Pointer() != nil {
		C.QPolygon_DestroyQPolygon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPolygon) Point2(index int) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPolygon_Point2(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Intersected(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Intersected(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Subtracted(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Subtracted(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Translated2(offset core.QPoint_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Translated2(ptr.Pointer(), core.PointerFromQPoint(offset)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Translated(dx int, dy int) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Translated(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) United(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_United(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPolygon_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) ContainsPoint(point core.QPoint_ITF, fillRule core.Qt__FillRule) bool {
	if ptr.Pointer() != nil {
		return C.QPolygon_ContainsPoint(ptr.Pointer(), core.PointerFromQPoint(point), C.longlong(fillRule)) != 0
	}
	return false
}

func (ptr *QPolygon) Point(index int, x int, y int) {
	if ptr.Pointer() != nil {
		C.QPolygon_Point(ptr.Pointer(), C.int(int32(index)), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPolygon) __QPolygon_v_atList4(i int) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPolygon___QPolygon_v_atList4(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __QPolygon_v_setList4(i core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___QPolygon_v_setList4(ptr.Pointer(), core.PointerFromQPoint(i))
	}
}

func (ptr *QPolygon) __QPolygon_v_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___QPolygon_v_newList4(ptr.Pointer()))
}

func (ptr *QPolygon) __QPolygon_points_atList3(i int) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPolygon___QPolygon_points_atList3(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __QPolygon_points_setList3(i core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___QPolygon_points_setList3(ptr.Pointer(), core.PointerFromQPoint(i))
	}
}

func (ptr *QPolygon) __QPolygon_points_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___QPolygon_points_newList3(ptr.Pointer()))
}

func (ptr *QPolygon) __QVector_other_atList5(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___QVector_other_atList5(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __QVector_other_setList5(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___QVector_other_setList5(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __QVector_other_newList5() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___QVector_other_newList5(ptr.Pointer()))
}

func (ptr *QPolygon) __QVector_other_atList4(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___QVector_other_atList4(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __QVector_other_setList4(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___QVector_other_setList4(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __QVector_other_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___QVector_other_newList4(ptr.Pointer()))
}

func (ptr *QPolygon) __fill_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___fill_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __fill_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___fill_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __fill_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___fill_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __fromList_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___fromList_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __fromList_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___fromList_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __fromList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___fromList_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __fromList_list_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___fromList_list_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __fromList_list_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___fromList_list_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __fromList_list_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___fromList_list_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __fromStdVector_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___fromStdVector_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __fromStdVector_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___fromStdVector_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __fromStdVector_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___fromStdVector_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __append_value_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___append_value_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __append_value_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___append_value_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __append_value_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___append_value_newList3(ptr.Pointer()))
}

func (ptr *QPolygon) __swap_other_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___swap_other_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __swap_other_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___swap_other_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __swap_other_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___swap_other_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __toList_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___toList_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __toList_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___toList_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __toList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___toList_newList(ptr.Pointer()))
}

func (ptr *QPolygon) __mid_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygon___mid_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) __mid_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon___mid_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygon) __mid_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygon___mid_newList(ptr.Pointer()))
}

type QPolygonF struct {
	core.QVector
}

type QPolygonF_ITF interface {
	core.QVector_ITF
	QPolygonF_PTR() *QPolygonF
}

func (ptr *QPolygonF) QPolygonF_PTR() *QPolygonF {
	return ptr
}

func (ptr *QPolygonF) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector_PTR().Pointer()
	}
	return nil
}

func (ptr *QPolygonF) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QVector_PTR().SetPointer(p)
	}
}

func PointerFromQPolygonF(ptr QPolygonF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygonF_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFFromPointer(ptr unsafe.Pointer) *QPolygonF {
	var n = new(QPolygonF)
	n.SetPointer(ptr)
	return n
}
func NewQPolygonF() *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF())
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF8(other QPolygonF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF8(PointerFromQPolygonF(other)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF4(v []*core.QPointF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF4(func() unsafe.Pointer {
		var tmpList = NewQPolygonFFromPointer(NewQPolygonFFromPointer(nil).__QPolygonF_v_newList4())
		for _, v := range v {
			tmpList.__QPolygonF_v_setList4(v)
		}
		return tmpList.Pointer()
	}()))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF6(polygon QPolygon_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF6(PointerFromQPolygon(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF7(polygon QPolygonF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF7(PointerFromQPolygonF(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF5(rectangle core.QRectF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF5(core.PointerFromQRectF(rectangle)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF3(points []*core.QPointF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF3(func() unsafe.Pointer {
		var tmpList = NewQPolygonFFromPointer(NewQPolygonFFromPointer(nil).__QPolygonF_points_newList3())
		for _, v := range points {
			tmpList.__QPolygonF_points_setList3(v)
		}
		return tmpList.Pointer()
	}()))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF2(size int) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF2(C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func (ptr *QPolygonF) Swap(other QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Swap(ptr.Pointer(), PointerFromQPolygonF(other))
	}
}

func (ptr *QPolygonF) Translate(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPolygonF) Translate2(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Translate2(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPolygonF) DestroyQPolygonF() {
	if ptr.Pointer() != nil {
		C.QPolygonF_DestroyQPolygonF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPolygonF) ToPolygon() *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygonF_ToPolygon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Intersected(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Intersected(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Subtracted(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Subtracted(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Translated(offset core.QPointF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Translated(ptr.Pointer(), core.PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Translated2(dx float64, dy float64) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Translated2(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) United(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_United(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPolygonF_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) ContainsPoint(point core.QPointF_ITF, fillRule core.Qt__FillRule) bool {
	if ptr.Pointer() != nil {
		return C.QPolygonF_ContainsPoint(ptr.Pointer(), core.PointerFromQPointF(point), C.longlong(fillRule)) != 0
	}
	return false
}

func (ptr *QPolygonF) IsClosed() bool {
	if ptr.Pointer() != nil {
		return C.QPolygonF_IsClosed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPolygonF) __QPolygonF_v_atList4(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPolygonF___QPolygonF_v_atList4(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __QPolygonF_v_setList4(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___QPolygonF_v_setList4(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QPolygonF) __QPolygonF_v_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___QPolygonF_v_newList4(ptr.Pointer()))
}

func (ptr *QPolygonF) __QPolygonF_points_atList3(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPolygonF___QPolygonF_points_atList3(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __QPolygonF_points_setList3(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___QPolygonF_points_setList3(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QPolygonF) __QPolygonF_points_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___QPolygonF_points_newList3(ptr.Pointer()))
}

func (ptr *QPolygonF) __QVector_other_atList5(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___QVector_other_atList5(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __QVector_other_setList5(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___QVector_other_setList5(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __QVector_other_newList5() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___QVector_other_newList5(ptr.Pointer()))
}

func (ptr *QPolygonF) __QVector_other_atList4(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___QVector_other_atList4(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __QVector_other_setList4(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___QVector_other_setList4(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __QVector_other_newList4() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___QVector_other_newList4(ptr.Pointer()))
}

func (ptr *QPolygonF) __fill_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___fill_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __fill_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___fill_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __fill_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___fill_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __fromList_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___fromList_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __fromList_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___fromList_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __fromList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___fromList_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __fromList_list_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___fromList_list_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __fromList_list_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___fromList_list_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __fromList_list_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___fromList_list_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __fromStdVector_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___fromStdVector_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __fromStdVector_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___fromStdVector_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __fromStdVector_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___fromStdVector_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __append_value_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___append_value_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __append_value_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___append_value_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __append_value_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___append_value_newList3(ptr.Pointer()))
}

func (ptr *QPolygonF) __swap_other_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___swap_other_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __swap_other_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___swap_other_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __swap_other_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___swap_other_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __toList_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___toList_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __toList_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___toList_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __toList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___toList_newList(ptr.Pointer()))
}

func (ptr *QPolygonF) __mid_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPolygonF___mid_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) __mid_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF___mid_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QPolygonF) __mid_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QPolygonF___mid_newList(ptr.Pointer()))
}

type QQuaternion struct {
	ptr unsafe.Pointer
}

type QQuaternion_ITF interface {
	QQuaternion_PTR() *QQuaternion
}

func (ptr *QQuaternion) QQuaternion_PTR() *QQuaternion {
	return ptr
}

func (ptr *QQuaternion) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QQuaternion) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQQuaternion(ptr QQuaternion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QQuaternion_PTR().Pointer()
	}
	return nil
}

func NewQQuaternionFromPointer(ptr unsafe.Pointer) *QQuaternion {
	var n = new(QQuaternion)
	n.SetPointer(ptr)
	return n
}

func (ptr *QQuaternion) DestroyQQuaternion() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QQuaternion_FromAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxes(PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxes(PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromAxisAndAngle(axis QVector3D_ITF, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle(PointerFromQVector3D(axis), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxisAndAngle(axis QVector3D_ITF, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle(PointerFromQVector3D(axis), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromAxisAndAngle2(x float32, y float32, z float32, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle2(C.float(x), C.float(y), C.float(z), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxisAndAngle2(x float32, y float32, z float32, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle2(C.float(x), C.float(y), C.float(z), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromDirection(direction QVector3D_ITF, up QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromDirection(PointerFromQVector3D(direction), PointerFromQVector3D(up)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromDirection(direction QVector3D_ITF, up QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromDirection(PointerFromQVector3D(direction), PointerFromQVector3D(up)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromEulerAngles2(eulerAngles QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles2(PointerFromQVector3D(eulerAngles)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromEulerAngles2(eulerAngles QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles2(PointerFromQVector3D(eulerAngles)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromEulerAngles(pitch float32, yaw float32, roll float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles(C.float(pitch), C.float(yaw), C.float(roll)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromEulerAngles(pitch float32, yaw float32, roll float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles(C.float(pitch), C.float(yaw), C.float(roll)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_Nlerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Nlerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Nlerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Nlerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_RotationTo(from QVector3D_ITF, to QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_RotationTo(PointerFromQVector3D(from), PointerFromQVector3D(to)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) RotationTo(from QVector3D_ITF, to QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_RotationTo(PointerFromQVector3D(from), PointerFromQVector3D(to)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_Slerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Slerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Slerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Slerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion() *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion())
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion5(vector QVector4D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion5(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion4(scalar float32, vector QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion4(C.float(scalar), PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion3(scalar float32, xpos float32, ypos float32, zpos float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion3(C.float(scalar), C.float(xpos), C.float(ypos), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_DotProduct(q1 QQuaternion_ITF, q2 QQuaternion_ITF) float32 {
	return float32(C.QQuaternion_QQuaternion_DotProduct(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2)))
}

func (ptr *QQuaternion) DotProduct(q1 QQuaternion_ITF, q2 QQuaternion_ITF) float32 {
	return float32(C.QQuaternion_QQuaternion_DotProduct(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2)))
}

func (ptr *QQuaternion) Normalize() {
	if ptr.Pointer() != nil {
		C.QQuaternion_Normalize(ptr.Pointer())
	}
}

func (ptr *QQuaternion) SetScalar(scalar float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetScalar(ptr.Pointer(), C.float(scalar))
	}
}

func (ptr *QQuaternion) SetVector(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetVector(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QQuaternion) SetVector2(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetVector2(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QQuaternion) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QQuaternion) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QQuaternion) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetZ(ptr.Pointer(), C.float(z))
	}
}

func (ptr *QQuaternion) Conjugated() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Conjugated(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) Inverted() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Inverted(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) Normalized() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) RotatedVector(vector QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_RotatedVector(ptr.Pointer(), PointerFromQVector3D(vector)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) ToEulerAngles() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_ToEulerAngles(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) Vector() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_Vector(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QQuaternion_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QQuaternion_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QQuaternion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) Scalar() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Scalar(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Z(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) GetAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxes(ptr.Pointer(), PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis))
	}
}

func (ptr *QQuaternion) GetAxisAndAngle2(axis QVector3D_ITF, angle float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxisAndAngle2(ptr.Pointer(), PointerFromQVector3D(axis), C.float(angle))
	}
}

func (ptr *QQuaternion) GetAxisAndAngle(x float32, y float32, z float32, angle float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxisAndAngle(ptr.Pointer(), C.float(x), C.float(y), C.float(z), C.float(angle))
	}
}

func (ptr *QQuaternion) GetEulerAngles(pitch float32, yaw float32, roll float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetEulerAngles(ptr.Pointer(), C.float(pitch), C.float(yaw), C.float(roll))
	}
}

type QRadialGradient struct {
	QGradient
}

type QRadialGradient_ITF interface {
	QGradient_ITF
	QRadialGradient_PTR() *QRadialGradient
}

func (ptr *QRadialGradient) QRadialGradient_PTR() *QRadialGradient {
	return ptr
}

func (ptr *QRadialGradient) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func (ptr *QRadialGradient) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGradient_PTR().SetPointer(p)
	}
}

func PointerFromQRadialGradient(ptr QRadialGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadialGradient_PTR().Pointer()
	}
	return nil
}

func NewQRadialGradientFromPointer(ptr unsafe.Pointer) *QRadialGradient {
	var n = new(QRadialGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRadialGradient) DestroyQRadialGradient() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQRadialGradient() *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient())
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient6(center core.QPointF_ITF, centerRadius float64, focalPoint core.QPointF_ITF, focalRadius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient6(core.PointerFromQPointF(center), C.double(centerRadius), core.PointerFromQPointF(focalPoint), C.double(focalRadius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient4(center core.QPointF_ITF, radius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient4(core.PointerFromQPointF(center), C.double(radius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient2(center core.QPointF_ITF, radius float64, focalPoint core.QPointF_ITF) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient2(core.PointerFromQPointF(center), C.double(radius), core.PointerFromQPointF(focalPoint)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient7(cx float64, cy float64, centerRadius float64, fx float64, fy float64, focalRadius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient7(C.double(cx), C.double(cy), C.double(centerRadius), C.double(fx), C.double(fy), C.double(focalRadius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient5(cx float64, cy float64, radius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient5(C.double(cx), C.double(cy), C.double(radius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient3(cx float64, cy float64, radius float64, fx float64, fy float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient3(C.double(cx), C.double(cy), C.double(radius), C.double(fx), C.double(fy)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func (ptr *QRadialGradient) SetCenter(center core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QRadialGradient) SetCenter2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetCenterRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenterRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetFocalPoint(focalPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint(ptr.Pointer(), core.PointerFromQPointF(focalPoint))
	}
}

func (ptr *QRadialGradient) SetFocalPoint2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetFocalRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) Center() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRadialGradient_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRadialGradient) FocalPoint() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRadialGradient_FocalPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRadialGradient) CenterRadius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_CenterRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) FocalRadius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_FocalRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) Radius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_Radius(ptr.Pointer()))
	}
	return 0
}

type QRasterPaintEngine struct {
	QPaintEngine
}

type QRasterPaintEngine_ITF interface {
	QPaintEngine_ITF
	QRasterPaintEngine_PTR() *QRasterPaintEngine
}

func (ptr *QRasterPaintEngine) QRasterPaintEngine_PTR() *QRasterPaintEngine {
	return ptr
}

func (ptr *QRasterPaintEngine) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func (ptr *QRasterPaintEngine) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintEngine_PTR().SetPointer(p)
	}
}

func PointerFromQRasterPaintEngine(ptr QRasterPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQRasterPaintEngineFromPointer(ptr unsafe.Pointer) *QRasterPaintEngine {
	var n = new(QRasterPaintEngine)
	n.SetPointer(ptr)
	return n
}

type QRasterWindow struct {
	QPaintDeviceWindow
}

type QRasterWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QRasterWindow_PTR() *QRasterWindow
}

func (ptr *QRasterWindow) QRasterWindow_PTR() *QRasterWindow {
	return ptr
}

func (ptr *QRasterWindow) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (ptr *QRasterWindow) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QPaintDeviceWindow_PTR().SetPointer(p)
	}
}

func PointerFromQRasterWindow(ptr QRasterWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterWindow_PTR().Pointer()
	}
	return nil
}

func NewQRasterWindowFromPointer(ptr unsafe.Pointer) *QRasterWindow {
	var n = new(QRasterWindow)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRasterWindow) DestroyQRasterWindow() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQRasterWindow(parent QWindow_ITF) *QRasterWindow {
	var tmpValue = NewQRasterWindowFromPointer(C.QRasterWindow_NewQRasterWindow(PointerFromQWindow(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

type QRawFont struct {
	ptr unsafe.Pointer
}

type QRawFont_ITF interface {
	QRawFont_PTR() *QRawFont
}

func (ptr *QRawFont) QRawFont_PTR() *QRawFont {
	return ptr
}

func (ptr *QRawFont) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QRawFont) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQRawFont(ptr QRawFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRawFont_PTR().Pointer()
	}
	return nil
}

func NewQRawFontFromPointer(ptr unsafe.Pointer) *QRawFont {
	var n = new(QRawFont)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QRawFont__AntialiasingType
//QRawFont::AntialiasingType
type QRawFont__AntialiasingType int64

const (
	QRawFont__PixelAntialiasing    QRawFont__AntialiasingType = QRawFont__AntialiasingType(0)
	QRawFont__SubPixelAntialiasing QRawFont__AntialiasingType = QRawFont__AntialiasingType(1)
)

//go:generate stringer -type=QRawFont__LayoutFlag
//QRawFont::LayoutFlag
type QRawFont__LayoutFlag int64

const (
	QRawFont__SeparateAdvances QRawFont__LayoutFlag = QRawFont__LayoutFlag(0)
	QRawFont__KernedAdvances   QRawFont__LayoutFlag = QRawFont__LayoutFlag(1)
	QRawFont__UseDesignMetrics QRawFont__LayoutFlag = QRawFont__LayoutFlag(2)
)

func QRawFont_FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.longlong(writingSystem)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func (ptr *QRawFont) FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.longlong(writingSystem)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont() *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont())
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont3(fontData core.QByteArray_ITF, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont3(core.PointerFromQByteArray(fontData), C.double(pixelSize), C.longlong(hintingPreference)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont4(other QRawFont_ITF) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont4(PointerFromQRawFont(other)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont2(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont2(fileNameC, C.double(pixelSize), C.longlong(hintingPreference)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func (ptr *QRawFont) LoadFromData(fontData core.QByteArray_ITF, pixelSize float64, hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QRawFont_LoadFromData(ptr.Pointer(), core.PointerFromQByteArray(fontData), C.double(pixelSize), C.longlong(hintingPreference))
	}
}

func (ptr *QRawFont) LoadFromFile(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QRawFont_LoadFromFile(ptr.Pointer(), fileNameC, C.double(pixelSize), C.longlong(hintingPreference))
	}
}

func (ptr *QRawFont) SetPixelSize(pixelSize float64) {
	if ptr.Pointer() != nil {
		C.QRawFont_SetPixelSize(ptr.Pointer(), C.double(pixelSize))
	}
}

func (ptr *QRawFont) Swap(other QRawFont_ITF) {
	if ptr.Pointer() != nil {
		C.QRawFont_Swap(ptr.Pointer(), PointerFromQRawFont(other))
	}
}

func (ptr *QRawFont) DestroyQRawFont() {
	if ptr.Pointer() != nil {
		C.QRawFont_DestroyQRawFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QRawFont) FontTable(tagName string) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tagNameC *C.char
		if tagName != "" {
			tagNameC = C.CString(tagName)
			defer C.free(unsafe.Pointer(tagNameC))
		}
		var tmpValue = core.NewQByteArrayFromPointer(C.QRawFont_FontTable(ptr.Pointer(), tagNameC))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) HintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QRawFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QRawFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) AlphaMapForGlyph(glyphIndex uint, antialiasingType QRawFont__AntialiasingType, transform QTransform_ITF) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QRawFont_AlphaMapForGlyph(ptr.Pointer(), C.uint(uint32(glyphIndex)), C.longlong(antialiasingType), PointerFromQTransform(transform)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) SupportedWritingSystems() []QFontDatabase__WritingSystem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []QFontDatabase__WritingSystem {
			var out = make([]QFontDatabase__WritingSystem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRawFontFromPointer(l.data).__supportedWritingSystems_atList(i)
			}
			return out
		}(C.QRawFont_SupportedWritingSystems(ptr.Pointer()))
	}
	return make([]QFontDatabase__WritingSystem, 0)
}

func (ptr *QRawFont) PathForGlyph(glyphIndex uint) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QRawFont_PathForGlyph(ptr.Pointer(), C.uint(uint32(glyphIndex))))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) BoundingRect(glyphIndex uint) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QRawFont_BoundingRect(ptr.Pointer(), C.uint(uint32(glyphIndex))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) FamilyName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRawFont_FamilyName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRawFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) AdvancesForGlyphIndexes2(glyphIndexes []uint) []*core.QPointF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QPointF {
			var out = make([]*core.QPointF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRawFontFromPointer(l.data).__advancesForGlyphIndexes_atList2(i)
			}
			return out
		}(C.QRawFont_AdvancesForGlyphIndexes2(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQRawFontFromPointer(NewQRawFontFromPointer(nil).__advancesForGlyphIndexes_glyphIndexes_newList2())
			for _, v := range glyphIndexes {
				tmpList.__advancesForGlyphIndexes_glyphIndexes_setList2(v)
			}
			return tmpList.Pointer()
		}()))
	}
	return make([]*core.QPointF, 0)
}

func (ptr *QRawFont) AdvancesForGlyphIndexes(glyphIndexes []uint, layoutFlags QRawFont__LayoutFlag) []*core.QPointF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QPointF {
			var out = make([]*core.QPointF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRawFontFromPointer(l.data).__advancesForGlyphIndexes_atList(i)
			}
			return out
		}(C.QRawFont_AdvancesForGlyphIndexes(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQRawFontFromPointer(NewQRawFontFromPointer(nil).__advancesForGlyphIndexes_glyphIndexes_newList())
			for _, v := range glyphIndexes {
				tmpList.__advancesForGlyphIndexes_glyphIndexes_setList(v)
			}
			return tmpList.Pointer()
		}(), C.longlong(layoutFlags)))
	}
	return make([]*core.QPointF, 0)
}

func (ptr *QRawFont) GlyphIndexesForString(text string) []uint {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return func(l C.struct_QtGui_PackedList) []uint {
			var out = make([]uint, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRawFontFromPointer(l.data).__glyphIndexesForString_atList(i)
			}
			return out
		}(C.QRawFont_GlyphIndexesForString(ptr.Pointer(), textC))
	}
	return make([]uint, 0)
}

func (ptr *QRawFont) AdvancesForGlyphIndexes3(glyphIndexes uint, advances core.QPointF_ITF, numGlyphs int) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_AdvancesForGlyphIndexes3(ptr.Pointer(), C.uint(uint32(glyphIndexes)), core.PointerFromQPointF(advances), C.int(int32(numGlyphs))) != 0
	}
	return false
}

func (ptr *QRawFont) AdvancesForGlyphIndexes4(glyphIndexes uint, advances core.QPointF_ITF, numGlyphs int, layoutFlags QRawFont__LayoutFlag) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_AdvancesForGlyphIndexes4(ptr.Pointer(), C.uint(uint32(glyphIndexes)), core.PointerFromQPointF(advances), C.int(int32(numGlyphs)), C.longlong(layoutFlags)) != 0
	}
	return false
}

func (ptr *QRawFont) GlyphIndexesForChars(chars core.QChar_ITF, numChars int, glyphIndexes uint, numGlyphs int) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_GlyphIndexesForChars(ptr.Pointer(), core.PointerFromQChar(chars), C.int(int32(numChars)), C.uint(uint32(glyphIndexes)), C.int(int32(numGlyphs))) != 0
	}
	return false
}

func (ptr *QRawFont) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRawFont) SupportsCharacter(character core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_SupportsCharacter(ptr.Pointer(), core.PointerFromQChar(character)) != 0
	}
	return false
}

func (ptr *QRawFont) SupportsCharacter2(ucs4 uint) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_SupportsCharacter2(ptr.Pointer(), C.uint(uint32(ucs4))) != 0
	}
	return false
}

func (ptr *QRawFont) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRawFont_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRawFont) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) AverageCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) CapHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_CapHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) LineThickness() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_LineThickness(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) MaxCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_MaxCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) PixelSize() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_PixelSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) UnderlinePosition() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnderlinePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) UnitsPerEm() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnitsPerEm(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) XHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) __supportedWritingSystems_atList(i int) QFontDatabase__WritingSystem {
	if ptr.Pointer() != nil {
		return QFontDatabase__WritingSystem(C.QRawFont___supportedWritingSystems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QRawFont) __supportedWritingSystems_setList(i QFontDatabase__WritingSystem) {
	if ptr.Pointer() != nil {
		C.QRawFont___supportedWritingSystems_setList(ptr.Pointer(), C.longlong(i))
	}
}

func (ptr *QRawFont) __supportedWritingSystems_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___supportedWritingSystems_newList(ptr.Pointer()))
}

func (ptr *QRawFont) __advancesForGlyphIndexes_atList2(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRawFont___advancesForGlyphIndexes_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) __advancesForGlyphIndexes_setList2(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRawFont___advancesForGlyphIndexes_setList2(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QRawFont) __advancesForGlyphIndexes_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___advancesForGlyphIndexes_newList2(ptr.Pointer()))
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_atList2(i int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QRawFont___advancesForGlyphIndexes_glyphIndexes_atList2(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_setList2(i uint) {
	if ptr.Pointer() != nil {
		C.QRawFont___advancesForGlyphIndexes_glyphIndexes_setList2(ptr.Pointer(), C.uint(uint32(i)))
	}
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___advancesForGlyphIndexes_glyphIndexes_newList2(ptr.Pointer()))
}

func (ptr *QRawFont) __advancesForGlyphIndexes_atList(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRawFont___advancesForGlyphIndexes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) __advancesForGlyphIndexes_setList(i core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRawFont___advancesForGlyphIndexes_setList(ptr.Pointer(), core.PointerFromQPointF(i))
	}
}

func (ptr *QRawFont) __advancesForGlyphIndexes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___advancesForGlyphIndexes_newList(ptr.Pointer()))
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_atList(i int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QRawFont___advancesForGlyphIndexes_glyphIndexes_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_setList(i uint) {
	if ptr.Pointer() != nil {
		C.QRawFont___advancesForGlyphIndexes_glyphIndexes_setList(ptr.Pointer(), C.uint(uint32(i)))
	}
}

func (ptr *QRawFont) __advancesForGlyphIndexes_glyphIndexes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___advancesForGlyphIndexes_glyphIndexes_newList(ptr.Pointer()))
}

func (ptr *QRawFont) __glyphIndexesForString_atList(i int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QRawFont___glyphIndexesForString_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QRawFont) __glyphIndexesForString_setList(i uint) {
	if ptr.Pointer() != nil {
		C.QRawFont___glyphIndexesForString_setList(ptr.Pointer(), C.uint(uint32(i)))
	}
}

func (ptr *QRawFont) __glyphIndexesForString_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QRawFont___glyphIndexesForString_newList(ptr.Pointer()))
}

type QRegExpValidator struct {
	QValidator
}

type QRegExpValidator_ITF interface {
	QValidator_ITF
	QRegExpValidator_PTR() *QRegExpValidator
}

func (ptr *QRegExpValidator) QRegExpValidator_PTR() *QRegExpValidator {
	return ptr
}

func (ptr *QRegExpValidator) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func (ptr *QRegExpValidator) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QValidator_PTR().SetPointer(p)
	}
}

func PointerFromQRegExpValidator(ptr QRegExpValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegExpValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegExpValidatorFromPointer(ptr unsafe.Pointer) *QRegExpValidator {
	var n = new(QRegExpValidator)
	n.SetPointer(ptr)
	return n
}
func NewQRegExpValidator(parent core.QObject_ITF) *QRegExpValidator {
	var tmpValue = NewQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQRegExpValidator2(rx core.QRegExp_ITF, parent core.QObject_ITF) *QRegExpValidator {
	var tmpValue = NewQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator2(core.PointerFromQRegExp(rx), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QRegExpValidator) SetRegExp(rx core.QRegExp_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_SetRegExp(ptr.Pointer(), core.PointerFromQRegExp(rx))
	}
}

func (ptr *QRegExpValidator) DestroyQRegExpValidator() {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DestroyQRegExpValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRegExpValidator_Validate
func callbackQRegExpValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQRegExpValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QRegExpValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "validate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", func(input string, pos int) QValidator__State {
				signal.(func(string, int) QValidator__State)(input, pos)
				return f(input, pos)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", f)
		}
	}
}

func (ptr *QRegExpValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "validate")
	}
}

func (ptr *QRegExpValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QRegExpValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegExpValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QRegExpValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegExpValidator) RegExp() *core.QRegExp {
	if ptr.Pointer() != nil {
		return core.NewQRegExpFromPointer(C.QRegExpValidator_RegExp(ptr.Pointer()))
	}
	return nil
}

type QRegion struct {
	ptr unsafe.Pointer
}

type QRegion_ITF interface {
	QRegion_PTR() *QRegion
}

func (ptr *QRegion) QRegion_PTR() *QRegion {
	return ptr
}

func (ptr *QRegion) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QRegion) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQRegion(ptr QRegion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegion_PTR().Pointer()
	}
	return nil
}

func NewQRegionFromPointer(ptr unsafe.Pointer) *QRegion {
	var n = new(QRegion)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRegion) DestroyQRegion() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QRegion__RegionType
//QRegion::RegionType
type QRegion__RegionType int64

const (
	QRegion__Rectangle QRegion__RegionType = QRegion__RegionType(0)
	QRegion__Ellipse   QRegion__RegionType = QRegion__RegionType(1)
)

func NewQRegion() *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion())
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion6(other QRegion_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion6(PointerFromQRegion(other)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion7(bm QBitmap_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion7(PointerFromQBitmap(bm)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion4(a QPolygon_ITF, fillRule core.Qt__FillRule) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion4(PointerFromQPolygon(a), C.longlong(fillRule)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion3(r core.QRect_ITF, t QRegion__RegionType) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion3(core.PointerFromQRect(r), C.longlong(t)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion5(r QRegion_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion5(PointerFromQRegion(r)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion2(x int, y int, w int, h int, t QRegion__RegionType) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion2(C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.longlong(t)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func (ptr *QRegion) SetRects(rects core.QRect_ITF, number int) {
	if ptr.Pointer() != nil {
		C.QRegion_SetRects(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(number)))
	}
}

func (ptr *QRegion) Swap(other QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QRegion_Swap(ptr.Pointer(), PointerFromQRegion(other))
	}
}

func (ptr *QRegion) Translate2(point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRegion_Translate2(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QRegion) Translate(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QRegion_Translate(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QRegion) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QRegion_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Intersected2(rect core.QRect_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Intersected2(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Intersected(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Intersected(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Subtracted(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Subtracted(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Translated2(p core.QPoint_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Translated2(ptr.Pointer(), core.PointerFromQPoint(p)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Translated(dx int, dy int) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Translated(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) United2(rect core.QRect_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_United2(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) United(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_United(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Xored(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Xored(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Rects() []*core.QRect {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QRect {
			var out = make([]*core.QRect, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRegionFromPointer(l.data).__rects_atList(i)
			}
			return out
		}(C.QRegion_Rects(ptr.Pointer()))
	}
	return make([]*core.QRect, 0)
}

func (ptr *QRegion) Contains(p core.QPoint_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Contains(ptr.Pointer(), core.PointerFromQPoint(p)) != 0
	}
	return false
}

func (ptr *QRegion) Contains2(r core.QRect_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Contains2(ptr.Pointer(), core.PointerFromQRect(r)) != 0
	}
	return false
}

func (ptr *QRegion) Intersects2(rect core.QRect_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Intersects2(ptr.Pointer(), core.PointerFromQRect(rect)) != 0
	}
	return false
}

func (ptr *QRegion) Intersects(region QRegion_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Intersects(ptr.Pointer(), PointerFromQRegion(region)) != 0
	}
	return false
}

func (ptr *QRegion) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QRegion_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QRegion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) RectCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegion_RectCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegion) __rects_atList(i int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QRegion___rects_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) __rects_setList(i core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QRegion___rects_setList(ptr.Pointer(), core.PointerFromQRect(i))
	}
}

func (ptr *QRegion) __rects_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QRegion___rects_newList(ptr.Pointer()))
}

type QRegularExpressionValidator struct {
	QValidator
}

type QRegularExpressionValidator_ITF interface {
	QValidator_ITF
	QRegularExpressionValidator_PTR() *QRegularExpressionValidator
}

func (ptr *QRegularExpressionValidator) QRegularExpressionValidator_PTR() *QRegularExpressionValidator {
	return ptr
}

func (ptr *QRegularExpressionValidator) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func (ptr *QRegularExpressionValidator) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QValidator_PTR().SetPointer(p)
	}
}

func PointerFromQRegularExpressionValidator(ptr QRegularExpressionValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpressionValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionValidatorFromPointer(ptr unsafe.Pointer) *QRegularExpressionValidator {
	var n = new(QRegularExpressionValidator)
	n.SetPointer(ptr)
	return n
}
func NewQRegularExpressionValidator(parent core.QObject_ITF) *QRegularExpressionValidator {
	var tmpValue = NewQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQRegularExpressionValidator2(re core.QRegularExpression_ITF, parent core.QObject_ITF) *QRegularExpressionValidator {
	var tmpValue = NewQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator2(core.PointerFromQRegularExpression(re), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRegularExpressionValidator_RegularExpressionChanged
func callbackQRegularExpressionValidator_RegularExpressionChanged(ptr unsafe.Pointer, re unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "regularExpressionChanged"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	}

}

func (ptr *QRegularExpressionValidator) ConnectRegularExpressionChanged(f func(re *core.QRegularExpression)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "regularExpressionChanged") {
			C.QRegularExpressionValidator_ConnectRegularExpressionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "regularExpressionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "regularExpressionChanged", func(re *core.QRegularExpression) {
				signal.(func(*core.QRegularExpression))(re)
				f(re)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "regularExpressionChanged", f)
		}
	}
}

func (ptr *QRegularExpressionValidator) DisconnectRegularExpressionChanged() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectRegularExpressionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "regularExpressionChanged")
	}
}

func (ptr *QRegularExpressionValidator) RegularExpressionChanged(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_RegularExpressionChanged(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

//export callbackQRegularExpressionValidator_SetRegularExpression
func callbackQRegularExpressionValidator_SetRegularExpression(ptr unsafe.Pointer, re unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setRegularExpression"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).SetRegularExpressionDefault(core.NewQRegularExpressionFromPointer(re))
	}
}

func (ptr *QRegularExpressionValidator) ConnectSetRegularExpression(f func(re *core.QRegularExpression)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setRegularExpression"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRegularExpression", func(re *core.QRegularExpression) {
				signal.(func(*core.QRegularExpression))(re)
				f(re)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setRegularExpression", f)
		}
	}
}

func (ptr *QRegularExpressionValidator) DisconnectSetRegularExpression() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setRegularExpression")
	}
}

func (ptr *QRegularExpressionValidator) SetRegularExpression(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_SetRegularExpression(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

func (ptr *QRegularExpressionValidator) SetRegularExpressionDefault(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_SetRegularExpressionDefault(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

func (ptr *QRegularExpressionValidator) DestroyQRegularExpressionValidator() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DestroyQRegularExpressionValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRegularExpressionValidator) RegularExpression() *core.QRegularExpression {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRegularExpressionFromPointer(C.QRegularExpressionValidator_RegularExpression(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRegularExpression).DestroyQRegularExpression)
		return tmpValue
	}
	return nil
}

//export callbackQRegularExpressionValidator_Validate
func callbackQRegularExpressionValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQRegularExpressionValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QRegularExpressionValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "validate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", func(input string, pos int) QValidator__State {
				signal.(func(string, int) QValidator__State)(input, pos)
				return f(input, pos)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", f)
		}
	}
}

func (ptr *QRegularExpressionValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "validate")
	}
}

func (ptr *QRegularExpressionValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QRegularExpressionValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegularExpressionValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QRegularExpressionValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

type QResizeEvent struct {
	core.QEvent
}

type QResizeEvent_ITF interface {
	core.QEvent_ITF
	QResizeEvent_PTR() *QResizeEvent
}

func (ptr *QResizeEvent) QResizeEvent_PTR() *QResizeEvent {
	return ptr
}

func (ptr *QResizeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QResizeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQResizeEvent(ptr QResizeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QResizeEvent_PTR().Pointer()
	}
	return nil
}

func NewQResizeEventFromPointer(ptr unsafe.Pointer) *QResizeEvent {
	var n = new(QResizeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QResizeEvent) DestroyQResizeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQResizeEvent(size core.QSize_ITF, oldSize core.QSize_ITF) *QResizeEvent {
	return NewQResizeEventFromPointer(C.QResizeEvent_NewQResizeEvent(core.PointerFromQSize(size), core.PointerFromQSize(oldSize)))
}

func (ptr *QResizeEvent) OldSize() *core.QSize {
	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_OldSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QResizeEvent) Size() *core.QSize {
	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_Size(ptr.Pointer()))
	}
	return nil
}

type QRgba64 struct {
	ptr unsafe.Pointer
}

type QRgba64_ITF interface {
	QRgba64_PTR() *QRgba64
}

func (ptr *QRgba64) QRgba64_PTR() *QRgba64 {
	return ptr
}

func (ptr *QRgba64) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QRgba64) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQRgba64(ptr QRgba64_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRgba64_PTR().Pointer()
	}
	return nil
}

func NewQRgba64FromPointer(ptr unsafe.Pointer) *QRgba64 {
	var n = new(QRgba64)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRgba64) DestroyQRgba64() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QRgba64) SetAlpha(alpha uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetAlpha(ptr.Pointer(), C.ushort(alpha))
	}
}

func (ptr *QRgba64) SetBlue(blue uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetBlue(ptr.Pointer(), C.ushort(blue))
	}
}

func (ptr *QRgba64) SetGreen(green uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetGreen(ptr.Pointer(), C.ushort(green))
	}
}

func (ptr *QRgba64) SetRed(red uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetRed(ptr.Pointer(), C.ushort(red))
	}
}

func (ptr *QRgba64) IsOpaque() bool {
	if ptr.Pointer() != nil {
		return C.QRgba64_IsOpaque(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRgba64) IsTransparent() bool {
	if ptr.Pointer() != nil {
		return C.QRgba64_IsTransparent(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRgba64) Alpha() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Alpha(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Blue() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Blue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Green() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Green(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Red() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Red(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Alpha8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Alpha8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) Blue8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Blue8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) Green8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Green8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) Red8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Red8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) ToArgb32() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QRgba64_ToArgb32(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRgba64) ToRgb16() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_ToRgb16(ptr.Pointer()))
	}
	return 0
}

type QScreen struct {
	core.QObject
}

type QScreen_ITF interface {
	core.QObject_ITF
	QScreen_PTR() *QScreen
}

func (ptr *QScreen) QScreen_PTR() *QScreen {
	return ptr
}

func (ptr *QScreen) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QScreen) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQScreen(ptr QScreen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScreen_PTR().Pointer()
	}
	return nil
}

func NewQScreenFromPointer(ptr unsafe.Pointer) *QScreen {
	var n = new(QScreen)
	n.SetPointer(ptr)
	return n
}
func (ptr *QScreen) GrabWindow(window uintptr, x int, y int, width int, height int) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QScreen_GrabWindow(ptr.Pointer(), C.uintptr_t(window), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

//export callbackQScreen_AvailableGeometryChanged
func callbackQScreen_AvailableGeometryChanged(ptr unsafe.Pointer, geometry unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "availableGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectAvailableGeometryChanged(f func(geometry *core.QRect)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "availableGeometryChanged") {
			C.QScreen_ConnectAvailableGeometryChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "availableGeometryChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "availableGeometryChanged", func(geometry *core.QRect) {
				signal.(func(*core.QRect))(geometry)
				f(geometry)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "availableGeometryChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectAvailableGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectAvailableGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "availableGeometryChanged")
	}
}

func (ptr *QScreen) AvailableGeometryChanged(geometry core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_AvailableGeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

//export callbackQScreen_GeometryChanged
func callbackQScreen_GeometryChanged(ptr unsafe.Pointer, geometry unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "geometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectGeometryChanged(f func(geometry *core.QRect)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "geometryChanged") {
			C.QScreen_ConnectGeometryChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "geometryChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "geometryChanged", func(geometry *core.QRect) {
				signal.(func(*core.QRect))(geometry)
				f(geometry)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "geometryChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "geometryChanged")
	}
}

func (ptr *QScreen) GeometryChanged(geometry core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_GeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

//export callbackQScreen_LogicalDotsPerInchChanged
func callbackQScreen_LogicalDotsPerInchChanged(ptr unsafe.Pointer, dpi C.double) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "logicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectLogicalDotsPerInchChanged(f func(dpi float64)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "logicalDotsPerInchChanged") {
			C.QScreen_ConnectLogicalDotsPerInchChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "logicalDotsPerInchChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "logicalDotsPerInchChanged", func(dpi float64) {
				signal.(func(float64))(dpi)
				f(dpi)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "logicalDotsPerInchChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectLogicalDotsPerInchChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectLogicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "logicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) LogicalDotsPerInchChanged(dpi float64) {
	if ptr.Pointer() != nil {
		C.QScreen_LogicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

//export callbackQScreen_OrientationChanged
func callbackQScreen_OrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "orientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "orientationChanged") {
			C.QScreen_ConnectOrientationChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "orientationChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "orientationChanged", func(orientation core.Qt__ScreenOrientation) {
				signal.(func(core.Qt__ScreenOrientation))(orientation)
				f(orientation)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "orientationChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "orientationChanged")
	}
}

func (ptr *QScreen) OrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_OrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

//export callbackQScreen_PhysicalDotsPerInchChanged
func callbackQScreen_PhysicalDotsPerInchChanged(ptr unsafe.Pointer, dpi C.double) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "physicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectPhysicalDotsPerInchChanged(f func(dpi float64)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "physicalDotsPerInchChanged") {
			C.QScreen_ConnectPhysicalDotsPerInchChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "physicalDotsPerInchChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "physicalDotsPerInchChanged", func(dpi float64) {
				signal.(func(float64))(dpi)
				f(dpi)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "physicalDotsPerInchChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectPhysicalDotsPerInchChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "physicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) PhysicalDotsPerInchChanged(dpi float64) {
	if ptr.Pointer() != nil {
		C.QScreen_PhysicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

//export callbackQScreen_PhysicalSizeChanged
func callbackQScreen_PhysicalSizeChanged(ptr unsafe.Pointer, size unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "physicalSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	}

}

func (ptr *QScreen) ConnectPhysicalSizeChanged(f func(size *core.QSizeF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "physicalSizeChanged") {
			C.QScreen_ConnectPhysicalSizeChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "physicalSizeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "physicalSizeChanged", func(size *core.QSizeF) {
				signal.(func(*core.QSizeF))(size)
				f(size)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "physicalSizeChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectPhysicalSizeChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "physicalSizeChanged")
	}
}

func (ptr *QScreen) PhysicalSizeChanged(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_PhysicalSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

//export callbackQScreen_PrimaryOrientationChanged
func callbackQScreen_PrimaryOrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "primaryOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectPrimaryOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "primaryOrientationChanged") {
			C.QScreen_ConnectPrimaryOrientationChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "primaryOrientationChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "primaryOrientationChanged", func(orientation core.Qt__ScreenOrientation) {
				signal.(func(core.Qt__ScreenOrientation))(orientation)
				f(orientation)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "primaryOrientationChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectPrimaryOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPrimaryOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "primaryOrientationChanged")
	}
}

func (ptr *QScreen) PrimaryOrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_PrimaryOrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

//export callbackQScreen_RefreshRateChanged
func callbackQScreen_RefreshRateChanged(ptr unsafe.Pointer, refreshRate C.double) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "refreshRateChanged"); signal != nil {
		signal.(func(float64))(float64(refreshRate))
	}

}

func (ptr *QScreen) ConnectRefreshRateChanged(f func(refreshRate float64)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "refreshRateChanged") {
			C.QScreen_ConnectRefreshRateChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "refreshRateChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "refreshRateChanged", func(refreshRate float64) {
				signal.(func(float64))(refreshRate)
				f(refreshRate)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "refreshRateChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectRefreshRateChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectRefreshRateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "refreshRateChanged")
	}
}

func (ptr *QScreen) RefreshRateChanged(refreshRate float64) {
	if ptr.Pointer() != nil {
		C.QScreen_RefreshRateChanged(ptr.Pointer(), C.double(refreshRate))
	}
}

func (ptr *QScreen) SetOrientationUpdateMask(mask core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_SetOrientationUpdateMask(ptr.Pointer(), C.longlong(mask))
	}
}

//export callbackQScreen_VirtualGeometryChanged
func callbackQScreen_VirtualGeometryChanged(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "virtualGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QScreen) ConnectVirtualGeometryChanged(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "virtualGeometryChanged") {
			C.QScreen_ConnectVirtualGeometryChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "virtualGeometryChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "virtualGeometryChanged", func(rect *core.QRect) {
				signal.(func(*core.QRect))(rect)
				f(rect)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "virtualGeometryChanged", f)
		}
	}
}

func (ptr *QScreen) DisconnectVirtualGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectVirtualGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "virtualGeometryChanged")
	}
}

func (ptr *QScreen) VirtualGeometryChanged(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_VirtualGeometryChanged(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QScreen) DestroyQScreen() {
	if ptr.Pointer() != nil {
		C.QScreen_DestroyQScreen(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QScreen) VirtualSiblings() []*QScreen {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QScreen {
			var out = make([]*QScreen, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQScreenFromPointer(l.data).__virtualSiblings_atList(i)
			}
			return out
		}(C.QScreen_VirtualSiblings(ptr.Pointer()))
	}
	return make([]*QScreen, 0)
}

func (ptr *QScreen) AvailableGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_AvailableGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_AvailableVirtualGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) MapBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation, rect core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_MapBetween(ptr.Pointer(), C.longlong(a), C.longlong(b), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) VirtualGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_VirtualGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_AvailableSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_AvailableVirtualSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) VirtualSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_VirtualSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) PhysicalSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QScreen_PhysicalSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QScreen_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QScreen) TransformBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation, target core.QRect_ITF) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QScreen_TransformBetween(ptr.Pointer(), C.longlong(a), C.longlong(b), core.PointerFromQRect(target)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) NativeOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_NativeOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Orientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PrimaryOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_PrimaryOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) OrientationUpdateMask() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_OrientationUpdateMask(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) IsLandscape(o core.Qt__ScreenOrientation) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_IsLandscape(ptr.Pointer(), C.longlong(o)) != 0
	}
	return false
}

func (ptr *QScreen) IsPortrait(o core.Qt__ScreenOrientation) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_IsPortrait(ptr.Pointer(), C.longlong(o)) != 0
	}
	return false
}

func (ptr *QScreen) AngleBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QScreen_AngleBetween(ptr.Pointer(), C.longlong(a), C.longlong(b))))
	}
	return 0
}

func (ptr *QScreen) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QScreen_Depth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QScreen) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInch() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInch() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) RefreshRate() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_RefreshRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) __virtualSiblings_atList(i int) *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QScreen___virtualSiblings_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __virtualSiblings_setList(i QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___virtualSiblings_setList(ptr.Pointer(), PointerFromQScreen(i))
	}
}

func (ptr *QScreen) __virtualSiblings_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___virtualSiblings_newList(ptr.Pointer()))
}

func (ptr *QScreen) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QScreen___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QScreen) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QScreen) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QScreen___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QScreen) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QScreen) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QScreen___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QScreen) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QScreen) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QScreen___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QScreen) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___findChildren_newList(ptr.Pointer()))
}

func (ptr *QScreen) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QScreen___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QScreen) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QScreen___children_newList(ptr.Pointer()))
}

//export callbackQScreen_Event
func callbackQScreen_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QScreen) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQScreen_EventFilter
func callbackQScreen_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QScreen) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQScreen_ChildEvent
func callbackQScreen_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QScreen) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQScreen_ConnectNotify
func callbackQScreen_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_CustomEvent
func callbackQScreen_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QScreen) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQScreen_DeleteLater
func callbackQScreen_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQScreenFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QScreen) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QScreen_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQScreen_Destroyed
func callbackQScreen_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQScreen_DisconnectNotify
func callbackQScreen_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_ObjectNameChanged
func callbackQScreen_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQScreen_TimerEvent
func callbackQScreen_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QScreen) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQScreen_MetaObject
func callbackQScreen_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQScreenFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QScreen) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QScreen_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QScrollEvent struct {
	core.QEvent
}

type QScrollEvent_ITF interface {
	core.QEvent_ITF
	QScrollEvent_PTR() *QScrollEvent
}

func (ptr *QScrollEvent) QScrollEvent_PTR() *QScrollEvent {
	return ptr
}

func (ptr *QScrollEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QScrollEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQScrollEvent(ptr QScrollEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollEventFromPointer(ptr unsafe.Pointer) *QScrollEvent {
	var n = new(QScrollEvent)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QScrollEvent__ScrollState
//QScrollEvent::ScrollState
type QScrollEvent__ScrollState int64

const (
	QScrollEvent__ScrollStarted  QScrollEvent__ScrollState = QScrollEvent__ScrollState(0)
	QScrollEvent__ScrollUpdated  QScrollEvent__ScrollState = QScrollEvent__ScrollState(1)
	QScrollEvent__ScrollFinished QScrollEvent__ScrollState = QScrollEvent__ScrollState(2)
)

func NewQScrollEvent(contentPos core.QPointF_ITF, overshootDistance core.QPointF_ITF, scrollState QScrollEvent__ScrollState) *QScrollEvent {
	return NewQScrollEventFromPointer(C.QScrollEvent_NewQScrollEvent(core.PointerFromQPointF(contentPos), core.PointerFromQPointF(overshootDistance), C.longlong(scrollState)))
}

func (ptr *QScrollEvent) DestroyQScrollEvent() {
	if ptr.Pointer() != nil {
		C.QScrollEvent_DestroyQScrollEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QScrollEvent) ContentPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollEvent_ContentPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollEvent) OvershootDistance() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollEvent_OvershootDistance(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollEvent) ScrollState() QScrollEvent__ScrollState {
	if ptr.Pointer() != nil {
		return QScrollEvent__ScrollState(C.QScrollEvent_ScrollState(ptr.Pointer()))
	}
	return 0
}

type QScrollPrepareEvent struct {
	core.QEvent
}

type QScrollPrepareEvent_ITF interface {
	core.QEvent_ITF
	QScrollPrepareEvent_PTR() *QScrollPrepareEvent
}

func (ptr *QScrollPrepareEvent) QScrollPrepareEvent_PTR() *QScrollPrepareEvent {
	return ptr
}

func (ptr *QScrollPrepareEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QScrollPrepareEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQScrollPrepareEvent(ptr QScrollPrepareEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollPrepareEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollPrepareEventFromPointer(ptr unsafe.Pointer) *QScrollPrepareEvent {
	var n = new(QScrollPrepareEvent)
	n.SetPointer(ptr)
	return n
}
func NewQScrollPrepareEvent(startPos core.QPointF_ITF) *QScrollPrepareEvent {
	return NewQScrollPrepareEventFromPointer(C.QScrollPrepareEvent_NewQScrollPrepareEvent(core.PointerFromQPointF(startPos)))
}

func (ptr *QScrollPrepareEvent) SetContentPos(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPos(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QScrollPrepareEvent) SetContentPosRange(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPosRange(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QScrollPrepareEvent) SetViewportSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetViewportSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QScrollPrepareEvent) DestroyQScrollPrepareEvent() {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_DestroyQScrollPrepareEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QScrollPrepareEvent) ContentPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollPrepareEvent_ContentPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) StartPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollPrepareEvent_StartPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ContentPosRange() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QScrollPrepareEvent_ContentPosRange(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ViewportSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QScrollPrepareEvent_ViewportSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

type QSessionManager struct {
	core.QObject
}

type QSessionManager_ITF interface {
	core.QObject_ITF
	QSessionManager_PTR() *QSessionManager
}

func (ptr *QSessionManager) QSessionManager_PTR() *QSessionManager {
	return ptr
}

func (ptr *QSessionManager) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QSessionManager) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQSessionManager(ptr QSessionManager_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSessionManager_PTR().Pointer()
	}
	return nil
}

func NewQSessionManagerFromPointer(ptr unsafe.Pointer) *QSessionManager {
	var n = new(QSessionManager)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSessionManager) DestroyQSessionManager() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QSessionManager__RestartHint
//QSessionManager::RestartHint
type QSessionManager__RestartHint int64

const (
	QSessionManager__RestartIfRunning   QSessionManager__RestartHint = QSessionManager__RestartHint(0)
	QSessionManager__RestartAnyway      QSessionManager__RestartHint = QSessionManager__RestartHint(1)
	QSessionManager__RestartImmediately QSessionManager__RestartHint = QSessionManager__RestartHint(2)
	QSessionManager__RestartNever       QSessionManager__RestartHint = QSessionManager__RestartHint(3)
)

func (ptr *QSessionManager) AllowsErrorInteraction() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsErrorInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) AllowsInteraction() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) Cancel() {
	if ptr.Pointer() != nil {
		C.QSessionManager_Cancel(ptr.Pointer())
	}
}

func (ptr *QSessionManager) Release() {
	if ptr.Pointer() != nil {
		C.QSessionManager_Release(ptr.Pointer())
	}
}

func (ptr *QSessionManager) RequestPhase2() {
	if ptr.Pointer() != nil {
		C.QSessionManager_RequestPhase2(ptr.Pointer())
	}
}

func (ptr *QSessionManager) SetDiscardCommand(command []string) {
	if ptr.Pointer() != nil {
		var commandC = C.CString(strings.Join(command, "|"))
		defer C.free(unsafe.Pointer(commandC))
		C.QSessionManager_SetDiscardCommand(ptr.Pointer(), commandC)
	}
}

func (ptr *QSessionManager) SetManagerProperty2(name string, value string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		var valueC *C.char
		if value != "" {
			valueC = C.CString(value)
			defer C.free(unsafe.Pointer(valueC))
		}
		C.QSessionManager_SetManagerProperty2(ptr.Pointer(), nameC, valueC)
	}
}

func (ptr *QSessionManager) SetManagerProperty(name string, value []string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		var valueC = C.CString(strings.Join(value, "|"))
		defer C.free(unsafe.Pointer(valueC))
		C.QSessionManager_SetManagerProperty(ptr.Pointer(), nameC, valueC)
	}
}

func (ptr *QSessionManager) SetRestartCommand(command []string) {
	if ptr.Pointer() != nil {
		var commandC = C.CString(strings.Join(command, "|"))
		defer C.free(unsafe.Pointer(commandC))
		C.QSessionManager_SetRestartCommand(ptr.Pointer(), commandC)
	}
}

func (ptr *QSessionManager) SetRestartHint(hint QSessionManager__RestartHint) {
	if ptr.Pointer() != nil {
		C.QSessionManager_SetRestartHint(ptr.Pointer(), C.longlong(hint))
	}
}

func (ptr *QSessionManager) SessionId() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSessionManager_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) SessionKey() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSessionManager_SessionKey(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) DiscardCommand() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSessionManager_DiscardCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) RestartCommand() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSessionManager_RestartCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) RestartHint() QSessionManager__RestartHint {
	if ptr.Pointer() != nil {
		return QSessionManager__RestartHint(C.QSessionManager_RestartHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSessionManager) IsPhase2() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_IsPhase2(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QSessionManager___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QSessionManager) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QSessionManager) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSessionManager___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QSessionManager) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSessionManager___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSessionManager) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSessionManager) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QSessionManager___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QSessionManager) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSessionManager___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSessionManager) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSessionManager) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QSessionManager___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QSessionManager) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSessionManager___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSessionManager) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSessionManager) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSessionManager___findChildren_newList(ptr.Pointer()))
}

func (ptr *QSessionManager) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSessionManager___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSessionManager) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSessionManager) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSessionManager___children_newList(ptr.Pointer()))
}

//export callbackQSessionManager_Event
func callbackQSessionManager_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSessionManager) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSessionManager_EventFilter
func callbackQSessionManager_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSessionManager) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSessionManager_ChildEvent
func callbackQSessionManager_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSessionManager_ConnectNotify
func callbackQSessionManager_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_CustomEvent
func callbackQSessionManager_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSessionManager) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSessionManager_DeleteLater
func callbackQSessionManager_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSessionManagerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSessionManager) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSessionManager_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSessionManager_Destroyed
func callbackQSessionManager_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQSessionManager_DisconnectNotify
func callbackQSessionManager_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_ObjectNameChanged
func callbackQSessionManager_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQSessionManager_TimerEvent
func callbackQSessionManager_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSessionManager) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSessionManager_MetaObject
func callbackQSessionManager_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSessionManagerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSessionManager) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSessionManager_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QShortcutEvent struct {
	core.QEvent
}

type QShortcutEvent_ITF interface {
	core.QEvent_ITF
	QShortcutEvent_PTR() *QShortcutEvent
}

func (ptr *QShortcutEvent) QShortcutEvent_PTR() *QShortcutEvent {
	return ptr
}

func (ptr *QShortcutEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QShortcutEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQShortcutEvent(ptr QShortcutEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShortcutEvent_PTR().Pointer()
	}
	return nil
}

func NewQShortcutEventFromPointer(ptr unsafe.Pointer) *QShortcutEvent {
	var n = new(QShortcutEvent)
	n.SetPointer(ptr)
	return n
}
func NewQShortcutEvent(key QKeySequence_ITF, id int, ambiguous bool) *QShortcutEvent {
	return NewQShortcutEventFromPointer(C.QShortcutEvent_NewQShortcutEvent(PointerFromQKeySequence(key), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(ambiguous)))))
}

func (ptr *QShortcutEvent) DestroyQShortcutEvent() {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_DestroyQShortcutEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QShortcutEvent) IsAmbiguous() bool {
	if ptr.Pointer() != nil {
		return C.QShortcutEvent_IsAmbiguous(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QShortcutEvent) Key() *QKeySequence {
	if ptr.Pointer() != nil {
		return NewQKeySequenceFromPointer(C.QShortcutEvent_Key(ptr.Pointer()))
	}
	return nil
}

func (ptr *QShortcutEvent) ShortcutId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QShortcutEvent_ShortcutId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QShortcutEvent) Ambig() bool {
	if ptr.Pointer() != nil {
		return C.QShortcutEvent_Ambig(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QShortcutEvent) SetAmbig(vbo bool) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetAmbig(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QShortcutEvent) Sequence() *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QShortcutEvent_Sequence(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QShortcutEvent) SetSequence(vqk QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetSequence(ptr.Pointer(), PointerFromQKeySequence(vqk))
	}
}

func (ptr *QShortcutEvent) Sid() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QShortcutEvent_Sid(ptr.Pointer())))
	}
	return 0
}

func (ptr *QShortcutEvent) SetSid(vin int) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetSid(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QShowEvent struct {
	core.QEvent
}

type QShowEvent_ITF interface {
	core.QEvent_ITF
	QShowEvent_PTR() *QShowEvent
}

func (ptr *QShowEvent) QShowEvent_PTR() *QShowEvent {
	return ptr
}

func (ptr *QShowEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QShowEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQShowEvent(ptr QShowEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShowEvent_PTR().Pointer()
	}
	return nil
}

func NewQShowEventFromPointer(ptr unsafe.Pointer) *QShowEvent {
	var n = new(QShowEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QShowEvent) DestroyQShowEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQShowEvent() *QShowEvent {
	return NewQShowEventFromPointer(C.QShowEvent_NewQShowEvent())
}

type QStandardItem struct {
	ptr unsafe.Pointer
}

type QStandardItem_ITF interface {
	QStandardItem_PTR() *QStandardItem
}

func (ptr *QStandardItem) QStandardItem_PTR() *QStandardItem {
	return ptr
}

func (ptr *QStandardItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QStandardItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQStandardItem(ptr QStandardItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItem_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemFromPointer(ptr unsafe.Pointer) *QStandardItem {
	var n = new(QStandardItem)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QStandardItem__ItemType
//QStandardItem::ItemType
type QStandardItem__ItemType int64

const (
	QStandardItem__Type     QStandardItem__ItemType = QStandardItem__ItemType(0)
	QStandardItem__UserType QStandardItem__ItemType = QStandardItem__ItemType(1000)
)

func (ptr *QStandardItem) TakeColumn(column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemFromPointer(l.data).__takeColumn_atList(i)
			}
			return out
		}(C.QStandardItem_TakeColumn(ptr.Pointer(), C.int(int32(column))))
	}
	return make([]*QStandardItem, 0)
}

func (ptr *QStandardItem) TakeRow(row int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemFromPointer(l.data).__takeRow_atList(i)
			}
			return out
		}(C.QStandardItem_TakeRow(ptr.Pointer(), C.int(int32(row))))
	}
	return make([]*QStandardItem, 0)
}

func (ptr *QStandardItem) TakeChild(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_TakeChild(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

func NewQStandardItem() *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem())
}

func NewQStandardItem3(icon QIcon_ITF, text string) *QStandardItem {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem3(PointerFromQIcon(icon), textC))
}

func NewQStandardItem5(other QStandardItem_ITF) *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem5(PointerFromQStandardItem(other)))
}

func NewQStandardItem2(text string) *QStandardItem {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem2(textC))
}

func NewQStandardItem4(rows int, columns int) *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem4(C.int(int32(rows)), C.int(int32(columns))))
}

func (ptr *QStandardItem) AppendColumn(items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_AppendColumn(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__appendColumn_items_newList())
			for _, v := range items {
				tmpList.__appendColumn_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) AppendRow2(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) AppendRow(items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_AppendRow(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__appendRow_items_newList())
			for _, v := range items {
				tmpList.__appendRow_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) AppendRows(items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_AppendRows(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__appendRows_items_newList())
			for _, v := range items {
				tmpList.__appendRows_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) EmitDataChanged() {
	if ptr.Pointer() != nil {
		C.QStandardItem_EmitDataChanged(ptr.Pointer())
	}
}

func (ptr *QStandardItem) InsertColumn(column int, items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertColumn(ptr.Pointer(), C.int(int32(column)), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__insertColumn_items_newList())
			for _, v := range items {
				tmpList.__insertColumn_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) InsertColumns(column int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) InsertRow2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRow2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) InsertRow(row int, items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRow(ptr.Pointer(), C.int(int32(row)), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__insertRow_items_newList())
			for _, v := range items {
				tmpList.__insertRow_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) InsertRows(row int, items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRows(ptr.Pointer(), C.int(int32(row)), func() unsafe.Pointer {
			var tmpList = NewQStandardItemFromPointer(NewQStandardItemFromPointer(nil).__insertRows_items_newList())
			for _, v := range items {
				tmpList.__insertRows_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItem) InsertRows2(row int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRows2(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)))
	}
}

//export callbackQStandardItem_Read
func callbackQStandardItem_Read(ptr unsafe.Pointer, in unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "read"); signal != nil {
		signal.(func(*core.QDataStream))(core.NewQDataStreamFromPointer(in))
	} else {
		NewQStandardItemFromPointer(ptr).ReadDefault(core.NewQDataStreamFromPointer(in))
	}
}

func (ptr *QStandardItem) ConnectRead(f func(in *core.QDataStream)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "read"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", func(in *core.QDataStream) {
				signal.(func(*core.QDataStream))(in)
				f(in)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "read", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "read")
	}
}

func (ptr *QStandardItem) Read(in core.QDataStream_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_Read(ptr.Pointer(), core.PointerFromQDataStream(in))
	}
}

func (ptr *QStandardItem) ReadDefault(in core.QDataStream_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_ReadDefault(ptr.Pointer(), core.PointerFromQDataStream(in))
	}
}

func (ptr *QStandardItem) RemoveColumn(column int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QStandardItem) RemoveColumns(column int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) RemoveRow(row int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QStandardItem) RemoveRows(row int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) SetAccessibleDescription(accessibleDescription string) {
	if ptr.Pointer() != nil {
		var accessibleDescriptionC *C.char
		if accessibleDescription != "" {
			accessibleDescriptionC = C.CString(accessibleDescription)
			defer C.free(unsafe.Pointer(accessibleDescriptionC))
		}
		C.QStandardItem_SetAccessibleDescription(ptr.Pointer(), accessibleDescriptionC)
	}
}

func (ptr *QStandardItem) SetAccessibleText(accessibleText string) {
	if ptr.Pointer() != nil {
		var accessibleTextC *C.char
		if accessibleText != "" {
			accessibleTextC = C.CString(accessibleText)
			defer C.free(unsafe.Pointer(accessibleTextC))
		}
		C.QStandardItem_SetAccessibleText(ptr.Pointer(), accessibleTextC)
	}
}

func (ptr *QStandardItem) SetAutoTristate(tristate bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetAutoTristate(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(tristate))))
	}
}

func (ptr *QStandardItem) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetCheckState(state core.Qt__CheckState) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckState(ptr.Pointer(), C.longlong(state))
	}
}

func (ptr *QStandardItem) SetCheckable(checkable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(checkable))))
	}
}

func (ptr *QStandardItem) SetChild2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetChild(row int, column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetColumnCount(columns int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetColumnCount(ptr.Pointer(), C.int(int32(columns)))
	}
}

//export callbackQStandardItem_SetData
func callbackQStandardItem_SetData(ptr unsafe.Pointer, value unsafe.Pointer, role C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setData"); signal != nil {
		signal.(func(*core.QVariant, int))(core.NewQVariantFromPointer(value), int(int32(role)))
	} else {
		NewQStandardItemFromPointer(ptr).SetDataDefault(core.NewQVariantFromPointer(value), int(int32(role)))
	}
}

func (ptr *QStandardItem) ConnectSetData(f func(value *core.QVariant, role int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setData"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setData", func(value *core.QVariant, role int) {
				signal.(func(*core.QVariant, int))(value, role)
				f(value, role)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setData", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setData")
	}
}

func (ptr *QStandardItem) SetData(value core.QVariant_ITF, role int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetData(ptr.Pointer(), core.PointerFromQVariant(value), C.int(int32(role)))
	}
}

func (ptr *QStandardItem) SetDataDefault(value core.QVariant_ITF, role int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDataDefault(ptr.Pointer(), core.PointerFromQVariant(value), C.int(int32(role)))
	}
}

func (ptr *QStandardItem) SetDragEnabled(dragEnabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDragEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dragEnabled))))
	}
}

func (ptr *QStandardItem) SetDropEnabled(dropEnabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDropEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dropEnabled))))
	}
}

func (ptr *QStandardItem) SetEditable(editable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetEditable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(editable))))
	}
}

func (ptr *QStandardItem) SetEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QStandardItem) SetFlags(flags core.Qt__ItemFlag) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QStandardItem) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QStandardItem) SetForeground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetIcon(icon QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QStandardItem) SetRowCount(rows int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetRowCount(ptr.Pointer(), C.int(int32(rows)))
	}
}

func (ptr *QStandardItem) SetSelectable(selectable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetSelectable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(selectable))))
	}
}

func (ptr *QStandardItem) SetSizeHint(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetSizeHint(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QStandardItem) SetStatusTip(statusTip string) {
	if ptr.Pointer() != nil {
		var statusTipC *C.char
		if statusTip != "" {
			statusTipC = C.CString(statusTip)
			defer C.free(unsafe.Pointer(statusTipC))
		}
		C.QStandardItem_SetStatusTip(ptr.Pointer(), statusTipC)
	}
}

func (ptr *QStandardItem) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QStandardItem_SetText(ptr.Pointer(), textC)
	}
}

func (ptr *QStandardItem) SetTextAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetTextAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QStandardItem) SetToolTip(toolTip string) {
	if ptr.Pointer() != nil {
		var toolTipC *C.char
		if toolTip != "" {
			toolTipC = C.CString(toolTip)
			defer C.free(unsafe.Pointer(toolTipC))
		}
		C.QStandardItem_SetToolTip(ptr.Pointer(), toolTipC)
	}
}

func (ptr *QStandardItem) SetUserTristate(tristate bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetUserTristate(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(tristate))))
	}
}

func (ptr *QStandardItem) SetWhatsThis(whatsThis string) {
	if ptr.Pointer() != nil {
		var whatsThisC *C.char
		if whatsThis != "" {
			whatsThisC = C.CString(whatsThis)
			defer C.free(unsafe.Pointer(whatsThisC))
		}
		C.QStandardItem_SetWhatsThis(ptr.Pointer(), whatsThisC)
	}
}

func (ptr *QStandardItem) SortChildren(column int, order core.Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SortChildren(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

//export callbackQStandardItem_DestroyQStandardItem
func callbackQStandardItem_DestroyQStandardItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QStandardItem"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemFromPointer(ptr).DestroyQStandardItemDefault()
	}
}

func (ptr *QStandardItem) ConnectDestroyQStandardItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QStandardItem"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QStandardItem", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QStandardItem", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectDestroyQStandardItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QStandardItem")
	}
}

func (ptr *QStandardItem) DestroyQStandardItem() {
	if ptr.Pointer() != nil {
		C.QStandardItem_DestroyQStandardItem(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItem) DestroyQStandardItemDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItem_DestroyQStandardItemDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItem) Background() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QStandardItem_Background(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Foreground() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QStandardItem_Foreground(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QStandardItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Icon() *QIcon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIconFromPointer(C.QStandardItem_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Index() *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItem_Index(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QStandardItem_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Child(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Child(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

//export callbackQStandardItem_Clone
func callbackQStandardItem_Clone(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "clone"); signal != nil {
		return PointerFromQStandardItem(signal.(func() *QStandardItem)())
	}

	return PointerFromQStandardItem(NewQStandardItemFromPointer(ptr).CloneDefault())
}

func (ptr *QStandardItem) ConnectClone(f func() *QStandardItem) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "clone"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clone", func() *QStandardItem {
				signal.(func() *QStandardItem)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clone", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectClone() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "clone")
	}
}

func (ptr *QStandardItem) Clone() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Clone(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) CloneDefault() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_CloneDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Parent() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Parent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Model() *QStandardItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItem_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) AccessibleDescription() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_AccessibleDescription(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) AccessibleText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_AccessibleText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) StatusTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_StatusTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) WhatsThis() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_WhatsThis(ptr.Pointer()))
	}
	return ""
}

//export callbackQStandardItem_Data
func callbackQStandardItem_Data(ptr unsafe.Pointer, role C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "data"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int) *core.QVariant)(int(int32(role))))
	}

	return core.PointerFromQVariant(NewQStandardItemFromPointer(ptr).DataDefault(int(int32(role))))
}

func (ptr *QStandardItem) ConnectData(f func(role int) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "data"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "data", func(role int) *core.QVariant {
				signal.(func(int) *core.QVariant)(role)
				return f(role)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "data", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "data")
	}
}

func (ptr *QStandardItem) Data(role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItem_Data(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) DataDefault(role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItem_DataDefault(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) TextAlignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QStandardItem_TextAlignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) CheckState() core.Qt__CheckState {
	if ptr.Pointer() != nil {
		return core.Qt__CheckState(C.QStandardItem_CheckState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) Flags() core.Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItem_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) HasChildren() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_HasChildren(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsAutoTristate() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsAutoTristate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsCheckable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsCheckable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDragEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDragEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDropEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDropEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEditable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEditable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsSelectable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsSelectable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsUserTristate() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsUserTristate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) ColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_ColumnCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Row(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) RowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_RowCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQStandardItem_Type
func callbackQStandardItem_Type(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "type"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQStandardItemFromPointer(ptr).TypeDefault()))
}

func (ptr *QStandardItem) ConnectType(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "type"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "type", func() int {
				signal.(func() int)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "type", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "type")
	}
}

func (ptr *QStandardItem) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) TypeDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_TypeDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQStandardItem_Write
func callbackQStandardItem_Write(ptr unsafe.Pointer, out unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "write"); signal != nil {
		signal.(func(*core.QDataStream))(core.NewQDataStreamFromPointer(out))
	} else {
		NewQStandardItemFromPointer(ptr).WriteDefault(core.NewQDataStreamFromPointer(out))
	}
}

func (ptr *QStandardItem) ConnectWrite(f func(out *core.QDataStream)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "write"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", func(out *core.QDataStream) {
				signal.(func(*core.QDataStream))(out)
				f(out)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "write", f)
		}
	}
}

func (ptr *QStandardItem) DisconnectWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "write")
	}
}

func (ptr *QStandardItem) Write(out core.QDataStream_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_Write(ptr.Pointer(), core.PointerFromQDataStream(out))
	}
}

func (ptr *QStandardItem) WriteDefault(out core.QDataStream_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_WriteDefault(ptr.Pointer(), core.PointerFromQDataStream(out))
	}
}

func (ptr *QStandardItem) __takeColumn_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___takeColumn_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __takeColumn_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___takeColumn_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __takeColumn_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___takeColumn_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __takeRow_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___takeRow_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __takeRow_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___takeRow_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __takeRow_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___takeRow_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __appendColumn_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___appendColumn_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __appendColumn_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___appendColumn_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __appendColumn_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___appendColumn_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __appendRow_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___appendRow_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __appendRow_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___appendRow_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __appendRow_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___appendRow_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __appendRows_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___appendRows_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __appendRows_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___appendRows_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __appendRows_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___appendRows_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __insertColumn_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___insertColumn_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __insertColumn_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___insertColumn_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __insertColumn_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___insertColumn_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __insertRow_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___insertRow_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __insertRow_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___insertRow_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __insertRow_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___insertRow_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItem) __insertRows_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem___insertRows_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) __insertRows_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem___insertRows_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItem) __insertRows_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItem___insertRows_items_newList(ptr.Pointer()))
}

type QStandardItemModel struct {
	core.QAbstractItemModel
}

type QStandardItemModel_ITF interface {
	core.QAbstractItemModel_ITF
	QStandardItemModel_PTR() *QStandardItemModel
}

func (ptr *QStandardItemModel) QStandardItemModel_PTR() *QStandardItemModel {
	return ptr
}

func (ptr *QStandardItemModel) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (ptr *QStandardItemModel) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractItemModel_PTR().SetPointer(p)
	}
}

func PointerFromQStandardItemModel(ptr QStandardItemModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItemModel_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemModelFromPointer(ptr unsafe.Pointer) *QStandardItemModel {
	var n = new(QStandardItemModel)
	n.SetPointer(ptr)
	return n
}
func (ptr *QStandardItemModel) TakeColumn(column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__takeColumn_atList(i)
			}
			return out
		}(C.QStandardItemModel_TakeColumn(ptr.Pointer(), C.int(int32(column))))
	}
	return make([]*QStandardItem, 0)
}

func (ptr *QStandardItemModel) TakeRow(row int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__takeRow_atList(i)
			}
			return out
		}(C.QStandardItemModel_TakeRow(ptr.Pointer(), C.int(int32(row))))
	}
	return make([]*QStandardItem, 0)
}

func (ptr *QStandardItemModel) TakeHorizontalHeaderItem(column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeHorizontalHeaderItem(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeItem(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeItem(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeVerticalHeaderItem(row int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeVerticalHeaderItem(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func NewQStandardItemModel(parent core.QObject_ITF) *QStandardItemModel {
	var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQStandardItemModel2(rows int, columns int, parent core.QObject_ITF) *QStandardItemModel {
	var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel2(C.int(int32(rows)), C.int(int32(columns)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQStandardItemModel_DropMimeData
func callbackQStandardItemModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QMimeData, core.Qt__DropAction, int, int, *core.QModelIndex) bool)(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).DropMimeDataDefault(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) DropMimeDataDefault(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_DropMimeDataDefault(ptr.Pointer(), core.PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_InsertColumns
func callbackQStandardItemModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(int32(column)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) InsertColumnsDefault(column int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_InsertRows
func callbackQStandardItemModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(int32(row)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) InsertRowsDefault(row int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_RemoveColumns
func callbackQStandardItemModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(int32(column)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) RemoveColumnsDefault(column int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_RemoveRows
func callbackQStandardItemModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *core.QModelIndex) bool)(int(int32(row)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) RemoveRowsDefault(row int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_SetData
func callbackQStandardItemModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, *core.QVariant, int) bool)(core.NewQModelIndexFromPointer(index), core.NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SetDataDefault(core.NewQModelIndexFromPointer(index), core.NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QStandardItemModel) SetDataDefault(index core.QModelIndex_ITF, value core.QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetDataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index), core.PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQStandardItemModel_SetHeaderData
func callbackQStandardItemModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, core.Qt__Orientation, *core.QVariant, int) bool)(int(int32(section)), core.Qt__Orientation(orientation), core.NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), core.Qt__Orientation(orientation), core.NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QStandardItemModel) SetHeaderDataDefault(section int, orientation core.Qt__Orientation, value core.QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), core.PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQStandardItemModel_SetItemData
func callbackQStandardItemModel_SetItemData(ptr unsafe.Pointer, index unsafe.Pointer, roles C.struct_QtGui_PackedList) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setItemData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, map[int]*core.QVariant) bool)(core.NewQModelIndexFromPointer(index), func(l C.struct_QtGui_PackedList) map[int]*core.QVariant {
			var out = make(map[int]*core.QVariant, int(l.len))
			for _, i := range NewQStandardItemModelFromPointer(l.data).__setItemData_keyList() {
				out[i] = NewQStandardItemModelFromPointer(l.data).__setItemData_roles_atList(i)
			}
			return out
		}(roles)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SetItemDataDefault(core.NewQModelIndexFromPointer(index), func(l C.struct_QtGui_PackedList) map[int]*core.QVariant {
		var out = make(map[int]*core.QVariant, int(l.len))
		for _, i := range NewQStandardItemModelFromPointer(l.data).__setItemData_keyList() {
			out[i] = NewQStandardItemModelFromPointer(l.data).__setItemData_roles_atList(i)
		}
		return out
	}(roles)))))
}

func (ptr *QStandardItemModel) SetItemDataDefault(index core.QModelIndex_ITF, roles map[int]*core.QVariant) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetItemDataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__setItemData_roles_newList())
			for k, v := range roles {
				tmpList.__setItemData_roles_setList(k, v)
			}
			return tmpList.Pointer()
		}()) != 0
	}
	return false
}

func (ptr *QStandardItemModel) AppendColumn(items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_AppendColumn(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__appendColumn_items_newList())
			for _, v := range items {
				tmpList.__appendColumn_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItemModel) AppendRow2(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) AppendRow(items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_AppendRow(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__appendRow_items_newList())
			for _, v := range items {
				tmpList.__appendRow_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItemModel) Clear() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_Clear(ptr.Pointer())
	}
}

func (ptr *QStandardItemModel) InsertColumn(column int, items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_InsertColumn(ptr.Pointer(), C.int(int32(column)), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__insertColumn_items_newList())
			for _, v := range items {
				tmpList.__insertColumn_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItemModel) InsertRow2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_InsertRow2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) InsertRow(row int, items []*QStandardItem) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_InsertRow(ptr.Pointer(), C.int(int32(row)), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__insertRow_items_newList())
			for _, v := range items {
				tmpList.__insertRow_items_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

//export callbackQStandardItemModel_ItemChanged
func callbackQStandardItemModel_ItemChanged(ptr unsafe.Pointer, item unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "itemChanged"); signal != nil {
		signal.(func(*QStandardItem))(NewQStandardItemFromPointer(item))
	}

}

func (ptr *QStandardItemModel) ConnectItemChanged(f func(item *QStandardItem)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "itemChanged") {
			C.QStandardItemModel_ConnectItemChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "itemChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "itemChanged", func(item *QStandardItem) {
				signal.(func(*QStandardItem))(item)
				f(item)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "itemChanged", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectItemChanged() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectItemChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "itemChanged")
	}
}

func (ptr *QStandardItemModel) ItemChanged(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ItemChanged(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetColumnCount(columns int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetColumnCount(ptr.Pointer(), C.int(int32(columns)))
	}
}

func (ptr *QStandardItemModel) SetHorizontalHeaderItem(column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetHorizontalHeaderItem(ptr.Pointer(), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetHorizontalHeaderLabels(labels []string) {
	if ptr.Pointer() != nil {
		var labelsC = C.CString(strings.Join(labels, "|"))
		defer C.free(unsafe.Pointer(labelsC))
		C.QStandardItemModel_SetHorizontalHeaderLabels(ptr.Pointer(), labelsC)
	}
}

func (ptr *QStandardItemModel) SetItem2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItem(row int, column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItemPrototype(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItemPrototype(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItemRoleNames(roleNames map[int]*core.QByteArray) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItemRoleNames(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__setItemRoleNames_roleNames_newList())
			for k, v := range roleNames {
				tmpList.__setItemRoleNames_roleNames_setList(k, v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QStandardItemModel) SetRowCount(rows int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetRowCount(ptr.Pointer(), C.int(int32(rows)))
	}
}

func (ptr *QStandardItemModel) SetSortRole(role int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetSortRole(ptr.Pointer(), C.int(int32(role)))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderItem(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetVerticalHeaderItem(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderLabels(labels []string) {
	if ptr.Pointer() != nil {
		var labelsC = C.CString(strings.Join(labels, "|"))
		defer C.free(unsafe.Pointer(labelsC))
		C.QStandardItemModel_SetVerticalHeaderLabels(ptr.Pointer(), labelsC)
	}
}

//export callbackQStandardItemModel_Sort
func callbackQStandardItemModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "sort"); signal != nil {
		signal.(func(int, core.Qt__SortOrder))(int(int32(column)), core.Qt__SortOrder(order))
	} else {
		NewQStandardItemModelFromPointer(ptr).SortDefault(int(int32(column)), core.Qt__SortOrder(order))
	}
}

func (ptr *QStandardItemModel) SortDefault(column int, order core.Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QStandardItemModel) DestroyQStandardItemModel() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DestroyQStandardItemModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItemModel) FindItems(text string, flags core.Qt__MatchFlag, column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__findItems_atList(i)
			}
			return out
		}(C.QStandardItemModel_FindItems(ptr.Pointer(), textC, C.longlong(flags), C.int(int32(column))))
	}
	return make([]*QStandardItem, 0)
}

//export callbackQStandardItemModel_ItemData
func callbackQStandardItemModel_ItemData(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "itemData"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__itemData_newList())
			for k, v := range signal.(func(*core.QModelIndex) map[int]*core.QVariant)(core.NewQModelIndexFromPointer(index)) {
				tmpList.__itemData_setList(k, v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__itemData_newList())
		for k, v := range NewQStandardItemModelFromPointer(ptr).ItemDataDefault(core.NewQModelIndexFromPointer(index)) {
			tmpList.__itemData_setList(k, v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QStandardItemModel) ItemDataDefault(index core.QModelIndex_ITF) map[int]*core.QVariant {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) map[int]*core.QVariant {
			var out = make(map[int]*core.QVariant, int(l.len))
			for _, i := range NewQStandardItemModelFromPointer(l.data).__itemData_keyList() {
				out[i] = NewQStandardItemModelFromPointer(l.data).__itemData_atList(i)
			}
			return out
		}(C.QStandardItemModel_ItemDataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return make(map[int]*core.QVariant, 0)
}

//export callbackQStandardItemModel_MimeData
func callbackQStandardItemModel_MimeData(ptr unsafe.Pointer, indexes C.struct_QtGui_PackedList) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mimeData"); signal != nil {
		return core.PointerFromQMimeData(signal.(func([]*core.QModelIndex) *core.QMimeData)(func(l C.struct_QtGui_PackedList) []*core.QModelIndex {
			var out = make([]*core.QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__mimeData_indexes_atList(i)
			}
			return out
		}(indexes)))
	}

	return core.PointerFromQMimeData(NewQStandardItemModelFromPointer(ptr).MimeDataDefault(func(l C.struct_QtGui_PackedList) []*core.QModelIndex {
		var out = make([]*core.QModelIndex, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQStandardItemModelFromPointer(l.data).__mimeData_indexes_atList(i)
		}
		return out
	}(indexes)))
}

func (ptr *QStandardItemModel) MimeDataDefault(indexes []*core.QModelIndex) *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QStandardItemModel_MimeDataDefault(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__mimeData_indexes_newList())
			for _, v := range indexes {
				tmpList.__mimeData_indexes_setList(v)
			}
			return tmpList.Pointer()
		}()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_Index
func callbackQStandardItemModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "index"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(int, int, *core.QModelIndex) *core.QModelIndex)(int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))
}

func (ptr *QStandardItemModel) ConnectIndex(f func(row int, column int, parent *core.QModelIndex) *core.QModelIndex) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "index"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "index", func(row int, column int, parent *core.QModelIndex) *core.QModelIndex {
				signal.(func(int, int, *core.QModelIndex) *core.QModelIndex)(row, column, parent)
				return f(row, column, parent)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "index", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "index")
	}
}

func (ptr *QStandardItemModel) Index(row int, column int, parent core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) IndexDefault(row int, column int, parent core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) IndexFromItem(item QStandardItem_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_IndexFromItem(ptr.Pointer(), PointerFromQStandardItem(item)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_Parent
func callbackQStandardItemModel_Parent(ptr unsafe.Pointer, child unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "parent"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(*core.QModelIndex) *core.QModelIndex)(core.NewQModelIndexFromPointer(child)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).ParentDefault(core.NewQModelIndexFromPointer(child)))
}

func (ptr *QStandardItemModel) ConnectParent(f func(child *core.QModelIndex) *core.QModelIndex) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "parent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "parent", func(child *core.QModelIndex) *core.QModelIndex {
				signal.(func(*core.QModelIndex) *core.QModelIndex)(child)
				return f(child)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "parent", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "parent")
	}
}

func (ptr *QStandardItemModel) Parent(child core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Parent(ptr.Pointer(), core.PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) ParentDefault(child core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_ParentDefault(ptr.Pointer(), core.PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_Sibling
func callbackQStandardItemModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "sibling"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(int, int, *core.QModelIndex) *core.QModelIndex)(int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(idx)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(idx)))
}

func (ptr *QStandardItemModel) SiblingDefault(row int, column int, idx core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) HorizontalHeaderItem(column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_HorizontalHeaderItem(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) InvisibleRootItem() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_InvisibleRootItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) Item(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_Item(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) ItemFromIndex(index core.QModelIndex_ITF) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemFromIndex(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

func (ptr *QStandardItemModel) VerticalHeaderItem(row int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_VerticalHeaderItem(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

//export callbackQStandardItemModel_MimeTypes
func callbackQStandardItemModel_MimeTypes(ptr unsafe.Pointer) *C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQStandardItemModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QStandardItemModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QStandardItemModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQStandardItemModel_Data
func callbackQStandardItemModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "data"); signal != nil {
		return core.PointerFromQVariant(signal.(func(*core.QModelIndex, int) *core.QVariant)(core.NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return core.PointerFromQVariant(NewQStandardItemModelFromPointer(ptr).DataDefault(core.NewQModelIndexFromPointer(index), int(int32(role))))
}

func (ptr *QStandardItemModel) ConnectData(f func(index *core.QModelIndex, role int) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "data"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "data", func(index *core.QModelIndex, role int) *core.QVariant {
				signal.(func(*core.QModelIndex, int) *core.QVariant)(index, role)
				return f(index, role)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "data", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "data")
	}
}

func (ptr *QStandardItemModel) Data(index core.QModelIndex_ITF, role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel_Data(ptr.Pointer(), core.PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) DataDefault(index core.QModelIndex_ITF, role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel_DataDefault(ptr.Pointer(), core.PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_HeaderData
func callbackQStandardItemModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "headerData"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, core.Qt__Orientation, int) *core.QVariant)(int(int32(section)), core.Qt__Orientation(orientation), int(int32(role))))
	}

	return core.PointerFromQVariant(NewQStandardItemModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), core.Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QStandardItemModel) HeaderDataDefault(section int, orientation core.Qt__Orientation, role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_SupportedDropActions
func callbackQStandardItemModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() core.Qt__DropAction)())
	}

	return C.longlong(NewQStandardItemModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QStandardItemModel) SupportedDropActionsDefault() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStandardItemModel_Flags
func callbackQStandardItemModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "flags"); signal != nil {
		return C.longlong(signal.(func(*core.QModelIndex) core.Qt__ItemFlag)(core.NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQStandardItemModelFromPointer(ptr).FlagsDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) FlagsDefault(index core.QModelIndex_ITF) core.Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItemModel_FlagsDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQStandardItemModel_HasChildren
func callbackQStandardItemModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex) bool)(core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).HasChildrenDefault(core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) HasChildrenDefault(parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_HasChildrenDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) ItemPrototype() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemPrototype(ptr.Pointer()))
	}
	return nil
}

//export callbackQStandardItemModel_ColumnCount
func callbackQStandardItemModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnCount"); signal != nil {
		return C.int(int32(signal.(func(*core.QModelIndex) int)(core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQStandardItemModelFromPointer(ptr).ColumnCountDefault(core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectColumnCount(f func(parent *core.QModelIndex) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "columnCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount", func(parent *core.QModelIndex) int {
				signal.(func(*core.QModelIndex) int)(parent)
				return f(parent)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "columnCount")
	}
}

func (ptr *QStandardItemModel) ColumnCount(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_ColumnCount(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStandardItemModel) ColumnCountDefault(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_ColumnCountDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQStandardItemModel_RowCount
func callbackQStandardItemModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowCount"); signal != nil {
		return C.int(int32(signal.(func(*core.QModelIndex) int)(core.NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQStandardItemModelFromPointer(ptr).RowCountDefault(core.NewQModelIndexFromPointer(parent))))
}

func (ptr *QStandardItemModel) ConnectRowCount(f func(parent *core.QModelIndex) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rowCount"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount", func(parent *core.QModelIndex) int {
				signal.(func(*core.QModelIndex) int)(parent)
				return f(parent)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount", f)
		}
	}
}

func (ptr *QStandardItemModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rowCount")
	}
}

func (ptr *QStandardItemModel) RowCount(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_RowCount(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStandardItemModel) RowCountDefault(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_RowCountDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStandardItemModel) SortRole() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_SortRole(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItemModel) __takeColumn_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___takeColumn_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __takeColumn_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___takeColumn_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __takeColumn_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___takeColumn_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __takeRow_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___takeRow_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __takeRow_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___takeRow_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __takeRow_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___takeRow_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __setItemData_roles_atList(i int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel___setItemData_roles_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __setItemData_roles_setList(key int, i core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___setItemData_roles_setList(ptr.Pointer(), C.int(int32(key)), core.PointerFromQVariant(i))
	}
}

func (ptr *QStandardItemModel) __setItemData_roles_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___setItemData_roles_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __setItemData_keyList() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).____setItemData_keyList_atList(i)
			}
			return out
		}(C.QStandardItemModel___setItemData_keyList(ptr.Pointer()))
	}
	return make([]int, 0)
}

func (ptr *QStandardItemModel) __appendColumn_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___appendColumn_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __appendColumn_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___appendColumn_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __appendColumn_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___appendColumn_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __appendRow_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___appendRow_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __appendRow_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___appendRow_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __appendRow_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___appendRow_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __insertColumn_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___insertColumn_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __insertColumn_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___insertColumn_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __insertColumn_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___insertColumn_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __insertRow_items_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___insertRow_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __insertRow_items_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___insertRow_items_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __insertRow_items_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___insertRow_items_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __setItemRoleNames_roleNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QStandardItemModel___setItemRoleNames_roleNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __setItemRoleNames_roleNames_setList(key int, i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___setItemRoleNames_roleNames_setList(ptr.Pointer(), C.int(int32(key)), core.PointerFromQByteArray(i))
	}
}

func (ptr *QStandardItemModel) __setItemRoleNames_roleNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___setItemRoleNames_roleNames_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __setItemRoleNames_keyList() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).____setItemRoleNames_keyList_atList(i)
			}
			return out
		}(C.QStandardItemModel___setItemRoleNames_keyList(ptr.Pointer()))
	}
	return make([]int, 0)
}

func (ptr *QStandardItemModel) __findItems_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel___findItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) __findItems_setList(i QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___findItems_setList(ptr.Pointer(), PointerFromQStandardItem(i))
	}
}

func (ptr *QStandardItemModel) __findItems_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___findItems_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __itemData_atList(i int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel___itemData_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __itemData_setList(key int, i core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___itemData_setList(ptr.Pointer(), C.int(int32(key)), core.PointerFromQVariant(i))
	}
}

func (ptr *QStandardItemModel) __itemData_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___itemData_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __itemData_keyList() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).____itemData_keyList_atList(i)
			}
			return out
		}(C.QStandardItemModel___itemData_keyList(ptr.Pointer()))
	}
	return make([]int, 0)
}

func (ptr *QStandardItemModel) __mimeData_indexes_atList(i int) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel___mimeData_indexes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __mimeData_indexes_setList(i core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___mimeData_indexes_setList(ptr.Pointer(), core.PointerFromQModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __mimeData_indexes_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___mimeData_indexes_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____setItemData_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____setItemData_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____setItemData_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____setItemData_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____setItemData_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____setItemData_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____setItemRoleNames_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____setItemRoleNames_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____setItemRoleNames_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____setItemRoleNames_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____setItemRoleNames_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____setItemRoleNames_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____itemData_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____itemData_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____itemData_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____itemData_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____itemData_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____itemData_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __changePersistentIndexList_from_atList(i int) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel___changePersistentIndexList_from_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __changePersistentIndexList_from_setList(i core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___changePersistentIndexList_from_setList(ptr.Pointer(), core.PointerFromQModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __changePersistentIndexList_from_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___changePersistentIndexList_from_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __changePersistentIndexList_to_atList(i int) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel___changePersistentIndexList_to_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __changePersistentIndexList_to_setList(i core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___changePersistentIndexList_to_setList(ptr.Pointer(), core.PointerFromQModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __changePersistentIndexList_to_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___changePersistentIndexList_to_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __dataChanged_roles_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel___dataChanged_roles_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) __dataChanged_roles_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___dataChanged_roles_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) __dataChanged_roles_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___dataChanged_roles_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __layoutAboutToBeChanged_parents_atList(i int) *core.QPersistentModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPersistentModelIndexFromPointer(C.QStandardItemModel___layoutAboutToBeChanged_parents_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPersistentModelIndex).DestroyQPersistentModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __layoutAboutToBeChanged_parents_setList(i core.QPersistentModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___layoutAboutToBeChanged_parents_setList(ptr.Pointer(), core.PointerFromQPersistentModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __layoutAboutToBeChanged_parents_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___layoutAboutToBeChanged_parents_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __layoutChanged_parents_atList(i int) *core.QPersistentModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPersistentModelIndexFromPointer(C.QStandardItemModel___layoutChanged_parents_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPersistentModelIndex).DestroyQPersistentModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __layoutChanged_parents_setList(i core.QPersistentModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___layoutChanged_parents_setList(ptr.Pointer(), core.PointerFromQPersistentModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __layoutChanged_parents_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___layoutChanged_parents_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __roleNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QStandardItemModel___roleNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __roleNames_setList(key int, i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___roleNames_setList(ptr.Pointer(), C.int(int32(key)), core.PointerFromQByteArray(i))
	}
}

func (ptr *QStandardItemModel) __roleNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___roleNames_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __roleNames_keyList() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).____roleNames_keyList_atList(i)
			}
			return out
		}(C.QStandardItemModel___roleNames_keyList(ptr.Pointer()))
	}
	return make([]int, 0)
}

func (ptr *QStandardItemModel) __match_atList(i int) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel___match_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __match_setList(i core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___match_setList(ptr.Pointer(), core.PointerFromQModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __match_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___match_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __persistentIndexList_atList(i int) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel___persistentIndexList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __persistentIndexList_setList(i core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___persistentIndexList_setList(ptr.Pointer(), core.PointerFromQModelIndex(i))
	}
}

func (ptr *QStandardItemModel) __persistentIndexList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___persistentIndexList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____doSetRoleNames_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____doSetRoleNames_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____doSetRoleNames_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____doSetRoleNames_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____doSetRoleNames_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____doSetRoleNames_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____setRoleNames_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____setRoleNames_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____setRoleNames_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____setRoleNames_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____setRoleNames_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____setRoleNames_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) ____roleNames_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_____roleNames_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QStandardItemModel) ____roleNames_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_____roleNames_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QStandardItemModel) ____roleNames_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel_____roleNames_keyList_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QStandardItemModel___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QStandardItemModel) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStandardItemModel___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStandardItemModel) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStandardItemModel___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStandardItemModel) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStandardItemModel___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStandardItemModel) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___findChildren_newList(ptr.Pointer()))
}

func (ptr *QStandardItemModel) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStandardItemModel___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStandardItemModel) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStandardItemModel___children_newList(ptr.Pointer()))
}

//export callbackQStandardItemModel_MoveColumns
func callbackQStandardItemModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveColumnsDefault(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStandardItemModel) MoveColumnsDefault(sourceParent core.QModelIndex_ITF, sourceColumn int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveColumnsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStandardItemModel_MoveRows
func callbackQStandardItemModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveRowsDefault(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStandardItemModel) MoveRowsDefault(sourceParent core.QModelIndex_ITF, sourceRow int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveRowsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStandardItemModel_Submit
func callbackQStandardItemModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QStandardItemModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStandardItemModel_ColumnsAboutToBeInserted
func callbackQStandardItemModel_ColumnsAboutToBeInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsAboutToBeInserted"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_ColumnsAboutToBeMoved
func callbackQStandardItemModel_ColumnsAboutToBeMoved(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceStart C.int, sourceEnd C.int, destinationParent unsafe.Pointer, destinationColumn C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsAboutToBeMoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int))(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceStart)), int(int32(sourceEnd)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationColumn)))
	}

}

//export callbackQStandardItemModel_ColumnsAboutToBeRemoved
func callbackQStandardItemModel_ColumnsAboutToBeRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsAboutToBeRemoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_ColumnsInserted
func callbackQStandardItemModel_ColumnsInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsInserted"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_ColumnsMoved
func callbackQStandardItemModel_ColumnsMoved(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int, destination unsafe.Pointer, column C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsMoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int))(core.NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)), core.NewQModelIndexFromPointer(destination), int(int32(column)))
	}

}

//export callbackQStandardItemModel_ColumnsRemoved
func callbackQStandardItemModel_ColumnsRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "columnsRemoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_DataChanged
func callbackQStandardItemModel_DataChanged(ptr unsafe.Pointer, topLeft unsafe.Pointer, bottomRight unsafe.Pointer, roles C.struct_QtGui_PackedList) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "dataChanged"); signal != nil {
		signal.(func(*core.QModelIndex, *core.QModelIndex, []int))(core.NewQModelIndexFromPointer(topLeft), core.NewQModelIndexFromPointer(bottomRight), func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__dataChanged_roles_atList(i)
			}
			return out
		}(roles))
	}

}

//export callbackQStandardItemModel_FetchMore
func callbackQStandardItemModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "fetchMore"); signal != nil {
		signal.(func(*core.QModelIndex))(core.NewQModelIndexFromPointer(parent))
	} else {
		NewQStandardItemModelFromPointer(ptr).FetchMoreDefault(core.NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QStandardItemModel) FetchMoreDefault(parent core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_FetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent))
	}
}

//export callbackQStandardItemModel_HeaderDataChanged
func callbackQStandardItemModel_HeaderDataChanged(ptr unsafe.Pointer, orientation C.longlong, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "headerDataChanged"); signal != nil {
		signal.(func(core.Qt__Orientation, int, int))(core.Qt__Orientation(orientation), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_LayoutAboutToBeChanged
func callbackQStandardItemModel_LayoutAboutToBeChanged(ptr unsafe.Pointer, parents C.struct_QtGui_PackedList, hint C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "layoutAboutToBeChanged"); signal != nil {
		signal.(func([]*core.QPersistentModelIndex, core.QAbstractItemModel__LayoutChangeHint))(func(l C.struct_QtGui_PackedList) []*core.QPersistentModelIndex {
			var out = make([]*core.QPersistentModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__layoutAboutToBeChanged_parents_atList(i)
			}
			return out
		}(parents), core.QAbstractItemModel__LayoutChangeHint(hint))
	}

}

//export callbackQStandardItemModel_LayoutChanged
func callbackQStandardItemModel_LayoutChanged(ptr unsafe.Pointer, parents C.struct_QtGui_PackedList, hint C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "layoutChanged"); signal != nil {
		signal.(func([]*core.QPersistentModelIndex, core.QAbstractItemModel__LayoutChangeHint))(func(l C.struct_QtGui_PackedList) []*core.QPersistentModelIndex {
			var out = make([]*core.QPersistentModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__layoutChanged_parents_atList(i)
			}
			return out
		}(parents), core.QAbstractItemModel__LayoutChangeHint(hint))
	}

}

//export callbackQStandardItemModel_ModelAboutToBeReset
func callbackQStandardItemModel_ModelAboutToBeReset(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "modelAboutToBeReset"); signal != nil {
		signal.(func())()
	}

}

//export callbackQStandardItemModel_ModelReset
func callbackQStandardItemModel_ModelReset(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "modelReset"); signal != nil {
		signal.(func())()
	}

}

//export callbackQStandardItemModel_ResetInternalData
func callbackQStandardItemModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QStandardItemModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_Revert
func callbackQStandardItemModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "revert"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QStandardItemModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_RowsAboutToBeInserted
func callbackQStandardItemModel_RowsAboutToBeInserted(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsAboutToBeInserted"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)))
	}

}

//export callbackQStandardItemModel_RowsAboutToBeMoved
func callbackQStandardItemModel_RowsAboutToBeMoved(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceStart C.int, sourceEnd C.int, destinationParent unsafe.Pointer, destinationRow C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsAboutToBeMoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int))(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceStart)), int(int32(sourceEnd)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationRow)))
	}

}

//export callbackQStandardItemModel_RowsAboutToBeRemoved
func callbackQStandardItemModel_RowsAboutToBeRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsAboutToBeRemoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_RowsInserted
func callbackQStandardItemModel_RowsInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsInserted"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_RowsMoved
func callbackQStandardItemModel_RowsMoved(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int, destination unsafe.Pointer, row C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsMoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int))(core.NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)), core.NewQModelIndexFromPointer(destination), int(int32(row)))
	}

}

//export callbackQStandardItemModel_RowsRemoved
func callbackQStandardItemModel_RowsRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rowsRemoved"); signal != nil {
		signal.(func(*core.QModelIndex, int, int))(core.NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

//export callbackQStandardItemModel_RoleNames
func callbackQStandardItemModel_RoleNames(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "roleNames"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__roleNames_newList())
			for k, v := range signal.(func() map[int]*core.QByteArray)() {
				tmpList.__roleNames_setList(k, v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__roleNames_newList())
		for k, v := range NewQStandardItemModelFromPointer(ptr).RoleNamesDefault() {
			tmpList.__roleNames_setList(k, v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QStandardItemModel) RoleNamesDefault() map[int]*core.QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) map[int]*core.QByteArray {
			var out = make(map[int]*core.QByteArray, int(l.len))
			for _, i := range NewQStandardItemModelFromPointer(l.data).__roleNames_keyList() {
				out[i] = NewQStandardItemModelFromPointer(l.data).__roleNames_atList(i)
			}
			return out
		}(C.QStandardItemModel_RoleNamesDefault(ptr.Pointer()))
	}
	return make(map[int]*core.QByteArray, 0)
}

//export callbackQStandardItemModel_Buddy
func callbackQStandardItemModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "buddy"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(*core.QModelIndex) *core.QModelIndex)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).BuddyDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) BuddyDefault(index core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_BuddyDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_Match
func callbackQStandardItemModel_Match(ptr unsafe.Pointer, start unsafe.Pointer, role C.int, value unsafe.Pointer, hits C.int, flags C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "match"); signal != nil {
		return func() unsafe.Pointer {
			var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__match_newList())
			for _, v := range signal.(func(*core.QModelIndex, int, *core.QVariant, int, core.Qt__MatchFlag) []*core.QModelIndex)(core.NewQModelIndexFromPointer(start), int(int32(role)), core.NewQVariantFromPointer(value), int(int32(hits)), core.Qt__MatchFlag(flags)) {
				tmpList.__match_setList(v)
			}
			return tmpList.Pointer()
		}()
	}

	return func() unsafe.Pointer {
		var tmpList = NewQStandardItemModelFromPointer(NewQStandardItemModelFromPointer(nil).__match_newList())
		for _, v := range NewQStandardItemModelFromPointer(ptr).MatchDefault(core.NewQModelIndexFromPointer(start), int(int32(role)), core.NewQVariantFromPointer(value), int(int32(hits)), core.Qt__MatchFlag(flags)) {
			tmpList.__match_setList(v)
		}
		return tmpList.Pointer()
	}()
}

func (ptr *QStandardItemModel) MatchDefault(start core.QModelIndex_ITF, role int, value core.QVariant_ITF, hits int, flags core.Qt__MatchFlag) []*core.QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QModelIndex {
			var out = make([]*core.QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).__match_atList(i)
			}
			return out
		}(C.QStandardItemModel_MatchDefault(ptr.Pointer(), core.PointerFromQModelIndex(start), C.int(int32(role)), core.PointerFromQVariant(value), C.int(int32(hits)), C.longlong(flags)))
	}
	return make([]*core.QModelIndex, 0)
}

//export callbackQStandardItemModel_Span
func callbackQStandardItemModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "span"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QModelIndex) *core.QSize)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQSize(NewQStandardItemModelFromPointer(ptr).SpanDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) SpanDefault(index core.QModelIndex_ITF) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QStandardItemModel_SpanDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_SupportedDragActions
func callbackQStandardItemModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() core.Qt__DropAction)())
	}

	return C.longlong(NewQStandardItemModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QStandardItemModel) SupportedDragActionsDefault() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStandardItemModel_CanDropMimeData
func callbackQStandardItemModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QMimeData, core.Qt__DropAction, int, int, *core.QModelIndex) bool)(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanDropMimeDataDefault(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) CanDropMimeDataDefault(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanDropMimeDataDefault(ptr.Pointer(), core.PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_CanFetchMore
func callbackQStandardItemModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex) bool)(core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanFetchMoreDefault(core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) CanFetchMoreDefault(parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanFetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_Event
func callbackQStandardItemModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QStandardItemModel) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStandardItemModel_EventFilter
func callbackQStandardItemModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QStandardItemModel) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStandardItemModel_ChildEvent
func callbackQStandardItemModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStandardItemModel_ConnectNotify
func callbackQStandardItemModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_CustomEvent
func callbackQStandardItemModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStandardItemModel_DeleteLater
func callbackQStandardItemModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStandardItemModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStandardItemModel_Destroyed
func callbackQStandardItemModel_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQStandardItemModel_DisconnectNotify
func callbackQStandardItemModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_ObjectNameChanged
func callbackQStandardItemModel_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQStandardItemModel_TimerEvent
func callbackQStandardItemModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStandardItemModel_MetaObject
func callbackQStandardItemModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStandardItemModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStandardItemModel) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStandardItemModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QStaticText struct {
	ptr unsafe.Pointer
}

type QStaticText_ITF interface {
	QStaticText_PTR() *QStaticText
}

func (ptr *QStaticText) QStaticText_PTR() *QStaticText {
	return ptr
}

func (ptr *QStaticText) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QStaticText) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQStaticText(ptr QStaticText_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStaticText_PTR().Pointer()
	}
	return nil
}

func NewQStaticTextFromPointer(ptr unsafe.Pointer) *QStaticText {
	var n = new(QStaticText)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QStaticText__PerformanceHint
//QStaticText::PerformanceHint
type QStaticText__PerformanceHint int64

const (
	QStaticText__ModerateCaching   QStaticText__PerformanceHint = QStaticText__PerformanceHint(0)
	QStaticText__AggressiveCaching QStaticText__PerformanceHint = QStaticText__PerformanceHint(1)
)

func NewQStaticText() *QStaticText {
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText())
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func NewQStaticText3(other QStaticText_ITF) *QStaticText {
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText3(PointerFromQStaticText(other)))
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func NewQStaticText2(text string) *QStaticText {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText2(textC))
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func (ptr *QStaticText) Prepare(matrix QTransform_ITF, font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_Prepare(ptr.Pointer(), PointerFromQTransform(matrix), PointerFromQFont(font))
	}
}

func (ptr *QStaticText) SetPerformanceHint(performanceHint QStaticText__PerformanceHint) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetPerformanceHint(ptr.Pointer(), C.longlong(performanceHint))
	}
}

func (ptr *QStaticText) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QStaticText_SetText(ptr.Pointer(), textC)
	}
}

func (ptr *QStaticText) SetTextFormat(textFormat core.Qt__TextFormat) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextFormat(ptr.Pointer(), C.longlong(textFormat))
	}
}

func (ptr *QStaticText) SetTextOption(textOption QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextOption(ptr.Pointer(), PointerFromQTextOption(textOption))
	}
}

func (ptr *QStaticText) SetTextWidth(textWidth float64) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextWidth(ptr.Pointer(), C.double(textWidth))
	}
}

func (ptr *QStaticText) Swap(other QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_Swap(ptr.Pointer(), PointerFromQStaticText(other))
	}
}

func (ptr *QStaticText) DestroyQStaticText() {
	if ptr.Pointer() != nil {
		C.QStaticText_DestroyQStaticText(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QStaticText) PerformanceHint() QStaticText__PerformanceHint {
	if ptr.Pointer() != nil {
		return QStaticText__PerformanceHint(C.QStaticText_PerformanceHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) Size() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QStaticText_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QStaticText) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStaticText_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStaticText) TextOption() *QTextOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextOptionFromPointer(C.QStaticText_TextOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
		return tmpValue
	}
	return nil
}

func (ptr *QStaticText) TextFormat() core.Qt__TextFormat {
	if ptr.Pointer() != nil {
		return core.Qt__TextFormat(C.QStaticText_TextFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) TextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStaticText_TextWidth(ptr.Pointer()))
	}
	return 0
}

type QStatusTipEvent struct {
	core.QEvent
}

type QStatusTipEvent_ITF interface {
	core.QEvent_ITF
	QStatusTipEvent_PTR() *QStatusTipEvent
}

func (ptr *QStatusTipEvent) QStatusTipEvent_PTR() *QStatusTipEvent {
	return ptr
}

func (ptr *QStatusTipEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QStatusTipEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQStatusTipEvent(ptr QStatusTipEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStatusTipEvent_PTR().Pointer()
	}
	return nil
}

func NewQStatusTipEventFromPointer(ptr unsafe.Pointer) *QStatusTipEvent {
	var n = new(QStatusTipEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStatusTipEvent) DestroyQStatusTipEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQStatusTipEvent(tip string) *QStatusTipEvent {
	var tipC *C.char
	if tip != "" {
		tipC = C.CString(tip)
		defer C.free(unsafe.Pointer(tipC))
	}
	return NewQStatusTipEventFromPointer(C.QStatusTipEvent_NewQStatusTipEvent(tipC))
}

func (ptr *QStatusTipEvent) Tip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStatusTipEvent_Tip(ptr.Pointer()))
	}
	return ""
}

type QStyleHints struct {
	core.QObject
}

type QStyleHints_ITF interface {
	core.QObject_ITF
	QStyleHints_PTR() *QStyleHints
}

func (ptr *QStyleHints) QStyleHints_PTR() *QStyleHints {
	return ptr
}

func (ptr *QStyleHints) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleHints) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQStyleHints(ptr QStyleHints_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleHints_PTR().Pointer()
	}
	return nil
}

func NewQStyleHintsFromPointer(ptr unsafe.Pointer) *QStyleHints {
	var n = new(QStyleHints)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStyleHints) DestroyQStyleHints() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStyleHints_CursorFlashTimeChanged
func callbackQStyleHints_CursorFlashTimeChanged(ptr unsafe.Pointer, cursorFlashTime C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "cursorFlashTimeChanged"); signal != nil {
		signal.(func(int))(int(int32(cursorFlashTime)))
	}

}

func (ptr *QStyleHints) ConnectCursorFlashTimeChanged(f func(cursorFlashTime int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "cursorFlashTimeChanged") {
			C.QStyleHints_ConnectCursorFlashTimeChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "cursorFlashTimeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorFlashTimeChanged", func(cursorFlashTime int) {
				signal.(func(int))(cursorFlashTime)
				f(cursorFlashTime)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorFlashTimeChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectCursorFlashTimeChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectCursorFlashTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "cursorFlashTimeChanged")
	}
}

func (ptr *QStyleHints) CursorFlashTimeChanged(cursorFlashTime int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_CursorFlashTimeChanged(ptr.Pointer(), C.int(int32(cursorFlashTime)))
	}
}

//export callbackQStyleHints_KeyboardInputIntervalChanged
func callbackQStyleHints_KeyboardInputIntervalChanged(ptr unsafe.Pointer, keyboardInputInterval C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "keyboardInputIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(keyboardInputInterval)))
	}

}

func (ptr *QStyleHints) ConnectKeyboardInputIntervalChanged(f func(keyboardInputInterval int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "keyboardInputIntervalChanged") {
			C.QStyleHints_ConnectKeyboardInputIntervalChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "keyboardInputIntervalChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardInputIntervalChanged", func(keyboardInputInterval int) {
				signal.(func(int))(keyboardInputInterval)
				f(keyboardInputInterval)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardInputIntervalChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectKeyboardInputIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectKeyboardInputIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "keyboardInputIntervalChanged")
	}
}

func (ptr *QStyleHints) KeyboardInputIntervalChanged(keyboardInputInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_KeyboardInputIntervalChanged(ptr.Pointer(), C.int(int32(keyboardInputInterval)))
	}
}

//export callbackQStyleHints_MouseDoubleClickIntervalChanged
func callbackQStyleHints_MouseDoubleClickIntervalChanged(ptr unsafe.Pointer, mouseDoubleClickInterval C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mouseDoubleClickIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(mouseDoubleClickInterval)))
	}

}

func (ptr *QStyleHints) ConnectMouseDoubleClickIntervalChanged(f func(mouseDoubleClickInterval int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickIntervalChanged") {
			C.QStyleHints_ConnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickIntervalChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickIntervalChanged", func(mouseDoubleClickInterval int) {
				signal.(func(int))(mouseDoubleClickInterval)
				f(mouseDoubleClickInterval)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickIntervalChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectMouseDoubleClickIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickIntervalChanged")
	}
}

func (ptr *QStyleHints) MouseDoubleClickIntervalChanged(mouseDoubleClickInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_MouseDoubleClickIntervalChanged(ptr.Pointer(), C.int(int32(mouseDoubleClickInterval)))
	}
}

//export callbackQStyleHints_MousePressAndHoldIntervalChanged
func callbackQStyleHints_MousePressAndHoldIntervalChanged(ptr unsafe.Pointer, mousePressAndHoldInterval C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mousePressAndHoldIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(mousePressAndHoldInterval)))
	}

}

func (ptr *QStyleHints) ConnectMousePressAndHoldIntervalChanged(f func(mousePressAndHoldInterval int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "mousePressAndHoldIntervalChanged") {
			C.QStyleHints_ConnectMousePressAndHoldIntervalChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mousePressAndHoldIntervalChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressAndHoldIntervalChanged", func(mousePressAndHoldInterval int) {
				signal.(func(int))(mousePressAndHoldInterval)
				f(mousePressAndHoldInterval)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressAndHoldIntervalChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectMousePressAndHoldIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectMousePressAndHoldIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressAndHoldIntervalChanged")
	}
}

func (ptr *QStyleHints) MousePressAndHoldIntervalChanged(mousePressAndHoldInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_MousePressAndHoldIntervalChanged(ptr.Pointer(), C.int(int32(mousePressAndHoldInterval)))
	}
}

func (ptr *QStyleHints) SetUseHoverEffects(useHoverEffects bool) {
	if ptr.Pointer() != nil {
		C.QStyleHints_SetUseHoverEffects(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(useHoverEffects))))
	}
}

//export callbackQStyleHints_StartDragDistanceChanged
func callbackQStyleHints_StartDragDistanceChanged(ptr unsafe.Pointer, startDragDistance C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "startDragDistanceChanged"); signal != nil {
		signal.(func(int))(int(int32(startDragDistance)))
	}

}

func (ptr *QStyleHints) ConnectStartDragDistanceChanged(f func(startDragDistance int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "startDragDistanceChanged") {
			C.QStyleHints_ConnectStartDragDistanceChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "startDragDistanceChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "startDragDistanceChanged", func(startDragDistance int) {
				signal.(func(int))(startDragDistance)
				f(startDragDistance)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "startDragDistanceChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectStartDragDistanceChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragDistanceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "startDragDistanceChanged")
	}
}

func (ptr *QStyleHints) StartDragDistanceChanged(startDragDistance int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragDistanceChanged(ptr.Pointer(), C.int(int32(startDragDistance)))
	}
}

//export callbackQStyleHints_StartDragTimeChanged
func callbackQStyleHints_StartDragTimeChanged(ptr unsafe.Pointer, startDragTime C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "startDragTimeChanged"); signal != nil {
		signal.(func(int))(int(int32(startDragTime)))
	}

}

func (ptr *QStyleHints) ConnectStartDragTimeChanged(f func(startDragTime int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "startDragTimeChanged") {
			C.QStyleHints_ConnectStartDragTimeChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "startDragTimeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "startDragTimeChanged", func(startDragTime int) {
				signal.(func(int))(startDragTime)
				f(startDragTime)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "startDragTimeChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectStartDragTimeChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "startDragTimeChanged")
	}
}

func (ptr *QStyleHints) StartDragTimeChanged(startDragTime int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragTimeChanged(ptr.Pointer(), C.int(int32(startDragTime)))
	}
}

//export callbackQStyleHints_TabFocusBehaviorChanged
func callbackQStyleHints_TabFocusBehaviorChanged(ptr unsafe.Pointer, tabFocusBehavior C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "tabFocusBehaviorChanged"); signal != nil {
		signal.(func(core.Qt__TabFocusBehavior))(core.Qt__TabFocusBehavior(tabFocusBehavior))
	}

}

func (ptr *QStyleHints) ConnectTabFocusBehaviorChanged(f func(tabFocusBehavior core.Qt__TabFocusBehavior)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "tabFocusBehaviorChanged") {
			C.QStyleHints_ConnectTabFocusBehaviorChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "tabFocusBehaviorChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "tabFocusBehaviorChanged", func(tabFocusBehavior core.Qt__TabFocusBehavior) {
				signal.(func(core.Qt__TabFocusBehavior))(tabFocusBehavior)
				f(tabFocusBehavior)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "tabFocusBehaviorChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectTabFocusBehaviorChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectTabFocusBehaviorChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "tabFocusBehaviorChanged")
	}
}

func (ptr *QStyleHints) TabFocusBehaviorChanged(tabFocusBehavior core.Qt__TabFocusBehavior) {
	if ptr.Pointer() != nil {
		C.QStyleHints_TabFocusBehaviorChanged(ptr.Pointer(), C.longlong(tabFocusBehavior))
	}
}

//export callbackQStyleHints_UseHoverEffectsChanged
func callbackQStyleHints_UseHoverEffectsChanged(ptr unsafe.Pointer, useHoverEffects C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "useHoverEffectsChanged"); signal != nil {
		signal.(func(bool))(int8(useHoverEffects) != 0)
	}

}

func (ptr *QStyleHints) ConnectUseHoverEffectsChanged(f func(useHoverEffects bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "useHoverEffectsChanged") {
			C.QStyleHints_ConnectUseHoverEffectsChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "useHoverEffectsChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "useHoverEffectsChanged", func(useHoverEffects bool) {
				signal.(func(bool))(useHoverEffects)
				f(useHoverEffects)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "useHoverEffectsChanged", f)
		}
	}
}

func (ptr *QStyleHints) DisconnectUseHoverEffectsChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectUseHoverEffectsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "useHoverEffectsChanged")
	}
}

func (ptr *QStyleHints) UseHoverEffectsChanged(useHoverEffects bool) {
	if ptr.Pointer() != nil {
		C.QStyleHints_UseHoverEffectsChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(useHoverEffects))))
	}
}

func (ptr *QStyleHints) PasswordMaskCharacter() *core.QChar {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQCharFromPointer(C.QStyleHints_PasswordMaskCharacter(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) TabFocusBehavior() core.Qt__TabFocusBehavior {
	if ptr.Pointer() != nil {
		return core.Qt__TabFocusBehavior(C.QStyleHints_TabFocusBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) SetFocusOnTouchRelease() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_SetFocusOnTouchRelease(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) ShowIsFullScreen() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_ShowIsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) ShowIsMaximized() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_ShowIsMaximized(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) SingleClickActivation() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_SingleClickActivation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) UseHoverEffects() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_UseHoverEffects(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) UseRtlExtensions() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_UseRtlExtensions(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) CursorFlashTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_CursorFlashTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardAutoRepeatRate() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_KeyboardAutoRepeatRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardInputInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_KeyboardInputInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) MouseDoubleClickInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_MouseDoubleClickInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) MousePressAndHoldInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_MousePressAndHoldInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) PasswordMaskDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_PasswordMaskDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) StartDragDistance() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragDistance(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) StartDragTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) StartDragVelocity() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragVelocity(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) FontSmoothingGamma() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStyleHints_FontSmoothingGamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QStyleHints___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QStyleHints) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStyleHints___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QStyleHints) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStyleHints___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyleHints) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QStyleHints___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QStyleHints) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStyleHints___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyleHints) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QStyleHints___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QStyleHints) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStyleHints___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyleHints) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStyleHints___findChildren_newList(ptr.Pointer()))
}

func (ptr *QStyleHints) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QStyleHints___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyleHints) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QStyleHints___children_newList(ptr.Pointer()))
}

//export callbackQStyleHints_Event
func callbackQStyleHints_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QStyleHints) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStyleHints_EventFilter
func callbackQStyleHints_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QStyleHints) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStyleHints_ChildEvent
func callbackQStyleHints_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStyleHints_ConnectNotify
func callbackQStyleHints_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_CustomEvent
func callbackQStyleHints_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStyleHints) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStyleHints_DeleteLater
func callbackQStyleHints_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStyleHintsFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStyleHints) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStyleHints_Destroyed
func callbackQStyleHints_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQStyleHints_DisconnectNotify
func callbackQStyleHints_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_ObjectNameChanged
func callbackQStyleHints_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQStyleHints_TimerEvent
func callbackQStyleHints_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStyleHints) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStyleHints_MetaObject
func callbackQStyleHints_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStyleHintsFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStyleHints) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyleHints_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSupportedWritingSystems struct {
	ptr unsafe.Pointer
}

type QSupportedWritingSystems_ITF interface {
	QSupportedWritingSystems_PTR() *QSupportedWritingSystems
}

func (ptr *QSupportedWritingSystems) QSupportedWritingSystems_PTR() *QSupportedWritingSystems {
	return ptr
}

func (ptr *QSupportedWritingSystems) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QSupportedWritingSystems) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQSupportedWritingSystems(ptr QSupportedWritingSystems_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSupportedWritingSystems_PTR().Pointer()
	}
	return nil
}

func NewQSupportedWritingSystemsFromPointer(ptr unsafe.Pointer) *QSupportedWritingSystems {
	var n = new(QSupportedWritingSystems)
	n.SetPointer(ptr)
	return n
}

type QSurface struct {
	ptr unsafe.Pointer
}

type QSurface_ITF interface {
	QSurface_PTR() *QSurface
}

func (ptr *QSurface) QSurface_PTR() *QSurface {
	return ptr
}

func (ptr *QSurface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QSurface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQSurface(ptr QSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurface_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFromPointer(ptr unsafe.Pointer) *QSurface {
	var n = new(QSurface)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QSurface__SurfaceClass
//QSurface::SurfaceClass
type QSurface__SurfaceClass int64

const (
	QSurface__Window    QSurface__SurfaceClass = QSurface__SurfaceClass(0)
	QSurface__Offscreen QSurface__SurfaceClass = QSurface__SurfaceClass(1)
)

//go:generate stringer -type=QSurface__SurfaceType
//QSurface::SurfaceType
type QSurface__SurfaceType int64

const (
	QSurface__RasterSurface   QSurface__SurfaceType = QSurface__SurfaceType(0)
	QSurface__OpenGLSurface   QSurface__SurfaceType = QSurface__SurfaceType(1)
	QSurface__RasterGLSurface QSurface__SurfaceType = QSurface__SurfaceType(2)
)

//export callbackQSurface_DestroyQSurface
func callbackQSurface_DestroyQSurface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QSurface"); signal != nil {
		signal.(func())()
	} else {
		NewQSurfaceFromPointer(ptr).DestroyQSurfaceDefault()
	}
}

func (ptr *QSurface) ConnectDestroyQSurface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QSurface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QSurface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QSurface", f)
		}
	}
}

func (ptr *QSurface) DisconnectDestroyQSurface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QSurface")
	}
}

func (ptr *QSurface) DestroyQSurface() {
	if ptr.Pointer() != nil {
		C.QSurface_DestroyQSurface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSurface) DestroyQSurfaceDefault() {
	if ptr.Pointer() != nil {
		C.QSurface_DestroyQSurfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSurface_Size
func callbackQSurface_Size(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(core.NewQSize())
}

func (ptr *QSurface) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "size"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", func() *core.QSize {
				signal.(func() *core.QSize)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", f)
		}
	}
}

func (ptr *QSurface) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "size")
	}
}

func (ptr *QSurface) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QSurface_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQSurface_Format
func callbackQSurface_Format(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQSurfaceFormat())
}

func (ptr *QSurface) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "format"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", func() *QSurfaceFormat {
				signal.(func() *QSurfaceFormat)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", f)
		}
	}
}

func (ptr *QSurface) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "format")
	}
}

func (ptr *QSurface) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QSurface_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QSurface) SurfaceClass() QSurface__SurfaceClass {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceClass(C.QSurface_SurfaceClass(ptr.Pointer()))
	}
	return 0
}

//export callbackQSurface_SurfaceType
func callbackQSurface_SurfaceType(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(0)
}

func (ptr *QSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "surfaceType"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", func() QSurface__SurfaceType {
				signal.(func() QSurface__SurfaceType)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", f)
		}
	}
}

func (ptr *QSurface) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType")
	}
}

func (ptr *QSurface) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurface) SupportsOpenGL() bool {
	if ptr.Pointer() != nil {
		return C.QSurface_SupportsOpenGL(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurface) M_type() QSurface__SurfaceClass {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceClass(C.QSurface_M_type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurface) SetM_type(vsu QSurface__SurfaceClass) {
	if ptr.Pointer() != nil {
		C.QSurface_SetM_type(ptr.Pointer(), C.longlong(vsu))
	}
}

type QSurfaceFormat struct {
	ptr unsafe.Pointer
}

type QSurfaceFormat_ITF interface {
	QSurfaceFormat_PTR() *QSurfaceFormat
}

func (ptr *QSurfaceFormat) QSurfaceFormat_PTR() *QSurfaceFormat {
	return ptr
}

func (ptr *QSurfaceFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QSurfaceFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQSurfaceFormat(ptr QSurfaceFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurfaceFormat_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFormatFromPointer(ptr unsafe.Pointer) *QSurfaceFormat {
	var n = new(QSurfaceFormat)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QSurfaceFormat__FormatOption
//QSurfaceFormat::FormatOption
type QSurfaceFormat__FormatOption int64

const (
	QSurfaceFormat__StereoBuffers       QSurfaceFormat__FormatOption = QSurfaceFormat__FormatOption(0x0001)
	QSurfaceFormat__DebugContext        QSurfaceFormat__FormatOption = QSurfaceFormat__FormatOption(0x0002)
	QSurfaceFormat__DeprecatedFunctions QSurfaceFormat__FormatOption = QSurfaceFormat__FormatOption(0x0004)
	QSurfaceFormat__ResetNotification   QSurfaceFormat__FormatOption = QSurfaceFormat__FormatOption(0x0008)
)

//go:generate stringer -type=QSurfaceFormat__OpenGLContextProfile
//QSurfaceFormat::OpenGLContextProfile
type QSurfaceFormat__OpenGLContextProfile int64

const (
	QSurfaceFormat__NoProfile            QSurfaceFormat__OpenGLContextProfile = QSurfaceFormat__OpenGLContextProfile(0)
	QSurfaceFormat__CoreProfile          QSurfaceFormat__OpenGLContextProfile = QSurfaceFormat__OpenGLContextProfile(1)
	QSurfaceFormat__CompatibilityProfile QSurfaceFormat__OpenGLContextProfile = QSurfaceFormat__OpenGLContextProfile(2)
)

//go:generate stringer -type=QSurfaceFormat__RenderableType
//QSurfaceFormat::RenderableType
type QSurfaceFormat__RenderableType int64

const (
	QSurfaceFormat__DefaultRenderableType QSurfaceFormat__RenderableType = QSurfaceFormat__RenderableType(0x0)
	QSurfaceFormat__OpenGL                QSurfaceFormat__RenderableType = QSurfaceFormat__RenderableType(0x1)
	QSurfaceFormat__OpenGLES              QSurfaceFormat__RenderableType = QSurfaceFormat__RenderableType(0x2)
	QSurfaceFormat__OpenVG                QSurfaceFormat__RenderableType = QSurfaceFormat__RenderableType(0x4)
)

//go:generate stringer -type=QSurfaceFormat__SwapBehavior
//QSurfaceFormat::SwapBehavior
type QSurfaceFormat__SwapBehavior int64

const (
	QSurfaceFormat__DefaultSwapBehavior QSurfaceFormat__SwapBehavior = QSurfaceFormat__SwapBehavior(0)
	QSurfaceFormat__SingleBuffer        QSurfaceFormat__SwapBehavior = QSurfaceFormat__SwapBehavior(1)
	QSurfaceFormat__DoubleBuffer        QSurfaceFormat__SwapBehavior = QSurfaceFormat__SwapBehavior(2)
	QSurfaceFormat__TripleBuffer        QSurfaceFormat__SwapBehavior = QSurfaceFormat__SwapBehavior(3)
)

func QSurfaceFormat_DefaultFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func (ptr *QSurfaceFormat) DefaultFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func NewQSurfaceFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func NewQSurfaceFormat2(options QSurfaceFormat__FormatOption) *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat2(C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func NewQSurfaceFormat3(other QSurfaceFormat_ITF) *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat3(PointerFromQSurfaceFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func (ptr *QSurfaceFormat) SetAlphaBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetAlphaBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetBlueBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetBlueBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func QSurfaceFormat_SetDefaultFormat(format QSurfaceFormat_ITF) {
	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDefaultFormat(format QSurfaceFormat_ITF) {
	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDepthBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetDepthBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetGreenBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetGreenBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetMajorVersion(major int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMajorVersion(ptr.Pointer(), C.int(int32(major)))
	}
}

func (ptr *QSurfaceFormat) SetMinorVersion(minor int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMinorVersion(ptr.Pointer(), C.int(int32(minor)))
	}
}

func (ptr *QSurfaceFormat) SetOption(option QSurfaceFormat__FormatOption, on bool) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOption(ptr.Pointer(), C.longlong(option), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QSurfaceFormat) SetOptions(options QSurfaceFormat__FormatOption) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOptions(ptr.Pointer(), C.longlong(options))
	}
}

func (ptr *QSurfaceFormat) SetProfile(profile QSurfaceFormat__OpenGLContextProfile) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetProfile(ptr.Pointer(), C.longlong(profile))
	}
}

func (ptr *QSurfaceFormat) SetRedBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRedBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetRenderableType(ty QSurfaceFormat__RenderableType) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRenderableType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QSurfaceFormat) SetSamples(numSamples int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSamples(ptr.Pointer(), C.int(int32(numSamples)))
	}
}

func (ptr *QSurfaceFormat) SetStencilBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStencilBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetStereo(enable bool) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStereo(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QSurfaceFormat) SetSwapBehavior(behavior QSurfaceFormat__SwapBehavior) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapBehavior(ptr.Pointer(), C.longlong(behavior))
	}
}

func (ptr *QSurfaceFormat) SetSwapInterval(interval int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapInterval(ptr.Pointer(), C.int(int32(interval)))
	}
}

func (ptr *QSurfaceFormat) SetVersion(major int, minor int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetVersion(ptr.Pointer(), C.int(int32(major)), C.int(int32(minor)))
	}
}

func (ptr *QSurfaceFormat) DestroyQSurfaceFormat() {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_DestroyQSurfaceFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QSurfaceFormat) Profile() QSurfaceFormat__OpenGLContextProfile {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__OpenGLContextProfile(C.QSurfaceFormat_Profile(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Options() QSurfaceFormat__FormatOption {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__FormatOption(C.QSurfaceFormat_Options(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) RenderableType() QSurfaceFormat__RenderableType {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__RenderableType(C.QSurfaceFormat_RenderableType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) SwapBehavior() QSurfaceFormat__SwapBehavior {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__SwapBehavior(C.QSurfaceFormat_SwapBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) HasAlpha() bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) Stereo() bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_Stereo(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) TestOption(option QSurfaceFormat__FormatOption) bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_TestOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) AlphaBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_AlphaBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) BlueBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_BlueBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) DepthBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_DepthBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) GreenBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_GreenBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) MajorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_MajorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) MinorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_MinorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) RedBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_RedBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) Samples() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_Samples(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) StencilBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_StencilBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) SwapInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_SwapInterval(ptr.Pointer())))
	}
	return 0
}

type QSyntaxHighlighter struct {
	core.QObject
}

type QSyntaxHighlighter_ITF interface {
	core.QObject_ITF
	QSyntaxHighlighter_PTR() *QSyntaxHighlighter
}

func (ptr *QSyntaxHighlighter) QSyntaxHighlighter_PTR() *QSyntaxHighlighter {
	return ptr
}

func (ptr *QSyntaxHighlighter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QSyntaxHighlighter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQSyntaxHighlighter(ptr QSyntaxHighlighter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSyntaxHighlighter_PTR().Pointer()
	}
	return nil
}

func NewQSyntaxHighlighterFromPointer(ptr unsafe.Pointer) *QSyntaxHighlighter {
	var n = new(QSyntaxHighlighter)
	n.SetPointer(ptr)
	return n
}
func NewQSyntaxHighlighter(parent core.QObject_ITF) *QSyntaxHighlighter {
	var tmpValue = NewQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSyntaxHighlighter2(parent QTextDocument_ITF) *QSyntaxHighlighter {
	var tmpValue = NewQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter2(PointerFromQTextDocument(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQSyntaxHighlighter_HighlightBlock
func callbackQSyntaxHighlighter_HighlightBlock(ptr unsafe.Pointer, text C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "highlightBlock"); signal != nil {
		signal.(func(string))(cGoUnpackString(text))
	}

}

func (ptr *QSyntaxHighlighter) ConnectHighlightBlock(f func(text string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "highlightBlock"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "highlightBlock", func(text string) {
				signal.(func(string))(text)
				f(text)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "highlightBlock", f)
		}
	}
}

func (ptr *QSyntaxHighlighter) DisconnectHighlightBlock() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "highlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) HighlightBlock(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QSyntaxHighlighter_HighlightBlock(ptr.Pointer(), textC)
	}
}

//export callbackQSyntaxHighlighter_Rehighlight
func callbackQSyntaxHighlighter_Rehighlight(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rehighlight"); signal != nil {
		signal.(func())()
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).RehighlightDefault()
	}
}

func (ptr *QSyntaxHighlighter) ConnectRehighlight(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rehighlight"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlight", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlight", f)
		}
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlight")
	}
}

func (ptr *QSyntaxHighlighter) Rehighlight() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_Rehighlight(ptr.Pointer())
	}
}

func (ptr *QSyntaxHighlighter) RehighlightDefault() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_RehighlightDefault(ptr.Pointer())
	}
}

//export callbackQSyntaxHighlighter_RehighlightBlock
func callbackQSyntaxHighlighter_RehighlightBlock(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "rehighlightBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).RehighlightBlockDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QSyntaxHighlighter) ConnectRehighlightBlock(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "rehighlightBlock"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlightBlock", func(block *QTextBlock) {
				signal.(func(*QTextBlock))(block)
				f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlightBlock", f)
		}
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlightBlock() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "rehighlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) RehighlightBlock(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_RehighlightBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QSyntaxHighlighter) RehighlightBlockDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_RehighlightBlockDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockState(newState int) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockState(ptr.Pointer(), C.int(int32(newState)))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockUserData(data QTextBlockUserData_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QSyntaxHighlighter) SetDocument(doc QTextDocument_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetDocument(ptr.Pointer(), PointerFromQTextDocument(doc))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat2(start int, count int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat2(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQColor(color))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat3(start int, count int, font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat3(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQFont(font))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat(start int, count int, format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQTextCharFormat(format))
	}
}

//export callbackQSyntaxHighlighter_DestroyQSyntaxHighlighter
func callbackQSyntaxHighlighter_DestroyQSyntaxHighlighter(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QSyntaxHighlighter"); signal != nil {
		signal.(func())()
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DestroyQSyntaxHighlighterDefault()
	}
}

func (ptr *QSyntaxHighlighter) ConnectDestroyQSyntaxHighlighter(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QSyntaxHighlighter"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QSyntaxHighlighter", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QSyntaxHighlighter", f)
		}
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDestroyQSyntaxHighlighter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QSyntaxHighlighter")
	}
}

func (ptr *QSyntaxHighlighter) DestroyQSyntaxHighlighter() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DestroyQSyntaxHighlighter(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSyntaxHighlighter) DestroyQSyntaxHighlighterDefault() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DestroyQSyntaxHighlighterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSyntaxHighlighter) CurrentBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QSyntaxHighlighter_CurrentBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) CurrentBlockUserData() *QTextBlockUserData {
	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QSyntaxHighlighter_CurrentBlockUserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) Format(position int) *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QSyntaxHighlighter_Format(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QSyntaxHighlighter_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) CurrentBlockState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSyntaxHighlighter_CurrentBlockState(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSyntaxHighlighter) PreviousBlockState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSyntaxHighlighter_PreviousBlockState(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSyntaxHighlighter) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QSyntaxHighlighter___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QSyntaxHighlighter) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSyntaxHighlighter___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QSyntaxHighlighter) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSyntaxHighlighter___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSyntaxHighlighter) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QSyntaxHighlighter___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QSyntaxHighlighter) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSyntaxHighlighter___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSyntaxHighlighter) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QSyntaxHighlighter___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QSyntaxHighlighter) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSyntaxHighlighter___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSyntaxHighlighter) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSyntaxHighlighter___findChildren_newList(ptr.Pointer()))
}

func (ptr *QSyntaxHighlighter) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QSyntaxHighlighter___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QSyntaxHighlighter) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QSyntaxHighlighter___children_newList(ptr.Pointer()))
}

//export callbackQSyntaxHighlighter_Event
func callbackQSyntaxHighlighter_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSyntaxHighlighter) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_EventFilter
func callbackQSyntaxHighlighter_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSyntaxHighlighter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_ChildEvent
func callbackQSyntaxHighlighter_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSyntaxHighlighter_ConnectNotify
func callbackQSyntaxHighlighter_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_CustomEvent
func callbackQSyntaxHighlighter_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSyntaxHighlighter_DeleteLater
func callbackQSyntaxHighlighter_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSyntaxHighlighter) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSyntaxHighlighter_Destroyed
func callbackQSyntaxHighlighter_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQSyntaxHighlighter_DisconnectNotify
func callbackQSyntaxHighlighter_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_ObjectNameChanged
func callbackQSyntaxHighlighter_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQSyntaxHighlighter_TimerEvent
func callbackQSyntaxHighlighter_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSyntaxHighlighter_MetaObject
func callbackQSyntaxHighlighter_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSyntaxHighlighterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSyntaxHighlighter) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSyntaxHighlighter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTabletEvent struct {
	QInputEvent
}

type QTabletEvent_ITF interface {
	QInputEvent_ITF
	QTabletEvent_PTR() *QTabletEvent
}

func (ptr *QTabletEvent) QTabletEvent_PTR() *QTabletEvent {
	return ptr
}

func (ptr *QTabletEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QTabletEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQTabletEvent(ptr QTabletEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTabletEvent_PTR().Pointer()
	}
	return nil
}

func NewQTabletEventFromPointer(ptr unsafe.Pointer) *QTabletEvent {
	var n = new(QTabletEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTabletEvent) DestroyQTabletEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTabletEvent__PointerType
//QTabletEvent::PointerType
type QTabletEvent__PointerType int64

const (
	QTabletEvent__UnknownPointer QTabletEvent__PointerType = QTabletEvent__PointerType(0)
	QTabletEvent__Pen            QTabletEvent__PointerType = QTabletEvent__PointerType(1)
	QTabletEvent__Cursor         QTabletEvent__PointerType = QTabletEvent__PointerType(2)
	QTabletEvent__Eraser         QTabletEvent__PointerType = QTabletEvent__PointerType(3)
)

//go:generate stringer -type=QTabletEvent__TabletDevice
//QTabletEvent::TabletDevice
type QTabletEvent__TabletDevice int64

const (
	QTabletEvent__NoDevice       QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(0)
	QTabletEvent__Puck           QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(1)
	QTabletEvent__Stylus         QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(2)
	QTabletEvent__Airbrush       QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(3)
	QTabletEvent__FourDMouse     QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(4)
	QTabletEvent__XFreeEraser    QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(5)
	QTabletEvent__RotationStylus QTabletEvent__TabletDevice = QTabletEvent__TabletDevice(6)
)

func NewQTabletEvent(ty core.QEvent__Type, pos core.QPointF_ITF, globalPos core.QPointF_ITF, device int, pointerType int, pressure float64, xTilt int, yTilt int, tangentialPressure float64, rotation float64, z int, keyState core.Qt__KeyboardModifier, uniqueID int64, button core.Qt__MouseButton, buttons core.Qt__MouseButton) *QTabletEvent {
	return NewQTabletEventFromPointer(C.QTabletEvent_NewQTabletEvent(C.longlong(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), C.int(int32(device)), C.int(int32(pointerType)), C.double(pressure), C.int(int32(xTilt)), C.int(int32(yTilt)), C.double(tangentialPressure), C.double(rotation), C.int(int32(z)), C.longlong(keyState), C.longlong(uniqueID), C.longlong(button), C.longlong(buttons)))
}

func (ptr *QTabletEvent) PointerType() QTabletEvent__PointerType {
	if ptr.Pointer() != nil {
		return QTabletEvent__PointerType(C.QTabletEvent_PointerType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTabletEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTabletEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTabletEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTabletEvent) Button() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Device() QTabletEvent__TabletDevice {
	if ptr.Pointer() != nil {
		return QTabletEvent__TabletDevice(C.QTabletEvent_Device(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) XTilt() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_XTilt(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) YTilt() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_YTilt(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) Z() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_Z(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) UniqueId() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTabletEvent_UniqueId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Pressure() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Pressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Rotation() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Rotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) TangentialPressure() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_TangentialPressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) MExtra() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QTabletEvent_MExtra(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) SetMExtra(vvo unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QTabletEvent_SetMExtra(ptr.Pointer(), vvo)
	}
}

func (ptr *QTabletEvent) MUnique() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTabletEvent_MUnique(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) SetMUnique(vqi int64) {
	if ptr.Pointer() != nil {
		C.QTabletEvent_SetMUnique(ptr.Pointer(), C.longlong(vqi))
	}
}

type QTextBlock struct {
	ptr unsafe.Pointer
}

type QTextBlock_ITF interface {
	QTextBlock_PTR() *QTextBlock
}

func (ptr *QTextBlock) QTextBlock_PTR() *QTextBlock {
	return ptr
}

func (ptr *QTextBlock) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextBlock) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextBlock(ptr QTextBlock_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlock_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFromPointer(ptr unsafe.Pointer) *QTextBlock {
	var n = new(QTextBlock)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextBlock) DestroyQTextBlock() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQTextBlock(other QTextBlock_ITF) *QTextBlock {
	var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_NewQTextBlock(PointerFromQTextBlock(other)))
	runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
	return tmpValue
}

func (ptr *QTextBlock) ClearLayout() {
	if ptr.Pointer() != nil {
		C.QTextBlock_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextBlock) SetLineCount(count int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetLineCount(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextBlock) SetRevision(rev int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetRevision(ptr.Pointer(), C.int(int32(rev)))
	}
}

func (ptr *QTextBlock) SetUserData(data QTextBlockUserData_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QTextBlock) SetUserState(state int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserState(ptr.Pointer(), C.int(int32(state)))
	}
}

func (ptr *QTextBlock) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QTextBlock) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextBlock_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextBlock) Next() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_Next(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) Previous() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_Previous(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) BlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextBlock_BlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) UserData() *QTextBlockUserData {
	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QTextBlock_UserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextBlock_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) Layout() *QTextLayout {
	if ptr.Pointer() != nil {
		return NewQTextLayoutFromPointer(C.QTextBlock_Layout(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextBlock_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) Contains(position int) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_Contains(ptr.Pointer(), C.int(int32(position))) != 0
	}
	return false
}

func (ptr *QTextBlock) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlock) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlock) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextBlock_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) BlockFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_BlockFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) BlockNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_BlockNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) CharFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_CharFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) FirstLineNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_FirstLineNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_LineCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) UserState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_UserState(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) __textFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextBlock___textFormats_newList(ptr.Pointer()))
}

type QTextBlockFormat struct {
	QTextFormat
}

type QTextBlockFormat_ITF interface {
	QTextFormat_ITF
	QTextBlockFormat_PTR() *QTextBlockFormat
}

func (ptr *QTextBlockFormat) QTextBlockFormat_PTR() *QTextBlockFormat {
	return ptr
}

func (ptr *QTextBlockFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextBlockFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextBlockFormat(ptr QTextBlockFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFormatFromPointer(ptr unsafe.Pointer) *QTextBlockFormat {
	var n = new(QTextBlockFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextBlockFormat) DestroyQTextBlockFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextBlockFormat__LineHeightTypes
//QTextBlockFormat::LineHeightTypes
type QTextBlockFormat__LineHeightTypes int64

const (
	QTextBlockFormat__SingleHeight       QTextBlockFormat__LineHeightTypes = QTextBlockFormat__LineHeightTypes(0)
	QTextBlockFormat__ProportionalHeight QTextBlockFormat__LineHeightTypes = QTextBlockFormat__LineHeightTypes(1)
	QTextBlockFormat__FixedHeight        QTextBlockFormat__LineHeightTypes = QTextBlockFormat__LineHeightTypes(2)
	QTextBlockFormat__MinimumHeight      QTextBlockFormat__LineHeightTypes = QTextBlockFormat__LineHeightTypes(3)
	QTextBlockFormat__LineDistanceHeight QTextBlockFormat__LineHeightTypes = QTextBlockFormat__LineHeightTypes(4)
)

func NewQTextBlockFormat() *QTextBlockFormat {
	var tmpValue = NewQTextBlockFormatFromPointer(C.QTextBlockFormat_NewQTextBlockFormat())
	runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
	return tmpValue
}

func (ptr *QTextBlockFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextBlockFormat) SetBottomMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetIndent(indentation int) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetIndent(ptr.Pointer(), C.int(int32(indentation)))
	}
}

func (ptr *QTextBlockFormat) SetLeftMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetLineHeight(height float64, heightType int) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLineHeight(ptr.Pointer(), C.double(height), C.int(int32(heightType)))
	}
}

func (ptr *QTextBlockFormat) SetNonBreakableLines(b bool) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetNonBreakableLines(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextBlockFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetPageBreakPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextBlockFormat) SetRightMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetTextIndent(indent float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTextIndent(ptr.Pointer(), C.double(indent))
	}
}

func (ptr *QTextBlockFormat) SetTopMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextBlockFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextBlockFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) NonBreakableLines() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockFormat_NonBreakableLines(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlockFormat) Indent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlockFormat_Indent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeightType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlockFormat_LineHeightType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlockFormat) BottomMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LeftMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight2() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight(scriptLineHeight float64, scaling float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight(ptr.Pointer(), C.double(scriptLineHeight), C.double(scaling)))
	}
	return 0
}

func (ptr *QTextBlockFormat) RightMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) TextIndent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TextIndent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) TopMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) __setTabPositions_tabs_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextBlockFormat___setTabPositions_tabs_newList(ptr.Pointer()))
}

func (ptr *QTextBlockFormat) __tabPositions_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextBlockFormat___tabPositions_newList(ptr.Pointer()))
}

type QTextBlockGroup struct {
	QTextObject
}

type QTextBlockGroup_ITF interface {
	QTextObject_ITF
	QTextBlockGroup_PTR() *QTextBlockGroup
}

func (ptr *QTextBlockGroup) QTextBlockGroup_PTR() *QTextBlockGroup {
	return ptr
}

func (ptr *QTextBlockGroup) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextBlockGroup) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextObject_PTR().SetPointer(p)
	}
}

func PointerFromQTextBlockGroup(ptr QTextBlockGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockGroupFromPointer(ptr unsafe.Pointer) *QTextBlockGroup {
	var n = new(QTextBlockGroup)
	n.SetPointer(ptr)
	return n
}
func NewQTextBlockGroup(document QTextDocument_ITF) *QTextBlockGroup {
	var tmpValue = NewQTextBlockGroupFromPointer(C.QTextBlockGroup_NewQTextBlockGroup(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTextBlockGroup_BlockFormatChanged
func callbackQTextBlockGroup_BlockFormatChanged(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "blockFormatChanged"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockFormatChangedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockFormatChanged(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "blockFormatChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockFormatChanged", func(block *QTextBlock) {
				signal.(func(*QTextBlock))(block)
				f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockFormatChanged", f)
		}
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockFormatChanged() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "blockFormatChanged")
	}
}

func (ptr *QTextBlockGroup) BlockFormatChanged(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChanged(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockFormatChangedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChangedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextBlockGroup_BlockInserted
func callbackQTextBlockGroup_BlockInserted(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "blockInserted"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockInsertedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockInserted(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "blockInserted"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockInserted", func(block *QTextBlock) {
				signal.(func(*QTextBlock))(block)
				f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockInserted", f)
		}
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockInserted() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "blockInserted")
	}
}

func (ptr *QTextBlockGroup) BlockInserted(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInserted(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockInsertedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInsertedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextBlockGroup_BlockRemoved
func callbackQTextBlockGroup_BlockRemoved(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "blockRemoved"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockRemovedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockRemoved(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "blockRemoved"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockRemoved", func(block *QTextBlock) {
				signal.(func(*QTextBlock))(block)
				f(block)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockRemoved", f)
		}
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockRemoved() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "blockRemoved")
	}
}

func (ptr *QTextBlockGroup) BlockRemoved(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemoved(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockRemovedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemovedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) DestroyQTextBlockGroup() {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DestroyQTextBlockGroup(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockGroup) BlockList() []*QTextBlock {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextBlock {
			var out = make([]*QTextBlock, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextBlockGroupFromPointer(l.data).__blockList_atList(i)
			}
			return out
		}(C.QTextBlockGroup_BlockList(ptr.Pointer()))
	}
	return make([]*QTextBlock, 0)
}

func (ptr *QTextBlockGroup) __blockList_atList(i int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlockGroup___blockList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlockGroup) __blockList_setList(i QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup___blockList_setList(ptr.Pointer(), PointerFromQTextBlock(i))
	}
}

func (ptr *QTextBlockGroup) __blockList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextBlockGroup___blockList_newList(ptr.Pointer()))
}

type QTextBlockUserData struct {
	ptr unsafe.Pointer
}

type QTextBlockUserData_ITF interface {
	QTextBlockUserData_PTR() *QTextBlockUserData
}

func (ptr *QTextBlockUserData) QTextBlockUserData_PTR() *QTextBlockUserData {
	return ptr
}

func (ptr *QTextBlockUserData) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextBlockUserData) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextBlockUserData(ptr QTextBlockUserData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockUserData_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockUserDataFromPointer(ptr unsafe.Pointer) *QTextBlockUserData {
	var n = new(QTextBlockUserData)
	n.SetPointer(ptr)
	return n
}

//export callbackQTextBlockUserData_DestroyQTextBlockUserData
func callbackQTextBlockUserData_DestroyQTextBlockUserData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QTextBlockUserData"); signal != nil {
		signal.(func())()
	} else {
		NewQTextBlockUserDataFromPointer(ptr).DestroyQTextBlockUserDataDefault()
	}
}

func (ptr *QTextBlockUserData) ConnectDestroyQTextBlockUserData(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QTextBlockUserData"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextBlockUserData", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextBlockUserData", f)
		}
	}
}

func (ptr *QTextBlockUserData) DisconnectDestroyQTextBlockUserData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextBlockUserData")
	}
}

func (ptr *QTextBlockUserData) DestroyQTextBlockUserData() {
	if ptr.Pointer() != nil {
		C.QTextBlockUserData_DestroyQTextBlockUserData(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockUserData) DestroyQTextBlockUserDataDefault() {
	if ptr.Pointer() != nil {
		C.QTextBlockUserData_DestroyQTextBlockUserDataDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QTextCharFormat struct {
	QTextFormat
}

type QTextCharFormat_ITF interface {
	QTextFormat_ITF
	QTextCharFormat_PTR() *QTextCharFormat
}

func (ptr *QTextCharFormat) QTextCharFormat_PTR() *QTextCharFormat {
	return ptr
}

func (ptr *QTextCharFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextCharFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextCharFormat(ptr QTextCharFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextCharFormatFromPointer(ptr unsafe.Pointer) *QTextCharFormat {
	var n = new(QTextCharFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextCharFormat) DestroyQTextCharFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextCharFormat__FontPropertiesInheritanceBehavior
//QTextCharFormat::FontPropertiesInheritanceBehavior
type QTextCharFormat__FontPropertiesInheritanceBehavior int64

const (
	QTextCharFormat__FontPropertiesSpecifiedOnly QTextCharFormat__FontPropertiesInheritanceBehavior = QTextCharFormat__FontPropertiesInheritanceBehavior(0)
	QTextCharFormat__FontPropertiesAll           QTextCharFormat__FontPropertiesInheritanceBehavior = QTextCharFormat__FontPropertiesInheritanceBehavior(1)
)

//go:generate stringer -type=QTextCharFormat__UnderlineStyle
//QTextCharFormat::UnderlineStyle
type QTextCharFormat__UnderlineStyle int64

var (
	QTextCharFormat__NoUnderline         QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(0)
	QTextCharFormat__SingleUnderline     QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(1)
	QTextCharFormat__DashUnderline       QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(2)
	QTextCharFormat__DotLine             QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(3)
	QTextCharFormat__DashDotLine         QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(4)
	QTextCharFormat__DashDotDotLine      QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(5)
	QTextCharFormat__WaveUnderline       QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(6)
	QTextCharFormat__SpellCheckUnderline QTextCharFormat__UnderlineStyle = QTextCharFormat__UnderlineStyle(7)
)

//go:generate stringer -type=QTextCharFormat__VerticalAlignment
//QTextCharFormat::VerticalAlignment
type QTextCharFormat__VerticalAlignment int64

const (
	QTextCharFormat__AlignNormal      QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(0)
	QTextCharFormat__AlignSuperScript QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(1)
	QTextCharFormat__AlignSubScript   QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(2)
	QTextCharFormat__AlignMiddle      QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(3)
	QTextCharFormat__AlignTop         QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(4)
	QTextCharFormat__AlignBottom      QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(5)
	QTextCharFormat__AlignBaseline    QTextCharFormat__VerticalAlignment = QTextCharFormat__VerticalAlignment(6)
)

func NewQTextCharFormat() *QTextCharFormat {
	var tmpValue = NewQTextCharFormatFromPointer(C.QTextCharFormat_NewQTextCharFormat())
	runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
	return tmpValue
}

func (ptr *QTextCharFormat) SetUnderlineStyle(style QTextCharFormat__UnderlineStyle) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextCharFormat) AnchorNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QTextCharFormat_AnchorNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QTextCharFormat) FontUnderline() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontUnderline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) SetAnchor(anchor bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetAnchor(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(anchor))))
	}
}

func (ptr *QTextCharFormat) SetAnchorHref(value string) {
	if ptr.Pointer() != nil {
		var valueC *C.char
		if value != "" {
			valueC = C.CString(value)
			defer C.free(unsafe.Pointer(valueC))
		}
		C.QTextCharFormat_SetAnchorHref(ptr.Pointer(), valueC)
	}
}

func (ptr *QTextCharFormat) SetAnchorNames(names []string) {
	if ptr.Pointer() != nil {
		var namesC = C.CString(strings.Join(names, "|"))
		defer C.free(unsafe.Pointer(namesC))
		C.QTextCharFormat_SetAnchorNames(ptr.Pointer(), namesC)
	}
}

func (ptr *QTextCharFormat) SetFont2(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont2(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextCharFormat) SetFont(font QFont_ITF, behavior QTextCharFormat__FontPropertiesInheritanceBehavior) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont(ptr.Pointer(), PointerFromQFont(font), C.longlong(behavior))
	}
}

func (ptr *QTextCharFormat) SetFontCapitalization(capitalization QFont__Capitalization) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontCapitalization(ptr.Pointer(), C.longlong(capitalization))
	}
}

func (ptr *QTextCharFormat) SetFontFamily(family string) {
	if ptr.Pointer() != nil {
		var familyC *C.char
		if family != "" {
			familyC = C.CString(family)
			defer C.free(unsafe.Pointer(familyC))
		}
		C.QTextCharFormat_SetFontFamily(ptr.Pointer(), familyC)
	}
}

func (ptr *QTextCharFormat) SetFontFixedPitch(fixedPitch bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontFixedPitch(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fixedPitch))))
	}
}

func (ptr *QTextCharFormat) SetFontHintingPreference(hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontHintingPreference(ptr.Pointer(), C.longlong(hintingPreference))
	}
}

func (ptr *QTextCharFormat) SetFontItalic(italic bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontItalic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(italic))))
	}
}

func (ptr *QTextCharFormat) SetFontKerning(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontKerning(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacingType(letterSpacingType QFont__SpacingType) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacingType(ptr.Pointer(), C.longlong(letterSpacingType))
	}
}

func (ptr *QTextCharFormat) SetFontOverline(overline bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(overline))))
	}
}

func (ptr *QTextCharFormat) SetFontPointSize(size float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontPointSize(ptr.Pointer(), C.double(size))
	}
}

func (ptr *QTextCharFormat) SetFontStretch(factor int) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStretch(ptr.Pointer(), C.int(int32(factor)))
	}
}

func (ptr *QTextCharFormat) SetFontStrikeOut(strikeOut bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(strikeOut))))
	}
}

func (ptr *QTextCharFormat) SetFontStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleHint(ptr.Pointer(), C.longlong(hint), C.longlong(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontStyleStrategy(strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleStrategy(ptr.Pointer(), C.longlong(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontUnderline(underline bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(underline))))
	}
}

func (ptr *QTextCharFormat) SetFontWeight(weight int) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWeight(ptr.Pointer(), C.int(int32(weight)))
	}
}

func (ptr *QTextCharFormat) SetFontWordSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetTextOutline(pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetTextOutline(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QTextCharFormat) SetToolTip(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QTextCharFormat_SetToolTip(ptr.Pointer(), textC)
	}
}

func (ptr *QTextCharFormat) SetUnderlineColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QTextCharFormat) SetVerticalAlignment(alignment QTextCharFormat__VerticalAlignment) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetVerticalAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextCharFormat) UnderlineColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QTextCharFormat_UnderlineColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextCharFormat_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) FontCapitalization() QFont__Capitalization {
	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QTextCharFormat_FontCapitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontHintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QTextCharFormat_FontHintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontLetterSpacingType() QFont__SpacingType {
	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QTextCharFormat_FontLetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QTextCharFormat_FontStyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStyleStrategy() QFont__StyleStrategy {
	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QTextCharFormat_FontStyleStrategy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) TextOutline() *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QTextCharFormat_TextOutline(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) AnchorHref() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_AnchorHref(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) FontFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_FontFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) UnderlineStyle() QTextCharFormat__UnderlineStyle {
	if ptr.Pointer() != nil {
		return QTextCharFormat__UnderlineStyle(C.QTextCharFormat_UnderlineStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) VerticalAlignment() QTextCharFormat__VerticalAlignment {
	if ptr.Pointer() != nil {
		return QTextCharFormat__VerticalAlignment(C.QTextCharFormat_VerticalAlignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontFixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontFixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontItalic() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontItalic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontKerning() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontKerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontOverline() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontOverline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontStrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontStrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) IsAnchor() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_IsAnchor(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontStretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCharFormat_FontStretch(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCharFormat_FontWeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCharFormat) FontLetterSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontLetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontPointSize() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontPointSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWordSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontWordSpacing(ptr.Pointer()))
	}
	return 0
}

type QTextCursor struct {
	ptr unsafe.Pointer
}

type QTextCursor_ITF interface {
	QTextCursor_PTR() *QTextCursor
}

func (ptr *QTextCursor) QTextCursor_PTR() *QTextCursor {
	return ptr
}

func (ptr *QTextCursor) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextCursor) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextCursor(ptr QTextCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCursor_PTR().Pointer()
	}
	return nil
}

func NewQTextCursorFromPointer(ptr unsafe.Pointer) *QTextCursor {
	var n = new(QTextCursor)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTextCursor__MoveMode
//QTextCursor::MoveMode
type QTextCursor__MoveMode int64

const (
	QTextCursor__MoveAnchor QTextCursor__MoveMode = QTextCursor__MoveMode(0)
	QTextCursor__KeepAnchor QTextCursor__MoveMode = QTextCursor__MoveMode(1)
)

//go:generate stringer -type=QTextCursor__MoveOperation
//QTextCursor::MoveOperation
type QTextCursor__MoveOperation int64

const (
	QTextCursor__NoMove            QTextCursor__MoveOperation = QTextCursor__MoveOperation(0)
	QTextCursor__Start             QTextCursor__MoveOperation = QTextCursor__MoveOperation(1)
	QTextCursor__Up                QTextCursor__MoveOperation = QTextCursor__MoveOperation(2)
	QTextCursor__StartOfLine       QTextCursor__MoveOperation = QTextCursor__MoveOperation(3)
	QTextCursor__StartOfBlock      QTextCursor__MoveOperation = QTextCursor__MoveOperation(4)
	QTextCursor__StartOfWord       QTextCursor__MoveOperation = QTextCursor__MoveOperation(5)
	QTextCursor__PreviousBlock     QTextCursor__MoveOperation = QTextCursor__MoveOperation(6)
	QTextCursor__PreviousCharacter QTextCursor__MoveOperation = QTextCursor__MoveOperation(7)
	QTextCursor__PreviousWord      QTextCursor__MoveOperation = QTextCursor__MoveOperation(8)
	QTextCursor__Left              QTextCursor__MoveOperation = QTextCursor__MoveOperation(9)
	QTextCursor__WordLeft          QTextCursor__MoveOperation = QTextCursor__MoveOperation(10)
	QTextCursor__End               QTextCursor__MoveOperation = QTextCursor__MoveOperation(11)
	QTextCursor__Down              QTextCursor__MoveOperation = QTextCursor__MoveOperation(12)
	QTextCursor__EndOfLine         QTextCursor__MoveOperation = QTextCursor__MoveOperation(13)
	QTextCursor__EndOfWord         QTextCursor__MoveOperation = QTextCursor__MoveOperation(14)
	QTextCursor__EndOfBlock        QTextCursor__MoveOperation = QTextCursor__MoveOperation(15)
	QTextCursor__NextBlock         QTextCursor__MoveOperation = QTextCursor__MoveOperation(16)
	QTextCursor__NextCharacter     QTextCursor__MoveOperation = QTextCursor__MoveOperation(17)
	QTextCursor__NextWord          QTextCursor__MoveOperation = QTextCursor__MoveOperation(18)
	QTextCursor__Right             QTextCursor__MoveOperation = QTextCursor__MoveOperation(19)
	QTextCursor__WordRight         QTextCursor__MoveOperation = QTextCursor__MoveOperation(20)
	QTextCursor__NextCell          QTextCursor__MoveOperation = QTextCursor__MoveOperation(21)
	QTextCursor__PreviousCell      QTextCursor__MoveOperation = QTextCursor__MoveOperation(22)
	QTextCursor__NextRow           QTextCursor__MoveOperation = QTextCursor__MoveOperation(23)
	QTextCursor__PreviousRow       QTextCursor__MoveOperation = QTextCursor__MoveOperation(24)
)

//go:generate stringer -type=QTextCursor__SelectionType
//QTextCursor::SelectionType
type QTextCursor__SelectionType int64

const (
	QTextCursor__WordUnderCursor  QTextCursor__SelectionType = QTextCursor__SelectionType(0)
	QTextCursor__LineUnderCursor  QTextCursor__SelectionType = QTextCursor__SelectionType(1)
	QTextCursor__BlockUnderCursor QTextCursor__SelectionType = QTextCursor__SelectionType(2)
	QTextCursor__Document         QTextCursor__SelectionType = QTextCursor__SelectionType(3)
)

func NewQTextCursor() *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor())
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor2(document QTextDocument_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor2(PointerFromQTextDocument(document)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor5(frame QTextFrame_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor5(PointerFromQTextFrame(frame)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor6(block QTextBlock_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor6(PointerFromQTextBlock(block)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor7(cursor QTextCursor_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor7(PointerFromQTextCursor(cursor)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func (ptr *QTextCursor) InsertFrame(format QTextFrameFormat_ITF) *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextCursor_InsertFrame(ptr.Pointer(), PointerFromQTextFrameFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CreateList2(style QTextListFormat__Style) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CreateList2(ptr.Pointer(), C.longlong(style)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CreateList(format QTextListFormat_ITF) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CreateList(ptr.Pointer(), PointerFromQTextListFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertList2(style QTextListFormat__Style) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_InsertList2(ptr.Pointer(), C.longlong(style)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertList(format QTextListFormat_ITF) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_InsertList(ptr.Pointer(), PointerFromQTextListFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertTable2(rows int, columns int) *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_InsertTable2(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertTable(rows int, columns int, format QTextTableFormat_ITF) *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_InsertTable(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns)), PointerFromQTextTableFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) MovePosition(operation QTextCursor__MoveOperation, mode QTextCursor__MoveMode, n int) bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_MovePosition(ptr.Pointer(), C.longlong(operation), C.longlong(mode), C.int(int32(n))) != 0
	}
	return false
}

func (ptr *QTextCursor) BeginEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_BeginEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) ClearSelection() {
	if ptr.Pointer() != nil {
		C.QTextCursor_ClearSelection(ptr.Pointer())
	}
}

func (ptr *QTextCursor) DeleteChar() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DeleteChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) DeletePreviousChar() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DeletePreviousChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) EndEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_EndEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) InsertBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) InsertBlock2(format QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock2(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) InsertBlock3(format QTextBlockFormat_ITF, charFormat QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock3(ptr.Pointer(), PointerFromQTextBlockFormat(format), PointerFromQTextCharFormat(charFormat))
	}
}

func (ptr *QTextCursor) InsertFragment(fragment QTextDocumentFragment_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertFragment(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment))
	}
}

func (ptr *QTextCursor) InsertHtml(html string) {
	if ptr.Pointer() != nil {
		var htmlC *C.char
		if html != "" {
			htmlC = C.CString(html)
			defer C.free(unsafe.Pointer(htmlC))
		}
		C.QTextCursor_InsertHtml(ptr.Pointer(), htmlC)
	}
}

func (ptr *QTextCursor) InsertImage4(image QImage_ITF, name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QTextCursor_InsertImage4(ptr.Pointer(), PointerFromQImage(image), nameC)
	}
}

func (ptr *QTextCursor) InsertImage3(name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QTextCursor_InsertImage3(ptr.Pointer(), nameC)
	}
}

func (ptr *QTextCursor) InsertImage(format QTextImageFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage(ptr.Pointer(), PointerFromQTextImageFormat(format))
	}
}

func (ptr *QTextCursor) InsertImage2(format QTextImageFormat_ITF, alignment QTextFrameFormat__Position) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage2(ptr.Pointer(), PointerFromQTextImageFormat(format), C.longlong(alignment))
	}
}

func (ptr *QTextCursor) InsertText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QTextCursor_InsertText(ptr.Pointer(), textC)
	}
}

func (ptr *QTextCursor) InsertText2(text string, format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QTextCursor_InsertText2(ptr.Pointer(), textC, PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) JoinPreviousEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_JoinPreviousEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) MergeBlockCharFormat(modifier QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeBlockFormat(modifier QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeCharFormat(modifier QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) RemoveSelectedText() {
	if ptr.Pointer() != nil {
		C.QTextCursor_RemoveSelectedText(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Select(selection QTextCursor__SelectionType) {
	if ptr.Pointer() != nil {
		C.QTextCursor_Select(ptr.Pointer(), C.longlong(selection))
	}
}

func (ptr *QTextCursor) SetBlockCharFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetBlockFormat(format QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) SetCharFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetKeepPositionOnInsert(b bool) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetKeepPositionOnInsert(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextCursor) SetPosition(pos int, m QTextCursor__MoveMode) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetPosition(ptr.Pointer(), C.int(int32(pos)), C.longlong(m))
	}
}

func (ptr *QTextCursor) SetVerticalMovementX(x int) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetVerticalMovementX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QTextCursor) SetVisualNavigation(b bool) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetVisualNavigation(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextCursor) Swap(other QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_Swap(ptr.Pointer(), PointerFromQTextCursor(other))
	}
}

func (ptr *QTextCursor) DestroyQTextCursor() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DestroyQTextCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextCursor) SelectedText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCursor_SelectedText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCursor) Block() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextCursor_Block(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) BlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextCursor_BlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) BlockCharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextCursor_BlockCharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextCursor_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextCursor_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) Selection() *QTextDocumentFragment {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextCursor_Selection(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextCursor_CurrentFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentList() *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CurrentList(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentTable() *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_CurrentTable(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) AtBlockEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtBlockStart() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtStart() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) HasComplexSelection() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_HasComplexSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) HasSelection() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_HasSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) IsCopyOf(other QTextCursor_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_IsCopyOf(ptr.Pointer(), PointerFromQTextCursor(other)) != 0
	}
	return false
}

func (ptr *QTextCursor) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) KeepPositionOnInsert() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_KeepPositionOnInsert(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) VisualNavigation() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_VisualNavigation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) Anchor() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_Anchor(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) BlockNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_BlockNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) ColumnNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_ColumnNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) PositionInBlock() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_PositionInBlock(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) SelectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_SelectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) SelectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_SelectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) VerticalMovementX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_VerticalMovementX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) SelectedTableCells(firstRow int, numRows int, firstColumn int, numColumns int) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SelectedTableCells(ptr.Pointer(), C.int(int32(firstRow)), C.int(int32(numRows)), C.int(int32(firstColumn)), C.int(int32(numColumns)))
	}
}

type QTextDocument struct {
	core.QObject
}

type QTextDocument_ITF interface {
	core.QObject_ITF
	QTextDocument_PTR() *QTextDocument
}

func (ptr *QTextDocument) QTextDocument_PTR() *QTextDocument {
	return ptr
}

func (ptr *QTextDocument) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextDocument) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQTextDocument(ptr QTextDocument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocument_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFromPointer(ptr unsafe.Pointer) *QTextDocument {
	var n = new(QTextDocument)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTextDocument__FindFlag
//QTextDocument::FindFlag
type QTextDocument__FindFlag int64

const (
	QTextDocument__FindBackward        QTextDocument__FindFlag = QTextDocument__FindFlag(0x00001)
	QTextDocument__FindCaseSensitively QTextDocument__FindFlag = QTextDocument__FindFlag(0x00002)
	QTextDocument__FindWholeWords      QTextDocument__FindFlag = QTextDocument__FindFlag(0x00004)
)

//go:generate stringer -type=QTextDocument__MetaInformation
//QTextDocument::MetaInformation
type QTextDocument__MetaInformation int64

const (
	QTextDocument__DocumentTitle QTextDocument__MetaInformation = QTextDocument__MetaInformation(0)
	QTextDocument__DocumentUrl   QTextDocument__MetaInformation = QTextDocument__MetaInformation(1)
)

//go:generate stringer -type=QTextDocument__ResourceType
//QTextDocument::ResourceType
type QTextDocument__ResourceType int64

const (
	QTextDocument__HtmlResource       QTextDocument__ResourceType = QTextDocument__ResourceType(1)
	QTextDocument__ImageResource      QTextDocument__ResourceType = QTextDocument__ResourceType(2)
	QTextDocument__StyleSheetResource QTextDocument__ResourceType = QTextDocument__ResourceType(3)
	QTextDocument__UserResource       QTextDocument__ResourceType = QTextDocument__ResourceType(100)
)

//go:generate stringer -type=QTextDocument__Stacks
//QTextDocument::Stacks
type QTextDocument__Stacks int64

const (
	QTextDocument__UndoStack         QTextDocument__Stacks = QTextDocument__Stacks(0x01)
	QTextDocument__RedoStack         QTextDocument__Stacks = QTextDocument__Stacks(0x02)
	QTextDocument__UndoAndRedoStacks QTextDocument__Stacks = QTextDocument__Stacks(QTextDocument__UndoStack | QTextDocument__RedoStack)
)

func NewQTextDocument2(text string, parent core.QObject_ITF) *QTextDocument {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument2(textC, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTextDocument_CreateObject
func callbackQTextDocument_CreateObject(ptr unsafe.Pointer, format unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "createObject"); signal != nil {
		return PointerFromQTextObject(signal.(func(*QTextFormat) *QTextObject)(NewQTextFormatFromPointer(format)))
	}

	return PointerFromQTextObject(NewQTextDocumentFromPointer(ptr).CreateObjectDefault(NewQTextFormatFromPointer(format)))
}

func (ptr *QTextDocument) ConnectCreateObject(f func(format *QTextFormat) *QTextObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "createObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "createObject", func(format *QTextFormat) *QTextObject {
				signal.(func(*QTextFormat) *QTextObject)(format)
				return f(format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "createObject", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectCreateObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "createObject")
	}
}

func (ptr *QTextDocument) CreateObject(format QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_CreateObject(ptr.Pointer(), PointerFromQTextFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) CreateObjectDefault(format QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_CreateObjectDefault(ptr.Pointer(), PointerFromQTextFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQTextDocument(parent core.QObject_ITF) *QTextDocument {
	var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTextDocument_LoadResource
func callbackQTextDocument_LoadResource(ptr unsafe.Pointer, ty C.int, name unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "loadResource"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, *core.QUrl) *core.QVariant)(int(int32(ty)), core.NewQUrlFromPointer(name)))
	}

	return core.PointerFromQVariant(NewQTextDocumentFromPointer(ptr).LoadResourceDefault(int(int32(ty)), core.NewQUrlFromPointer(name)))
}

func (ptr *QTextDocument) ConnectLoadResource(f func(ty int, name *core.QUrl) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "loadResource"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "loadResource", func(ty int, name *core.QUrl) *core.QVariant {
				signal.(func(int, *core.QUrl) *core.QVariant)(ty, name)
				return f(ty, name)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "loadResource", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectLoadResource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "loadResource")
	}
}

func (ptr *QTextDocument) LoadResource(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_LoadResource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) LoadResourceDefault(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_LoadResourceDefault(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) AddResource(ty int, name core.QUrl_ITF, resource core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_AddResource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name), core.PointerFromQVariant(resource))
	}
}

func (ptr *QTextDocument) AdjustSize() {
	if ptr.Pointer() != nil {
		C.QTextDocument_AdjustSize(ptr.Pointer())
	}
}

//export callbackQTextDocument_BaseUrlChanged
func callbackQTextDocument_BaseUrlChanged(ptr unsafe.Pointer, url unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "baseUrlChanged"); signal != nil {
		signal.(func(*core.QUrl))(core.NewQUrlFromPointer(url))
	}

}

func (ptr *QTextDocument) ConnectBaseUrlChanged(f func(url *core.QUrl)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "baseUrlChanged") {
			C.QTextDocument_ConnectBaseUrlChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "baseUrlChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "baseUrlChanged", func(url *core.QUrl) {
				signal.(func(*core.QUrl))(url)
				f(url)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "baseUrlChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectBaseUrlChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBaseUrlChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "baseUrlChanged")
	}
}

func (ptr *QTextDocument) BaseUrlChanged(url core.QUrl_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_BaseUrlChanged(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

//export callbackQTextDocument_BlockCountChanged
func callbackQTextDocument_BlockCountChanged(ptr unsafe.Pointer, newBlockCount C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "blockCountChanged"); signal != nil {
		signal.(func(int))(int(int32(newBlockCount)))
	}

}

func (ptr *QTextDocument) ConnectBlockCountChanged(f func(newBlockCount int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "blockCountChanged") {
			C.QTextDocument_ConnectBlockCountChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "blockCountChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockCountChanged", func(newBlockCount int) {
				signal.(func(int))(newBlockCount)
				f(newBlockCount)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "blockCountChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectBlockCountChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBlockCountChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "blockCountChanged")
	}
}

func (ptr *QTextDocument) BlockCountChanged(newBlockCount int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_BlockCountChanged(ptr.Pointer(), C.int(int32(newBlockCount)))
	}
}

//export callbackQTextDocument_Clear
func callbackQTextDocument_Clear(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "clear"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QTextDocument) ConnectClear(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "clear"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clear", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "clear", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectClear() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "clear")
	}
}

func (ptr *QTextDocument) Clear() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Clear(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearDefault() {
	if ptr.Pointer() != nil {
		C.QTextDocument_ClearDefault(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearUndoRedoStacks(stacksToClear QTextDocument__Stacks) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ClearUndoRedoStacks(ptr.Pointer(), C.longlong(stacksToClear))
	}
}

//export callbackQTextDocument_ContentsChange
func callbackQTextDocument_ContentsChange(ptr unsafe.Pointer, position C.int, charsRemoved C.int, charsAdded C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "contentsChange"); signal != nil {
		signal.(func(int, int, int))(int(int32(position)), int(int32(charsRemoved)), int(int32(charsAdded)))
	}

}

func (ptr *QTextDocument) ConnectContentsChange(f func(position int, charsRemoved int, charsAdded int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "contentsChange") {
			C.QTextDocument_ConnectContentsChange(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "contentsChange"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChange", func(position int, charsRemoved int, charsAdded int) {
				signal.(func(int, int, int))(position, charsRemoved, charsAdded)
				f(position, charsRemoved, charsAdded)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChange", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectContentsChange() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChange(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChange")
	}
}

func (ptr *QTextDocument) ContentsChange(position int, charsRemoved int, charsAdded int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChange(ptr.Pointer(), C.int(int32(position)), C.int(int32(charsRemoved)), C.int(int32(charsAdded)))
	}
}

//export callbackQTextDocument_ContentsChanged
func callbackQTextDocument_ContentsChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "contentsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectContentsChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "contentsChanged") {
			C.QTextDocument_ConnectContentsChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "contentsChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectContentsChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "contentsChanged")
	}
}

func (ptr *QTextDocument) ContentsChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChanged(ptr.Pointer())
	}
}

//export callbackQTextDocument_CursorPositionChanged
func callbackQTextDocument_CursorPositionChanged(ptr unsafe.Pointer, cursor unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "cursorPositionChanged"); signal != nil {
		signal.(func(*QTextCursor))(NewQTextCursorFromPointer(cursor))
	}

}

func (ptr *QTextDocument) ConnectCursorPositionChanged(f func(cursor *QTextCursor)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "cursorPositionChanged") {
			C.QTextDocument_ConnectCursorPositionChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "cursorPositionChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPositionChanged", func(cursor *QTextCursor) {
				signal.(func(*QTextCursor))(cursor)
				f(cursor)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPositionChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectCursorPositionChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectCursorPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "cursorPositionChanged")
	}
}

func (ptr *QTextDocument) CursorPositionChanged(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_CursorPositionChanged(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_DocumentLayoutChanged
func callbackQTextDocument_DocumentLayoutChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "documentLayoutChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectDocumentLayoutChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "documentLayoutChanged") {
			C.QTextDocument_ConnectDocumentLayoutChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "documentLayoutChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentLayoutChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "documentLayoutChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectDocumentLayoutChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectDocumentLayoutChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "documentLayoutChanged")
	}
}

func (ptr *QTextDocument) DocumentLayoutChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DocumentLayoutChanged(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DrawContents(p QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_DrawContents(ptr.Pointer(), PointerFromQPainter(p), core.PointerFromQRectF(rect))
	}
}

func (ptr *QTextDocument) MarkContentsDirty(position int, length int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_MarkContentsDirty(ptr.Pointer(), C.int(int32(position)), C.int(int32(length)))
	}
}

//export callbackQTextDocument_ModificationChanged
func callbackQTextDocument_ModificationChanged(ptr unsafe.Pointer, changed C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "modificationChanged"); signal != nil {
		signal.(func(bool))(int8(changed) != 0)
	}

}

func (ptr *QTextDocument) ConnectModificationChanged(f func(changed bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "modificationChanged") {
			C.QTextDocument_ConnectModificationChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "modificationChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modificationChanged", func(changed bool) {
				signal.(func(bool))(changed)
				f(changed)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modificationChanged", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectModificationChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectModificationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "modificationChanged")
	}
}

func (ptr *QTextDocument) ModificationChanged(changed bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ModificationChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(changed))))
	}
}

//export callbackQTextDocument_Redo2
func callbackQTextDocument_Redo2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "redo2"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).Redo2Default()
	}
}

func (ptr *QTextDocument) ConnectRedo2(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "redo2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "redo2", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "redo2", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectRedo2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "redo2")
	}
}

func (ptr *QTextDocument) Redo2() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Redo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Redo2Default() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Redo2Default(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Redo(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Redo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_RedoAvailable
func callbackQTextDocument_RedoAvailable(ptr unsafe.Pointer, available C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "redoAvailable"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectRedoAvailable(f func(available bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "redoAvailable") {
			C.QTextDocument_ConnectRedoAvailable(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "redoAvailable"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "redoAvailable", func(available bool) {
				signal.(func(bool))(available)
				f(available)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "redoAvailable", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectRedoAvailable() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectRedoAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "redoAvailable")
	}
}

func (ptr *QTextDocument) RedoAvailable(available bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_RedoAvailable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

func (ptr *QTextDocument) SetBaseUrl(url core.QUrl_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetBaseUrl(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QTextDocument) SetDefaultCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultCursorMoveStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextDocument) SetDefaultFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextDocument) SetDefaultStyleSheet(sheet string) {
	if ptr.Pointer() != nil {
		var sheetC *C.char
		if sheet != "" {
			sheetC = C.CString(sheet)
			defer C.free(unsafe.Pointer(sheetC))
		}
		C.QTextDocument_SetDefaultStyleSheet(ptr.Pointer(), sheetC)
	}
}

func (ptr *QTextDocument) SetDefaultTextOption(option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextDocument) SetDocumentLayout(layout QAbstractTextDocumentLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentLayout(ptr.Pointer(), PointerFromQAbstractTextDocumentLayout(layout))
	}
}

func (ptr *QTextDocument) SetDocumentMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextDocument) SetHtml(html string) {
	if ptr.Pointer() != nil {
		var htmlC *C.char
		if html != "" {
			htmlC = C.CString(html)
			defer C.free(unsafe.Pointer(htmlC))
		}
		C.QTextDocument_SetHtml(ptr.Pointer(), htmlC)
	}
}

func (ptr *QTextDocument) SetIndentWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetIndentWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetMaximumBlockCount(maximum int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetMaximumBlockCount(ptr.Pointer(), C.int(int32(maximum)))
	}
}

func (ptr *QTextDocument) SetMetaInformation(info QTextDocument__MetaInformation, stri string) {
	if ptr.Pointer() != nil {
		var striC *C.char
		if stri != "" {
			striC = C.CString(stri)
			defer C.free(unsafe.Pointer(striC))
		}
		C.QTextDocument_SetMetaInformation(ptr.Pointer(), C.longlong(info), striC)
	}
}

//export callbackQTextDocument_SetModified
func callbackQTextDocument_SetModified(ptr unsafe.Pointer, m C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setModified"); signal != nil {
		signal.(func(bool))(int8(m) != 0)
	} else {
		NewQTextDocumentFromPointer(ptr).SetModifiedDefault(int8(m) != 0)
	}
}

func (ptr *QTextDocument) ConnectSetModified(f func(m bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setModified"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setModified", func(m bool) {
				signal.(func(bool))(m)
				f(m)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setModified", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectSetModified() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setModified")
	}
}

func (ptr *QTextDocument) SetModified(m bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetModified(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(m))))
	}
}

func (ptr *QTextDocument) SetModifiedDefault(m bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetModifiedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(m))))
	}
}

func (ptr *QTextDocument) SetPageSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetPageSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QTextDocument) SetPlainText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QTextDocument_SetPlainText(ptr.Pointer(), textC)
	}
}

func (ptr *QTextDocument) SetTextWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetTextWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetUndoRedoEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetUndoRedoEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextDocument) SetUseDesignMetrics(b bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetUseDesignMetrics(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

//export callbackQTextDocument_Undo2
func callbackQTextDocument_Undo2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "undo2"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).Undo2Default()
	}
}

func (ptr *QTextDocument) ConnectUndo2(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "undo2"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undo2", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undo2", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectUndo2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "undo2")
	}
}

func (ptr *QTextDocument) Undo2() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Undo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Undo2Default() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Undo2Default(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Undo(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Undo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_UndoAvailable
func callbackQTextDocument_UndoAvailable(ptr unsafe.Pointer, available C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "undoAvailable"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectUndoAvailable(f func(available bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "undoAvailable") {
			C.QTextDocument_ConnectUndoAvailable(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "undoAvailable"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undoAvailable", func(available bool) {
				signal.(func(bool))(available)
				f(available)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undoAvailable", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectUndoAvailable() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "undoAvailable")
	}
}

func (ptr *QTextDocument) UndoAvailable(available bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_UndoAvailable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQTextDocument_UndoCommandAdded
func callbackQTextDocument_UndoCommandAdded(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "undoCommandAdded"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectUndoCommandAdded(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "undoCommandAdded") {
			C.QTextDocument_ConnectUndoCommandAdded(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "undoCommandAdded"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undoCommandAdded", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "undoCommandAdded", f)
		}
	}
}

func (ptr *QTextDocument) DisconnectUndoCommandAdded() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoCommandAdded(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "undoCommandAdded")
	}
}

func (ptr *QTextDocument) UndoCommandAdded() {
	if ptr.Pointer() != nil {
		C.QTextDocument_UndoCommandAdded(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DestroyQTextDocument() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DestroyQTextDocument(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocument) DocumentLayout() *QAbstractTextDocumentLayout {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractTextDocumentLayoutFromPointer(C.QTextDocument_DocumentLayout(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) CharacterAt(pos int) *core.QChar {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQCharFromPointer(C.QTextDocument_CharacterAt(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*core.QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DefaultFont() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextDocument_DefaultFont(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) PageSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextDocument_PageSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Size() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextDocument_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DefaultStyleSheet() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_DefaultStyleSheet(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocument) MetaInformation(info QTextDocument__MetaInformation) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_MetaInformation(ptr.Pointer(), C.longlong(info)))
	}
	return ""
}

func (ptr *QTextDocument) ToHtml(encoding core.QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_ToHtml(ptr.Pointer(), core.PointerFromQByteArray(encoding)))
	}
	return ""
}

func (ptr *QTextDocument) ToPlainText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_ToPlainText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocument) Begin() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_Begin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) End() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_End(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlock(pos int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlock(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByLineNumber(lineNumber int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlockByLineNumber(ptr.Pointer(), C.int(int32(lineNumber))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByNumber(blockNumber int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlockByNumber(ptr.Pointer(), C.int(int32(blockNumber))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FirstBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FirstBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) LastBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_LastBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find4(expr core.QRegExp_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find4(ptr.Pointer(), core.PointerFromQRegExp(expr), PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find3(expr core.QRegExp_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find3(ptr.Pointer(), core.PointerFromQRegExp(expr), C.int(int32(from)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find6(expr core.QRegularExpression_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find6(ptr.Pointer(), core.PointerFromQRegularExpression(expr), PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find5(expr core.QRegularExpression_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find5(ptr.Pointer(), core.PointerFromQRegularExpression(expr), C.int(int32(from)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find(subString string, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var subStringC *C.char
		if subString != "" {
			subStringC = C.CString(subString)
			defer C.free(unsafe.Pointer(subStringC))
		}
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find(ptr.Pointer(), subStringC, PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find2(subString string, position int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var subStringC *C.char
		if subString != "" {
			subStringC = C.CString(subString)
			defer C.free(unsafe.Pointer(subStringC))
		}
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find2(ptr.Pointer(), subStringC, C.int(int32(position)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Clone(parent core.QObject_ITF) *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_Clone(ptr.Pointer(), core.PointerFromQObject(parent)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) RootFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextDocument_RootFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Object(objectIndex int) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_Object(ptr.Pointer(), C.int(int32(objectIndex))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) ObjectForFormat(fo QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_ObjectForFormat(ptr.Pointer(), PointerFromQTextFormat(fo)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DefaultTextOption() *QTextOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextOptionFromPointer(C.QTextDocument_DefaultTextOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) BaseUrl() *core.QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QTextDocument_BaseUrl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Resource(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_Resource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) AllFormats() []*QTextFormat {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextFormat {
			var out = make([]*QTextFormat, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextDocumentFromPointer(l.data).__allFormats_atList(i)
			}
			return out
		}(C.QTextDocument_AllFormats(ptr.Pointer()))
	}
	return make([]*QTextFormat, 0)
}

func (ptr *QTextDocument) DefaultCursorMoveStyle() core.Qt__CursorMoveStyle {
	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextDocument_DefaultCursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsModified() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsModified(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsRedoAvailable() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsRedoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoAvailable() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoRedoEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoRedoEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) UseDesignMetrics() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) AvailableRedoSteps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_AvailableRedoSteps(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) AvailableUndoSteps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_AvailableUndoSteps(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) BlockCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_BlockCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) CharacterCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_CharacterCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_LineCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) MaximumBlockCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_MaximumBlockCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) PageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_PageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) DocumentMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_DocumentMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IdealWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IdealWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IndentWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IndentWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) TextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_TextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) Print(printer QPagedPaintDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Print(ptr.Pointer(), PointerFromQPagedPaintDevice(printer))
	}
}

func (ptr *QTextDocument) __allFormats_atList(i int) *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextDocument___allFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __allFormats_setList(i QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___allFormats_setList(ptr.Pointer(), PointerFromQTextFormat(i))
	}
}

func (ptr *QTextDocument) __allFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___allFormats_newList(ptr.Pointer()))
}

func (ptr *QTextDocument) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextDocument___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QTextDocument) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QTextDocument) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextDocument___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextDocument) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QTextDocument) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextDocument___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextDocument) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QTextDocument) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextDocument___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextDocument) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___findChildren_newList(ptr.Pointer()))
}

func (ptr *QTextDocument) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextDocument___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextDocument) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocument___children_newList(ptr.Pointer()))
}

//export callbackQTextDocument_Event
func callbackQTextDocument_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextDocument) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextDocument_EventFilter
func callbackQTextDocument_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextDocument) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextDocument_ChildEvent
func callbackQTextDocument_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextDocument_ConnectNotify
func callbackQTextDocument_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_CustomEvent
func callbackQTextDocument_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextDocument) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextDocument_DeleteLater
func callbackQTextDocument_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextDocument) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextDocument_Destroyed
func callbackQTextDocument_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQTextDocument_DisconnectNotify
func callbackQTextDocument_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_ObjectNameChanged
func callbackQTextDocument_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQTextDocument_TimerEvent
func callbackQTextDocument_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextDocument) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextDocument_MetaObject
func callbackQTextDocument_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextDocumentFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextDocument) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextDocument_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextDocumentFragment struct {
	ptr unsafe.Pointer
}

type QTextDocumentFragment_ITF interface {
	QTextDocumentFragment_PTR() *QTextDocumentFragment
}

func (ptr *QTextDocumentFragment) QTextDocumentFragment_PTR() *QTextDocumentFragment {
	return ptr
}

func (ptr *QTextDocumentFragment) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextDocumentFragment) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextDocumentFragment(ptr QTextDocumentFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFragmentFromPointer(ptr unsafe.Pointer) *QTextDocumentFragment {
	var n = new(QTextDocumentFragment)
	n.SetPointer(ptr)
	return n
}
func QTextDocumentFragment_FromHtml(text string) *QTextDocumentFragment {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(textC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromHtml(text string) *QTextDocumentFragment {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(textC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func QTextDocumentFragment_FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(textC, PointerFromQTextDocument(resourceProvider)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(textC, PointerFromQTextDocument(resourceProvider)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func QTextDocumentFragment_FromPlainText(plainText string) *QTextDocumentFragment {
	var plainTextC *C.char
	if plainText != "" {
		plainTextC = C.CString(plainText)
		defer C.free(unsafe.Pointer(plainTextC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(plainTextC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromPlainText(plainText string) *QTextDocumentFragment {
	var plainTextC *C.char
	if plainText != "" {
		plainTextC = C.CString(plainText)
		defer C.free(unsafe.Pointer(plainTextC))
	}
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(plainTextC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment() *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment())
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment3(cursor QTextCursor_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment3(PointerFromQTextCursor(cursor)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment2(document QTextDocument_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment2(PointerFromQTextDocument(document)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment4(other QTextDocumentFragment_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment4(PointerFromQTextDocumentFragment(other)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) DestroyQTextDocumentFragment() {
	if ptr.Pointer() != nil {
		C.QTextDocumentFragment_DestroyQTextDocumentFragment(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocumentFragment) ToHtml(encoding core.QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentFragment_ToHtml(ptr.Pointer(), core.PointerFromQByteArray(encoding)))
	}
	return ""
}

func (ptr *QTextDocumentFragment) ToPlainText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentFragment_ToPlainText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentFragment) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentFragment_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

type QTextDocumentWriter struct {
	ptr unsafe.Pointer
}

type QTextDocumentWriter_ITF interface {
	QTextDocumentWriter_PTR() *QTextDocumentWriter
}

func (ptr *QTextDocumentWriter) QTextDocumentWriter_PTR() *QTextDocumentWriter {
	return ptr
}

func (ptr *QTextDocumentWriter) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextDocumentWriter) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextDocumentWriter(ptr QTextDocumentWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentWriter_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentWriterFromPointer(ptr unsafe.Pointer) *QTextDocumentWriter {
	var n = new(QTextDocumentWriter)
	n.SetPointer(ptr)
	return n
}
func QTextDocumentWriter_SupportedDocumentFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextDocumentWriterFromPointer(l.data).__supportedDocumentFormats_atList(i)
		}
		return out
	}(C.QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats())
}

func (ptr *QTextDocumentWriter) SupportedDocumentFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextDocumentWriterFromPointer(l.data).__supportedDocumentFormats_atList(i)
		}
		return out
	}(C.QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats())
}

func NewQTextDocumentWriter() *QTextDocumentWriter {
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter())
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func NewQTextDocumentWriter2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QTextDocumentWriter {
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func NewQTextDocumentWriter3(fileName string, format core.QByteArray_ITF) *QTextDocumentWriter {
	var fileNameC *C.char
	if fileName != "" {
		fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
	}
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func (ptr *QTextDocumentWriter) Write(document QTextDocument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write(ptr.Pointer(), PointerFromQTextDocument(document)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) Write2(fragment QTextDocumentFragment_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write2(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) SetCodec(codec core.QTextCodec_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetCodec(ptr.Pointer(), core.PointerFromQTextCodec(codec))
	}
}

func (ptr *QTextDocumentWriter) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QTextDocumentWriter) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC *C.char
		if fileName != "" {
			fileNameC = C.CString(fileName)
			defer C.free(unsafe.Pointer(fileNameC))
		}
		C.QTextDocumentWriter_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QTextDocumentWriter) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QTextDocumentWriter) DestroyQTextDocumentWriter() {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_DestroyQTextDocumentWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocumentWriter) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextDocumentWriter_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocumentWriter) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QTextDocumentWriter_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocumentWriter) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentWriter) Codec() *core.QTextCodec {
	if ptr.Pointer() != nil {
		return core.NewQTextCodecFromPointer(C.QTextDocumentWriter_Codec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocumentWriter) __supportedDocumentFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextDocumentWriter___supportedDocumentFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocumentWriter) __supportedDocumentFormats_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter___supportedDocumentFormats_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QTextDocumentWriter) __supportedDocumentFormats_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextDocumentWriter___supportedDocumentFormats_newList(ptr.Pointer()))
}

type QTextFormat struct {
	ptr unsafe.Pointer
}

type QTextFormat_ITF interface {
	QTextFormat_PTR() *QTextFormat
}

func (ptr *QTextFormat) QTextFormat_PTR() *QTextFormat {
	return ptr
}

func (ptr *QTextFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextFormat(ptr QTextFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFormatFromPointer(ptr unsafe.Pointer) *QTextFormat {
	var n = new(QTextFormat)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTextFormat__FormatType
//QTextFormat::FormatType
type QTextFormat__FormatType int64

const (
	QTextFormat__InvalidFormat QTextFormat__FormatType = QTextFormat__FormatType(-1)
	QTextFormat__BlockFormat   QTextFormat__FormatType = QTextFormat__FormatType(1)
	QTextFormat__CharFormat    QTextFormat__FormatType = QTextFormat__FormatType(2)
	QTextFormat__ListFormat    QTextFormat__FormatType = QTextFormat__FormatType(3)
	QTextFormat__TableFormat   QTextFormat__FormatType = QTextFormat__FormatType(4)
	QTextFormat__FrameFormat   QTextFormat__FormatType = QTextFormat__FormatType(5)
	QTextFormat__UserFormat    QTextFormat__FormatType = QTextFormat__FormatType(100)
)

//go:generate stringer -type=QTextFormat__ObjectTypes
//QTextFormat::ObjectTypes
type QTextFormat__ObjectTypes int64

const (
	QTextFormat__NoObject        QTextFormat__ObjectTypes = QTextFormat__ObjectTypes(0)
	QTextFormat__ImageObject     QTextFormat__ObjectTypes = QTextFormat__ObjectTypes(1)
	QTextFormat__TableObject     QTextFormat__ObjectTypes = QTextFormat__ObjectTypes(2)
	QTextFormat__TableCellObject QTextFormat__ObjectTypes = QTextFormat__ObjectTypes(3)
	QTextFormat__UserObject      QTextFormat__ObjectTypes = QTextFormat__ObjectTypes(0x1000)
)

//go:generate stringer -type=QTextFormat__PageBreakFlag
//QTextFormat::PageBreakFlag
type QTextFormat__PageBreakFlag int64

const (
	QTextFormat__PageBreak_Auto         QTextFormat__PageBreakFlag = QTextFormat__PageBreakFlag(0)
	QTextFormat__PageBreak_AlwaysBefore QTextFormat__PageBreakFlag = QTextFormat__PageBreakFlag(0x001)
	QTextFormat__PageBreak_AlwaysAfter  QTextFormat__PageBreakFlag = QTextFormat__PageBreakFlag(0x010)
)

//go:generate stringer -type=QTextFormat__Property
//QTextFormat::Property
type QTextFormat__Property int64

const (
	QTextFormat__ObjectIndex                       QTextFormat__Property = QTextFormat__Property(0x0)
	QTextFormat__CssFloat                          QTextFormat__Property = QTextFormat__Property(0x0800)
	QTextFormat__LayoutDirection                   QTextFormat__Property = QTextFormat__Property(0x0801)
	QTextFormat__OutlinePen                        QTextFormat__Property = QTextFormat__Property(0x810)
	QTextFormat__BackgroundBrush                   QTextFormat__Property = QTextFormat__Property(0x820)
	QTextFormat__ForegroundBrush                   QTextFormat__Property = QTextFormat__Property(0x821)
	QTextFormat__BackgroundImageUrl                QTextFormat__Property = QTextFormat__Property(0x823)
	QTextFormat__BlockAlignment                    QTextFormat__Property = QTextFormat__Property(0x1010)
	QTextFormat__BlockTopMargin                    QTextFormat__Property = QTextFormat__Property(0x1030)
	QTextFormat__BlockBottomMargin                 QTextFormat__Property = QTextFormat__Property(0x1031)
	QTextFormat__BlockLeftMargin                   QTextFormat__Property = QTextFormat__Property(0x1032)
	QTextFormat__BlockRightMargin                  QTextFormat__Property = QTextFormat__Property(0x1033)
	QTextFormat__TextIndent                        QTextFormat__Property = QTextFormat__Property(0x1034)
	QTextFormat__TabPositions                      QTextFormat__Property = QTextFormat__Property(0x1035)
	QTextFormat__BlockIndent                       QTextFormat__Property = QTextFormat__Property(0x1040)
	QTextFormat__LineHeight                        QTextFormat__Property = QTextFormat__Property(0x1048)
	QTextFormat__LineHeightType                    QTextFormat__Property = QTextFormat__Property(0x1049)
	QTextFormat__BlockNonBreakableLines            QTextFormat__Property = QTextFormat__Property(0x1050)
	QTextFormat__BlockTrailingHorizontalRulerWidth QTextFormat__Property = QTextFormat__Property(0x1060)
	QTextFormat__FirstFontProperty                 QTextFormat__Property = QTextFormat__Property(0x1FE0)
	QTextFormat__FontCapitalization                QTextFormat__Property = QTextFormat__Property(QTextFormat__FirstFontProperty)
	QTextFormat__FontLetterSpacingType             QTextFormat__Property = QTextFormat__Property(0x2033)
	QTextFormat__FontLetterSpacing                 QTextFormat__Property = QTextFormat__Property(0x1FE1)
	QTextFormat__FontWordSpacing                   QTextFormat__Property = QTextFormat__Property(0x1FE2)
	QTextFormat__FontStretch                       QTextFormat__Property = QTextFormat__Property(0x2034)
	QTextFormat__FontStyleHint                     QTextFormat__Property = QTextFormat__Property(0x1FE3)
	QTextFormat__FontStyleStrategy                 QTextFormat__Property = QTextFormat__Property(0x1FE4)
	QTextFormat__FontKerning                       QTextFormat__Property = QTextFormat__Property(0x1FE5)
	QTextFormat__FontHintingPreference             QTextFormat__Property = QTextFormat__Property(0x1FE6)
	QTextFormat__FontFamily                        QTextFormat__Property = QTextFormat__Property(0x2000)
	QTextFormat__FontPointSize                     QTextFormat__Property = QTextFormat__Property(0x2001)
	QTextFormat__FontSizeAdjustment                QTextFormat__Property = QTextFormat__Property(0x2002)
	QTextFormat__FontSizeIncrement                 QTextFormat__Property = QTextFormat__Property(QTextFormat__FontSizeAdjustment)
	QTextFormat__FontWeight                        QTextFormat__Property = QTextFormat__Property(0x2003)
	QTextFormat__FontItalic                        QTextFormat__Property = QTextFormat__Property(0x2004)
	QTextFormat__FontUnderline                     QTextFormat__Property = QTextFormat__Property(0x2005)
	QTextFormat__FontOverline                      QTextFormat__Property = QTextFormat__Property(0x2006)
	QTextFormat__FontStrikeOut                     QTextFormat__Property = QTextFormat__Property(0x2007)
	QTextFormat__FontFixedPitch                    QTextFormat__Property = QTextFormat__Property(0x2008)
	QTextFormat__FontPixelSize                     QTextFormat__Property = QTextFormat__Property(0x2009)
	QTextFormat__LastFontProperty                  QTextFormat__Property = QTextFormat__Property(QTextFormat__FontPixelSize)
	QTextFormat__TextUnderlineColor                QTextFormat__Property = QTextFormat__Property(0x2010)
	QTextFormat__TextVerticalAlignment             QTextFormat__Property = QTextFormat__Property(0x2021)
	QTextFormat__TextOutline                       QTextFormat__Property = QTextFormat__Property(0x2022)
	QTextFormat__TextUnderlineStyle                QTextFormat__Property = QTextFormat__Property(0x2023)
	QTextFormat__TextToolTip                       QTextFormat__Property = QTextFormat__Property(0x2024)
	QTextFormat__IsAnchor                          QTextFormat__Property = QTextFormat__Property(0x2030)
	QTextFormat__AnchorHref                        QTextFormat__Property = QTextFormat__Property(0x2031)
	QTextFormat__AnchorName                        QTextFormat__Property = QTextFormat__Property(0x2032)
	QTextFormat__ObjectType                        QTextFormat__Property = QTextFormat__Property(0x2f00)
	QTextFormat__ListStyle                         QTextFormat__Property = QTextFormat__Property(0x3000)
	QTextFormat__ListIndent                        QTextFormat__Property = QTextFormat__Property(0x3001)
	QTextFormat__ListNumberPrefix                  QTextFormat__Property = QTextFormat__Property(0x3002)
	QTextFormat__ListNumberSuffix                  QTextFormat__Property = QTextFormat__Property(0x3003)
	QTextFormat__FrameBorder                       QTextFormat__Property = QTextFormat__Property(0x4000)
	QTextFormat__FrameMargin                       QTextFormat__Property = QTextFormat__Property(0x4001)
	QTextFormat__FramePadding                      QTextFormat__Property = QTextFormat__Property(0x4002)
	QTextFormat__FrameWidth                        QTextFormat__Property = QTextFormat__Property(0x4003)
	QTextFormat__FrameHeight                       QTextFormat__Property = QTextFormat__Property(0x4004)
	QTextFormat__FrameTopMargin                    QTextFormat__Property = QTextFormat__Property(0x4005)
	QTextFormat__FrameBottomMargin                 QTextFormat__Property = QTextFormat__Property(0x4006)
	QTextFormat__FrameLeftMargin                   QTextFormat__Property = QTextFormat__Property(0x4007)
	QTextFormat__FrameRightMargin                  QTextFormat__Property = QTextFormat__Property(0x4008)
	QTextFormat__FrameBorderBrush                  QTextFormat__Property = QTextFormat__Property(0x4009)
	QTextFormat__FrameBorderStyle                  QTextFormat__Property = QTextFormat__Property(0x4010)
	QTextFormat__TableColumns                      QTextFormat__Property = QTextFormat__Property(0x4100)
	QTextFormat__TableColumnWidthConstraints       QTextFormat__Property = QTextFormat__Property(0x4101)
	QTextFormat__TableCellSpacing                  QTextFormat__Property = QTextFormat__Property(0x4102)
	QTextFormat__TableCellPadding                  QTextFormat__Property = QTextFormat__Property(0x4103)
	QTextFormat__TableHeaderRowCount               QTextFormat__Property = QTextFormat__Property(0x4104)
	QTextFormat__TableCellRowSpan                  QTextFormat__Property = QTextFormat__Property(0x4810)
	QTextFormat__TableCellColumnSpan               QTextFormat__Property = QTextFormat__Property(0x4811)
	QTextFormat__TableCellTopPadding               QTextFormat__Property = QTextFormat__Property(0x4812)
	QTextFormat__TableCellBottomPadding            QTextFormat__Property = QTextFormat__Property(0x4813)
	QTextFormat__TableCellLeftPadding              QTextFormat__Property = QTextFormat__Property(0x4814)
	QTextFormat__TableCellRightPadding             QTextFormat__Property = QTextFormat__Property(0x4815)
	QTextFormat__ImageName                         QTextFormat__Property = QTextFormat__Property(0x5000)
	QTextFormat__ImageWidth                        QTextFormat__Property = QTextFormat__Property(0x5010)
	QTextFormat__ImageHeight                       QTextFormat__Property = QTextFormat__Property(0x5011)
	QTextFormat__FullWidthSelection                QTextFormat__Property = QTextFormat__Property(0x06000)
	QTextFormat__PageBreakPolicy                   QTextFormat__Property = QTextFormat__Property(0x7000)
	QTextFormat__UserProperty                      QTextFormat__Property = QTextFormat__Property(0x100000)
)

func NewQTextFormat3(other QTextFormat_ITF) *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat3(PointerFromQTextFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func NewQTextFormat() *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat())
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func NewQTextFormat2(ty int) *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat2(C.int(int32(ty))))
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func (ptr *QTextFormat) ClearBackground() {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearBackground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearForeground() {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearForeground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearProperty(propertyId int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearProperty(ptr.Pointer(), C.int(int32(propertyId)))
	}
}

func (ptr *QTextFormat) Merge(other QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_Merge(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetForeground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QTextFormat) SetObjectIndex(index int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectIndex(ptr.Pointer(), C.int(int32(index)))
	}
}

func (ptr *QTextFormat) SetObjectType(ty int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectType(ptr.Pointer(), C.int(int32(ty)))
	}
}

func (ptr *QTextFormat) SetProperty(propertyId int, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetProperty(ptr.Pointer(), C.int(int32(propertyId)), core.PointerFromQVariant(value))
	}
}

func (ptr *QTextFormat) SetProperty2(propertyId int, value []*QTextLength) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetProperty2(ptr.Pointer(), C.int(int32(propertyId)), func() unsafe.Pointer {
			var tmpList = NewQTextFormatFromPointer(NewQTextFormatFromPointer(nil).__setProperty_value_newList2())
			for _, v := range value {
				tmpList.__setProperty_value_setList2(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QTextFormat) Swap(other QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_Swap(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) DestroyQTextFormat() {
	if ptr.Pointer() != nil {
		C.QTextFormat_DestroyQTextFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextFormat) Background() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_Background(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) BrushProperty(propertyId int) *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_BrushProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Foreground() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_Foreground(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ColorProperty(propertyId int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QTextFormat_ColorProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Properties() map[int]*core.QVariant {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) map[int]*core.QVariant {
			var out = make(map[int]*core.QVariant, int(l.len))
			for _, i := range NewQTextFormatFromPointer(l.data).__properties_keyList() {
				out[i] = NewQTextFormatFromPointer(l.data).__properties_atList(i)
			}
			return out
		}(C.QTextFormat_Properties(ptr.Pointer()))
	}
	return make(map[int]*core.QVariant, 0)
}

func (ptr *QTextFormat) PenProperty(propertyId int) *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QTextFormat_PenProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) StringProperty(propertyId int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextFormat_StringProperty(ptr.Pointer(), C.int(int32(propertyId))))
	}
	return ""
}

func (ptr *QTextFormat) ToBlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextFormat_ToBlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToCharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextFormat_ToCharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToFrameFormat() *QTextFrameFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFormat_ToFrameFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToImageFormat() *QTextImageFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextImageFormatFromPointer(C.QTextFormat_ToImageFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextImageFormat).DestroyQTextImageFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) LengthProperty(propertyId int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFormat_LengthProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToListFormat() *QTextListFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFormatFromPointer(C.QTextFormat_ToListFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToTableCellFormat() *QTextTableCellFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFormatFromPointer(C.QTextFormat_ToTableCellFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableCellFormat).DestroyQTextTableCellFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToTableFormat() *QTextTableFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFormatFromPointer(C.QTextFormat_ToTableFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Property(propertyId int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextFormat_Property(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextFormat_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) BoolProperty(propertyId int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_BoolProperty(ptr.Pointer(), C.int(int32(propertyId))) != 0
	}
	return false
}

func (ptr *QTextFormat) HasProperty(propertyId int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_HasProperty(ptr.Pointer(), C.int(int32(propertyId))) != 0
	}
	return false
}

func (ptr *QTextFormat) IsBlockFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsBlockFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsCharFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsCharFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsFrameFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsFrameFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsImageFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsListFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsListFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableCellFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableCellFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IntProperty(propertyId int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_IntProperty(ptr.Pointer(), C.int(int32(propertyId)))))
	}
	return 0
}

func (ptr *QTextFormat) ObjectIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_ObjectIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) ObjectType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_ObjectType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) PropertyCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_PropertyCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) DoubleProperty(propertyId int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFormat_DoubleProperty(ptr.Pointer(), C.int(int32(propertyId))))
	}
	return 0
}

func (ptr *QTextFormat) __setProperty_value_atList2(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFormat___setProperty_value_atList2(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) __setProperty_value_setList2(i QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat___setProperty_value_setList2(ptr.Pointer(), PointerFromQTextLength(i))
	}
}

func (ptr *QTextFormat) __setProperty_value_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFormat___setProperty_value_newList2(ptr.Pointer()))
}

func (ptr *QTextFormat) __properties_atList(i int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextFormat___properties_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) __properties_setList(key int, i core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat___properties_setList(ptr.Pointer(), C.int(int32(key)), core.PointerFromQVariant(i))
	}
}

func (ptr *QTextFormat) __properties_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFormat___properties_newList(ptr.Pointer()))
}

func (ptr *QTextFormat) __properties_keyList() []int {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []int {
			var out = make([]int, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextFormatFromPointer(l.data).____properties_keyList_atList(i)
			}
			return out
		}(C.QTextFormat___properties_keyList(ptr.Pointer()))
	}
	return make([]int, 0)
}

func (ptr *QTextFormat) __lengthVectorProperty_atList(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFormat___lengthVectorProperty_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) __lengthVectorProperty_setList(i QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat___lengthVectorProperty_setList(ptr.Pointer(), PointerFromQTextLength(i))
	}
}

func (ptr *QTextFormat) __lengthVectorProperty_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFormat___lengthVectorProperty_newList(ptr.Pointer()))
}

func (ptr *QTextFormat) ____properties_keyList_atList(i int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_____properties_keyList_atList(ptr.Pointer(), C.int(int32(i)))))
	}
	return 0
}

func (ptr *QTextFormat) ____properties_keyList_setList(i int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_____properties_keyList_setList(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QTextFormat) ____properties_keyList_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFormat_____properties_keyList_newList(ptr.Pointer()))
}

type QTextFragment struct {
	ptr unsafe.Pointer
}

type QTextFragment_ITF interface {
	QTextFragment_PTR() *QTextFragment
}

func (ptr *QTextFragment) QTextFragment_PTR() *QTextFragment {
	return ptr
}

func (ptr *QTextFragment) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextFragment) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextFragment(ptr QTextFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextFragmentFromPointer(ptr unsafe.Pointer) *QTextFragment {
	var n = new(QTextFragment)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextFragment) DestroyQTextFragment() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQTextFragment() *QTextFragment {
	var tmpValue = NewQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment())
	runtime.SetFinalizer(tmpValue, (*QTextFragment).DestroyQTextFragment)
	return tmpValue
}

func NewQTextFragment3(other QTextFragment_ITF) *QTextFragment {
	var tmpValue = NewQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment3(PointerFromQTextFragment(other)))
	runtime.SetFinalizer(tmpValue, (*QTextFragment).DestroyQTextFragment)
	return tmpValue
}

func (ptr *QTextFragment) GlyphRuns(pos int, len int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextFragmentFromPointer(l.data).__glyphRuns_atList(i)
			}
			return out
		}(C.QTextFragment_GlyphRuns(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len))))
	}
	return make([]*QGlyphRun, 0)
}

func (ptr *QTextFragment) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextFragment_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextFragment) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextFragment_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFragment) Contains(position int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFragment_Contains(ptr.Pointer(), C.int(int32(position))) != 0
	}
	return false
}

func (ptr *QTextFragment) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextFragment_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFragment) CharFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_CharFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) __glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextFragment___glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFragment) __glyphRuns_setList(i QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFragment___glyphRuns_setList(ptr.Pointer(), PointerFromQGlyphRun(i))
	}
}

func (ptr *QTextFragment) __glyphRuns_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFragment___glyphRuns_newList(ptr.Pointer()))
}

type QTextFrame struct {
	QTextObject
}

type QTextFrame_ITF interface {
	QTextObject_ITF
	QTextFrame_PTR() *QTextFrame
}

func (ptr *QTextFrame) QTextFrame_PTR() *QTextFrame {
	return ptr
}

func (ptr *QTextFrame) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextFrame) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextObject_PTR().SetPointer(p)
	}
}

func PointerFromQTextFrame(ptr QTextFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrame_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFromPointer(ptr unsafe.Pointer) *QTextFrame {
	var n = new(QTextFrame)
	n.SetPointer(ptr)
	return n
}
func NewQTextFrame(document QTextDocument_ITF) *QTextFrame {
	var tmpValue = NewQTextFrameFromPointer(C.QTextFrame_NewQTextFrame(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTextFrame) SetFrameFormat(format QTextFrameFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_SetFrameFormat(ptr.Pointer(), PointerFromQTextFrameFormat(format))
	}
}

func (ptr *QTextFrame) DestroyQTextFrame() {
	if ptr.Pointer() != nil {
		C.QTextFrame_DestroyQTextFrame(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextFrame) ChildFrames() []*QTextFrame {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextFrame {
			var out = make([]*QTextFrame, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextFrameFromPointer(l.data).__childFrames_atList(i)
			}
			return out
		}(C.QTextFrame_ChildFrames(ptr.Pointer()))
	}
	return make([]*QTextFrame, 0)
}

func (ptr *QTextFrame) FirstCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextFrame_FirstCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) LastCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextFrame_LastCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) ParentFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextFrame_ParentFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) FrameFormat() *QTextFrameFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFrame_FrameFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) FirstPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFrame_FirstPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFrame) LastPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFrame_LastPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFrame) __childFrames_atList(i int) *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextFrame___childFrames_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) __childFrames_setList(i QTextFrame_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame___childFrames_setList(ptr.Pointer(), PointerFromQTextFrame(i))
	}
}

func (ptr *QTextFrame) __childFrames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextFrame___childFrames_newList(ptr.Pointer()))
}

type QTextFrameFormat struct {
	QTextFormat
}

type QTextFrameFormat_ITF interface {
	QTextFormat_ITF
	QTextFrameFormat_PTR() *QTextFrameFormat
}

func (ptr *QTextFrameFormat) QTextFrameFormat_PTR() *QTextFrameFormat {
	return ptr
}

func (ptr *QTextFrameFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextFrameFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextFrameFormat(ptr QTextFrameFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFormatFromPointer(ptr unsafe.Pointer) *QTextFrameFormat {
	var n = new(QTextFrameFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextFrameFormat) DestroyQTextFrameFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextFrameFormat__BorderStyle
//QTextFrameFormat::BorderStyle
type QTextFrameFormat__BorderStyle int64

var (
	QTextFrameFormat__BorderStyle_None       QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(0)
	QTextFrameFormat__BorderStyle_Dotted     QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(1)
	QTextFrameFormat__BorderStyle_Dashed     QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(2)
	QTextFrameFormat__BorderStyle_Solid      QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(3)
	QTextFrameFormat__BorderStyle_Double     QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(4)
	QTextFrameFormat__BorderStyle_DotDash    QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(5)
	QTextFrameFormat__BorderStyle_DotDotDash QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(6)
	QTextFrameFormat__BorderStyle_Groove     QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(7)
	QTextFrameFormat__BorderStyle_Ridge      QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(8)
	QTextFrameFormat__BorderStyle_Inset      QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(9)
	QTextFrameFormat__BorderStyle_Outset     QTextFrameFormat__BorderStyle = QTextFrameFormat__BorderStyle(10)
)

//go:generate stringer -type=QTextFrameFormat__Position
//QTextFrameFormat::Position
type QTextFrameFormat__Position int64

const (
	QTextFrameFormat__InFlow     QTextFrameFormat__Position = QTextFrameFormat__Position(0)
	QTextFrameFormat__FloatLeft  QTextFrameFormat__Position = QTextFrameFormat__Position(1)
	QTextFrameFormat__FloatRight QTextFrameFormat__Position = QTextFrameFormat__Position(2)
)

func NewQTextFrameFormat() *QTextFrameFormat {
	var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFrameFormat_NewQTextFrameFormat())
	runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
	return tmpValue
}

func (ptr *QTextFrameFormat) SetBorder(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorder(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetBorderBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFrameFormat) SetBorderStyle(style QTextFrameFormat__BorderStyle) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextFrameFormat) SetBottomMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetHeight(height QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight(ptr.Pointer(), PointerFromQTextLength(height))
	}
}

func (ptr *QTextFrameFormat) SetHeight2(height float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight2(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextFrameFormat) SetLeftMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetPadding(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPadding(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPageBreakPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextFrameFormat) SetPosition(policy QTextFrameFormat__Position) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPosition(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextFrameFormat) SetRightMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetTopMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetWidth(width QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth(ptr.Pointer(), PointerFromQTextLength(width))
	}
}

func (ptr *QTextFrameFormat) SetWidth2(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth2(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) BorderStyle() QTextFrameFormat__BorderStyle {
	if ptr.Pointer() != nil {
		return QTextFrameFormat__BorderStyle(C.QTextFrameFormat_BorderStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextFrameFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Position() QTextFrameFormat__Position {
	if ptr.Pointer() != nil {
		return QTextFrameFormat__Position(C.QTextFrameFormat_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) BorderBrush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFrameFormat_BorderBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrameFormat) Height() *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFrameFormat_Height(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrameFormat) Width() *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFrameFormat_Width(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrameFormat) Border() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Border(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) BottomMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) LeftMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Margin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Margin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Padding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Padding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) RightMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) TopMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

type QTextImageFormat struct {
	QTextCharFormat
}

type QTextImageFormat_ITF interface {
	QTextCharFormat_ITF
	QTextImageFormat_PTR() *QTextImageFormat
}

func (ptr *QTextImageFormat) QTextImageFormat_PTR() *QTextImageFormat {
	return ptr
}

func (ptr *QTextImageFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextImageFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextCharFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextImageFormat(ptr QTextImageFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextImageFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextImageFormatFromPointer(ptr unsafe.Pointer) *QTextImageFormat {
	var n = new(QTextImageFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextImageFormat) DestroyQTextImageFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQTextImageFormat() *QTextImageFormat {
	var tmpValue = NewQTextImageFormatFromPointer(C.QTextImageFormat_NewQTextImageFormat())
	runtime.SetFinalizer(tmpValue, (*QTextImageFormat).DestroyQTextImageFormat)
	return tmpValue
}

func (ptr *QTextImageFormat) SetHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextImageFormat) SetName(name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QTextImageFormat_SetName(ptr.Pointer(), nameC)
	}
}

func (ptr *QTextImageFormat) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextImageFormat) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextImageFormat_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextImageFormat) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextImageFormat) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Width(ptr.Pointer()))
	}
	return 0
}

type QTextInlineObject struct {
	ptr unsafe.Pointer
}

type QTextInlineObject_ITF interface {
	QTextInlineObject_PTR() *QTextInlineObject
}

func (ptr *QTextInlineObject) QTextInlineObject_PTR() *QTextInlineObject {
	return ptr
}

func (ptr *QTextInlineObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextInlineObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextInlineObject(ptr QTextInlineObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextInlineObject_PTR().Pointer()
	}
	return nil
}

func NewQTextInlineObjectFromPointer(ptr unsafe.Pointer) *QTextInlineObject {
	var n = new(QTextInlineObject)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextInlineObject) DestroyQTextInlineObject() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextInlineObject) SetAscent(a float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetAscent(ptr.Pointer(), C.double(a))
	}
}

func (ptr *QTextInlineObject) SetDescent(d float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetDescent(ptr.Pointer(), C.double(d))
	}
}

func (ptr *QTextInlineObject) SetWidth(w float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetWidth(ptr.Pointer(), C.double(w))
	}
}

func (ptr *QTextInlineObject) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextInlineObject_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextInlineObject) Format() *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextInlineObject_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextInlineObject) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextInlineObject_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextInlineObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextInlineObject) FormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextInlineObject_FormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextInlineObject) TextPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextInlineObject_TextPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextInlineObject) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Width(ptr.Pointer()))
	}
	return 0
}

type QTextItem struct {
	ptr unsafe.Pointer
}

type QTextItem_ITF interface {
	QTextItem_PTR() *QTextItem
}

func (ptr *QTextItem) QTextItem_PTR() *QTextItem {
	return ptr
}

func (ptr *QTextItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextItem(ptr QTextItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextItem_PTR().Pointer()
	}
	return nil
}

func NewQTextItemFromPointer(ptr unsafe.Pointer) *QTextItem {
	var n = new(QTextItem)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextItem) DestroyQTextItem() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextItem__RenderFlag
//QTextItem::RenderFlag
type QTextItem__RenderFlag int64

const (
	QTextItem__RightToLeft QTextItem__RenderFlag = QTextItem__RenderFlag(0x1)
	QTextItem__Overline    QTextItem__RenderFlag = QTextItem__RenderFlag(0x10)
	QTextItem__Underline   QTextItem__RenderFlag = QTextItem__RenderFlag(0x20)
	QTextItem__StrikeOut   QTextItem__RenderFlag = QTextItem__RenderFlag(0x40)
	QTextItem__Dummy       QTextItem__RenderFlag = QTextItem__RenderFlag(0xffffffff)
)

func (ptr *QTextItem) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextItem) RenderFlags() QTextItem__RenderFlag {
	if ptr.Pointer() != nil {
		return QTextItem__RenderFlag(C.QTextItem_RenderFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Width(ptr.Pointer()))
	}
	return 0
}

type QTextLayout struct {
	ptr unsafe.Pointer
}

type QTextLayout_ITF interface {
	QTextLayout_PTR() *QTextLayout
}

func (ptr *QTextLayout) QTextLayout_PTR() *QTextLayout {
	return ptr
}

func (ptr *QTextLayout) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextLayout) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextLayout(ptr QTextLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLayout_PTR().Pointer()
	}
	return nil
}

func NewQTextLayoutFromPointer(ptr unsafe.Pointer) *QTextLayout {
	var n = new(QTextLayout)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTextLayout__CursorMode
//QTextLayout::CursorMode
type QTextLayout__CursorMode int64

const (
	QTextLayout__SkipCharacters QTextLayout__CursorMode = QTextLayout__CursorMode(0)
	QTextLayout__SkipWords      QTextLayout__CursorMode = QTextLayout__CursorMode(1)
)

func NewQTextLayout() *QTextLayout {
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout())
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func NewQTextLayout2(text string) *QTextLayout {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout2(textC))
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func NewQTextLayout3(text string, font QFont_ITF, paintdevice QPaintDevice_ITF) *QTextLayout {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout3(textC, PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func (ptr *QTextLayout) CreateLine() *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_CreateLine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) BeginLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_BeginLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) ClearFormats() {
	if ptr.Pointer() != nil {
		C.QTextLayout_ClearFormats(ptr.Pointer())
	}
}

func (ptr *QTextLayout) ClearLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) EndLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_EndLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) SetCacheEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetCacheEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextLayout) SetCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetCursorMoveStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextLayout) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextLayout) SetPosition(p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetPosition(ptr.Pointer(), core.PointerFromQPointF(p))
	}
}

func (ptr *QTextLayout) SetPreeditArea(position int, text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QTextLayout_SetPreeditArea(ptr.Pointer(), C.int(int32(position)), textC)
	}
}

func (ptr *QTextLayout) SetText(stri string) {
	if ptr.Pointer() != nil {
		var striC *C.char
		if stri != "" {
			striC = C.CString(stri)
			defer C.free(unsafe.Pointer(striC))
		}
		C.QTextLayout_SetText(ptr.Pointer(), striC)
	}
}

func (ptr *QTextLayout) SetTextOption(option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextLayout) DestroyQTextLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_DestroyQTextLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextLayout) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextLayout_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) GlyphRuns(from int, length int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextLayoutFromPointer(l.data).__glyphRuns_atList(i)
			}
			return out
		}(C.QTextLayout_GlyphRuns(ptr.Pointer(), C.int(int32(from)), C.int(int32(length))))
	}
	return make([]*QGlyphRun, 0)
}

func (ptr *QTextLayout) Position() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTextLayout_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLayout_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) PreeditAreaText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextLayout_PreeditAreaText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextLayout_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) LineAt(i int) *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_LineAt(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) LineForTextPosition(pos int) *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_LineForTextPosition(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) CursorMoveStyle() core.Qt__CursorMoveStyle {
	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextLayout_CursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) CacheEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QTextLayout_CacheEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLayout) IsValidCursorPosition(pos int) bool {
	if ptr.Pointer() != nil {
		return C.QTextLayout_IsValidCursorPosition(ptr.Pointer(), C.int(int32(pos))) != 0
	}
	return false
}

func (ptr *QTextLayout) TextOption() *QTextOption {
	if ptr.Pointer() != nil {
		return NewQTextOptionFromPointer(C.QTextLayout_TextOption(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) LeftCursorPosition(oldPos int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_LeftCursorPosition(ptr.Pointer(), C.int(int32(oldPos)))))
	}
	return 0
}

func (ptr *QTextLayout) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_LineCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLayout) NextCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_NextCursorPosition(ptr.Pointer(), C.int(int32(oldPos)), C.longlong(mode))))
	}
	return 0
}

func (ptr *QTextLayout) PreeditAreaPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_PreeditAreaPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLayout) PreviousCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_PreviousCursorPosition(ptr.Pointer(), C.int(int32(oldPos)), C.longlong(mode))))
	}
	return 0
}

func (ptr *QTextLayout) RightCursorPosition(oldPos int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_RightCursorPosition(ptr.Pointer(), C.int(int32(oldPos)))))
	}
	return 0
}

func (ptr *QTextLayout) MaximumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MaximumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) MinimumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MinimumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) DrawCursor2(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int) {
	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor2(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(int32(cursorPosition)))
	}
}

func (ptr *QTextLayout) DrawCursor(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int, width int) {
	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(int32(cursorPosition)), C.int(int32(width)))
	}
}

func (ptr *QTextLayout) __glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextLayout___glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) __glyphRuns_setList(i QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout___glyphRuns_setList(ptr.Pointer(), PointerFromQGlyphRun(i))
	}
}

func (ptr *QTextLayout) __glyphRuns_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextLayout___glyphRuns_newList(ptr.Pointer()))
}

type QTextLength struct {
	ptr unsafe.Pointer
}

type QTextLength_ITF interface {
	QTextLength_PTR() *QTextLength
}

func (ptr *QTextLength) QTextLength_PTR() *QTextLength {
	return ptr
}

func (ptr *QTextLength) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextLength) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextLength(ptr QTextLength_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLength_PTR().Pointer()
	}
	return nil
}

func NewQTextLengthFromPointer(ptr unsafe.Pointer) *QTextLength {
	var n = new(QTextLength)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextLength) DestroyQTextLength() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextLength__Type
//QTextLength::Type
type QTextLength__Type int64

const (
	QTextLength__VariableLength   QTextLength__Type = QTextLength__Type(0)
	QTextLength__FixedLength      QTextLength__Type = QTextLength__Type(1)
	QTextLength__PercentageLength QTextLength__Type = QTextLength__Type(2)
)

func NewQTextLength() *QTextLength {
	var tmpValue = NewQTextLengthFromPointer(C.QTextLength_NewQTextLength())
	runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
	return tmpValue
}

func NewQTextLength2(ty QTextLength__Type, value float64) *QTextLength {
	var tmpValue = NewQTextLengthFromPointer(C.QTextLength_NewQTextLength2(C.longlong(ty), C.double(value)))
	runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
	return tmpValue
}

func (ptr *QTextLength) Type() QTextLength__Type {
	if ptr.Pointer() != nil {
		return QTextLength__Type(C.QTextLength_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) RawValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLength_RawValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) Value(maximumLength float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLength_Value(ptr.Pointer(), C.double(maximumLength)))
	}
	return 0
}

type QTextLine struct {
	ptr unsafe.Pointer
}

type QTextLine_ITF interface {
	QTextLine_PTR() *QTextLine
}

func (ptr *QTextLine) QTextLine_PTR() *QTextLine {
	return ptr
}

func (ptr *QTextLine) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextLine) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextLine(ptr QTextLine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLine_PTR().Pointer()
	}
	return nil
}

func NewQTextLineFromPointer(ptr unsafe.Pointer) *QTextLine {
	var n = new(QTextLine)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextLine) DestroyQTextLine() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextLine__Edge
//QTextLine::Edge
type QTextLine__Edge int64

const (
	QTextLine__Leading  QTextLine__Edge = QTextLine__Edge(0)
	QTextLine__Trailing QTextLine__Edge = QTextLine__Edge(1)
)

//go:generate stringer -type=QTextLine__CursorPosition
//QTextLine::CursorPosition
type QTextLine__CursorPosition int64

const (
	QTextLine__CursorBetweenCharacters QTextLine__CursorPosition = QTextLine__CursorPosition(0)
	QTextLine__CursorOnCharacter       QTextLine__CursorPosition = QTextLine__CursorPosition(1)
)

func NewQTextLine() *QTextLine {
	var tmpValue = NewQTextLineFromPointer(C.QTextLine_NewQTextLine())
	runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
	return tmpValue
}

func (ptr *QTextLine) XToCursor(x float64, cpos QTextLine__CursorPosition) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_XToCursor(ptr.Pointer(), C.double(x), C.longlong(cpos))))
	}
	return 0
}

func (ptr *QTextLine) SetLeadingIncluded(included bool) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetLeadingIncluded(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(included))))
	}
}

func (ptr *QTextLine) SetLineWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetLineWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextLine) SetNumColumns(numColumns int) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns(ptr.Pointer(), C.int(int32(numColumns)))
	}
}

func (ptr *QTextLine) SetNumColumns2(numColumns int, alignmentWidth float64) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns2(ptr.Pointer(), C.int(int32(numColumns)), C.double(alignmentWidth))
	}
}

func (ptr *QTextLine) SetPosition(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetPosition(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QTextLine) GlyphRuns(from int, length int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextLineFromPointer(l.data).__glyphRuns_atList(i)
			}
			return out
		}(C.QTextLine_GlyphRuns(ptr.Pointer(), C.int(int32(from)), C.int(int32(length))))
	}
	return make([]*QGlyphRun, 0)
}

func (ptr *QTextLine) Position() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTextLine_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) NaturalTextRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLine_NaturalTextRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLine_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextLine_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) LeadingIncluded() bool {
	if ptr.Pointer() != nil {
		return C.QTextLine_LeadingIncluded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) LineNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_LineNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) TextLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_TextLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) TextStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_TextStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) CursorToX(cursorPos int, edge QTextLine__Edge) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX(ptr.Pointer(), C.int(int32(cursorPos)), C.longlong(edge)))
	}
	return 0
}

func (ptr *QTextLine) CursorToX2(cursorPos int, edge QTextLine__Edge) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX2(ptr.Pointer(), C.int(int32(cursorPos)), C.longlong(edge)))
	}
	return 0
}

func (ptr *QTextLine) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) HorizontalAdvance() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_HorizontalAdvance(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) NaturalTextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_NaturalTextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) __glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextLine___glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) __glyphRuns_setList(i QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLine___glyphRuns_setList(ptr.Pointer(), PointerFromQGlyphRun(i))
	}
}

func (ptr *QTextLine) __glyphRuns_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextLine___glyphRuns_newList(ptr.Pointer()))
}

type QTextList struct {
	QTextBlockGroup
}

type QTextList_ITF interface {
	QTextBlockGroup_ITF
	QTextList_PTR() *QTextList
}

func (ptr *QTextList) QTextList_PTR() *QTextList {
	return ptr
}

func (ptr *QTextList) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextList) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextBlockGroup_PTR().SetPointer(p)
	}
}

func PointerFromQTextList(ptr QTextList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextList_PTR().Pointer()
	}
	return nil
}

func NewQTextListFromPointer(ptr unsafe.Pointer) *QTextList {
	var n = new(QTextList)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextList) DestroyQTextList() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextList) Add(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_Add(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) Remove(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_Remove(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) RemoveItem(i int) {
	if ptr.Pointer() != nil {
		C.QTextList_RemoveItem(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QTextList) SetFormat(format QTextListFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_SetFormat(ptr.Pointer(), PointerFromQTextListFormat(format))
	}
}

func (ptr *QTextList) ItemText(block QTextBlock_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextList_ItemText(ptr.Pointer(), PointerFromQTextBlock(block)))
	}
	return ""
}

func (ptr *QTextList) Item(i int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextList_Item(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextList) Format() *QTextListFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFormatFromPointer(C.QTextList_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextList) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextList_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextList) ItemNumber(block QTextBlock_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextList_ItemNumber(ptr.Pointer(), PointerFromQTextBlock(block))))
	}
	return 0
}

type QTextListFormat struct {
	QTextFormat
}

type QTextListFormat_ITF interface {
	QTextFormat_ITF
	QTextListFormat_PTR() *QTextListFormat
}

func (ptr *QTextListFormat) QTextListFormat_PTR() *QTextListFormat {
	return ptr
}

func (ptr *QTextListFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextListFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextListFormat(ptr QTextListFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextListFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextListFormatFromPointer(ptr unsafe.Pointer) *QTextListFormat {
	var n = new(QTextListFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextListFormat) DestroyQTextListFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTextListFormat__Style
//QTextListFormat::Style
type QTextListFormat__Style int64

var (
	QTextListFormat__ListDisc           QTextListFormat__Style = QTextListFormat__Style(-1)
	QTextListFormat__ListCircle         QTextListFormat__Style = QTextListFormat__Style(-2)
	QTextListFormat__ListSquare         QTextListFormat__Style = QTextListFormat__Style(-3)
	QTextListFormat__ListDecimal        QTextListFormat__Style = QTextListFormat__Style(-4)
	QTextListFormat__ListLowerAlpha     QTextListFormat__Style = QTextListFormat__Style(-5)
	QTextListFormat__ListUpperAlpha     QTextListFormat__Style = QTextListFormat__Style(-6)
	QTextListFormat__ListLowerRoman     QTextListFormat__Style = QTextListFormat__Style(-7)
	QTextListFormat__ListUpperRoman     QTextListFormat__Style = QTextListFormat__Style(-8)
	QTextListFormat__ListStyleUndefined QTextListFormat__Style = QTextListFormat__Style(0)
)

func NewQTextListFormat() *QTextListFormat {
	var tmpValue = NewQTextListFormatFromPointer(C.QTextListFormat_NewQTextListFormat())
	runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
	return tmpValue
}

func (ptr *QTextListFormat) SetIndent(indentation int) {
	if ptr.Pointer() != nil {
		C.QTextListFormat_SetIndent(ptr.Pointer(), C.int(int32(indentation)))
	}
}

func (ptr *QTextListFormat) SetNumberPrefix(numberPrefix string) {
	if ptr.Pointer() != nil {
		var numberPrefixC *C.char
		if numberPrefix != "" {
			numberPrefixC = C.CString(numberPrefix)
			defer C.free(unsafe.Pointer(numberPrefixC))
		}
		C.QTextListFormat_SetNumberPrefix(ptr.Pointer(), numberPrefixC)
	}
}

func (ptr *QTextListFormat) SetNumberSuffix(numberSuffix string) {
	if ptr.Pointer() != nil {
		var numberSuffixC *C.char
		if numberSuffix != "" {
			numberSuffixC = C.CString(numberSuffix)
			defer C.free(unsafe.Pointer(numberSuffixC))
		}
		C.QTextListFormat_SetNumberSuffix(ptr.Pointer(), numberSuffixC)
	}
}

func (ptr *QTextListFormat) SetStyle(style QTextListFormat__Style) {
	if ptr.Pointer() != nil {
		C.QTextListFormat_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextListFormat) NumberPrefix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextListFormat_NumberPrefix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) NumberSuffix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextListFormat_NumberSuffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) Style() QTextListFormat__Style {
	if ptr.Pointer() != nil {
		return QTextListFormat__Style(C.QTextListFormat_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextListFormat) Indent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextListFormat_Indent(ptr.Pointer())))
	}
	return 0
}

type QTextObject struct {
	core.QObject
}

type QTextObject_ITF interface {
	core.QObject_ITF
	QTextObject_PTR() *QTextObject
}

func (ptr *QTextObject) QTextObject_PTR() *QTextObject {
	return ptr
}

func (ptr *QTextObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQTextObject(ptr QTextObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObject_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectFromPointer(ptr unsafe.Pointer) *QTextObject {
	var n = new(QTextObject)
	n.SetPointer(ptr)
	return n
}
func NewQTextObject(document QTextDocument_ITF) *QTextObject {
	var tmpValue = NewQTextObjectFromPointer(C.QTextObject_NewQTextObject(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTextObject) SetFormat(format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_SetFormat(ptr.Pointer(), PointerFromQTextFormat(format))
	}
}

func (ptr *QTextObject) DestroyQTextObject() {
	if ptr.Pointer() != nil {
		C.QTextObject_DestroyQTextObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextObject) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextObject_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) Format() *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextObject_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) FormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextObject_FormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextObject) ObjectIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextObject_ObjectIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextObject) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextObject___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QTextObject) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextObject___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QTextObject) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextObject___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextObject) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QTextObject___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QTextObject) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextObject___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextObject) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QTextObject___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QTextObject) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextObject___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextObject) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextObject___findChildren_newList(ptr.Pointer()))
}

func (ptr *QTextObject) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTextObject___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QTextObject) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextObject___children_newList(ptr.Pointer()))
}

//export callbackQTextObject_Event
func callbackQTextObject_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextObject) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextObject_EventFilter
func callbackQTextObject_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextObject) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextObject_ChildEvent
func callbackQTextObject_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextObject) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextObject_ConnectNotify
func callbackQTextObject_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_CustomEvent
func callbackQTextObject_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextObject) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextObject_DeleteLater
func callbackQTextObject_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextObjectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextObject) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextObject_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObject_Destroyed
func callbackQTextObject_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQTextObject_DisconnectNotify
func callbackQTextObject_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_ObjectNameChanged
func callbackQTextObject_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQTextObject_TimerEvent
func callbackQTextObject_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextObject) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextObject_MetaObject
func callbackQTextObject_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextObject) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextObjectInterface struct {
	ptr unsafe.Pointer
}

type QTextObjectInterface_ITF interface {
	QTextObjectInterface_PTR() *QTextObjectInterface
}

func (ptr *QTextObjectInterface) QTextObjectInterface_PTR() *QTextObjectInterface {
	return ptr
}

func (ptr *QTextObjectInterface) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextObjectInterface) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextObjectInterface(ptr QTextObjectInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObjectInterface_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectInterfaceFromPointer(ptr unsafe.Pointer) *QTextObjectInterface {
	var n = new(QTextObjectInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQTextObjectInterface_IntrinsicSize
func callbackQTextObjectInterface_IntrinsicSize(ptr unsafe.Pointer, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "intrinsicSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func(*QTextDocument, int, *QTextFormat) *core.QSizeF)(NewQTextDocumentFromPointer(doc), int(int32(posInDocument)), NewQTextFormatFromPointer(format)))
	}

	return core.PointerFromQSizeF(core.NewQSizeF())
}

func (ptr *QTextObjectInterface) ConnectIntrinsicSize(f func(doc *QTextDocument, posInDocument int, format *QTextFormat) *core.QSizeF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "intrinsicSize"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "intrinsicSize", func(doc *QTextDocument, posInDocument int, format *QTextFormat) *core.QSizeF {
				signal.(func(*QTextDocument, int, *QTextFormat) *core.QSizeF)(doc, posInDocument, format)
				return f(doc, posInDocument, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "intrinsicSize", f)
		}
	}
}

func (ptr *QTextObjectInterface) DisconnectIntrinsicSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "intrinsicSize")
	}
}

func (ptr *QTextObjectInterface) IntrinsicSize(doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextObjectInterface_IntrinsicSize(ptr.Pointer(), PointerFromQTextDocument(doc), C.int(int32(posInDocument)), PointerFromQTextFormat(format)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//export callbackQTextObjectInterface_DrawObject
func callbackQTextObjectInterface_DrawObject(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "drawObject"); signal != nil {
		signal.(func(*QPainter, *core.QRectF, *QTextDocument, int, *QTextFormat))(NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect), NewQTextDocumentFromPointer(doc), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	}

}

func (ptr *QTextObjectInterface) ConnectDrawObject(f func(painter *QPainter, rect *core.QRectF, doc *QTextDocument, posInDocument int, format *QTextFormat)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "drawObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawObject", func(painter *QPainter, rect *core.QRectF, doc *QTextDocument, posInDocument int, format *QTextFormat) {
				signal.(func(*QPainter, *core.QRectF, *QTextDocument, int, *QTextFormat))(painter, rect, doc, posInDocument, format)
				f(painter, rect, doc, posInDocument, format)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "drawObject", f)
		}
	}
}

func (ptr *QTextObjectInterface) DisconnectDrawObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "drawObject")
	}
}

func (ptr *QTextObjectInterface) DrawObject(painter QPainter_ITF, rect core.QRectF_ITF, doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DrawObject(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRectF(rect), PointerFromQTextDocument(doc), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

//export callbackQTextObjectInterface_DestroyQTextObjectInterface
func callbackQTextObjectInterface_DestroyQTextObjectInterface(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QTextObjectInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQTextObjectInterfaceFromPointer(ptr).DestroyQTextObjectInterfaceDefault()
	}
}

func (ptr *QTextObjectInterface) ConnectDestroyQTextObjectInterface(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QTextObjectInterface"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextObjectInterface", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextObjectInterface", f)
		}
	}
}

func (ptr *QTextObjectInterface) DisconnectDestroyQTextObjectInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QTextObjectInterface")
	}
}

func (ptr *QTextObjectInterface) DestroyQTextObjectInterface() {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DestroyQTextObjectInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextObjectInterface) DestroyQTextObjectInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DestroyQTextObjectInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QTextOption struct {
	ptr unsafe.Pointer
}

type QTextOption_ITF interface {
	QTextOption_PTR() *QTextOption
}

func (ptr *QTextOption) QTextOption_PTR() *QTextOption {
	return ptr
}

func (ptr *QTextOption) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextOption) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextOption(ptr QTextOption_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextOption_PTR().Pointer()
	}
	return nil
}

func NewQTextOptionFromPointer(ptr unsafe.Pointer) *QTextOption {
	var n = new(QTextOption)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTextOption__Flag
//QTextOption::Flag
type QTextOption__Flag int64

const (
	QTextOption__ShowTabsAndSpaces                     QTextOption__Flag = QTextOption__Flag(0x1)
	QTextOption__ShowLineAndParagraphSeparators        QTextOption__Flag = QTextOption__Flag(0x2)
	QTextOption__AddSpaceForLineAndParagraphSeparators QTextOption__Flag = QTextOption__Flag(0x4)
	QTextOption__SuppressColors                        QTextOption__Flag = QTextOption__Flag(0x8)
	QTextOption__ShowDocumentTerminator                QTextOption__Flag = QTextOption__Flag(0x10)
	QTextOption__IncludeTrailingSpaces                 QTextOption__Flag = QTextOption__Flag(0x80000000)
)

//go:generate stringer -type=QTextOption__TabType
//QTextOption::TabType
type QTextOption__TabType int64

const (
	QTextOption__LeftTab      QTextOption__TabType = QTextOption__TabType(0)
	QTextOption__RightTab     QTextOption__TabType = QTextOption__TabType(1)
	QTextOption__CenterTab    QTextOption__TabType = QTextOption__TabType(2)
	QTextOption__DelimiterTab QTextOption__TabType = QTextOption__TabType(3)
)

//go:generate stringer -type=QTextOption__WrapMode
//QTextOption::WrapMode
type QTextOption__WrapMode int64

const (
	QTextOption__NoWrap                       QTextOption__WrapMode = QTextOption__WrapMode(0)
	QTextOption__WordWrap                     QTextOption__WrapMode = QTextOption__WrapMode(1)
	QTextOption__ManualWrap                   QTextOption__WrapMode = QTextOption__WrapMode(2)
	QTextOption__WrapAnywhere                 QTextOption__WrapMode = QTextOption__WrapMode(3)
	QTextOption__WrapAtWordBoundaryOrAnywhere QTextOption__WrapMode = QTextOption__WrapMode(4)
)

func NewQTextOption3(other QTextOption_ITF) *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption3(PointerFromQTextOption(other)))
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func NewQTextOption() *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption())
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func NewQTextOption2(alignment core.Qt__AlignmentFlag) *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption2(C.longlong(alignment)))
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func (ptr *QTextOption) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextOption) SetFlags(flags QTextOption__Flag) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QTextOption) SetTabArray(tabStops []float64) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetTabArray(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQTextOptionFromPointer(NewQTextOptionFromPointer(nil).__setTabArray_tabStops_newList())
			for _, v := range tabStops {
				tmpList.__setTabArray_tabStops_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QTextOption) SetTabStop(tabStop float64) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetTabStop(ptr.Pointer(), C.double(tabStop))
	}
}

func (ptr *QTextOption) SetTextDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetTextDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QTextOption) SetUseDesignMetrics(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetUseDesignMetrics(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextOption) SetWrapMode(mode QTextOption__WrapMode) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetWrapMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QTextOption) DestroyQTextOption() {
	if ptr.Pointer() != nil {
		C.QTextOption_DestroyQTextOption(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextOption) Flags() QTextOption__Flag {
	if ptr.Pointer() != nil {
		return QTextOption__Flag(C.QTextOption_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) TabArray() []float64 {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []float64 {
			var out = make([]float64, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextOptionFromPointer(l.data).__tabArray_atList(i)
			}
			return out
		}(C.QTextOption_TabArray(ptr.Pointer()))
	}
	return make([]float64, 0)
}

func (ptr *QTextOption) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextOption_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextOption_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) WrapMode() QTextOption__WrapMode {
	if ptr.Pointer() != nil {
		return QTextOption__WrapMode(C.QTextOption_WrapMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) UseDesignMetrics() bool {
	if ptr.Pointer() != nil {
		return C.QTextOption_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextOption) TabStop() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextOption_TabStop(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) __setTabArray_tabStops_atList(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextOption___setTabArray_tabStops_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QTextOption) __setTabArray_tabStops_setList(i float64) {
	if ptr.Pointer() != nil {
		C.QTextOption___setTabArray_tabStops_setList(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QTextOption) __setTabArray_tabStops_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextOption___setTabArray_tabStops_newList(ptr.Pointer()))
}

func (ptr *QTextOption) __tabArray_atList(i int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextOption___tabArray_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return 0
}

func (ptr *QTextOption) __tabArray_setList(i float64) {
	if ptr.Pointer() != nil {
		C.QTextOption___tabArray_setList(ptr.Pointer(), C.double(i))
	}
}

func (ptr *QTextOption) __tabArray_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextOption___tabArray_newList(ptr.Pointer()))
}

type QTextTable struct {
	QTextFrame
}

type QTextTable_ITF interface {
	QTextFrame_ITF
	QTextTable_PTR() *QTextTable
}

func (ptr *QTextTable) QTextTable_PTR() *QTextTable {
	return ptr
}

func (ptr *QTextTable) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrame_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextTable) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFrame_PTR().SetPointer(p)
	}
}

func PointerFromQTextTable(ptr QTextTable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTable_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFromPointer(ptr unsafe.Pointer) *QTextTable {
	var n = new(QTextTable)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTable) DestroyQTextTable() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextTable) AppendColumns(count int) {
	if ptr.Pointer() != nil {
		C.QTextTable_AppendColumns(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTable) AppendRows(count int) {
	if ptr.Pointer() != nil {
		C.QTextTable_AppendRows(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTable) InsertColumns(index int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_InsertColumns(ptr.Pointer(), C.int(int32(index)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) InsertRows(index int, rows int) {
	if ptr.Pointer() != nil {
		C.QTextTable_InsertRows(ptr.Pointer(), C.int(int32(index)), C.int(int32(rows)))
	}
}

func (ptr *QTextTable) MergeCells2(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells2(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

func (ptr *QTextTable) MergeCells(row int, column int, numRows int, numCols int) {
	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), C.int(int32(numRows)), C.int(int32(numCols)))
	}
}

func (ptr *QTextTable) RemoveColumns(index int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_RemoveColumns(ptr.Pointer(), C.int(int32(index)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) RemoveRows(index int, rows int) {
	if ptr.Pointer() != nil {
		C.QTextTable_RemoveRows(ptr.Pointer(), C.int(int32(index)), C.int(int32(rows)))
	}
}

func (ptr *QTextTable) Resize(rows int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_Resize(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) SetFormat(format QTextTableFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_SetFormat(ptr.Pointer(), PointerFromQTextTableFormat(format))
	}
}

func (ptr *QTextTable) SplitCell(row int, column int, numRows int, numCols int) {
	if ptr.Pointer() != nil {
		C.QTextTable_SplitCell(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), C.int(int32(numRows)), C.int(int32(numCols)))
	}
}

func (ptr *QTextTable) RowEnd(cursor QTextCursor_ITF) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTable_RowEnd(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) RowStart(cursor QTextCursor_ITF) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTable_RowStart(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) CellAt3(cursor QTextCursor_ITF) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt3(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) CellAt2(position int) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt2(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) CellAt(row int, column int) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) Format() *QTextTableFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFormatFromPointer(C.QTextTable_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) Columns() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTable_Columns(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTable) Rows() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTable_Rows(ptr.Pointer())))
	}
	return 0
}

type QTextTableCell struct {
	ptr unsafe.Pointer
}

type QTextTableCell_ITF interface {
	QTextTableCell_PTR() *QTextTableCell
}

func (ptr *QTextTableCell) QTextTableCell_PTR() *QTextTableCell {
	return ptr
}

func (ptr *QTextTableCell) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTextTableCell) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTextTableCell(ptr QTextTableCell_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCell_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFromPointer(ptr unsafe.Pointer) *QTextTableCell {
	var n = new(QTextTableCell)
	n.SetPointer(ptr)
	return n
}
func NewQTextTableCell() *QTextTableCell {
	var tmpValue = NewQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell())
	runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
	return tmpValue
}

func NewQTextTableCell2(other QTextTableCell_ITF) *QTextTableCell {
	var tmpValue = NewQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell2(PointerFromQTextTableCell(other)))
	runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
	return tmpValue
}

func (ptr *QTextTableCell) SetFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTableCell_SetFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextTableCell) DestroyQTextTableCell() {
	if ptr.Pointer() != nil {
		C.QTextTableCell_DestroyQTextTableCell(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextTableCell) Format() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextTableCell_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) FirstCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTableCell_FirstCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) LastCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTableCell_LastCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextTableCell_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableCell) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) ColumnSpan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_ColumnSpan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_Row(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) RowSpan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_RowSpan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) TableCellFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_TableCellFormatIndex(ptr.Pointer())))
	}
	return 0
}

type QTextTableCellFormat struct {
	QTextCharFormat
}

type QTextTableCellFormat_ITF interface {
	QTextCharFormat_ITF
	QTextTableCellFormat_PTR() *QTextTableCellFormat
}

func (ptr *QTextTableCellFormat) QTextTableCellFormat_PTR() *QTextTableCellFormat {
	return ptr
}

func (ptr *QTextTableCellFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextTableCellFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextCharFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextTableCellFormat(ptr QTextTableCellFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCellFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFormatFromPointer(ptr unsafe.Pointer) *QTextTableCellFormat {
	var n = new(QTextTableCellFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTableCellFormat) DestroyQTextTableCellFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQTextTableCellFormat() *QTextTableCellFormat {
	var tmpValue = NewQTextTableCellFormatFromPointer(C.QTextTableCellFormat_NewQTextTableCellFormat())
	runtime.SetFinalizer(tmpValue, (*QTextTableCellFormat).DestroyQTextTableCellFormat)
	return tmpValue
}

func (ptr *QTextTableCellFormat) SetBottomPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetBottomPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetLeftPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetLeftPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetRightPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetRightPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetTopPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetTopPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) BottomPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_BottomPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) LeftPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_LeftPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) RightPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_RightPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) TopPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_TopPadding(ptr.Pointer()))
	}
	return 0
}

type QTextTableFormat struct {
	QTextFrameFormat
}

type QTextTableFormat_ITF interface {
	QTextFrameFormat_ITF
	QTextTableFormat_PTR() *QTextTableFormat
}

func (ptr *QTextTableFormat) QTextTableFormat_PTR() *QTextTableFormat {
	return ptr
}

func (ptr *QTextTableFormat) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func (ptr *QTextTableFormat) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QTextFrameFormat_PTR().SetPointer(p)
	}
}

func PointerFromQTextTableFormat(ptr QTextTableFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFormatFromPointer(ptr unsafe.Pointer) *QTextTableFormat {
	var n = new(QTextTableFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTableFormat) DestroyQTextTableFormat() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQTextTableFormat() *QTextTableFormat {
	var tmpValue = NewQTextTableFormatFromPointer(C.QTextTableFormat_NewQTextTableFormat())
	runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
	return tmpValue
}

func (ptr *QTextTableFormat) ClearColumnWidthConstraints() {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_ClearColumnWidthConstraints(ptr.Pointer())
	}
}

func (ptr *QTextTableFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextTableFormat) SetCellPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableFormat) SetCellSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextTableFormat) SetColumnWidthConstraints(constraints []*QTextLength) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetColumnWidthConstraints(ptr.Pointer(), func() unsafe.Pointer {
			var tmpList = NewQTextTableFormatFromPointer(NewQTextTableFormatFromPointer(nil).__setColumnWidthConstraints_constraints_newList())
			for _, v := range constraints {
				tmpList.__setColumnWidthConstraints_constraints_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QTextTableFormat) SetHeaderRowCount(count int) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetHeaderRowCount(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTableFormat) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextTableFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) Columns() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableFormat_Columns(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableFormat) HeaderRowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableFormat_HeaderRowCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableFormat) CellPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) CellSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) __setColumnWidthConstraints_constraints_atList(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextTableFormat___setColumnWidthConstraints_constraints_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableFormat) __setColumnWidthConstraints_constraints_setList(i QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat___setColumnWidthConstraints_constraints_setList(ptr.Pointer(), PointerFromQTextLength(i))
	}
}

func (ptr *QTextTableFormat) __setColumnWidthConstraints_constraints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextTableFormat___setColumnWidthConstraints_constraints_newList(ptr.Pointer()))
}

func (ptr *QTextTableFormat) __columnWidthConstraints_atList(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextTableFormat___columnWidthConstraints_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableFormat) __columnWidthConstraints_setList(i QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat___columnWidthConstraints_setList(ptr.Pointer(), PointerFromQTextLength(i))
	}
}

func (ptr *QTextTableFormat) __columnWidthConstraints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTextTableFormat___columnWidthConstraints_newList(ptr.Pointer()))
}

type QTouchDevice struct {
	ptr unsafe.Pointer
}

type QTouchDevice_ITF interface {
	QTouchDevice_PTR() *QTouchDevice
}

func (ptr *QTouchDevice) QTouchDevice_PTR() *QTouchDevice {
	return ptr
}

func (ptr *QTouchDevice) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTouchDevice) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTouchDevice(ptr QTouchDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchDevice_PTR().Pointer()
	}
	return nil
}

func NewQTouchDeviceFromPointer(ptr unsafe.Pointer) *QTouchDevice {
	var n = new(QTouchDevice)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QTouchDevice__CapabilityFlag
//QTouchDevice::CapabilityFlag
type QTouchDevice__CapabilityFlag int64

const (
	QTouchDevice__Position           QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0001)
	QTouchDevice__Area               QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0002)
	QTouchDevice__Pressure           QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0004)
	QTouchDevice__Velocity           QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0008)
	QTouchDevice__RawPositions       QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0010)
	QTouchDevice__NormalizedPosition QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0020)
	QTouchDevice__MouseEmulation     QTouchDevice__CapabilityFlag = QTouchDevice__CapabilityFlag(0x0040)
)

//go:generate stringer -type=QTouchDevice__DeviceType
//QTouchDevice::DeviceType
type QTouchDevice__DeviceType int64

const (
	QTouchDevice__TouchScreen QTouchDevice__DeviceType = QTouchDevice__DeviceType(0)
	QTouchDevice__TouchPad    QTouchDevice__DeviceType = QTouchDevice__DeviceType(1)
)

func QTouchDevice_Devices() []*QTouchDevice {
	return func(l C.struct_QtGui_PackedList) []*QTouchDevice {
		var out = make([]*QTouchDevice, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTouchDeviceFromPointer(l.data).__devices_atList(i)
		}
		return out
	}(C.QTouchDevice_QTouchDevice_Devices())
}

func (ptr *QTouchDevice) Devices() []*QTouchDevice {
	return func(l C.struct_QtGui_PackedList) []*QTouchDevice {
		var out = make([]*QTouchDevice, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTouchDeviceFromPointer(l.data).__devices_atList(i)
		}
		return out
	}(C.QTouchDevice_QTouchDevice_Devices())
}

func NewQTouchDevice() *QTouchDevice {
	var tmpValue = NewQTouchDeviceFromPointer(C.QTouchDevice_NewQTouchDevice())
	runtime.SetFinalizer(tmpValue, (*QTouchDevice).DestroyQTouchDevice)
	return tmpValue
}

func (ptr *QTouchDevice) SetCapabilities(caps QTouchDevice__CapabilityFlag) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetCapabilities(ptr.Pointer(), C.longlong(caps))
	}
}

func (ptr *QTouchDevice) SetMaximumTouchPoints(max int) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetMaximumTouchPoints(ptr.Pointer(), C.int(int32(max)))
	}
}

func (ptr *QTouchDevice) SetName(name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QTouchDevice_SetName(ptr.Pointer(), nameC)
	}
}

func (ptr *QTouchDevice) SetType(devType QTouchDevice__DeviceType) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetType(ptr.Pointer(), C.longlong(devType))
	}
}

func (ptr *QTouchDevice) DestroyQTouchDevice() {
	if ptr.Pointer() != nil {
		C.QTouchDevice_DestroyQTouchDevice(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTouchDevice) Capabilities() QTouchDevice__CapabilityFlag {
	if ptr.Pointer() != nil {
		return QTouchDevice__CapabilityFlag(C.QTouchDevice_Capabilities(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) Type() QTouchDevice__DeviceType {
	if ptr.Pointer() != nil {
		return QTouchDevice__DeviceType(C.QTouchDevice_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTouchDevice_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTouchDevice) MaximumTouchPoints() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTouchDevice_MaximumTouchPoints(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTouchDevice) __devices_atList(i int) *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchDevice___devices_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QTouchDevice) __devices_setList(i QTouchDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchDevice___devices_setList(ptr.Pointer(), PointerFromQTouchDevice(i))
	}
}

func (ptr *QTouchDevice) __devices_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchDevice___devices_newList(ptr.Pointer()))
}

type QTouchEvent struct {
	QInputEvent
}

type QTouchEvent_ITF interface {
	QInputEvent_ITF
	QTouchEvent_PTR() *QTouchEvent
}

func (ptr *QTouchEvent) QTouchEvent_PTR() *QTouchEvent {
	return ptr
}

func (ptr *QTouchEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QTouchEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQTouchEvent(ptr QTouchEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchEvent_PTR().Pointer()
	}
	return nil
}

func NewQTouchEventFromPointer(ptr unsafe.Pointer) *QTouchEvent {
	var n = new(QTouchEvent)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTouchEvent) DestroyQTouchEvent() {
	if ptr.Pointer() != nil {
		C.QTouchEvent_DestroyQTouchEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTouchEvent) Target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTouchEvent_Target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) Device() *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchEvent_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QTouchEvent_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) TouchPointStates() core.Qt__TouchPointState {
	if ptr.Pointer() != nil {
		return core.Qt__TouchPointState(C.QTouchEvent_TouchPointStates(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchEvent) _device() *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchEvent__device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) Set_device(vqt QTouchDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_device(ptr.Pointer(), PointerFromQTouchDevice(vqt))
	}
}

func (ptr *QTouchEvent) _target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTouchEvent__target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) Set_target(vqo core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_target(ptr.Pointer(), core.PointerFromQObject(vqo))
	}
}

func (ptr *QTouchEvent) _touchPointStates() core.Qt__TouchPointState {
	if ptr.Pointer() != nil {
		return core.Qt__TouchPointState(C.QTouchEvent__touchPointStates(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchEvent) Set_touchPointStates(vqt core.Qt__TouchPointState) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_touchPointStates(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QTouchEvent) _window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QTouchEvent__window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) Set_window(vqw QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_window(ptr.Pointer(), PointerFromQWindow(vqw))
	}
}

func (ptr *QTouchEvent) __QTouchEvent_touchPoints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchEvent___QTouchEvent_touchPoints_newList(ptr.Pointer()))
}

func (ptr *QTouchEvent) __setTouchPoints_touchPoints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchEvent___setTouchPoints_touchPoints_newList(ptr.Pointer()))
}

func (ptr *QTouchEvent) __touchPoints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchEvent___touchPoints_newList(ptr.Pointer()))
}

func (ptr *QTouchEvent) ___touchPoints_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchEvent____touchPoints_newList(ptr.Pointer()))
}

func (ptr *QTouchEvent) __set_touchPoints__newList() unsafe.Pointer {
	return unsafe.Pointer(C.QTouchEvent___set_touchPoints__newList(ptr.Pointer()))
}

type QTransform struct {
	ptr unsafe.Pointer
}

type QTransform_ITF interface {
	QTransform_PTR() *QTransform
}

func (ptr *QTransform) QTransform_PTR() *QTransform {
	return ptr
}

func (ptr *QTransform) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QTransform) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQTransform(ptr QTransform_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTransform_PTR().Pointer()
	}
	return nil
}

func NewQTransformFromPointer(ptr unsafe.Pointer) *QTransform {
	var n = new(QTransform)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTransform) DestroyQTransform() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//go:generate stringer -type=QTransform__TransformationType
//QTransform::TransformationType
type QTransform__TransformationType int64

const (
	QTransform__TxNone      QTransform__TransformationType = QTransform__TransformationType(0x00)
	QTransform__TxTranslate QTransform__TransformationType = QTransform__TransformationType(0x01)
	QTransform__TxScale     QTransform__TransformationType = QTransform__TransformationType(0x02)
	QTransform__TxRotate    QTransform__TransformationType = QTransform__TransformationType(0x04)
	QTransform__TxShear     QTransform__TransformationType = QTransform__TransformationType(0x08)
	QTransform__TxProject   QTransform__TransformationType = QTransform__TransformationType(0x10)
)

func (ptr *QTransform) Rotate(angle float64, axis core.Qt__Axis) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Rotate(ptr.Pointer(), C.double(angle), C.longlong(axis)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) RotateRadians(angle float64, axis core.Qt__Axis) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_RotateRadians(ptr.Pointer(), C.double(angle), C.longlong(axis)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Scale(sx float64, sy float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Scale(ptr.Pointer(), C.double(sx), C.double(sy)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Shear(sh float64, sv float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Shear(ptr.Pointer(), C.double(sh), C.double(sv)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Translate(dx float64, dy float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Translate(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func QTransform_FromScale(sx float64, sy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromScale(C.double(sx), C.double(sy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) FromScale(sx float64, sy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromScale(C.double(sx), C.double(sy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func QTransform_FromTranslate(dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromTranslate(C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) FromTranslate(dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromTranslate(C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform() *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform())
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform6(other QTransform_ITF) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform6(PointerFromQTransform(other)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform7(other QTransform_ITF) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform7(PointerFromQTransform(other)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform3(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform3(C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform4(m11 float64, m12 float64, m21 float64, m22 float64, dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform4(C.double(m11), C.double(m12), C.double(m21), C.double(m22), C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func QTransform_QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func QTransform_QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func QTransform_SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Reset() {
	if ptr.Pointer() != nil {
		C.QTransform_Reset(ptr.Pointer())
	}
}

func (ptr *QTransform) SetMatrix(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) {
	if ptr.Pointer() != nil {
		C.QTransform_SetMatrix(ptr.Pointer(), C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33))
	}
}

func (ptr *QTransform) Map3(l core.QLine_ITF) *core.QLine {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFromPointer(C.QTransform_Map3(ptr.Pointer(), core.PointerFromQLine(l)))
		runtime.SetFinalizer(tmpValue, (*core.QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map4(line core.QLineF_ITF) *core.QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFFromPointer(C.QTransform_Map4(ptr.Pointer(), core.PointerFromQLineF(line)))
		runtime.SetFinalizer(tmpValue, (*core.QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map8(path QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QTransform_Map8(ptr.Pointer(), PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map10(point core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTransform_Map10(ptr.Pointer(), core.PointerFromQPoint(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map2(p core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTransform_Map2(ptr.Pointer(), core.PointerFromQPointF(p)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map6(polygon QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QTransform_Map6(ptr.Pointer(), PointerFromQPolygon(polygon)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapToPolygon(rectangle core.QRect_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QTransform_MapToPolygon(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map5(polygon QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QTransform_Map5(ptr.Pointer(), PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapRect2(rectangle core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QTransform_MapRect2(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapRect(rectangle core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTransform_MapRect(ptr.Pointer(), core.PointerFromQRectF(rectangle)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map7(region QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QTransform_Map7(ptr.Pointer(), PointerFromQRegion(region)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Adjoint() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Adjoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Inverted(invertible bool) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Inverted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(invertible)))))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Transposed() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Type() QTransform__TransformationType {
	if ptr.Pointer() != nil {
		return QTransform__TransformationType(C.QTransform_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) IsAffine() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsInvertible() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsInvertible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsRotating() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsRotating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsScaling() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsScaling(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsTranslating() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsTranslating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) Determinant() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Determinant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dx() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dx(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dy() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M11() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M11(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M12() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M12(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M13() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M13(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M21() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M21(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M22() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M22(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M23() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M23(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M31() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M31(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M32() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M32(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M33() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M33(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Map9(x int, y int, tx int, ty int) {
	if ptr.Pointer() != nil {
		C.QTransform_Map9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(tx)), C.int(int32(ty)))
	}
}

func (ptr *QTransform) Map(x float64, y float64, tx float64, ty float64) {
	if ptr.Pointer() != nil {
		C.QTransform_Map(ptr.Pointer(), C.double(x), C.double(y), C.double(tx), C.double(ty))
	}
}

type QValidator struct {
	core.QObject
}

type QValidator_ITF interface {
	core.QObject_ITF
	QValidator_PTR() *QValidator
}

func (ptr *QValidator) QValidator_PTR() *QValidator {
	return ptr
}

func (ptr *QValidator) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QValidator) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQValidator(ptr QValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func NewQValidatorFromPointer(ptr unsafe.Pointer) *QValidator {
	var n = new(QValidator)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QValidator__State
//QValidator::State
type QValidator__State int64

const (
	QValidator__Invalid      QValidator__State = QValidator__State(0)
	QValidator__Intermediate QValidator__State = QValidator__State(1)
	QValidator__Acceptable   QValidator__State = QValidator__State(2)
)

//export callbackQValidator_Changed
func callbackQValidator_Changed(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "changed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QValidator) ConnectChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "changed") {
			C.QValidator_ConnectChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "changed"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "changed", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "changed", f)
		}
	}
}

func (ptr *QValidator) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QValidator_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "changed")
	}
}

func (ptr *QValidator) Changed() {
	if ptr.Pointer() != nil {
		C.QValidator_Changed(ptr.Pointer())
	}
}

//export callbackQValidator_Fixup
func callbackQValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "fixup"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "fixup", func(input string) {
				signal.(func(string))(input)
				f(input)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "fixup", f)
		}
	}
}

func (ptr *QValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "fixup")
	}
}

func (ptr *QValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		C.QValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		C.QValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

func NewQValidator(parent core.QObject_ITF) *QValidator {
	var tmpValue = NewQValidatorFromPointer(C.QValidator_NewQValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QValidator) SetLocale(locale core.QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_SetLocale(ptr.Pointer(), core.PointerFromQLocale(locale))
	}
}

func (ptr *QValidator) DestroyQValidator() {
	if ptr.Pointer() != nil {
		C.QValidator_DestroyQValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QValidator) Locale() *core.QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLocaleFromPointer(C.QValidator_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

//export callbackQValidator_Validate
func callbackQValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(0)
}

func (ptr *QValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "validate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", func(input string, pos int) QValidator__State {
				signal.(func(string, int) QValidator__State)(input, pos)
				return f(input, pos)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "validate", f)
		}
	}
}

func (ptr *QValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "validate")
	}
}

func (ptr *QValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC *C.char
		if input != "" {
			inputC = C.CString(input)
			defer C.free(unsafe.Pointer(inputC))
		}
		return QValidator__State(C.QValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QValidator) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QValidator___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QValidator) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QValidator___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QValidator) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QValidator___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QValidator) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QValidator___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QValidator) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QValidator___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QValidator) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QValidator___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QValidator) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QValidator___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QValidator) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QValidator___findChildren_newList(ptr.Pointer()))
}

func (ptr *QValidator) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QValidator___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QValidator) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QValidator___children_newList(ptr.Pointer()))
}

//export callbackQValidator_Event
func callbackQValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQValidator_EventFilter
func callbackQValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQValidator_ChildEvent
func callbackQValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQValidator_ConnectNotify
func callbackQValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_CustomEvent
func callbackQValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQValidator_DeleteLater
func callbackQValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQValidator_Destroyed
func callbackQValidator_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQValidator_DisconnectNotify
func callbackQValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_ObjectNameChanged
func callbackQValidator_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQValidator_TimerEvent
func callbackQValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQValidator_MetaObject
func callbackQValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVector2D struct {
	ptr unsafe.Pointer
}

type QVector2D_ITF interface {
	QVector2D_PTR() *QVector2D
}

func (ptr *QVector2D) QVector2D_PTR() *QVector2D {
	return ptr
}

func (ptr *QVector2D) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QVector2D) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQVector2D(ptr QVector2D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector2D_PTR().Pointer()
	}
	return nil
}

func NewQVector2DFromPointer(ptr unsafe.Pointer) *QVector2D {
	var n = new(QVector2D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector2D) DestroyQVector2D() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQVector2D() *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D())
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D4(point core.QPoint_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D5(point core.QPointF_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D6(vector QVector3D_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D6(PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D7(vector QVector4D_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D7(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D3(xpos float32, ypos float32) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D3(C.float(xpos), C.float(ypos)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func QVector2D_DotProduct(v1 QVector2D_ITF, v2 QVector2D_ITF) float32 {
	return float32(C.QVector2D_QVector2D_DotProduct(PointerFromQVector2D(v1), PointerFromQVector2D(v2)))
}

func (ptr *QVector2D) DotProduct(v1 QVector2D_ITF, v2 QVector2D_ITF) float32 {
	return float32(C.QVector2D_QVector2D_DotProduct(PointerFromQVector2D(v1), PointerFromQVector2D(v2)))
}

func (ptr *QVector2D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector2D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector2D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector2D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector2D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector2D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector2D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector2D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector2D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) Normalized() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector2D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToVector3D() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector2D_ToVector3D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector2D_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector2D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector2D) DistanceToLine(point QVector2D_ITF, direction QVector2D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_DistanceToLine(ptr.Pointer(), PointerFromQVector2D(point), PointerFromQVector2D(direction)))
	}
	return 0
}

func (ptr *QVector2D) DistanceToPoint(point QVector2D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_DistanceToPoint(ptr.Pointer(), PointerFromQVector2D(point)))
	}
	return 0
}

func (ptr *QVector2D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_Y(ptr.Pointer()))
	}
	return 0
}

type QVector3D struct {
	ptr unsafe.Pointer
}

type QVector3D_ITF interface {
	QVector3D_PTR() *QVector3D
}

func (ptr *QVector3D) QVector3D_PTR() *QVector3D {
	return ptr
}

func (ptr *QVector3D) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QVector3D) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQVector3D(ptr QVector3D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector3D_PTR().Pointer()
	}
	return nil
}

func NewQVector3DFromPointer(ptr unsafe.Pointer) *QVector3D {
	var n = new(QVector3D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector3D) DestroyQVector3D() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func QVector3D_CrossProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_CrossProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) CrossProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_CrossProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func QVector3D_Normal(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) Normal(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func QVector3D_Normal2(v1 QVector3D_ITF, v2 QVector3D_ITF, v3 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal2(PointerFromQVector3D(v1), PointerFromQVector3D(v2), PointerFromQVector3D(v3)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) Normal2(v1 QVector3D_ITF, v2 QVector3D_ITF, v3 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal2(PointerFromQVector3D(v1), PointerFromQVector3D(v2), PointerFromQVector3D(v3)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D() *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D())
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D4(point core.QPoint_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D5(point core.QPointF_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D6(vector QVector2D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D6(PointerFromQVector2D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D7(vector QVector2D_ITF, zpos float32) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D7(PointerFromQVector2D(vector), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D8(vector QVector4D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D8(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D3(xpos float32, ypos float32, zpos float32) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D3(C.float(xpos), C.float(ypos), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func QVector3D_DotProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) float32 {
	return float32(C.QVector3D_QVector3D_DotProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
}

func (ptr *QVector3D) DotProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) float32 {
	return float32(C.QVector3D_QVector3D_DotProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
}

func (ptr *QVector3D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector3D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector3D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector3D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector3D) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetZ(ptr.Pointer(), C.float(z))
	}
}

func (ptr *QVector3D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector3D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector3D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToVector2D() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector3D_ToVector2D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) Normalized() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) Project(modelView QMatrix4x4_ITF, projection QMatrix4x4_ITF, viewport core.QRect_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Project(ptr.Pointer(), PointerFromQMatrix4x4(modelView), PointerFromQMatrix4x4(projection), core.PointerFromQRect(viewport)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) Unproject(modelView QMatrix4x4_ITF, projection QMatrix4x4_ITF, viewport core.QRect_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Unproject(ptr.Pointer(), PointerFromQMatrix4x4(modelView), PointerFromQMatrix4x4(projection), core.PointerFromQRect(viewport)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector3D_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector3D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector3D) DistanceToLine(point QVector3D_ITF, direction QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToLine(ptr.Pointer(), PointerFromQVector3D(point), PointerFromQVector3D(direction)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPlane(plane QVector3D_ITF, normal QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPlane(ptr.Pointer(), PointerFromQVector3D(plane), PointerFromQVector3D(normal)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPlane2(plane1 QVector3D_ITF, plane2 QVector3D_ITF, plane3 QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPlane2(ptr.Pointer(), PointerFromQVector3D(plane1), PointerFromQVector3D(plane2), PointerFromQVector3D(plane3)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPoint(point QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPoint(ptr.Pointer(), PointerFromQVector3D(point)))
	}
	return 0
}

func (ptr *QVector3D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Z(ptr.Pointer()))
	}
	return 0
}

type QVector4D struct {
	ptr unsafe.Pointer
}

type QVector4D_ITF interface {
	QVector4D_PTR() *QVector4D
}

func (ptr *QVector4D) QVector4D_PTR() *QVector4D {
	return ptr
}

func (ptr *QVector4D) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QVector4D) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQVector4D(ptr QVector4D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector4D_PTR().Pointer()
	}
	return nil
}

func NewQVector4DFromPointer(ptr unsafe.Pointer) *QVector4D {
	var n = new(QVector4D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector4D) DestroyQVector4D() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQVector4D() *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D())
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D4(point core.QPoint_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D5(point core.QPointF_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D6(vector QVector2D_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D6(PointerFromQVector2D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D7(vector QVector2D_ITF, zpos float32, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D7(PointerFromQVector2D(vector), C.float(zpos), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D8(vector QVector3D_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D8(PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D9(vector QVector3D_ITF, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D9(PointerFromQVector3D(vector), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D3(xpos float32, ypos float32, zpos float32, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D3(C.float(xpos), C.float(ypos), C.float(zpos), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func QVector4D_DotProduct(v1 QVector4D_ITF, v2 QVector4D_ITF) float32 {
	return float32(C.QVector4D_QVector4D_DotProduct(PointerFromQVector4D(v1), PointerFromQVector4D(v2)))
}

func (ptr *QVector4D) DotProduct(v1 QVector4D_ITF, v2 QVector4D_ITF) float32 {
	return float32(C.QVector4D_QVector4D_DotProduct(PointerFromQVector4D(v1), PointerFromQVector4D(v2)))
}

func (ptr *QVector4D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector4D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector4D) SetW(w float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetW(ptr.Pointer(), C.float(w))
	}
}

func (ptr *QVector4D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector4D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector4D) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetZ(ptr.Pointer(), C.float(z))
	}
}

func (ptr *QVector4D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector4D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector4D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector2D() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector4D_ToVector2D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector2DAffine() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector4D_ToVector2DAffine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector3D() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector4D_ToVector3D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector3DAffine() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector4D_ToVector3DAffine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) Normalized() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector4D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector4D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector4D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) W() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_W(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Z(ptr.Pointer()))
	}
	return 0
}

type QWhatsThisClickedEvent struct {
	core.QEvent
}

type QWhatsThisClickedEvent_ITF interface {
	core.QEvent_ITF
	QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent
}

func (ptr *QWhatsThisClickedEvent) QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent {
	return ptr
}

func (ptr *QWhatsThisClickedEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QWhatsThisClickedEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQWhatsThisClickedEvent(ptr QWhatsThisClickedEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWhatsThisClickedEvent_PTR().Pointer()
	}
	return nil
}

func NewQWhatsThisClickedEventFromPointer(ptr unsafe.Pointer) *QWhatsThisClickedEvent {
	var n = new(QWhatsThisClickedEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWhatsThisClickedEvent) DestroyQWhatsThisClickedEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQWhatsThisClickedEvent(href string) *QWhatsThisClickedEvent {
	var hrefC *C.char
	if href != "" {
		hrefC = C.CString(href)
		defer C.free(unsafe.Pointer(hrefC))
	}
	return NewQWhatsThisClickedEventFromPointer(C.QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(hrefC))
}

func (ptr *QWhatsThisClickedEvent) Href() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWhatsThisClickedEvent_Href(ptr.Pointer()))
	}
	return ""
}

type QWheelEvent struct {
	QInputEvent
}

type QWheelEvent_ITF interface {
	QInputEvent_ITF
	QWheelEvent_PTR() *QWheelEvent
}

func (ptr *QWheelEvent) QWheelEvent_PTR() *QWheelEvent {
	return ptr
}

func (ptr *QWheelEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QWheelEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QInputEvent_PTR().SetPointer(p)
	}
}

func PointerFromQWheelEvent(ptr QWheelEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWheelEvent_PTR().Pointer()
	}
	return nil
}

func NewQWheelEventFromPointer(ptr unsafe.Pointer) *QWheelEvent {
	var n = new(QWheelEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWheelEvent) DestroyQWheelEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQWheelEvent(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QWheelEvent {
	return NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers)))
}

func NewQWheelEvent4(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase) *QWheelEvent {
	return NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent4(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase)))
}

func NewQWheelEvent5(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase, source core.Qt__MouseEventSource) *QWheelEvent {
	return NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent5(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase), C.longlong(source)))
}

func NewQWheelEvent6(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase, source core.Qt__MouseEventSource, inverted bool) *QWheelEvent {
	return NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent6(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase), C.longlong(source), C.char(int8(qt.GoBoolToInt(inverted)))))
}

func (ptr *QWheelEvent) AngleDelta() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_AngleDelta(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) PixelDelta() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_PixelDelta(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QWheelEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) Source() core.Qt__MouseEventSource {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QWheelEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) Phase() core.Qt__ScrollPhase {
	if ptr.Pointer() != nil {
		return core.Qt__ScrollPhase(C.QWheelEvent_Phase(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) Inverted() bool {
	if ptr.Pointer() != nil {
		return C.QWheelEvent_Inverted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWheelEvent) GlobalPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_Y(ptr.Pointer())))
	}
	return 0
}

func QWheelEvent_DefaultDeltasPerStep() int {
	return int(int32(C.QWheelEvent_QWheelEvent_DefaultDeltasPerStep()))
}

func (ptr *QWheelEvent) DefaultDeltasPerStep() int {
	return int(int32(C.QWheelEvent_QWheelEvent_DefaultDeltasPerStep()))
}

func (ptr *QWheelEvent) AngleD() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_AngleD(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetAngleD(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetAngleD(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QWheelEvent) G() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QWheelEvent_G(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetG(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetG(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QWheelEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QWheelEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QWheelEvent) P() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QWheelEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetP(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetP(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QWheelEvent) PixelD() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_PixelD(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetPixelD(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetPixelD(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QWheelEvent) Qt4D() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_Qt4D(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) SetQt4D(vin int) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetQt4D(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QWheelEvent) Qt4O() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QWheelEvent_Qt4O(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) SetQt4O(vqt core.Qt__Orientation) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetQt4O(ptr.Pointer(), C.longlong(vqt))
	}
}

type QWindow struct {
	core.QObject
	QSurface
}

type QWindow_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QWindow_PTR() *QWindow
}

func (ptr *QWindow) QWindow_PTR() *QWindow {
	return ptr
}

func (ptr *QWindow) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QWindow) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QSurface_PTR().SetPointer(p)
	}
}

func PointerFromQWindow(ptr QWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindow_PTR().Pointer()
	}
	return nil
}

func NewQWindowFromPointer(ptr unsafe.Pointer) *QWindow {
	var n = new(QWindow)
	n.SetPointer(ptr)
	return n
}

//go:generate stringer -type=QWindow__AncestorMode
//QWindow::AncestorMode
type QWindow__AncestorMode int64

const (
	QWindow__ExcludeTransients QWindow__AncestorMode = QWindow__AncestorMode(0)
	QWindow__IncludeTransients QWindow__AncestorMode = QWindow__AncestorMode(1)
)

//go:generate stringer -type=QWindow__Visibility
//QWindow::Visibility
type QWindow__Visibility int64

const (
	QWindow__Hidden              QWindow__Visibility = QWindow__Visibility(0)
	QWindow__AutomaticVisibility QWindow__Visibility = QWindow__Visibility(1)
	QWindow__Windowed            QWindow__Visibility = QWindow__Visibility(2)
	QWindow__Minimized           QWindow__Visibility = QWindow__Visibility(3)
	QWindow__Maximized           QWindow__Visibility = QWindow__Visibility(4)
	QWindow__FullScreen          QWindow__Visibility = QWindow__Visibility(5)
)

func QWindow_FromWinId(id uintptr) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.uintptr_t(id)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWindow) FromWinId(id uintptr) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.uintptr_t(id)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQWindow(targetScreen QScreen_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_NewQWindow(PointerFromQScreen(targetScreen)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQWindow2(parent QWindow_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_NewQWindow2(PointerFromQWindow(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQWindow_Close
func callbackQWindow_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).CloseDefault())))
}

func (ptr *QWindow) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "close"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "close", func() bool {
				signal.(func() bool)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "close", f)
		}
	}
}

func (ptr *QWindow) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "close")
	}
}

func (ptr *QWindow) Close() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) CloseDefault() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_CloseDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQWindow_Event
func callbackQWindow_Event(ptr unsafe.Pointer, ev unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev)))))
}

func (ptr *QWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "event"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "event", func(ev *core.QEvent) bool {
				signal.(func(*core.QEvent) bool)(ev)
				return f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "event", f)
		}
	}
}

func (ptr *QWindow) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "event")
	}
}

func (ptr *QWindow) Event(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QWindow) EventDefault(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQWindow_NativeEvent
func callbackQWindow_NativeEvent(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result C.long) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QByteArray, unsafe.Pointer, int) bool)(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).NativeEventDefault(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
}

func (ptr *QWindow) ConnectNativeEvent(f func(eventType *core.QByteArray, message unsafe.Pointer, result int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "nativeEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "nativeEvent", func(eventType *core.QByteArray, message unsafe.Pointer, result int) bool {
				signal.(func(*core.QByteArray, unsafe.Pointer, int) bool)(eventType, message, result)
				return f(eventType, message, result)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "nativeEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectNativeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "nativeEvent")
	}
}

func (ptr *QWindow) NativeEvent(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_NativeEvent(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QWindow) NativeEventDefault(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_NativeEventDefault(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QWindow) SetKeyboardGrabEnabled(grab bool) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_SetKeyboardGrabEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(grab)))) != 0
	}
	return false
}

func (ptr *QWindow) SetMouseGrabEnabled(grab bool) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_SetMouseGrabEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(grab)))) != 0
	}
	return false
}

//export callbackQWindow_ActiveChanged
func callbackQWindow_ActiveChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "activeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectActiveChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "activeChanged") {
			C.QWindow_ConnectActiveChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "activeChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "activeChanged", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "activeChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectActiveChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "activeChanged")
	}
}

func (ptr *QWindow) ActiveChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_ActiveChanged(ptr.Pointer())
	}
}

//export callbackQWindow_Alert
func callbackQWindow_Alert(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "alert"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	} else {
		NewQWindowFromPointer(ptr).AlertDefault(int(int32(msec)))
	}
}

func (ptr *QWindow) ConnectAlert(f func(msec int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "alert"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "alert", func(msec int) {
				signal.(func(int))(msec)
				f(msec)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "alert", f)
		}
	}
}

func (ptr *QWindow) DisconnectAlert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "alert")
	}
}

func (ptr *QWindow) Alert(msec int) {
	if ptr.Pointer() != nil {
		C.QWindow_Alert(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QWindow) AlertDefault(msec int) {
	if ptr.Pointer() != nil {
		C.QWindow_AlertDefault(ptr.Pointer(), C.int(int32(msec)))
	}
}

//export callbackQWindow_ContentOrientationChanged
func callbackQWindow_ContentOrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "contentOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QWindow) ConnectContentOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "contentOrientationChanged") {
			C.QWindow_ConnectContentOrientationChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "contentOrientationChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentOrientationChanged", func(orientation core.Qt__ScreenOrientation) {
				signal.(func(core.Qt__ScreenOrientation))(orientation)
				f(orientation)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "contentOrientationChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectContentOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectContentOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "contentOrientationChanged")
	}
}

func (ptr *QWindow) ContentOrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QWindow_ContentOrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QWindow) Create() {
	if ptr.Pointer() != nil {
		C.QWindow_Create(ptr.Pointer())
	}
}

func (ptr *QWindow) Destroy() {
	if ptr.Pointer() != nil {
		C.QWindow_Destroy(ptr.Pointer())
	}
}

//export callbackQWindow_ExposeEvent
func callbackQWindow_ExposeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "exposeEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "exposeEvent", func(ev *QExposeEvent) {
				signal.(func(*QExposeEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "exposeEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectExposeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "exposeEvent")
	}
}

func (ptr *QWindow) ExposeEvent(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

//export callbackQWindow_FocusInEvent
func callbackQWindow_FocusInEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusInEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusInEvent", func(ev *QFocusEvent) {
				signal.(func(*QFocusEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusInEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusInEvent")
	}
}

func (ptr *QWindow) FocusInEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_FocusObjectChanged
func callbackQWindow_FocusObjectChanged(ptr unsafe.Pointer, object unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	}

}

func (ptr *QWindow) ConnectFocusObjectChanged(f func(object *core.QObject)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged") {
			C.QWindow_ConnectFocusObjectChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged", func(object *core.QObject) {
				signal.(func(*core.QObject))(object)
				f(object)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectFocusObjectChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusObjectChanged")
	}
}

func (ptr *QWindow) FocusObjectChanged(object core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQWindow_FocusOutEvent
func callbackQWindow_FocusOutEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusOutEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusOutEvent", func(ev *QFocusEvent) {
				signal.(func(*QFocusEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusOutEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusOutEvent")
	}
}

func (ptr *QWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_HeightChanged
func callbackQWindow_HeightChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "heightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "heightChanged") {
			C.QWindow_ConnectHeightChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "heightChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "heightChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "heightChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "heightChanged")
	}
}

func (ptr *QWindow) HeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_HeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_Hide
func callbackQWindow_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "hide"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).HideDefault()
	}
}

func (ptr *QWindow) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "hide"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hide", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hide", f)
		}
	}
}

func (ptr *QWindow) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "hide")
	}
}

func (ptr *QWindow) Hide() {
	if ptr.Pointer() != nil {
		C.QWindow_Hide(ptr.Pointer())
	}
}

func (ptr *QWindow) HideDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_HideDefault(ptr.Pointer())
	}
}

//export callbackQWindow_HideEvent
func callbackQWindow_HideEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "hideEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hideEvent", func(ev *QHideEvent) {
				signal.(func(*QHideEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "hideEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "hideEvent")
	}
}

func (ptr *QWindow) HideEvent(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QWindow) HideEventDefault(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

//export callbackQWindow_KeyPressEvent
func callbackQWindow_KeyPressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "keyPressEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyPressEvent", func(ev *QKeyEvent) {
				signal.(func(*QKeyEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyPressEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "keyPressEvent")
	}
}

func (ptr *QWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_KeyReleaseEvent
func callbackQWindow_KeyReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "keyReleaseEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyReleaseEvent", func(ev *QKeyEvent) {
				signal.(func(*QKeyEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "keyReleaseEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "keyReleaseEvent")
	}
}

func (ptr *QWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_Lower
func callbackQWindow_Lower(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "lower"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QWindow) ConnectLower(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "lower"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "lower", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "lower", f)
		}
	}
}

func (ptr *QWindow) DisconnectLower() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "lower")
	}
}

func (ptr *QWindow) Lower() {
	if ptr.Pointer() != nil {
		C.QWindow_Lower(ptr.Pointer())
	}
}

func (ptr *QWindow) LowerDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_LowerDefault(ptr.Pointer())
	}
}

//export callbackQWindow_MaximumHeightChanged
func callbackQWindow_MaximumHeightChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "maximumHeightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMaximumHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "maximumHeightChanged") {
			C.QWindow_ConnectMaximumHeightChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "maximumHeightChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumHeightChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumHeightChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectMaximumHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "maximumHeightChanged")
	}
}

func (ptr *QWindow) MaximumHeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MaximumHeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_MaximumWidthChanged
func callbackQWindow_MaximumWidthChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "maximumWidthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMaximumWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "maximumWidthChanged") {
			C.QWindow_ConnectMaximumWidthChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "maximumWidthChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumWidthChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "maximumWidthChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectMaximumWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "maximumWidthChanged")
	}
}

func (ptr *QWindow) MaximumWidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MaximumWidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_MinimumHeightChanged
func callbackQWindow_MinimumHeightChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "minimumHeightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMinimumHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "minimumHeightChanged") {
			C.QWindow_ConnectMinimumHeightChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "minimumHeightChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumHeightChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumHeightChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectMinimumHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "minimumHeightChanged")
	}
}

func (ptr *QWindow) MinimumHeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MinimumHeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_MinimumWidthChanged
func callbackQWindow_MinimumWidthChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "minimumWidthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMinimumWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "minimumWidthChanged") {
			C.QWindow_ConnectMinimumWidthChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "minimumWidthChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumWidthChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "minimumWidthChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectMinimumWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "minimumWidthChanged")
	}
}

func (ptr *QWindow) MinimumWidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MinimumWidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_ModalityChanged
func callbackQWindow_ModalityChanged(ptr unsafe.Pointer, modality C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "modalityChanged"); signal != nil {
		signal.(func(core.Qt__WindowModality))(core.Qt__WindowModality(modality))
	}

}

func (ptr *QWindow) ConnectModalityChanged(f func(modality core.Qt__WindowModality)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "modalityChanged") {
			C.QWindow_ConnectModalityChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "modalityChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modalityChanged", func(modality core.Qt__WindowModality) {
				signal.(func(core.Qt__WindowModality))(modality)
				f(modality)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "modalityChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectModalityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectModalityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "modalityChanged")
	}
}

func (ptr *QWindow) ModalityChanged(modality core.Qt__WindowModality) {
	if ptr.Pointer() != nil {
		C.QWindow_ModalityChanged(ptr.Pointer(), C.longlong(modality))
	}
}

//export callbackQWindow_MouseDoubleClickEvent
func callbackQWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickEvent", func(ev *QMouseEvent) {
				signal.(func(*QMouseEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mouseDoubleClickEvent")
	}
}

func (ptr *QWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseMoveEvent
func callbackQWindow_MouseMoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mouseMoveEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseMoveEvent", func(ev *QMouseEvent) {
				signal.(func(*QMouseEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseMoveEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mouseMoveEvent")
	}
}

func (ptr *QWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MousePressEvent
func callbackQWindow_MousePressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mousePressEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressEvent", func(ev *QMouseEvent) {
				signal.(func(*QMouseEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mousePressEvent")
	}
}

func (ptr *QWindow) MousePressEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseReleaseEvent
func callbackQWindow_MouseReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "mouseReleaseEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseReleaseEvent", func(ev *QMouseEvent) {
				signal.(func(*QMouseEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "mouseReleaseEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "mouseReleaseEvent")
	}
}

func (ptr *QWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MoveEvent
func callbackQWindow_MoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "moveEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "moveEvent", func(ev *QMoveEvent) {
				signal.(func(*QMoveEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "moveEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "moveEvent")
	}
}

func (ptr *QWindow) MoveEvent(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQWindow_OpacityChanged
func callbackQWindow_OpacityChanged(ptr unsafe.Pointer, opacity C.double) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "opacityChanged"); signal != nil {
		signal.(func(float64))(float64(opacity))
	}

}

func (ptr *QWindow) ConnectOpacityChanged(f func(opacity float64)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "opacityChanged") {
			C.QWindow_ConnectOpacityChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "opacityChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "opacityChanged", func(opacity float64) {
				signal.(func(float64))(opacity)
				f(opacity)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "opacityChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectOpacityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectOpacityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "opacityChanged")
	}
}

func (ptr *QWindow) OpacityChanged(opacity float64) {
	if ptr.Pointer() != nil {
		C.QWindow_OpacityChanged(ptr.Pointer(), C.double(opacity))
	}
}

//export callbackQWindow_Raise
func callbackQWindow_Raise(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "raise"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QWindow) ConnectRaise(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "raise"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "raise", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "raise", f)
		}
	}
}

func (ptr *QWindow) DisconnectRaise() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "raise")
	}
}

func (ptr *QWindow) Raise() {
	if ptr.Pointer() != nil {
		C.QWindow_Raise(ptr.Pointer())
	}
}

func (ptr *QWindow) RaiseDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_RaiseDefault(ptr.Pointer())
	}
}

func (ptr *QWindow) ReportContentOrientationChange(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QWindow_ReportContentOrientationChange(ptr.Pointer(), C.longlong(orientation))
	}
}

//export callbackQWindow_RequestActivate
func callbackQWindow_RequestActivate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "requestActivate"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).RequestActivateDefault()
	}
}

func (ptr *QWindow) ConnectRequestActivate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "requestActivate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "requestActivate", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "requestActivate", f)
		}
	}
}

func (ptr *QWindow) DisconnectRequestActivate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "requestActivate")
	}
}

func (ptr *QWindow) RequestActivate() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestActivate(ptr.Pointer())
	}
}

func (ptr *QWindow) RequestActivateDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestActivateDefault(ptr.Pointer())
	}
}

//export callbackQWindow_RequestUpdate
func callbackQWindow_RequestUpdate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "requestUpdate"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).RequestUpdateDefault()
	}
}

func (ptr *QWindow) ConnectRequestUpdate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "requestUpdate"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "requestUpdate", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "requestUpdate", f)
		}
	}
}

func (ptr *QWindow) DisconnectRequestUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "requestUpdate")
	}
}

func (ptr *QWindow) RequestUpdate() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestUpdate(ptr.Pointer())
	}
}

func (ptr *QWindow) RequestUpdateDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestUpdateDefault(ptr.Pointer())
	}
}

func (ptr *QWindow) Resize(newSize core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_Resize(ptr.Pointer(), core.PointerFromQSize(newSize))
	}
}

func (ptr *QWindow) Resize2(w int, h int) {
	if ptr.Pointer() != nil {
		C.QWindow_Resize2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)))
	}
}

//export callbackQWindow_ResizeEvent
func callbackQWindow_ResizeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "resizeEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resizeEvent", func(ev *QResizeEvent) {
				signal.(func(*QResizeEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "resizeEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "resizeEvent")
	}
}

func (ptr *QWindow) ResizeEvent(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

//export callbackQWindow_ScreenChanged
func callbackQWindow_ScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QWindow) ConnectScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "screenChanged") {
			C.QWindow_ConnectScreenChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "screenChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged", func(screen *QScreen) {
				signal.(func(*QScreen))(screen)
				f(screen)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectScreenChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "screenChanged")
	}
}

func (ptr *QWindow) ScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QWindow) SetBaseSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetBaseSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetCursor(cursor QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetCursor(ptr.Pointer(), PointerFromQCursor(cursor))
	}
}

func (ptr *QWindow) SetFilePath(filePath string) {
	if ptr.Pointer() != nil {
		var filePathC *C.char
		if filePath != "" {
			filePathC = C.CString(filePath)
			defer C.free(unsafe.Pointer(filePathC))
		}
		C.QWindow_SetFilePath(ptr.Pointer(), filePathC)
	}
}

func (ptr *QWindow) SetFlags(flags core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QWindow) SetFormat(format QSurfaceFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QWindow) SetFramePosition(point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFramePosition(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QWindow) SetGeometry2(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QWindow) SetGeometry(posx int, posy int, w int, h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry(ptr.Pointer(), C.int(int32(posx)), C.int(int32(posy)), C.int(int32(w)), C.int(int32(h)))
	}
}

//export callbackQWindow_SetHeight
func callbackQWindow_SetHeight(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setHeight"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQWindowFromPointer(ptr).SetHeightDefault(int(int32(arg)))
	}
}

func (ptr *QWindow) ConnectSetHeight(f func(arg int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setHeight"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setHeight", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setHeight", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setHeight")
	}
}

func (ptr *QWindow) SetHeight(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetHeight(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetHeightDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetHeightDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetIcon(icon QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QWindow) SetMask(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMask(ptr.Pointer(), PointerFromQRegion(region))
	}
}

//export callbackQWindow_SetMaximumHeight
func callbackQWindow_SetMaximumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setMaximumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQWindowFromPointer(ptr).SetMaximumHeightDefault(int(int32(h)))
	}
}

func (ptr *QWindow) ConnectSetMaximumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setMaximumHeight"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumHeight", func(h int) {
				signal.(func(int))(h)
				f(h)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumHeight", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetMaximumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumHeight")
	}
}

func (ptr *QWindow) SetMaximumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QWindow) SetMaximumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QWindow) SetMaximumSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

//export callbackQWindow_SetMaximumWidth
func callbackQWindow_SetMaximumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setMaximumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQWindowFromPointer(ptr).SetMaximumWidthDefault(int(int32(w)))
	}
}

func (ptr *QWindow) ConnectSetMaximumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setMaximumWidth"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumWidth", func(w int) {
				signal.(func(int))(w)
				f(w)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumWidth", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetMaximumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setMaximumWidth")
	}
}

func (ptr *QWindow) SetMaximumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QWindow) SetMaximumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQWindow_SetMinimumHeight
func callbackQWindow_SetMinimumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setMinimumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQWindowFromPointer(ptr).SetMinimumHeightDefault(int(int32(h)))
	}
}

func (ptr *QWindow) ConnectSetMinimumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setMinimumHeight"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumHeight", func(h int) {
				signal.(func(int))(h)
				f(h)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumHeight", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetMinimumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumHeight")
	}
}

func (ptr *QWindow) SetMinimumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QWindow) SetMinimumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QWindow) SetMinimumSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

//export callbackQWindow_SetMinimumWidth
func callbackQWindow_SetMinimumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setMinimumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQWindowFromPointer(ptr).SetMinimumWidthDefault(int(int32(w)))
	}
}

func (ptr *QWindow) ConnectSetMinimumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setMinimumWidth"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumWidth", func(w int) {
				signal.(func(int))(w)
				f(w)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumWidth", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetMinimumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setMinimumWidth")
	}
}

func (ptr *QWindow) SetMinimumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QWindow) SetMinimumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QWindow) SetModality(modality core.Qt__WindowModality) {
	if ptr.Pointer() != nil {
		C.QWindow_SetModality(ptr.Pointer(), C.longlong(modality))
	}
}

func (ptr *QWindow) SetOpacity(level float64) {
	if ptr.Pointer() != nil {
		C.QWindow_SetOpacity(ptr.Pointer(), C.double(level))
	}
}

func (ptr *QWindow) SetParent(parent QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetPosition(pt core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetPosition(ptr.Pointer(), core.PointerFromQPoint(pt))
	}
}

func (ptr *QWindow) SetPosition2(posx int, posy int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetPosition2(ptr.Pointer(), C.int(int32(posx)), C.int(int32(posy)))
	}
}

func (ptr *QWindow) SetScreen(newScreen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

func (ptr *QWindow) SetSizeIncrement(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetSizeIncrement(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetSurfaceType(surfaceType QSurface__SurfaceType) {
	if ptr.Pointer() != nil {
		C.QWindow_SetSurfaceType(ptr.Pointer(), C.longlong(surfaceType))
	}
}

//export callbackQWindow_SetTitle
func callbackQWindow_SetTitle(ptr unsafe.Pointer, vqs C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setTitle"); signal != nil {
		signal.(func(string))(cGoUnpackString(vqs))
	} else {
		NewQWindowFromPointer(ptr).SetTitleDefault(cGoUnpackString(vqs))
	}
}

func (ptr *QWindow) ConnectSetTitle(f func(vqs string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setTitle"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setTitle", func(vqs string) {
				signal.(func(string))(vqs)
				f(vqs)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setTitle", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetTitle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setTitle")
	}
}

func (ptr *QWindow) SetTitle(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWindow_SetTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QWindow) SetTitleDefault(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWindow_SetTitleDefault(ptr.Pointer(), vqsC)
	}
}

func (ptr *QWindow) SetTransientParent(parent QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetTransientParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetVisibility(v QWindow__Visibility) {
	if ptr.Pointer() != nil {
		C.QWindow_SetVisibility(ptr.Pointer(), C.longlong(v))
	}
}

//export callbackQWindow_SetVisible
func callbackQWindow_SetVisible(ptr unsafe.Pointer, visible C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	} else {
		NewQWindowFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QWindow) ConnectSetVisible(f func(visible bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setVisible"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setVisible", func(visible bool) {
				signal.(func(bool))(visible)
				f(visible)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setVisible", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setVisible")
	}
}

func (ptr *QWindow) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QWindow_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QWindow) SetVisibleDefault(visible bool) {
	if ptr.Pointer() != nil {
		C.QWindow_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQWindow_SetWidth
func callbackQWindow_SetWidth(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setWidth"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQWindowFromPointer(ptr).SetWidthDefault(int(int32(arg)))
	}
}

func (ptr *QWindow) ConnectSetWidth(f func(arg int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setWidth"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setWidth", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setWidth", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setWidth")
	}
}

func (ptr *QWindow) SetWidth(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetWidth(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetWidthDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetWidthDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetWindowState(state core.Qt__WindowState) {
	if ptr.Pointer() != nil {
		C.QWindow_SetWindowState(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQWindow_SetX
func callbackQWindow_SetX(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setX"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQWindowFromPointer(ptr).SetXDefault(int(int32(arg)))
	}
}

func (ptr *QWindow) ConnectSetX(f func(arg int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setX"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setX", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setX", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetX() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setX")
	}
}

func (ptr *QWindow) SetX(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetX(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetXDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetXDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_SetY
func callbackQWindow_SetY(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "setY"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQWindowFromPointer(ptr).SetYDefault(int(int32(arg)))
	}
}

func (ptr *QWindow) ConnectSetY(f func(arg int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "setY"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setY", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "setY", f)
		}
	}
}

func (ptr *QWindow) DisconnectSetY() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "setY")
	}
}

func (ptr *QWindow) SetY(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetY(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) SetYDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetYDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_Show
func callbackQWindow_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "show"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QWindow) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "show"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "show", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "show", f)
		}
	}
}

func (ptr *QWindow) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "show")
	}
}

func (ptr *QWindow) Show() {
	if ptr.Pointer() != nil {
		C.QWindow_Show(ptr.Pointer())
	}
}

func (ptr *QWindow) ShowDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowDefault(ptr.Pointer())
	}
}

//export callbackQWindow_ShowEvent
func callbackQWindow_ShowEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "showEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showEvent", func(ev *QShowEvent) {
				signal.(func(*QShowEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "showEvent")
	}
}

func (ptr *QWindow) ShowEvent(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QWindow) ShowEventDefault(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQWindow_ShowFullScreen
func callbackQWindow_ShowFullScreen(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "showFullScreen"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QWindow) ConnectShowFullScreen(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "showFullScreen"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showFullScreen", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showFullScreen", f)
		}
	}
}

func (ptr *QWindow) DisconnectShowFullScreen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "showFullScreen")
	}
}

func (ptr *QWindow) ShowFullScreen() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QWindow) ShowFullScreenDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMaximized
func callbackQWindow_ShowMaximized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "showMaximized"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QWindow) ConnectShowMaximized(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "showMaximized"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showMaximized", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showMaximized", f)
		}
	}
}

func (ptr *QWindow) DisconnectShowMaximized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "showMaximized")
	}
}

func (ptr *QWindow) ShowMaximized() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QWindow) ShowMaximizedDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMinimized
func callbackQWindow_ShowMinimized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "showMinimized"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QWindow) ConnectShowMinimized(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "showMinimized"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showMinimized", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showMinimized", f)
		}
	}
}

func (ptr *QWindow) DisconnectShowMinimized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "showMinimized")
	}
}

func (ptr *QWindow) ShowMinimized() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QWindow) ShowMinimizedDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQWindow_ShowNormal
func callbackQWindow_ShowNormal(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "showNormal"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QWindow) ConnectShowNormal(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "showNormal"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showNormal", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "showNormal", f)
		}
	}
}

func (ptr *QWindow) DisconnectShowNormal() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "showNormal")
	}
}

func (ptr *QWindow) ShowNormal() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QWindow) ShowNormalDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowNormalDefault(ptr.Pointer())
	}
}

//export callbackQWindow_TabletEvent
func callbackQWindow_TabletEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "tabletEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "tabletEvent", func(ev *QTabletEvent) {
				signal.(func(*QTabletEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "tabletEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectTabletEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "tabletEvent")
	}
}

func (ptr *QWindow) TabletEvent(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQWindow_TouchEvent
func callbackQWindow_TouchEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "touchEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "touchEvent", func(ev *QTouchEvent) {
				signal.(func(*QTouchEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "touchEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectTouchEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "touchEvent")
	}
}

func (ptr *QWindow) TouchEvent(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) UnsetCursor() {
	if ptr.Pointer() != nil {
		C.QWindow_UnsetCursor(ptr.Pointer())
	}
}

//export callbackQWindow_VisibilityChanged
func callbackQWindow_VisibilityChanged(ptr unsafe.Pointer, visibility C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "visibilityChanged"); signal != nil {
		signal.(func(QWindow__Visibility))(QWindow__Visibility(visibility))
	}

}

func (ptr *QWindow) ConnectVisibilityChanged(f func(visibility QWindow__Visibility)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "visibilityChanged") {
			C.QWindow_ConnectVisibilityChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "visibilityChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibilityChanged", func(visibility QWindow__Visibility) {
				signal.(func(QWindow__Visibility))(visibility)
				f(visibility)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibilityChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectVisibilityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibilityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "visibilityChanged")
	}
}

func (ptr *QWindow) VisibilityChanged(visibility QWindow__Visibility) {
	if ptr.Pointer() != nil {
		C.QWindow_VisibilityChanged(ptr.Pointer(), C.longlong(visibility))
	}
}

//export callbackQWindow_VisibleChanged
func callbackQWindow_VisibleChanged(ptr unsafe.Pointer, arg C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "visibleChanged"); signal != nil {
		signal.(func(bool))(int8(arg) != 0)
	}

}

func (ptr *QWindow) ConnectVisibleChanged(f func(arg bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged") {
			C.QWindow_ConnectVisibleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged", func(arg bool) {
				signal.(func(bool))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectVisibleChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "visibleChanged")
	}
}

func (ptr *QWindow) VisibleChanged(arg bool) {
	if ptr.Pointer() != nil {
		C.QWindow_VisibleChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(arg))))
	}
}

//export callbackQWindow_WheelEvent
func callbackQWindow_WheelEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "wheelEvent"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "wheelEvent", func(ev *QWheelEvent) {
				signal.(func(*QWheelEvent))(ev)
				f(ev)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "wheelEvent", f)
		}
	}
}

func (ptr *QWindow) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "wheelEvent")
	}
}

func (ptr *QWindow) WheelEvent(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

//export callbackQWindow_WidthChanged
func callbackQWindow_WidthChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "widthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "widthChanged") {
			C.QWindow_ConnectWidthChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "widthChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "widthChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "widthChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "widthChanged")
	}
}

func (ptr *QWindow) WidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_WidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_WindowStateChanged
func callbackQWindow_WindowStateChanged(ptr unsafe.Pointer, windowState C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "windowStateChanged"); signal != nil {
		signal.(func(core.Qt__WindowState))(core.Qt__WindowState(windowState))
	}

}

func (ptr *QWindow) ConnectWindowStateChanged(f func(windowState core.Qt__WindowState)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "windowStateChanged") {
			C.QWindow_ConnectWindowStateChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "windowStateChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "windowStateChanged", func(windowState core.Qt__WindowState) {
				signal.(func(core.Qt__WindowState))(windowState)
				f(windowState)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "windowStateChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectWindowStateChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "windowStateChanged")
	}
}

func (ptr *QWindow) WindowStateChanged(windowState core.Qt__WindowState) {
	if ptr.Pointer() != nil {
		C.QWindow_WindowStateChanged(ptr.Pointer(), C.longlong(windowState))
	}
}

//export callbackQWindow_WindowTitleChanged
func callbackQWindow_WindowTitleChanged(ptr unsafe.Pointer, title C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "windowTitleChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(title))
	}

}

func (ptr *QWindow) ConnectWindowTitleChanged(f func(title string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "windowTitleChanged") {
			C.QWindow_ConnectWindowTitleChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "windowTitleChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "windowTitleChanged", func(title string) {
				signal.(func(string))(title)
				f(title)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "windowTitleChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectWindowTitleChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowTitleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "windowTitleChanged")
	}
}

func (ptr *QWindow) WindowTitleChanged(title string) {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		C.QWindow_WindowTitleChanged(ptr.Pointer(), titleC)
	}
}

//export callbackQWindow_XChanged
func callbackQWindow_XChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "xChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectXChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "xChanged") {
			C.QWindow_ConnectXChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "xChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "xChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "xChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectXChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectXChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "xChanged")
	}
}

func (ptr *QWindow) XChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_XChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_YChanged
func callbackQWindow_YChanged(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "yChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectYChanged(f func(arg int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(fmt.Sprint(ptr.Pointer()), "yChanged") {
			C.QWindow_ConnectYChanged(ptr.Pointer())
		}

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "yChanged"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "yChanged", func(arg int) {
				signal.(func(int))(arg)
				f(arg)
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "yChanged", f)
		}
	}
}

func (ptr *QWindow) DisconnectYChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectYChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "yChanged")
	}
}

func (ptr *QWindow) YChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_YChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_DestroyQWindow
func callbackQWindow_DestroyQWindow(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "~QWindow"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).DestroyQWindowDefault()
	}
}

func (ptr *QWindow) ConnectDestroyQWindow(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "~QWindow"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QWindow", func() {
				signal.(func())()
				f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "~QWindow", f)
		}
	}
}

func (ptr *QWindow) DisconnectDestroyQWindow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "~QWindow")
	}
}

func (ptr *QWindow) DestroyQWindow() {
	if ptr.Pointer() != nil {
		C.QWindow_DestroyQWindow(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindow) DestroyQWindowDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_DestroyQWindowDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindow) Cursor() *QCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCursorFromPointer(C.QWindow_Cursor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Icon() *QIcon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIconFromPointer(C.QWindow_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FrameMargins() *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QWindow_FrameMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

//export callbackQWindow_FocusObject
func callbackQWindow_FocusObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QWindow) ConnectFocusObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "focusObject"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObject", func() *core.QObject {
				signal.(func() *core.QObject)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "focusObject", f)
		}
	}
}

func (ptr *QWindow) DisconnectFocusObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "focusObject")
	}
}

func (ptr *QWindow) FocusObject() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow_FocusObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FocusObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow_FocusObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FramePosition() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_FramePosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MapFromGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_MapFromGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MapToGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_MapToGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Position() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FrameGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QWindow_FrameGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QWindow_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Mask() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QWindow_Mask(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Screen() *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QWindow_Screen(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) BaseSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_BaseSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQWindow_Size
func callbackQWindow_Size(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QWindow) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "size"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", func() *core.QSize {
				signal.(func() *core.QSize)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "size", f)
		}
	}
}

func (ptr *QWindow) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "size")
	}
}

func (ptr *QWindow) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) SizeIncrement() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_SizeIncrement(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWindow_FilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWindow) Title() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWindow_Title(ptr.Pointer()))
	}
	return ""
}

//export callbackQWindow_Format
func callbackQWindow_Format(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QWindow) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "format"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", func() *QSurfaceFormat {
				signal.(func() *QSurfaceFormat)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "format", f)
		}
	}
}

func (ptr *QWindow) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "format")
	}
}

func (ptr *QWindow) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) RequestedFormat() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_RequestedFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Parent() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QWindow_Parent(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) TransientParent() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QWindow_TransientParent(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) ContentOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QWindow_ContentOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Flags() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Modality() core.Qt__WindowModality {
	if ptr.Pointer() != nil {
		return core.Qt__WindowModality(C.QWindow_Modality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) WindowState() core.Qt__WindowState {
	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindow_WindowState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Type() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Type(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_SurfaceType
func callbackQWindow_SurfaceType(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(fmt.Sprint(ptr.Pointer()), "surfaceType"); signal != nil {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", func() QSurface__SurfaceType {
				signal.(func() QSurface__SurfaceType)()
				return f()
			})
		} else {
			qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType", f)
		}
	}
}

func (ptr *QWindow) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "surfaceType")
	}
}

func (ptr *QWindow) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Visibility() QWindow__Visibility {
	if ptr.Pointer() != nil {
		return QWindow__Visibility(C.QWindow_Visibility(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) WinId() uintptr {
	if ptr.Pointer() != nil {
		return uintptr(C.QWindow_WinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsAncestorOf(child QWindow_ITF, mode QWindow__AncestorMode) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsAncestorOf(ptr.Pointer(), PointerFromQWindow(child), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QWindow) IsExposed() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsExposed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsModal() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsModal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsTopLevel() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsTopLevel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) MaximumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MaximumHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) MaximumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MaximumWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) MinimumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MinimumHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) MinimumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MinimumWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWindow) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QWindow_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QWindow_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QWindow___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QWindow) __dynamicPropertyNames_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QWindow___dynamicPropertyNames_newList(ptr.Pointer()))
}

func (ptr *QWindow) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWindow) __findChildren_newList2() unsafe.Pointer {
	return unsafe.Pointer(C.QWindow___findChildren_newList2(ptr.Pointer()))
}

func (ptr *QWindow) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWindow) __findChildren_newList3() unsafe.Pointer {
	return unsafe.Pointer(C.QWindow___findChildren_newList3(ptr.Pointer()))
}

func (ptr *QWindow) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWindow) __findChildren_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QWindow___findChildren_newList(ptr.Pointer()))
}

func (ptr *QWindow) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWindow) __children_newList() unsafe.Pointer {
	return unsafe.Pointer(C.QWindow___children_newList(ptr.Pointer()))
}

//export callbackQWindow_EventFilter
func callbackQWindow_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQWindow_ChildEvent
func callbackQWindow_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QWindow) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQWindow_ConnectNotify
func callbackQWindow_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_CustomEvent
func callbackQWindow_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWindow) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWindow) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWindow_DeleteLater
func callbackQWindow_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QWindow) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QWindow_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindow) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQWindow_Destroyed
func callbackQWindow_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "destroyed"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQWindow_DisconnectNotify
func callbackQWindow_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_ObjectNameChanged
func callbackQWindow_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

//export callbackQWindow_TimerEvent
func callbackQWindow_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QWindow) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQWindow_MetaObject
func callbackQWindow_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QWindow) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QWindowStateChangeEvent struct {
	core.QEvent
}

type QWindowStateChangeEvent_ITF interface {
	core.QEvent_ITF
	QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent
}

func (ptr *QWindowStateChangeEvent) QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent {
	return ptr
}

func (ptr *QWindowStateChangeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QWindowStateChangeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQWindowStateChangeEvent(ptr QWindowStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindowStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQWindowStateChangeEventFromPointer(ptr unsafe.Pointer) *QWindowStateChangeEvent {
	var n = new(QWindowStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWindowStateChangeEvent) DestroyQWindowStateChangeEvent() {
	if ptr != nil {
		C.free(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindowStateChangeEvent) OldState() core.Qt__WindowState {
	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindowStateChangeEvent_OldState(ptr.Pointer()))
	}
	return 0
}
