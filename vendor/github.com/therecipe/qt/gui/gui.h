// +build !minimal

#pragma once

#ifndef GO_QTGUI_H
#define GO_QTGUI_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtGui_PackedString { char* data; long long len; };
struct QtGui_PackedList { void* data; long long len; };
void* PaintContext_NewPaintContext();
void* PaintContext_Clip(void* ptr);
void PaintContext_SetClip(void* ptr, void* vqr);
int PaintContext_CursorPosition(void* ptr);
void PaintContext_SetCursorPosition(void* ptr, int vin);
void* PaintContext_Palette(void* ptr);
void PaintContext_SetPalette(void* ptr, void* vqp);
void* QAbstractTextDocumentLayout_Format(void* ptr, int position);
void* QAbstractTextDocumentLayout_NewQAbstractTextDocumentLayout(void* document);
void QAbstractTextDocumentLayout_DocumentChanged(void* ptr, int position, int charsRemoved, int charsAdded);
void QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(void* ptr);
void QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(void* ptr);
void QAbstractTextDocumentLayout_DocumentSizeChanged(void* ptr, void* newSize);
void QAbstractTextDocumentLayout_Draw(void* ptr, void* painter, void* context);
void QAbstractTextDocumentLayout_DrawInlineObject(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format);
void QAbstractTextDocumentLayout_DrawInlineObjectDefault(void* ptr, void* painter, void* rect, void* object, int posInDocument, void* format);
void QAbstractTextDocumentLayout_ConnectPageCountChanged(void* ptr);
void QAbstractTextDocumentLayout_DisconnectPageCountChanged(void* ptr);
void QAbstractTextDocumentLayout_PageCountChanged(void* ptr, int newPages);
void QAbstractTextDocumentLayout_PositionInlineObject(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_PositionInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_RegisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_ResizeInlineObject(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_ResizeInlineObjectDefault(void* ptr, void* item, int posInDocument, void* format);
void QAbstractTextDocumentLayout_SetPaintDevice(void* ptr, void* device);
void QAbstractTextDocumentLayout_UnregisterHandler(void* ptr, int objectType, void* component);
void QAbstractTextDocumentLayout_ConnectUpdate(void* ptr);
void QAbstractTextDocumentLayout_DisconnectUpdate(void* ptr);
void QAbstractTextDocumentLayout_Update(void* ptr, void* rect);
void QAbstractTextDocumentLayout_ConnectUpdateBlock(void* ptr);
void QAbstractTextDocumentLayout_DisconnectUpdateBlock(void* ptr);
void QAbstractTextDocumentLayout_UpdateBlock(void* ptr, void* block);
void* QAbstractTextDocumentLayout_PaintDevice(void* ptr);
void* QAbstractTextDocumentLayout_BlockBoundingRect(void* ptr, void* block);
void* QAbstractTextDocumentLayout_FrameBoundingRect(void* ptr, void* frame);
void* QAbstractTextDocumentLayout_DocumentSize(void* ptr);
struct QtGui_PackedString QAbstractTextDocumentLayout_AnchorAt(void* ptr, void* position);
struct QtGui_PackedString QAbstractTextDocumentLayout_ImageAt(void* ptr, void* pos);
void* QAbstractTextDocumentLayout_Document(void* ptr);
void* QAbstractTextDocumentLayout_FormatAt(void* ptr, void* pos);
void* QAbstractTextDocumentLayout_HandlerForObject(void* ptr, int objectType);
int QAbstractTextDocumentLayout_HitTest(void* ptr, void* point, long long accuracy);
int QAbstractTextDocumentLayout_PageCount(void* ptr);
void* QAbstractTextDocumentLayout___dynamicPropertyNames_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___dynamicPropertyNames_newList(void* ptr);
void* QAbstractTextDocumentLayout___findChildren_atList2(void* ptr, int i);
void QAbstractTextDocumentLayout___findChildren_setList2(void* ptr, void* i);
void* QAbstractTextDocumentLayout___findChildren_newList2(void* ptr);
void* QAbstractTextDocumentLayout___findChildren_atList3(void* ptr, int i);
void QAbstractTextDocumentLayout___findChildren_setList3(void* ptr, void* i);
void* QAbstractTextDocumentLayout___findChildren_newList3(void* ptr);
void* QAbstractTextDocumentLayout___findChildren_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___findChildren_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___findChildren_newList(void* ptr);
void* QAbstractTextDocumentLayout___children_atList(void* ptr, int i);
void QAbstractTextDocumentLayout___children_setList(void* ptr, void* i);
void* QAbstractTextDocumentLayout___children_newList(void* ptr);
char QAbstractTextDocumentLayout_EventDefault(void* ptr, void* e);
char QAbstractTextDocumentLayout_EventFilterDefault(void* ptr, void* watched, void* event);
void QAbstractTextDocumentLayout_ChildEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_ConnectNotifyDefault(void* ptr, void* sign);
void QAbstractTextDocumentLayout_CustomEventDefault(void* ptr, void* event);
void QAbstractTextDocumentLayout_DeleteLaterDefault(void* ptr);
void QAbstractTextDocumentLayout_DisconnectNotifyDefault(void* ptr, void* sign);
void QAbstractTextDocumentLayout_TimerEventDefault(void* ptr, void* event);
void* QAbstractTextDocumentLayout_MetaObjectDefault(void* ptr);
int QAccessible_InvalidEvent_Type();
void* QAccessible_QAccessible_QueryAccessibleInterface(void* object);
char QAccessible_QAccessible_IsActive();
void QAccessible_QAccessible_SetRootObject(void* object);
void QAccessible_QAccessible_UpdateAccessibility(void* event);
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_PressAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction();
struct QtGui_PackedString QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction();
void QAccessibleActionInterface_DoAction(void* ptr, char* actionName);
void QAccessibleActionInterface_DestroyQAccessibleActionInterface(void* ptr);
void QAccessibleActionInterface_DestroyQAccessibleActionInterfaceDefault(void* ptr);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescription(void* ptr, char* actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionDescriptionDefault(void* ptr, char* actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionName(void* ptr, char* actionName);
struct QtGui_PackedString QAccessibleActionInterface_LocalizedActionNameDefault(void* ptr, char* actionName);
struct QtGui_PackedString QAccessibleActionInterface_ActionNames(void* ptr);
struct QtGui_PackedString QAccessibleActionInterface_KeyBindingsForAction(void* ptr, char* actionName);
void QAccessibleEditableTextInterface_DeleteText(void* ptr, int startOffset, int endOffset);
void QAccessibleEditableTextInterface_InsertText(void* ptr, int offset, char* text);
void QAccessibleEditableTextInterface_ReplaceText(void* ptr, int startOffset, int endOffset, char* text);
void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(void* ptr);
void QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterfaceDefault(void* ptr);
void* QAccessibleEvent_NewQAccessibleEvent2(void* interfa, long long ty);
void* QAccessibleEvent_NewQAccessibleEvent(void* object, long long ty);
void QAccessibleEvent_SetChild(void* ptr, int child);
void QAccessibleEvent_DestroyQAccessibleEvent(void* ptr);
void QAccessibleEvent_DestroyQAccessibleEventDefault(void* ptr);
long long QAccessibleEvent_Type(void* ptr);
void* QAccessibleEvent_AccessibleInterface(void* ptr);
void* QAccessibleEvent_AccessibleInterfaceDefault(void* ptr);
void* QAccessibleEvent_Object(void* ptr);
int QAccessibleEvent_Child(void* ptr);
void* QAccessibleEvent_M_object(void* ptr);
void QAccessibleEvent_SetM_object(void* ptr, void* vqo);
long long QAccessibleEvent_M_type(void* ptr);
void QAccessibleEvent_SetM_type(void* ptr, long long vqa);
void* QAccessibleInterface_ActionInterface(void* ptr);
void* QAccessibleInterface_TableCellInterface(void* ptr);
void* QAccessibleInterface_TableInterface(void* ptr);
void* QAccessibleInterface_TextInterface(void* ptr);
void* QAccessibleInterface_ValueInterface(void* ptr);
void* QAccessibleInterface_Interface_cast(void* ptr, long long ty);
void* QAccessibleInterface_Interface_castDefault(void* ptr, long long ty);
void QAccessibleInterface_SetText(void* ptr, long long t, char* text);
void QAccessibleInterface_DestroyQAccessibleInterface(void* ptr);
void QAccessibleInterface_DestroyQAccessibleInterfaceDefault(void* ptr);
long long QAccessibleInterface_Role(void* ptr);
void* QAccessibleInterface_Child(void* ptr, int index);
void* QAccessibleInterface_ChildAt(void* ptr, int x, int y);
void* QAccessibleInterface_FocusChild(void* ptr);
void* QAccessibleInterface_FocusChildDefault(void* ptr);
void* QAccessibleInterface_Parent(void* ptr);
void* QAccessibleInterface_BackgroundColor(void* ptr);
void* QAccessibleInterface_BackgroundColorDefault(void* ptr);
void* QAccessibleInterface_ForegroundColor(void* ptr);
void* QAccessibleInterface_ForegroundColorDefault(void* ptr);
void* QAccessibleInterface_Object(void* ptr);
void* QAccessibleInterface_Rect(void* ptr);
struct QtGui_PackedString QAccessibleInterface_Text(void* ptr, long long t);
void* QAccessibleInterface_Window(void* ptr);
void* QAccessibleInterface_WindowDefault(void* ptr);
char QAccessibleInterface_IsValid(void* ptr);
int QAccessibleInterface_ChildCount(void* ptr);
int QAccessibleInterface_IndexOfChild(void* ptr, void* child);
void QAccessibleObject_SetText(void* ptr, long long t, char* text);
void QAccessibleObject_SetTextDefault(void* ptr, long long t, char* text);
void QAccessibleObject_DestroyQAccessibleObject(void* ptr);
void QAccessibleObject_DestroyQAccessibleObjectDefault(void* ptr);
void* QAccessibleObject_ChildAt(void* ptr, int x, int y);
void* QAccessibleObject_ChildAtDefault(void* ptr, int x, int y);
void* QAccessibleObject_Object(void* ptr);
void* QAccessibleObject_ObjectDefault(void* ptr);
void* QAccessibleObject_Rect(void* ptr);
void* QAccessibleObject_RectDefault(void* ptr);
char QAccessibleObject_IsValid(void* ptr);
char QAccessibleObject_IsValidDefault(void* ptr);
long long QAccessibleObject_Role(void* ptr);
long long QAccessibleObject_RoleDefault(void* ptr);
void* QAccessibleObject_Child(void* ptr, int index);
void* QAccessibleObject_ChildDefault(void* ptr, int index);
void* QAccessibleObject_Parent(void* ptr);
void* QAccessibleObject_ParentDefault(void* ptr);
struct QtGui_PackedString QAccessibleObject_Text(void* ptr, long long t);
struct QtGui_PackedString QAccessibleObject_TextDefault(void* ptr, long long t);
int QAccessibleObject_ChildCount(void* ptr);
int QAccessibleObject_ChildCountDefault(void* ptr);
int QAccessibleObject_IndexOfChild(void* ptr, void* child);
int QAccessibleObject_IndexOfChildDefault(void* ptr, void* child);
void* QAccessiblePlugin_Create(void* ptr, char* key, void* object);
void* QAccessiblePlugin_NewQAccessiblePlugin(void* parent);
void QAccessiblePlugin_DestroyQAccessiblePlugin(void* ptr);
void* QAccessiblePlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QAccessiblePlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QAccessiblePlugin___dynamicPropertyNames_newList(void* ptr);
void* QAccessiblePlugin___findChildren_atList2(void* ptr, int i);
void QAccessiblePlugin___findChildren_setList2(void* ptr, void* i);
void* QAccessiblePlugin___findChildren_newList2(void* ptr);
void* QAccessiblePlugin___findChildren_atList3(void* ptr, int i);
void QAccessiblePlugin___findChildren_setList3(void* ptr, void* i);
void* QAccessiblePlugin___findChildren_newList3(void* ptr);
void* QAccessiblePlugin___findChildren_atList(void* ptr, int i);
void QAccessiblePlugin___findChildren_setList(void* ptr, void* i);
void* QAccessiblePlugin___findChildren_newList(void* ptr);
void* QAccessiblePlugin___children_atList(void* ptr, int i);
void QAccessiblePlugin___children_setList(void* ptr, void* i);
void* QAccessiblePlugin___children_newList(void* ptr);
char QAccessiblePlugin_EventDefault(void* ptr, void* e);
char QAccessiblePlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void QAccessiblePlugin_ChildEventDefault(void* ptr, void* event);
void QAccessiblePlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QAccessiblePlugin_CustomEventDefault(void* ptr, void* event);
void QAccessiblePlugin_DeleteLaterDefault(void* ptr);
void QAccessiblePlugin_DisconnectNotifyDefault(void* ptr, void* sign);
void QAccessiblePlugin_TimerEventDefault(void* ptr, void* event);
void* QAccessiblePlugin_MetaObjectDefault(void* ptr);
void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(void* ptr);
void QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterfaceDefault(void* ptr);
void* QAccessibleTableCellInterface_Table(void* ptr);
struct QtGui_PackedList QAccessibleTableCellInterface_ColumnHeaderCells(void* ptr);
struct QtGui_PackedList QAccessibleTableCellInterface_RowHeaderCells(void* ptr);
char QAccessibleTableCellInterface_IsSelected(void* ptr);
int QAccessibleTableCellInterface_ColumnExtent(void* ptr);
int QAccessibleTableCellInterface_ColumnIndex(void* ptr);
int QAccessibleTableCellInterface_RowExtent(void* ptr);
int QAccessibleTableCellInterface_RowIndex(void* ptr);
void* QAccessibleTableCellInterface___columnHeaderCells_atList(void* ptr, int i);
void QAccessibleTableCellInterface___columnHeaderCells_setList(void* ptr, void* i);
void* QAccessibleTableCellInterface___columnHeaderCells_newList(void* ptr);
void* QAccessibleTableCellInterface___rowHeaderCells_atList(void* ptr, int i);
void QAccessibleTableCellInterface___rowHeaderCells_setList(void* ptr, void* i);
void* QAccessibleTableCellInterface___rowHeaderCells_newList(void* ptr);
char QAccessibleTableInterface_SelectColumn(void* ptr, int column);
char QAccessibleTableInterface_SelectRow(void* ptr, int row);
char QAccessibleTableInterface_UnselectColumn(void* ptr, int column);
char QAccessibleTableInterface_UnselectRow(void* ptr, int row);
void QAccessibleTableInterface_ModelChange(void* ptr, void* event);
void QAccessibleTableInterface_DestroyQAccessibleTableInterface(void* ptr);
void QAccessibleTableInterface_DestroyQAccessibleTableInterfaceDefault(void* ptr);
void* QAccessibleTableInterface_Caption(void* ptr);
void* QAccessibleTableInterface_CellAt(void* ptr, int row, int column);
void* QAccessibleTableInterface_Summary(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedCells(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedColumns(void* ptr);
struct QtGui_PackedList QAccessibleTableInterface_SelectedRows(void* ptr);
struct QtGui_PackedString QAccessibleTableInterface_ColumnDescription(void* ptr, int column);
struct QtGui_PackedString QAccessibleTableInterface_RowDescription(void* ptr, int row);
char QAccessibleTableInterface_IsColumnSelected(void* ptr, int column);
char QAccessibleTableInterface_IsRowSelected(void* ptr, int row);
int QAccessibleTableInterface_ColumnCount(void* ptr);
int QAccessibleTableInterface_RowCount(void* ptr);
int QAccessibleTableInterface_SelectedCellCount(void* ptr);
int QAccessibleTableInterface_SelectedColumnCount(void* ptr);
int QAccessibleTableInterface_SelectedRowCount(void* ptr);
void* QAccessibleTableInterface___selectedCells_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedCells_setList(void* ptr, void* i);
void* QAccessibleTableInterface___selectedCells_newList(void* ptr);
int QAccessibleTableInterface___selectedColumns_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedColumns_setList(void* ptr, int i);
void* QAccessibleTableInterface___selectedColumns_newList(void* ptr);
int QAccessibleTableInterface___selectedRows_atList(void* ptr, int i);
void QAccessibleTableInterface___selectedRows_setList(void* ptr, int i);
void* QAccessibleTableInterface___selectedRows_newList(void* ptr);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(void* iface, long long changeType);
void* QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(void* object, long long changeType);
void QAccessibleTableModelChangeEvent_SetFirstColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetFirstRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetLastColumn(void* ptr, int column);
void QAccessibleTableModelChangeEvent_SetLastRow(void* ptr, int row);
void QAccessibleTableModelChangeEvent_SetModelChangeType(void* ptr, long long changeType);
long long QAccessibleTableModelChangeEvent_ModelChangeType(void* ptr);
int QAccessibleTableModelChangeEvent_FirstColumn(void* ptr);
int QAccessibleTableModelChangeEvent_FirstRow(void* ptr);
int QAccessibleTableModelChangeEvent_LastColumn(void* ptr);
int QAccessibleTableModelChangeEvent_LastRow(void* ptr);
int QAccessibleTableModelChangeEvent_M_firstColumn(void* ptr);
void QAccessibleTableModelChangeEvent_SetM_firstColumn(void* ptr, int vin);
int QAccessibleTableModelChangeEvent_M_firstRow(void* ptr);
void QAccessibleTableModelChangeEvent_SetM_firstRow(void* ptr, int vin);
int QAccessibleTableModelChangeEvent_M_lastColumn(void* ptr);
void QAccessibleTableModelChangeEvent_SetM_lastColumn(void* ptr, int vin);
int QAccessibleTableModelChangeEvent_M_lastRow(void* ptr);
void QAccessibleTableModelChangeEvent_SetM_lastRow(void* ptr, int vin);
long long QAccessibleTableModelChangeEvent_M_modelChangeType(void* ptr);
void QAccessibleTableModelChangeEvent_SetM_modelChangeType(void* ptr, long long vmo);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(void* iface, int cursorPos);
void* QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(void* object, int cursorPos);
void QAccessibleTextCursorEvent_SetCursorPosition(void* ptr, int position);
int QAccessibleTextCursorEvent_CursorPosition(void* ptr);
int QAccessibleTextCursorEvent_M_cursorPosition(void* ptr);
void QAccessibleTextCursorEvent_SetM_cursorPosition(void* ptr, int vin);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(void* iface, int position, char* text);
void* QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(void* object, int position, char* text);
struct QtGui_PackedString QAccessibleTextInsertEvent_TextInserted(void* ptr);
int QAccessibleTextInsertEvent_ChangePosition(void* ptr);
int QAccessibleTextInsertEvent_M_position(void* ptr);
void QAccessibleTextInsertEvent_SetM_position(void* ptr, int vin);
struct QtGui_PackedString QAccessibleTextInsertEvent_M_text(void* ptr);
void QAccessibleTextInsertEvent_SetM_text(void* ptr, char* vqs);
void QAccessibleTextInterface_AddSelection(void* ptr, int startOffset, int endOffset);
void QAccessibleTextInterface_RemoveSelection(void* ptr, int selectionIndex);
void QAccessibleTextInterface_ScrollToSubstring(void* ptr, int startIndex, int endIndex);
void QAccessibleTextInterface_SetCursorPosition(void* ptr, int position);
void QAccessibleTextInterface_SetSelection(void* ptr, int selectionIndex, int startOffset, int endOffset);
void QAccessibleTextInterface_DestroyQAccessibleTextInterface(void* ptr);
void QAccessibleTextInterface_DestroyQAccessibleTextInterfaceDefault(void* ptr);
void* QAccessibleTextInterface_CharacterRect(void* ptr, int offset);
struct QtGui_PackedString QAccessibleTextInterface_Text(void* ptr, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAfterOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAtOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextAtOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffset(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
struct QtGui_PackedString QAccessibleTextInterface_TextBeforeOffsetDefault(void* ptr, int offset, long long boundaryType, int startOffset, int endOffset);
int QAccessibleTextInterface_CharacterCount(void* ptr);
int QAccessibleTextInterface_CursorPosition(void* ptr);
int QAccessibleTextInterface_OffsetAtPoint(void* ptr, void* point);
int QAccessibleTextInterface_SelectionCount(void* ptr);
void QAccessibleTextInterface_Selection(void* ptr, int selectionIndex, int startOffset, int endOffset);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(void* iface, int position, char* text);
void* QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(void* object, int position, char* text);
struct QtGui_PackedString QAccessibleTextRemoveEvent_TextRemoved(void* ptr);
int QAccessibleTextRemoveEvent_ChangePosition(void* ptr);
int QAccessibleTextRemoveEvent_M_position(void* ptr);
void QAccessibleTextRemoveEvent_SetM_position(void* ptr, int vin);
struct QtGui_PackedString QAccessibleTextRemoveEvent_M_text(void* ptr);
void QAccessibleTextRemoveEvent_SetM_text(void* ptr, char* vqs);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(void* iface, int start, int end);
void* QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(void* object, int start, int end);
void QAccessibleTextSelectionEvent_SetSelection(void* ptr, int start, int end);
int QAccessibleTextSelectionEvent_SelectionEnd(void* ptr);
int QAccessibleTextSelectionEvent_SelectionStart(void* ptr);
int QAccessibleTextSelectionEvent_M_selectionEnd(void* ptr);
void QAccessibleTextSelectionEvent_SetM_selectionEnd(void* ptr, int vin);
int QAccessibleTextSelectionEvent_M_selectionStart(void* ptr);
void QAccessibleTextSelectionEvent_SetM_selectionStart(void* ptr, int vin);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(void* iface, int position, char* oldText, char* text);
void* QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(void* object, int position, char* oldText, char* text);
struct QtGui_PackedString QAccessibleTextUpdateEvent_TextInserted(void* ptr);
struct QtGui_PackedString QAccessibleTextUpdateEvent_TextRemoved(void* ptr);
int QAccessibleTextUpdateEvent_ChangePosition(void* ptr);
struct QtGui_PackedString QAccessibleTextUpdateEvent_M_oldText(void* ptr);
void QAccessibleTextUpdateEvent_SetM_oldText(void* ptr, char* vqs);
int QAccessibleTextUpdateEvent_M_position(void* ptr);
void QAccessibleTextUpdateEvent_SetM_position(void* ptr, int vin);
struct QtGui_PackedString QAccessibleTextUpdateEvent_M_text(void* ptr);
void QAccessibleTextUpdateEvent_SetM_text(void* ptr, char* vqs);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(void* iface, void* val);
void* QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(void* object, void* value);
void QAccessibleValueChangeEvent_SetValue(void* ptr, void* value);
void* QAccessibleValueChangeEvent_Value(void* ptr);
void* QAccessibleValueChangeEvent_M_value(void* ptr);
void QAccessibleValueChangeEvent_SetM_value(void* ptr, void* vqv);
void QAccessibleValueInterface_SetCurrentValue(void* ptr, void* value);
void QAccessibleValueInterface_DestroyQAccessibleValueInterface(void* ptr);
void QAccessibleValueInterface_DestroyQAccessibleValueInterfaceDefault(void* ptr);
void* QAccessibleValueInterface_CurrentValue(void* ptr);
void* QAccessibleValueInterface_MaximumValue(void* ptr);
void* QAccessibleValueInterface_MinimumStepSize(void* ptr);
void* QAccessibleValueInterface_MinimumValue(void* ptr);
void* QActionEvent_NewQActionEvent(int ty, void* action, void* before);
void* QActionEvent_Action(void* ptr);
void* QActionEvent_Before(void* ptr);
void* QBackingStore_NewQBackingStore(void* window);
void* QBackingStore_PaintDevice(void* ptr);
char QBackingStore_Scroll(void* ptr, void* area, int dx, int dy);
void QBackingStore_BeginPaint(void* ptr, void* region);
void QBackingStore_EndPaint(void* ptr);
void QBackingStore_Flush(void* ptr, void* region, void* win, void* offset);
void QBackingStore_Resize(void* ptr, void* size);
void QBackingStore_SetStaticContents(void* ptr, void* region);
void QBackingStore_DestroyQBackingStore(void* ptr);
void* QBackingStore_StaticContents(void* ptr);
void* QBackingStore_Size(void* ptr);
void* QBackingStore_Window(void* ptr);
char QBackingStore_HasStaticContents(void* ptr);
void* QBitmap_QBitmap_FromData(void* size, char* bits, long long monoFormat);
void* QBitmap_QBitmap_FromImage(void* image, long long flags);
void* QBitmap_NewQBitmap();
void* QBitmap_NewQBitmap3(int width, int height);
void* QBitmap_NewQBitmap6(void* other);
void* QBitmap_NewQBitmap2(void* pixmap);
void* QBitmap_NewQBitmap4(void* size);
void* QBitmap_NewQBitmap5(char* fileName, char* format);
void QBitmap_Clear(void* ptr);
void QBitmap_Swap(void* ptr, void* other);
void QBitmap_DestroyQBitmap(void* ptr);
void* QBitmap_Transformed(void* ptr, void* matrix);
void* QBrush_NewQBrush();
void* QBrush_NewQBrush2(long long style);
void* QBrush_NewQBrush4(long long color, long long style);
void* QBrush_NewQBrush6(long long color, void* pixmap);
void* QBrush_NewQBrush9(void* other);
void* QBrush_NewQBrush3(void* color, long long style);
void* QBrush_NewQBrush5(void* color, void* pixmap);
void* QBrush_NewQBrush10(void* gradient);
void* QBrush_NewQBrush8(void* image);
void* QBrush_NewQBrush7(void* pixmap);
void QBrush_SetColor2(void* ptr, long long color);
void QBrush_SetColor(void* ptr, void* color);
void QBrush_SetStyle(void* ptr, long long style);
void QBrush_SetTexture(void* ptr, void* pixmap);
void QBrush_SetTextureImage(void* ptr, void* image);
void QBrush_SetTransform(void* ptr, void* matrix);
void QBrush_Swap(void* ptr, void* other);
void QBrush_DestroyQBrush(void* ptr);
void* QBrush_TextureImage(void* ptr);
void* QBrush_Texture(void* ptr);
void* QBrush_Transform(void* ptr);
long long QBrush_Style(void* ptr);
char QBrush_IsOpaque(void* ptr);
void* QBrush_Color(void* ptr);
void* QBrush_Gradient(void* ptr);
void QClipboard_ConnectChanged(void* ptr);
void QClipboard_DisconnectChanged(void* ptr);
void QClipboard_Changed(void* ptr, long long mode);
void QClipboard_Clear(void* ptr, long long mode);
void QClipboard_ConnectDataChanged(void* ptr);
void QClipboard_DisconnectDataChanged(void* ptr);
void QClipboard_DataChanged(void* ptr);
void QClipboard_ConnectFindBufferChanged(void* ptr);
void QClipboard_DisconnectFindBufferChanged(void* ptr);
void QClipboard_FindBufferChanged(void* ptr);
void QClipboard_ConnectSelectionChanged(void* ptr);
void QClipboard_DisconnectSelectionChanged(void* ptr);
void QClipboard_SelectionChanged(void* ptr);
void QClipboard_SetImage(void* ptr, void* image, long long mode);
void QClipboard_SetMimeData(void* ptr, void* src, long long mode);
void QClipboard_SetPixmap(void* ptr, void* pixmap, long long mode);
void QClipboard_SetText(void* ptr, char* text, long long mode);
void* QClipboard_Image(void* ptr, long long mode);
void* QClipboard_Pixmap(void* ptr, long long mode);
struct QtGui_PackedString QClipboard_Text(void* ptr, long long mode);
struct QtGui_PackedString QClipboard_Text2(void* ptr, char* subtype, long long mode);
char QClipboard_OwnsClipboard(void* ptr);
char QClipboard_OwnsFindBuffer(void* ptr);
char QClipboard_OwnsSelection(void* ptr);
char QClipboard_SupportsFindBuffer(void* ptr);
char QClipboard_SupportsSelection(void* ptr);
void* QClipboard_MimeData(void* ptr, long long mode);
void* QClipboard___dynamicPropertyNames_atList(void* ptr, int i);
void QClipboard___dynamicPropertyNames_setList(void* ptr, void* i);
void* QClipboard___dynamicPropertyNames_newList(void* ptr);
void* QClipboard___findChildren_atList2(void* ptr, int i);
void QClipboard___findChildren_setList2(void* ptr, void* i);
void* QClipboard___findChildren_newList2(void* ptr);
void* QClipboard___findChildren_atList3(void* ptr, int i);
void QClipboard___findChildren_setList3(void* ptr, void* i);
void* QClipboard___findChildren_newList3(void* ptr);
void* QClipboard___findChildren_atList(void* ptr, int i);
void QClipboard___findChildren_setList(void* ptr, void* i);
void* QClipboard___findChildren_newList(void* ptr);
void* QClipboard___children_atList(void* ptr, int i);
void QClipboard___children_setList(void* ptr, void* i);
void* QClipboard___children_newList(void* ptr);
char QClipboard_EventDefault(void* ptr, void* e);
char QClipboard_EventFilterDefault(void* ptr, void* watched, void* event);
void QClipboard_ChildEventDefault(void* ptr, void* event);
void QClipboard_ConnectNotifyDefault(void* ptr, void* sign);
void QClipboard_CustomEventDefault(void* ptr, void* event);
void QClipboard_DeleteLaterDefault(void* ptr);
void QClipboard_DisconnectNotifyDefault(void* ptr, void* sign);
void QClipboard_TimerEventDefault(void* ptr, void* event);
void* QClipboard_MetaObjectDefault(void* ptr);
void* QCloseEvent_NewQCloseEvent();
void* QColor_QColor_FromHsv(int h, int s, int v, int a);
void* QColor_QColor_FromRgb2(int r, int g, int b, int a);
void QColor_SetRgbF(void* ptr, double r, double g, double b, double a);
void* QColor_ConvertTo(void* ptr, long long colorSpec);
void* QColor_QColor_FromCmyk(int c, int m, int y, int k, int a);
void* QColor_QColor_FromCmykF(double c, double m, double y, double k, double a);
void* QColor_QColor_FromHsl(int h, int s, int l, int a);
void* QColor_QColor_FromHslF(double h, double s, double l, double a);
void* QColor_QColor_FromHsvF(double h, double s, double v, double a);
void* QColor_QColor_FromRgbF(double r, double g, double b, double a);
void* QColor_QColor_FromRgba642(void* rgba64);
void* QColor_QColor_FromRgba64(unsigned short r, unsigned short g, unsigned short b, unsigned short a);
void* QColor_NewQColor();
void* QColor_NewQColor11(void* other);
void* QColor_NewQColor8(void* name);
void* QColor_NewQColor5(void* rgba64);
void* QColor_NewQColor2(long long color);
void* QColor_NewQColor10(void* color);
void* QColor_NewQColor6(char* name);
void* QColor_NewQColor7(char* name);
void* QColor_NewQColor3(int r, int g, int b, int a);
struct QtGui_PackedString QColor_QColor_ColorNames();
char QColor_QColor_IsValidColor2(void* name);
char QColor_QColor_IsValidColor(char* name);
void QColor_GetCmyk(void* ptr, int c, int m, int y, int k, int a);
void QColor_GetCmykF(void* ptr, double c, double m, double y, double k, double a);
void QColor_SetAlpha(void* ptr, int alpha);
void QColor_SetAlphaF(void* ptr, double alpha);
void QColor_SetBlue(void* ptr, int blue);
void QColor_SetBlueF(void* ptr, double blue);
void QColor_SetCmyk(void* ptr, int c, int m, int y, int k, int a);
void QColor_SetCmykF(void* ptr, double c, double m, double y, double k, double a);
void QColor_SetGreen(void* ptr, int green);
void QColor_SetGreenF(void* ptr, double green);
void QColor_SetHsl(void* ptr, int h, int s, int l, int a);
void QColor_SetHslF(void* ptr, double h, double s, double l, double a);
void QColor_SetHsv(void* ptr, int h, int s, int v, int a);
void QColor_SetHsvF(void* ptr, double h, double s, double v, double a);
void QColor_SetNamedColor2(void* ptr, void* name);
void QColor_SetNamedColor(void* ptr, char* name);
void QColor_SetRed(void* ptr, int red);
void QColor_SetRedF(void* ptr, double red);
void QColor_SetRgb(void* ptr, int r, int g, int b, int a);
void QColor_SetRgba64(void* ptr, void* rgba);
void* QColor_Darker(void* ptr, int factor);
void* QColor_Lighter(void* ptr, int factor);
void* QColor_ToCmyk(void* ptr);
void* QColor_ToHsl(void* ptr);
void* QColor_ToHsv(void* ptr);
void* QColor_ToRgb(void* ptr);
struct QtGui_PackedString QColor_Name(void* ptr);
struct QtGui_PackedString QColor_Name2(void* ptr, long long format);
long long QColor_Spec(void* ptr);
char QColor_IsValid(void* ptr);
int QColor_Alpha(void* ptr);
int QColor_Black(void* ptr);
int QColor_Blue(void* ptr);
int QColor_Cyan(void* ptr);
int QColor_Green(void* ptr);
int QColor_HslHue(void* ptr);
int QColor_HslSaturation(void* ptr);
int QColor_HsvHue(void* ptr);
int QColor_HsvSaturation(void* ptr);
int QColor_Hue(void* ptr);
int QColor_Lightness(void* ptr);
int QColor_Magenta(void* ptr);
int QColor_Red(void* ptr);
int QColor_Saturation(void* ptr);
int QColor_Value(void* ptr);
int QColor_Yellow(void* ptr);
double QColor_AlphaF(void* ptr);
double QColor_BlackF(void* ptr);
double QColor_BlueF(void* ptr);
double QColor_CyanF(void* ptr);
double QColor_GreenF(void* ptr);
double QColor_HslHueF(void* ptr);
double QColor_HslSaturationF(void* ptr);
double QColor_HsvHueF(void* ptr);
double QColor_HsvSaturationF(void* ptr);
double QColor_HueF(void* ptr);
double QColor_LightnessF(void* ptr);
double QColor_MagentaF(void* ptr);
double QColor_RedF(void* ptr);
double QColor_SaturationF(void* ptr);
double QColor_ValueF(void* ptr);
double QColor_YellowF(void* ptr);
void QColor_GetHsl(void* ptr, int h, int s, int l, int a);
void QColor_GetHslF(void* ptr, double h, double s, double l, double a);
void QColor_GetHsv(void* ptr, int h, int s, int v, int a);
void QColor_GetHsvF(void* ptr, double h, double s, double v, double a);
void QColor_GetRgb(void* ptr, int r, int g, int b, int a);
void QColor_GetRgbF(void* ptr, double r, double g, double b, double a);
void* QColor_ToVariant(void* ptr);
void* QConicalGradient_NewQConicalGradient();
void* QConicalGradient_NewQConicalGradient2(void* center, double angle);
void* QConicalGradient_NewQConicalGradient3(double cx, double cy, double angle);
void QConicalGradient_SetAngle(void* ptr, double angle);
void QConicalGradient_SetCenter(void* ptr, void* center);
void QConicalGradient_SetCenter2(void* ptr, double x, double y);
void* QConicalGradient_Center(void* ptr);
double QConicalGradient_Angle(void* ptr);
void* QContextMenuEvent_NewQContextMenuEvent3(long long reason, void* pos);
void* QContextMenuEvent_NewQContextMenuEvent2(long long reason, void* pos, void* globalPos);
void* QContextMenuEvent_NewQContextMenuEvent(long long reason, void* pos, void* globalPos, long long modifiers);
long long QContextMenuEvent_Reason(void* ptr);
void* QContextMenuEvent_GlobalPos(void* ptr);
void* QContextMenuEvent_Pos(void* ptr);
int QContextMenuEvent_GlobalX(void* ptr);
int QContextMenuEvent_GlobalY(void* ptr);
int QContextMenuEvent_X(void* ptr);
int QContextMenuEvent_Y(void* ptr);
void* QContextMenuEvent_Gp(void* ptr);
void QContextMenuEvent_SetGp(void* ptr, void* vqp);
void* QContextMenuEvent_P(void* ptr);
void QContextMenuEvent_SetP(void* ptr, void* vqp);
void* QCursor_NewQCursor();
void* QCursor_NewQCursor6(void* other);
void* QCursor_NewQCursor2(long long shape);
void* QCursor_NewQCursor3(void* bitmap, void* mask, int hotX, int hotY);
void* QCursor_NewQCursor5(void* c);
void* QCursor_NewQCursor4(void* pixmap, int hotX, int hotY);
void* QCursor_QCursor_Pos();
void* QCursor_QCursor_Pos2(void* screen);
void QCursor_QCursor_SetPos4(void* screen, void* p);
void QCursor_QCursor_SetPos2(void* screen, int x, int y);
void QCursor_QCursor_SetPos3(void* p);
void QCursor_QCursor_SetPos(int x, int y);
void QCursor_SetShape(void* ptr, long long shape);
void QCursor_Swap(void* ptr, void* other);
void QCursor_DestroyQCursor(void* ptr);
void* QCursor_Pixmap(void* ptr);
void* QCursor_HotSpot(void* ptr);
long long QCursor_Shape(void* ptr);
void* QCursor_Bitmap(void* ptr);
void* QCursor_Mask(void* ptr);
char QDesktopServices_QDesktopServices_OpenUrl(void* url);
void QDesktopServices_QDesktopServices_SetUrlHandler(char* scheme, void* receiver, char* method);
void QDesktopServices_QDesktopServices_UnsetUrlHandler(char* scheme);
void* QDoubleValidator_NewQDoubleValidator(void* parent);
void* QDoubleValidator_NewQDoubleValidator2(double bottom, double top, int decimals, void* parent);
void QDoubleValidator_SetBottom(void* ptr, double vdo);
void QDoubleValidator_SetDecimals(void* ptr, int vin);
void QDoubleValidator_SetNotation(void* ptr, long long vno);
void QDoubleValidator_SetRange(void* ptr, double minimum, double maximum, int decimals);
void QDoubleValidator_SetRangeDefault(void* ptr, double minimum, double maximum, int decimals);
void QDoubleValidator_SetTop(void* ptr, double vdo);
void QDoubleValidator_DestroyQDoubleValidator(void* ptr);
long long QDoubleValidator_Notation(void* ptr);
long long QDoubleValidator_Validate(void* ptr, char* input, int pos);
long long QDoubleValidator_ValidateDefault(void* ptr, char* input, int pos);
double QDoubleValidator_Bottom(void* ptr);
double QDoubleValidator_Top(void* ptr);
int QDoubleValidator_Decimals(void* ptr);
void* QDrag_NewQDrag(void* dragSource);
long long QDrag_Exec(void* ptr, long long supportedActions);
long long QDrag_Exec2(void* ptr, long long supportedActions, long long defaultDropAction);
void QDrag_ConnectActionChanged(void* ptr);
void QDrag_DisconnectActionChanged(void* ptr);
void QDrag_ActionChanged(void* ptr, long long action);
void QDrag_QDrag_Cancel();
void QDrag_SetDragCursor(void* ptr, void* cursor, long long action);
void QDrag_SetHotSpot(void* ptr, void* hotspot);
void QDrag_SetMimeData(void* ptr, void* data);
void QDrag_SetPixmap(void* ptr, void* pixmap);
void QDrag_ConnectTargetChanged(void* ptr);
void QDrag_DisconnectTargetChanged(void* ptr);
void QDrag_TargetChanged(void* ptr, void* newTarget);
void QDrag_DestroyQDrag(void* ptr);
void* QDrag_MimeData(void* ptr);
void* QDrag_Source(void* ptr);
void* QDrag_Target(void* ptr);
void* QDrag_DragCursor(void* ptr, long long action);
void* QDrag_Pixmap(void* ptr);
void* QDrag_HotSpot(void* ptr);
long long QDrag_DefaultAction(void* ptr);
long long QDrag_SupportedActions(void* ptr);
void* QDrag___dynamicPropertyNames_atList(void* ptr, int i);
void QDrag___dynamicPropertyNames_setList(void* ptr, void* i);
void* QDrag___dynamicPropertyNames_newList(void* ptr);
void* QDrag___findChildren_atList2(void* ptr, int i);
void QDrag___findChildren_setList2(void* ptr, void* i);
void* QDrag___findChildren_newList2(void* ptr);
void* QDrag___findChildren_atList3(void* ptr, int i);
void QDrag___findChildren_setList3(void* ptr, void* i);
void* QDrag___findChildren_newList3(void* ptr);
void* QDrag___findChildren_atList(void* ptr, int i);
void QDrag___findChildren_setList(void* ptr, void* i);
void* QDrag___findChildren_newList(void* ptr);
void* QDrag___children_atList(void* ptr, int i);
void QDrag___children_setList(void* ptr, void* i);
void* QDrag___children_newList(void* ptr);
char QDrag_EventDefault(void* ptr, void* e);
char QDrag_EventFilterDefault(void* ptr, void* watched, void* event);
void QDrag_ChildEventDefault(void* ptr, void* event);
void QDrag_ConnectNotifyDefault(void* ptr, void* sign);
void QDrag_CustomEventDefault(void* ptr, void* event);
void QDrag_DeleteLaterDefault(void* ptr);
void QDrag_DisconnectNotifyDefault(void* ptr, void* sign);
void QDrag_TimerEventDefault(void* ptr, void* event);
void* QDrag_MetaObjectDefault(void* ptr);
void* QDragEnterEvent_NewQDragEnterEvent(void* point, long long actions, void* data, long long buttons, long long modifiers);
void* QDragLeaveEvent_NewQDragLeaveEvent();
void* QDragMoveEvent_NewQDragMoveEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty);
void QDragMoveEvent_Accept(void* ptr, void* rectangle);
void QDragMoveEvent_Ignore(void* ptr, void* rectangle);
void QDragMoveEvent_DestroyQDragMoveEvent(void* ptr);
void* QDragMoveEvent_AnswerRect(void* ptr);
void* QDragMoveEvent_Rect(void* ptr);
void QDragMoveEvent_SetRect(void* ptr, void* vqr);
void* QDropEvent_NewQDropEvent(void* pos, long long actions, void* data, long long buttons, long long modifiers, long long ty);
void QDropEvent_AcceptProposedAction(void* ptr);
void QDropEvent_SetDropAction(void* ptr, long long action);
void* QDropEvent_Source(void* ptr);
void* QDropEvent_Pos(void* ptr);
long long QDropEvent_DropAction(void* ptr);
long long QDropEvent_ProposedAction(void* ptr);
long long QDropEvent_PossibleActions(void* ptr);
long long QDropEvent_KeyboardModifiers(void* ptr);
long long QDropEvent_MouseButtons(void* ptr);
void* QDropEvent_MimeData(void* ptr);
void* QDropEvent_PosF(void* ptr);
long long QDropEvent_Act(void* ptr);
void QDropEvent_SetAct(void* ptr, long long vqt);
long long QDropEvent_Default_action(void* ptr);
void QDropEvent_SetDefault_action(void* ptr, long long vqt);
long long QDropEvent_Drop_action(void* ptr);
void QDropEvent_SetDrop_action(void* ptr, long long vqt);
void* QDropEvent_Mdata(void* ptr);
long long QDropEvent_ModState(void* ptr);
void QDropEvent_SetModState(void* ptr, long long vqt);
long long QDropEvent_MouseState(void* ptr);
void QDropEvent_SetMouseState(void* ptr, long long vqt);
void* QDropEvent_P(void* ptr);
void QDropEvent_SetP(void* ptr, void* vqp);
void* QEnterEvent_NewQEnterEvent(void* localPos, void* windowPos, void* screenPos);
void* QEnterEvent_GlobalPos(void* ptr);
void* QEnterEvent_Pos(void* ptr);
void* QEnterEvent_LocalPos(void* ptr);
void* QEnterEvent_ScreenPos(void* ptr);
void* QEnterEvent_WindowPos(void* ptr);
int QEnterEvent_GlobalX(void* ptr);
int QEnterEvent_GlobalY(void* ptr);
int QEnterEvent_X(void* ptr);
int QEnterEvent_Y(void* ptr);
void* QExposeEvent_NewQExposeEvent(void* exposeRegion);
void* QExposeEvent_Region(void* ptr);
void* QExposeEvent_Rgn(void* ptr);
void QExposeEvent_SetRgn(void* ptr, void* vqr);
struct QtGui_PackedString QFileOpenEvent_File(void* ptr);
void* QFileOpenEvent_Url(void* ptr);
char QFileOpenEvent_OpenFile(void* ptr, void* file, long long flags);
void* QFocusEvent_NewQFocusEvent(long long ty, long long reason);
long long QFocusEvent_Reason(void* ptr);
char QFocusEvent_GotFocus(void* ptr);
char QFocusEvent_LostFocus(void* ptr);
int QFont_Times_Type();
int QFont_Courier_Type();
int QFont_OldEnglish_Type();
int QFont_System_Type();
int QFont_AnyStyle_Type();
int QFont_Cursive_Type();
int QFont_Monospace_Type();
int QFont_Fantasy_Type();
void* QFont_NewQFont();
void* QFont_NewQFont4(void* font);
void* QFont_NewQFont3(void* font, void* pd);
void* QFont_NewQFont2(char* family, int pointSize, int weight, char italic);
struct QtGui_PackedString QFont_QFont_Substitute(char* familyName);
struct QtGui_PackedString QFont_QFont_Substitutes(char* familyName);
struct QtGui_PackedString QFont_QFont_Substitutions();
char QFont_FromString(void* ptr, char* descrip);
void QFont_QFont_InsertSubstitution(char* familyName, char* substituteName);
void QFont_QFont_InsertSubstitutions(char* familyName, char* substituteNames);
void QFont_QFont_RemoveSubstitutions(char* familyName);
void QFont_SetBold(void* ptr, char enable);
void QFont_SetCapitalization(void* ptr, long long caps);
void QFont_SetFamily(void* ptr, char* family);
void QFont_SetFixedPitch(void* ptr, char enable);
void QFont_SetHintingPreference(void* ptr, long long hintingPreference);
void QFont_SetItalic(void* ptr, char enable);
void QFont_SetKerning(void* ptr, char enable);
void QFont_SetLetterSpacing(void* ptr, long long ty, double spacing);
void QFont_SetOverline(void* ptr, char enable);
void QFont_SetPixelSize(void* ptr, int pixelSize);
void QFont_SetPointSize(void* ptr, int pointSize);
void QFont_SetPointSizeF(void* ptr, double pointSize);
void QFont_SetStretch(void* ptr, int factor);
void QFont_SetStrikeOut(void* ptr, char enable);
void QFont_SetStyle(void* ptr, long long style);
void QFont_SetStyleHint(void* ptr, long long hint, long long strategy);
void QFont_SetStyleName(void* ptr, char* styleName);
void QFont_SetStyleStrategy(void* ptr, long long s);
void QFont_SetUnderline(void* ptr, char enable);
void QFont_SetWeight(void* ptr, int weight);
void QFont_SetWordSpacing(void* ptr, double spacing);
void QFont_Swap(void* ptr, void* other);
void QFont_DestroyQFont(void* ptr);
long long QFont_Capitalization(void* ptr);
long long QFont_HintingPreference(void* ptr);
void* QFont_Resolve(void* ptr, void* other);
struct QtGui_PackedString QFont_DefaultFamily(void* ptr);
struct QtGui_PackedString QFont_Family(void* ptr);
struct QtGui_PackedString QFont_Key(void* ptr);
struct QtGui_PackedString QFont_LastResortFamily(void* ptr);
struct QtGui_PackedString QFont_LastResortFont(void* ptr);
struct QtGui_PackedString QFont_StyleName(void* ptr);
struct QtGui_PackedString QFont_ToString(void* ptr);
long long QFont_LetterSpacingType(void* ptr);
long long QFont_Style(void* ptr);
long long QFont_StyleHint(void* ptr);
long long QFont_StyleStrategy(void* ptr);
char QFont_Bold(void* ptr);
char QFont_ExactMatch(void* ptr);
char QFont_FixedPitch(void* ptr);
char QFont_IsCopyOf(void* ptr, void* fo);
char QFont_Italic(void* ptr);
char QFont_Kerning(void* ptr);
char QFont_Overline(void* ptr);
char QFont_StrikeOut(void* ptr);
char QFont_Underline(void* ptr);
int QFont_PixelSize(void* ptr);
int QFont_PointSize(void* ptr);
int QFont_Stretch(void* ptr);
int QFont_Weight(void* ptr);
double QFont_LetterSpacing(void* ptr);
double QFont_PointSizeF(void* ptr);
double QFont_WordSpacing(void* ptr);
void* QFont_ToVariant(void* ptr);
int QFontDatabase_Ogham_Type();
int QFontDatabase_Runic_Type();
int QFontDatabase_Nko_Type();
int QFontDatabase_WritingSystemsCount_Type();
struct QtGui_PackedList QFontDatabase_PointSizes(void* ptr, char* family, char* styleName);
struct QtGui_PackedList QFontDatabase_SmoothSizes(void* ptr, char* family, char* styleName);
char QFontDatabase_QFontDatabase_RemoveAllApplicationFonts();
char QFontDatabase_QFontDatabase_RemoveApplicationFont(int id);
void* QFontDatabase_QFontDatabase_SystemFont(long long ty);
void* QFontDatabase_NewQFontDatabase();
struct QtGui_PackedList QFontDatabase_QFontDatabase_StandardSizes();
struct QtGui_PackedString QFontDatabase_StyleString(void* ptr, void* font);
struct QtGui_PackedString QFontDatabase_StyleString2(void* ptr, void* fontInfo);
struct QtGui_PackedString QFontDatabase_QFontDatabase_ApplicationFontFamilies(int id);
int QFontDatabase_QFontDatabase_AddApplicationFont(char* fileName);
int QFontDatabase_QFontDatabase_AddApplicationFontFromData(void* fontData);
void* QFontDatabase_Font(void* ptr, char* family, char* style, int pointSize);
struct QtGui_PackedString QFontDatabase_Families(void* ptr, long long writingSystem);
struct QtGui_PackedString QFontDatabase_Styles(void* ptr, char* family);
char QFontDatabase_Bold(void* ptr, char* family, char* style);
char QFontDatabase_IsBitmapScalable(void* ptr, char* family, char* style);
char QFontDatabase_IsFixedPitch(void* ptr, char* family, char* style);
char QFontDatabase_IsPrivateFamily(void* ptr, char* family);
char QFontDatabase_IsScalable(void* ptr, char* family, char* style);
char QFontDatabase_IsSmoothlyScalable(void* ptr, char* family, char* style);
char QFontDatabase_Italic(void* ptr, char* family, char* style);
int QFontDatabase_Weight(void* ptr, char* family, char* style);
int QFontDatabase___pointSizes_atList(void* ptr, int i);
void QFontDatabase___pointSizes_setList(void* ptr, int i);
void* QFontDatabase___pointSizes_newList(void* ptr);
int QFontDatabase___smoothSizes_atList(void* ptr, int i);
void QFontDatabase___smoothSizes_setList(void* ptr, int i);
void* QFontDatabase___smoothSizes_newList(void* ptr);
int QFontDatabase___standardSizes_atList(void* ptr, int i);
void QFontDatabase___standardSizes_setList(void* ptr, int i);
void* QFontDatabase___standardSizes_newList(void* ptr);
void* QFontInfo_NewQFontInfo(void* font);
void* QFontInfo_NewQFontInfo2(void* fi);
void QFontInfo_Swap(void* ptr, void* other);
void QFontInfo_DestroyQFontInfo(void* ptr);
long long QFontInfo_Style(void* ptr);
long long QFontInfo_StyleHint(void* ptr);
struct QtGui_PackedString QFontInfo_Family(void* ptr);
struct QtGui_PackedString QFontInfo_StyleName(void* ptr);
char QFontInfo_Bold(void* ptr);
char QFontInfo_ExactMatch(void* ptr);
char QFontInfo_FixedPitch(void* ptr);
char QFontInfo_Italic(void* ptr);
int QFontInfo_PixelSize(void* ptr);
int QFontInfo_PointSize(void* ptr);
int QFontInfo_Weight(void* ptr);
double QFontInfo_PointSizeF(void* ptr);
void* QFontMetrics_NewQFontMetrics(void* font);
void* QFontMetrics_NewQFontMetrics2(void* font, void* paintdevice);
void* QFontMetrics_NewQFontMetrics3(void* fm);
void QFontMetrics_Swap(void* ptr, void* other);
void QFontMetrics_DestroyQFontMetrics(void* ptr);
void* QFontMetrics_BoundingRect(void* ptr, void* ch);
void* QFontMetrics_BoundingRect3(void* ptr, void* rect, int flags, char* text, int tabStops, int tabArray);
void* QFontMetrics_BoundingRect2(void* ptr, char* text);
void* QFontMetrics_BoundingRect4(void* ptr, int x, int y, int width, int height, int flags, char* text, int tabStops, int tabArray);
void* QFontMetrics_TightBoundingRect(void* ptr, char* text);
void* QFontMetrics_Size(void* ptr, int flags, char* text, int tabStops, int tabArray);
struct QtGui_PackedString QFontMetrics_ElidedText(void* ptr, char* text, long long mode, int width, int flags);
char QFontMetrics_InFont(void* ptr, void* ch);
char QFontMetrics_InFontUcs4(void* ptr, unsigned int ucs4);
int QFontMetrics_Ascent(void* ptr);
int QFontMetrics_AverageCharWidth(void* ptr);
int QFontMetrics_CapHeight(void* ptr);
int QFontMetrics_Descent(void* ptr);
int QFontMetrics_Height(void* ptr);
int QFontMetrics_Leading(void* ptr);
int QFontMetrics_LeftBearing(void* ptr, void* ch);
int QFontMetrics_LineSpacing(void* ptr);
int QFontMetrics_LineWidth(void* ptr);
int QFontMetrics_MaxWidth(void* ptr);
int QFontMetrics_MinLeftBearing(void* ptr);
int QFontMetrics_MinRightBearing(void* ptr);
int QFontMetrics_OverlinePos(void* ptr);
int QFontMetrics_RightBearing(void* ptr, void* ch);
int QFontMetrics_StrikeOutPos(void* ptr);
int QFontMetrics_UnderlinePos(void* ptr);
int QFontMetrics_Width3(void* ptr, void* ch);
int QFontMetrics_Width(void* ptr, char* text, int len);
int QFontMetrics_XHeight(void* ptr);
void* QFontMetricsF_NewQFontMetricsF(void* font);
void* QFontMetricsF_NewQFontMetricsF2(void* font, void* paintdevice);
void* QFontMetricsF_NewQFontMetricsF3(void* fontMetrics);
void* QFontMetricsF_NewQFontMetricsF4(void* fm);
void QFontMetricsF_Swap(void* ptr, void* other);
void QFontMetricsF_DestroyQFontMetricsF(void* ptr);
void* QFontMetricsF_BoundingRect2(void* ptr, void* ch);
void* QFontMetricsF_BoundingRect3(void* ptr, void* rect, int flags, char* text, int tabStops, int tabArray);
void* QFontMetricsF_BoundingRect(void* ptr, char* text);
void* QFontMetricsF_TightBoundingRect(void* ptr, char* text);
void* QFontMetricsF_Size(void* ptr, int flags, char* text, int tabStops, int tabArray);
struct QtGui_PackedString QFontMetricsF_ElidedText(void* ptr, char* text, long long mode, double width, int flags);
char QFontMetricsF_InFont(void* ptr, void* ch);
char QFontMetricsF_InFontUcs4(void* ptr, unsigned int ch);
double QFontMetricsF_Ascent(void* ptr);
double QFontMetricsF_AverageCharWidth(void* ptr);
double QFontMetricsF_CapHeight(void* ptr);
double QFontMetricsF_Descent(void* ptr);
double QFontMetricsF_Height(void* ptr);
double QFontMetricsF_Leading(void* ptr);
double QFontMetricsF_LeftBearing(void* ptr, void* ch);
double QFontMetricsF_LineSpacing(void* ptr);
double QFontMetricsF_LineWidth(void* ptr);
double QFontMetricsF_MaxWidth(void* ptr);
double QFontMetricsF_MinLeftBearing(void* ptr);
double QFontMetricsF_MinRightBearing(void* ptr);
double QFontMetricsF_OverlinePos(void* ptr);
double QFontMetricsF_RightBearing(void* ptr, void* ch);
double QFontMetricsF_StrikeOutPos(void* ptr);
double QFontMetricsF_UnderlinePos(void* ptr);
double QFontMetricsF_Width2(void* ptr, void* ch);
double QFontMetricsF_Width(void* ptr, char* text);
double QFontMetricsF_XHeight(void* ptr);
void* QGenericPlugin_NewQGenericPlugin(void* parent);
void* QGenericPlugin_Create(void* ptr, char* key, char* specification);
void QGenericPlugin_DestroyQGenericPlugin(void* ptr);
void* QGenericPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QGenericPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QGenericPlugin___dynamicPropertyNames_newList(void* ptr);
void* QGenericPlugin___findChildren_atList2(void* ptr, int i);
void QGenericPlugin___findChildren_setList2(void* ptr, void* i);
void* QGenericPlugin___findChildren_newList2(void* ptr);
void* QGenericPlugin___findChildren_atList3(void* ptr, int i);
void QGenericPlugin___findChildren_setList3(void* ptr, void* i);
void* QGenericPlugin___findChildren_newList3(void* ptr);
void* QGenericPlugin___findChildren_atList(void* ptr, int i);
void QGenericPlugin___findChildren_setList(void* ptr, void* i);
void* QGenericPlugin___findChildren_newList(void* ptr);
void* QGenericPlugin___children_atList(void* ptr, int i);
void QGenericPlugin___children_setList(void* ptr, void* i);
void* QGenericPlugin___children_newList(void* ptr);
char QGenericPlugin_EventDefault(void* ptr, void* e);
char QGenericPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void QGenericPlugin_ChildEventDefault(void* ptr, void* event);
void QGenericPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QGenericPlugin_CustomEventDefault(void* ptr, void* event);
void QGenericPlugin_DeleteLaterDefault(void* ptr);
void QGenericPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
void QGenericPlugin_TimerEventDefault(void* ptr, void* event);
void* QGenericPlugin_MetaObjectDefault(void* ptr);
void* QGenericPluginFactory_QGenericPluginFactory_Create(char* key, char* specification);
struct QtGui_PackedString QGenericPluginFactory_QGenericPluginFactory_Keys();
void* QGlyphRun_NewQGlyphRun();
void* QGlyphRun_NewQGlyphRun2(void* other);
void QGlyphRun_Clear(void* ptr);
void QGlyphRun_SetBoundingRect(void* ptr, void* boundingRect);
void QGlyphRun_SetFlag(void* ptr, long long flag, char enabled);
void QGlyphRun_SetFlags(void* ptr, long long flags);
void QGlyphRun_SetGlyphIndexes(void* ptr, void* glyphIndexes);
void QGlyphRun_SetOverline(void* ptr, char overline);
void QGlyphRun_SetPositions(void* ptr, void* positions);
void QGlyphRun_SetRawData(void* ptr, unsigned int glyphIndexArray, void* glyphPositionArray, int size);
void QGlyphRun_SetRawFont(void* ptr, void* rawFont);
void QGlyphRun_SetRightToLeft(void* ptr, char rightToLeft);
void QGlyphRun_SetStrikeOut(void* ptr, char strikeOut);
void QGlyphRun_SetUnderline(void* ptr, char underline);
void QGlyphRun_Swap(void* ptr, void* other);
void QGlyphRun_DestroyQGlyphRun(void* ptr);
long long QGlyphRun_Flags(void* ptr);
void* QGlyphRun_RawFont(void* ptr);
void* QGlyphRun_BoundingRect(void* ptr);
struct QtGui_PackedList QGlyphRun_Positions(void* ptr);
struct QtGui_PackedList QGlyphRun_GlyphIndexes(void* ptr);
char QGlyphRun_IsEmpty(void* ptr);
char QGlyphRun_IsRightToLeft(void* ptr);
char QGlyphRun_Overline(void* ptr);
char QGlyphRun_StrikeOut(void* ptr);
char QGlyphRun_Underline(void* ptr);
unsigned int QGlyphRun___setGlyphIndexes_glyphIndexes_atList(void* ptr, int i);
void QGlyphRun___setGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i);
void* QGlyphRun___setGlyphIndexes_glyphIndexes_newList(void* ptr);
void* QGlyphRun___setPositions_positions_atList(void* ptr, int i);
void QGlyphRun___setPositions_positions_setList(void* ptr, void* i);
void* QGlyphRun___setPositions_positions_newList(void* ptr);
void* QGlyphRun___positions_atList(void* ptr, int i);
void QGlyphRun___positions_setList(void* ptr, void* i);
void* QGlyphRun___positions_newList(void* ptr);
unsigned int QGlyphRun___glyphIndexes_atList(void* ptr, int i);
void QGlyphRun___glyphIndexes_setList(void* ptr, unsigned int i);
void* QGlyphRun___glyphIndexes_newList(void* ptr);
void QGradient_SetColorAt(void* ptr, double position, void* color);
void QGradient_SetCoordinateMode(void* ptr, long long mode);
void QGradient_SetSpread(void* ptr, long long method);
long long QGradient_CoordinateMode(void* ptr);
long long QGradient_Spread(void* ptr);
long long QGradient_Type(void* ptr);
void* QGuiApplication_QGuiApplication_Clipboard();
void* QGuiApplication_QGuiApplication_OverrideCursor();
void* QGuiApplication_QGuiApplication_Font();
void* QGuiApplication_NewQGuiApplication(int argc, char* argv);
void* QGuiApplication_QGuiApplication_WindowIcon();
void* QGuiApplication_QGuiApplication_InputMethod();
struct QtGui_PackedList QGuiApplication_QGuiApplication_Screens();
void* QGuiApplication_QGuiApplication_FocusObject();
void* QGuiApplication_QGuiApplication_Palette();
void* QGuiApplication_QGuiApplication_PrimaryScreen();
struct QtGui_PackedString QGuiApplication_QGuiApplication_ApplicationDisplayName();
struct QtGui_PackedString QGuiApplication_QGuiApplication_DesktopFileName();
struct QtGui_PackedString QGuiApplication_QGuiApplication_PlatformName();
void* QGuiApplication_QGuiApplication_StyleHints();
void* QGuiApplication_QGuiApplication_FocusWindow();
void* QGuiApplication_QGuiApplication_ModalWindow();
void* QGuiApplication_QGuiApplication_TopLevelAt(void* pos);
long long QGuiApplication_QGuiApplication_ApplicationState();
long long QGuiApplication_QGuiApplication_KeyboardModifiers();
long long QGuiApplication_QGuiApplication_QueryKeyboardModifiers();
long long QGuiApplication_QGuiApplication_LayoutDirection();
long long QGuiApplication_QGuiApplication_MouseButtons();
char QGuiApplication_QGuiApplication_DesktopSettingsAware();
char QGuiApplication_EventDefault(void* ptr, void* e);
char QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled();
char QGuiApplication_QGuiApplication_IsLeftToRight();
char QGuiApplication_QGuiApplication_IsRightToLeft();
char QGuiApplication_QGuiApplication_QuitOnLastWindowClosed();
int QGuiApplication_QGuiApplication_Exec();
void QGuiApplication_ConnectApplicationDisplayNameChanged(void* ptr);
void QGuiApplication_DisconnectApplicationDisplayNameChanged(void* ptr);
void QGuiApplication_ApplicationDisplayNameChanged(void* ptr);
void QGuiApplication_ConnectApplicationStateChanged(void* ptr);
void QGuiApplication_DisconnectApplicationStateChanged(void* ptr);
void QGuiApplication_ApplicationStateChanged(void* ptr, long long state);
void QGuiApplication_QGuiApplication_ChangeOverrideCursor(void* cursor);
void QGuiApplication_ConnectCommitDataRequest(void* ptr);
void QGuiApplication_DisconnectCommitDataRequest(void* ptr);
void QGuiApplication_CommitDataRequest(void* ptr, void* manager);
void QGuiApplication_ConnectFocusObjectChanged(void* ptr);
void QGuiApplication_DisconnectFocusObjectChanged(void* ptr);
void QGuiApplication_FocusObjectChanged(void* ptr, void* focusObject);
void QGuiApplication_ConnectFocusWindowChanged(void* ptr);
void QGuiApplication_DisconnectFocusWindowChanged(void* ptr);
void QGuiApplication_FocusWindowChanged(void* ptr, void* focusWindow);
void QGuiApplication_ConnectFontDatabaseChanged(void* ptr);
void QGuiApplication_DisconnectFontDatabaseChanged(void* ptr);
void QGuiApplication_FontDatabaseChanged(void* ptr);
void QGuiApplication_ConnectLastWindowClosed(void* ptr);
void QGuiApplication_DisconnectLastWindowClosed(void* ptr);
void QGuiApplication_LastWindowClosed(void* ptr);
void QGuiApplication_ConnectLayoutDirectionChanged(void* ptr);
void QGuiApplication_DisconnectLayoutDirectionChanged(void* ptr);
void QGuiApplication_LayoutDirectionChanged(void* ptr, long long direction);
void QGuiApplication_ConnectPaletteChanged(void* ptr);
void QGuiApplication_DisconnectPaletteChanged(void* ptr);
void QGuiApplication_PaletteChanged(void* ptr, void* palette);
void QGuiApplication_ConnectPrimaryScreenChanged(void* ptr);
void QGuiApplication_DisconnectPrimaryScreenChanged(void* ptr);
void QGuiApplication_PrimaryScreenChanged(void* ptr, void* screen);
void QGuiApplication_QGuiApplication_RestoreOverrideCursor();
void QGuiApplication_ConnectSaveStateRequest(void* ptr);
void QGuiApplication_DisconnectSaveStateRequest(void* ptr);
void QGuiApplication_SaveStateRequest(void* ptr, void* manager);
void QGuiApplication_ConnectScreenAdded(void* ptr);
void QGuiApplication_DisconnectScreenAdded(void* ptr);
void QGuiApplication_ScreenAdded(void* ptr, void* screen);
void QGuiApplication_ConnectScreenRemoved(void* ptr);
void QGuiApplication_DisconnectScreenRemoved(void* ptr);
void QGuiApplication_ScreenRemoved(void* ptr, void* screen);
void QGuiApplication_QGuiApplication_SetApplicationDisplayName(char* name);
void QGuiApplication_QGuiApplication_SetDesktopFileName(char* name);
void QGuiApplication_QGuiApplication_SetDesktopSettingsAware(char on);
void QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(char enabled);
void QGuiApplication_QGuiApplication_SetFont(void* font);
void QGuiApplication_QGuiApplication_SetLayoutDirection(long long direction);
void QGuiApplication_QGuiApplication_SetOverrideCursor(void* cursor);
void QGuiApplication_QGuiApplication_SetPalette(void* pal);
void QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(char quit);
void QGuiApplication_QGuiApplication_SetWindowIcon(void* icon);
void QGuiApplication_QGuiApplication_Sync();
void QGuiApplication_DestroyQGuiApplication(void* ptr);
void QGuiApplication_DestroyQGuiApplicationDefault(void* ptr);
struct QtGui_PackedString QGuiApplication_SessionId(void* ptr);
struct QtGui_PackedString QGuiApplication_SessionKey(void* ptr);
char QGuiApplication_IsSavingSession(void* ptr);
char QGuiApplication_IsSessionRestored(void* ptr);
double QGuiApplication_DevicePixelRatio(void* ptr);
void* QGuiApplication___screens_atList(void* ptr, int i);
void QGuiApplication___screens_setList(void* ptr, void* i);
void* QGuiApplication___screens_newList(void* ptr);
void* QGuiApplication___dynamicPropertyNames_atList(void* ptr, int i);
void QGuiApplication___dynamicPropertyNames_setList(void* ptr, void* i);
void* QGuiApplication___dynamicPropertyNames_newList(void* ptr);
void* QGuiApplication___findChildren_atList2(void* ptr, int i);
void QGuiApplication___findChildren_setList2(void* ptr, void* i);
void* QGuiApplication___findChildren_newList2(void* ptr);
void* QGuiApplication___findChildren_atList3(void* ptr, int i);
void QGuiApplication___findChildren_setList3(void* ptr, void* i);
void* QGuiApplication___findChildren_newList3(void* ptr);
void* QGuiApplication___findChildren_atList(void* ptr, int i);
void QGuiApplication___findChildren_setList(void* ptr, void* i);
void* QGuiApplication___findChildren_newList(void* ptr);
void* QGuiApplication___children_atList(void* ptr, int i);
void QGuiApplication___children_setList(void* ptr, void* i);
void* QGuiApplication___children_newList(void* ptr);
void QGuiApplication_QuitDefault(void* ptr);
char QGuiApplication_EventFilterDefault(void* ptr, void* watched, void* event);
void QGuiApplication_ChildEventDefault(void* ptr, void* event);
void QGuiApplication_ConnectNotifyDefault(void* ptr, void* sign);
void QGuiApplication_CustomEventDefault(void* ptr, void* event);
void QGuiApplication_DeleteLaterDefault(void* ptr);
void QGuiApplication_DisconnectNotifyDefault(void* ptr, void* sign);
void QGuiApplication_TimerEventDefault(void* ptr, void* event);
void* QGuiApplication_MetaObjectDefault(void* ptr);
void* QHelpEvent_NewQHelpEvent(long long ty, void* pos, void* globalPos);
void* QHelpEvent_GlobalPos(void* ptr);
void* QHelpEvent_Pos(void* ptr);
int QHelpEvent_GlobalX(void* ptr);
int QHelpEvent_GlobalY(void* ptr);
int QHelpEvent_X(void* ptr);
int QHelpEvent_Y(void* ptr);
void* QHideEvent_NewQHideEvent();
void* QHoverEvent_NewQHoverEvent(long long ty, void* pos, void* oldPos, long long modifiers);
void* QHoverEvent_OldPos(void* ptr);
void* QHoverEvent_Pos(void* ptr);
void* QHoverEvent_OldPosF(void* ptr);
void* QHoverEvent_PosF(void* ptr);
void* QIcon_QIcon_FromTheme(char* name);
void* QIcon_QIcon_FromTheme2(char* name, void* fallback);
void* QIcon_NewQIcon();
void* QIcon_NewQIcon4(void* other);
void* QIcon_NewQIcon6(void* engine);
void* QIcon_NewQIcon3(void* other);
void* QIcon_NewQIcon2(void* pixmap);
void* QIcon_NewQIcon5(char* fileName);
struct QtGui_PackedString QIcon_QIcon_ThemeName();
struct QtGui_PackedString QIcon_QIcon_ThemeSearchPaths();
char QIcon_QIcon_HasThemeIcon(char* name);
void QIcon_AddFile(void* ptr, char* fileName, void* size, long long mode, long long state);
void QIcon_AddPixmap(void* ptr, void* pixmap, long long mode, long long state);
void QIcon_SetIsMask(void* ptr, char isMask);
void QIcon_QIcon_SetThemeName(char* name);
void QIcon_QIcon_SetThemeSearchPaths(char* paths);
void QIcon_Swap(void* ptr, void* other);
void QIcon_DestroyQIcon(void* ptr);
struct QtGui_PackedList QIcon_AvailableSizes(void* ptr, long long mode, long long state);
void* QIcon_Pixmap4(void* ptr, void* window, void* size, long long mode, long long state);
void* QIcon_Pixmap(void* ptr, void* size, long long mode, long long state);
void* QIcon_Pixmap3(void* ptr, int extent, long long mode, long long state);
void* QIcon_Pixmap2(void* ptr, int w, int h, long long mode, long long state);
void* QIcon_ActualSize2(void* ptr, void* window, void* size, long long mode, long long state);
void* QIcon_ActualSize(void* ptr, void* size, long long mode, long long state);
struct QtGui_PackedString QIcon_Name(void* ptr);
char QIcon_IsMask(void* ptr);
char QIcon_IsNull(void* ptr);
long long QIcon_CacheKey(void* ptr);
void QIcon_Paint(void* ptr, void* painter, void* rect, long long alignment, long long mode, long long state);
void QIcon_Paint2(void* ptr, void* painter, int x, int y, int w, int h, long long alignment, long long mode, long long state);
void* QIcon___availableSizes_atList(void* ptr, int i);
void QIcon___availableSizes_setList(void* ptr, void* i);
void* QIcon___availableSizes_newList(void* ptr);
void* QIconDragEvent_NewQIconDragEvent();
void* QIconEngine_NewQIconEngine();
void* QIconEngine_Pixmap(void* ptr, void* size, long long mode, long long state);
void* QIconEngine_PixmapDefault(void* ptr, void* size, long long mode, long long state);
void* QIconEngine_ActualSize(void* ptr, void* size, long long mode, long long state);
void* QIconEngine_ActualSizeDefault(void* ptr, void* size, long long mode, long long state);
char QIconEngine_Read(void* ptr, void* in);
char QIconEngine_ReadDefault(void* ptr, void* in);
void QIconEngine_AddFile(void* ptr, char* fileName, void* size, long long mode, long long state);
void QIconEngine_AddFileDefault(void* ptr, char* fileName, void* size, long long mode, long long state);
void QIconEngine_AddPixmap(void* ptr, void* pixmap, long long mode, long long state);
void QIconEngine_AddPixmapDefault(void* ptr, void* pixmap, long long mode, long long state);
void QIconEngine_Paint(void* ptr, void* painter, void* rect, long long mode, long long state);
void QIconEngine_Virtual_hook(void* ptr, int id, void* data);
void QIconEngine_Virtual_hookDefault(void* ptr, int id, void* data);
void QIconEngine_DestroyQIconEngine(void* ptr);
void QIconEngine_DestroyQIconEngineDefault(void* ptr);
void* QIconEngine_Clone(void* ptr);
struct QtGui_PackedList QIconEngine_AvailableSizes(void* ptr, long long mode, long long state);
struct QtGui_PackedList QIconEngine_AvailableSizesDefault(void* ptr, long long mode, long long state);
struct QtGui_PackedString QIconEngine_IconName(void* ptr);
struct QtGui_PackedString QIconEngine_IconNameDefault(void* ptr);
struct QtGui_PackedString QIconEngine_Key(void* ptr);
struct QtGui_PackedString QIconEngine_KeyDefault(void* ptr);
char QIconEngine_IsNull(void* ptr);
char QIconEngine_Write(void* ptr, void* out);
char QIconEngine_WriteDefault(void* ptr, void* out);
void* QIconEngine___availableSizes_atList(void* ptr, int i);
void QIconEngine___availableSizes_setList(void* ptr, void* i);
void* QIconEngine___availableSizes_newList(void* ptr);
void* QIconEnginePlugin_Create(void* ptr, char* filename);
void* QIconEnginePlugin_NewQIconEnginePlugin(void* parent);
void QIconEnginePlugin_DestroyQIconEnginePlugin(void* ptr);
void* QIconEnginePlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QIconEnginePlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QIconEnginePlugin___dynamicPropertyNames_newList(void* ptr);
void* QIconEnginePlugin___findChildren_atList2(void* ptr, int i);
void QIconEnginePlugin___findChildren_setList2(void* ptr, void* i);
void* QIconEnginePlugin___findChildren_newList2(void* ptr);
void* QIconEnginePlugin___findChildren_atList3(void* ptr, int i);
void QIconEnginePlugin___findChildren_setList3(void* ptr, void* i);
void* QIconEnginePlugin___findChildren_newList3(void* ptr);
void* QIconEnginePlugin___findChildren_atList(void* ptr, int i);
void QIconEnginePlugin___findChildren_setList(void* ptr, void* i);
void* QIconEnginePlugin___findChildren_newList(void* ptr);
void* QIconEnginePlugin___children_atList(void* ptr, int i);
void QIconEnginePlugin___children_setList(void* ptr, void* i);
void* QIconEnginePlugin___children_newList(void* ptr);
char QIconEnginePlugin_EventDefault(void* ptr, void* e);
char QIconEnginePlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void QIconEnginePlugin_ChildEventDefault(void* ptr, void* event);
void QIconEnginePlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QIconEnginePlugin_CustomEventDefault(void* ptr, void* event);
void QIconEnginePlugin_DeleteLaterDefault(void* ptr);
void QIconEnginePlugin_DisconnectNotifyDefault(void* ptr, void* sign);
void QIconEnginePlugin_TimerEventDefault(void* ptr, void* event);
void* QIconEnginePlugin_MetaObjectDefault(void* ptr);
void* QImage_QImage_FromData2(void* data, char* format);
void* QImage_QImage_FromData(char* data, int size, char* format);
void* QImage_NewQImage();
void* QImage_NewQImage11(void* other);
void* QImage_NewQImage10(void* image);
void* QImage_NewQImage2(void* size, long long format);
void* QImage_NewQImage9(char* fileName, char* format);
void* QImage_NewQImage3(int width, int height, long long format);
long long QImage_QImage_ToImageFormat(void* format);
void* QImage_QImage_ToPixelFormat(long long format);
void* QImage_QImage_TrueMatrix2(void* matrix, int width, int height);
char QImage_Load2(void* ptr, void* device, char* format);
char QImage_Load(void* ptr, char* fileName, char* format);
char QImage_LoadFromData2(void* ptr, void* data, char* format);
char QImage_LoadFromData(void* ptr, char* data, int len, char* format);
struct QtGui_PackedString QImage_Bits(void* ptr);
struct QtGui_PackedString QImage_ScanLine(void* ptr, int i);
void QImage_Fill3(void* ptr, long long color);
void QImage_Fill2(void* ptr, void* color);
void QImage_Fill(void* ptr, unsigned int pixelValue);
void QImage_InvertPixels(void* ptr, long long mode);
void QImage_SetColorCount(void* ptr, int colorCount);
void QImage_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QImage_SetDotsPerMeterX(void* ptr, int x);
void QImage_SetDotsPerMeterY(void* ptr, int y);
void QImage_SetOffset(void* ptr, void* offset);
void QImage_SetPixel(void* ptr, void* position, unsigned int index_or_rgb);
void QImage_SetPixel2(void* ptr, int x, int y, unsigned int index_or_rgb);
void QImage_SetPixelColor(void* ptr, void* position, void* color);
void QImage_SetPixelColor2(void* ptr, int x, int y, void* color);
void QImage_SetText(void* ptr, char* key, char* text);
void QImage_Swap(void* ptr, void* other);
void QImage_DestroyQImage(void* ptr);
long long QImage_Format(void* ptr);
void* QImage_PixelColor(void* ptr, void* position);
void* QImage_PixelColor2(void* ptr, int x, int y);
void* QImage_ConvertToFormat(void* ptr, long long format, long long flags);
void* QImage_Copy(void* ptr, void* rectangle);
void* QImage_Copy2(void* ptr, int x, int y, int width, int height);
void* QImage_CreateAlphaMask(void* ptr, long long flags);
void* QImage_CreateHeuristicMask(void* ptr, char clipTight);
void* QImage_Mirrored(void* ptr, char horizontal, char vertical);
void* QImage_RgbSwapped(void* ptr);
void* QImage_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode);
void* QImage_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode);
void* QImage_ScaledToHeight(void* ptr, int height, long long mode);
void* QImage_ScaledToWidth(void* ptr, int width, long long mode);
void* QImage_SmoothScaled(void* ptr, int w, int h);
void* QImage_Transformed2(void* ptr, void* matrix, long long mode);
void* QImage_PixelFormat(void* ptr);
void* QImage_Offset(void* ptr);
void* QImage_Rect(void* ptr);
void* QImage_Size(void* ptr);
struct QtGui_PackedString QImage_Text(void* ptr, char* key);
struct QtGui_PackedString QImage_TextKeys(void* ptr);
char QImage_AllGray(void* ptr);
char QImage_HasAlphaChannel(void* ptr);
char QImage_IsGrayscale(void* ptr);
char QImage_IsNull(void* ptr);
char QImage_Save2(void* ptr, void* device, char* format, int quality);
char QImage_Save(void* ptr, char* fileName, char* format, int quality);
char QImage_Valid(void* ptr, void* pos);
char QImage_Valid2(void* ptr, int x, int y);
struct QtGui_PackedString QImage_Bits2(void* ptr);
struct QtGui_PackedString QImage_ConstBits(void* ptr);
struct QtGui_PackedString QImage_ConstScanLine(void* ptr, int i);
struct QtGui_PackedString QImage_ScanLine2(void* ptr, int i);
int QImage_BitPlaneCount(void* ptr);
int QImage_ByteCount(void* ptr);
int QImage_BytesPerLine(void* ptr);
int QImage_DotsPerMeterX(void* ptr);
int QImage_DotsPerMeterY(void* ptr);
int QImage_PixelIndex(void* ptr, void* position);
int QImage_PixelIndex2(void* ptr, int x, int y);
long long QImage_CacheKey(void* ptr);
double QImage_DevicePixelRatio(void* ptr);
void* QImage_ToVariant(void* ptr);
void* QImage___setColorTable_colors_newList(void* ptr);
void* QImage___convertToFormat_colorTable_newList2(void* ptr);
void* QImage___colorTable_newList(void* ptr);
void* QImage_PaintEngine(void* ptr);
void* QImage_PaintEngineDefault(void* ptr);
void* QImageIOHandler_NewQImageIOHandler();
char QImageIOHandler_JumpToImage(void* ptr, int imageNumber);
char QImageIOHandler_JumpToImageDefault(void* ptr, int imageNumber);
char QImageIOHandler_JumpToNextImage(void* ptr);
char QImageIOHandler_JumpToNextImageDefault(void* ptr);
char QImageIOHandler_Read(void* ptr, void* image);
char QImageIOHandler_Write(void* ptr, void* image);
char QImageIOHandler_WriteDefault(void* ptr, void* image);
void QImageIOHandler_SetDevice(void* ptr, void* device);
void QImageIOHandler_SetFormat(void* ptr, void* format);
void QImageIOHandler_SetOption(void* ptr, long long option, void* value);
void QImageIOHandler_SetOptionDefault(void* ptr, long long option, void* value);
void QImageIOHandler_DestroyQImageIOHandler(void* ptr);
void QImageIOHandler_DestroyQImageIOHandlerDefault(void* ptr);
void* QImageIOHandler_Format(void* ptr);
void* QImageIOHandler_Device(void* ptr);
void* QImageIOHandler_CurrentImageRect(void* ptr);
void* QImageIOHandler_CurrentImageRectDefault(void* ptr);
void* QImageIOHandler_Option(void* ptr, long long option);
void* QImageIOHandler_OptionDefault(void* ptr, long long option);
char QImageIOHandler_CanRead(void* ptr);
char QImageIOHandler_SupportsOption(void* ptr, long long option);
char QImageIOHandler_SupportsOptionDefault(void* ptr, long long option);
int QImageIOHandler_CurrentImageNumber(void* ptr);
int QImageIOHandler_CurrentImageNumberDefault(void* ptr);
int QImageIOHandler_ImageCount(void* ptr);
int QImageIOHandler_ImageCountDefault(void* ptr);
int QImageIOHandler_LoopCount(void* ptr);
int QImageIOHandler_LoopCountDefault(void* ptr);
int QImageIOHandler_NextImageDelay(void* ptr);
int QImageIOHandler_NextImageDelayDefault(void* ptr);
void QImageIOHandler_SetFormat2(void* ptr, void* format);
void* QImageIOPlugin_NewQImageIOPlugin(void* parent);
void QImageIOPlugin_DestroyQImageIOPlugin(void* ptr);
void QImageIOPlugin_DestroyQImageIOPluginDefault(void* ptr);
long long QImageIOPlugin_Capabilities(void* ptr, void* device, void* format);
void* QImageIOPlugin_Create(void* ptr, void* device, void* format);
void* QImageIOPlugin___dynamicPropertyNames_atList(void* ptr, int i);
void QImageIOPlugin___dynamicPropertyNames_setList(void* ptr, void* i);
void* QImageIOPlugin___dynamicPropertyNames_newList(void* ptr);
void* QImageIOPlugin___findChildren_atList2(void* ptr, int i);
void QImageIOPlugin___findChildren_setList2(void* ptr, void* i);
void* QImageIOPlugin___findChildren_newList2(void* ptr);
void* QImageIOPlugin___findChildren_atList3(void* ptr, int i);
void QImageIOPlugin___findChildren_setList3(void* ptr, void* i);
void* QImageIOPlugin___findChildren_newList3(void* ptr);
void* QImageIOPlugin___findChildren_atList(void* ptr, int i);
void QImageIOPlugin___findChildren_setList(void* ptr, void* i);
void* QImageIOPlugin___findChildren_newList(void* ptr);
void* QImageIOPlugin___children_atList(void* ptr, int i);
void QImageIOPlugin___children_setList(void* ptr, void* i);
void* QImageIOPlugin___children_newList(void* ptr);
char QImageIOPlugin_EventDefault(void* ptr, void* e);
char QImageIOPlugin_EventFilterDefault(void* ptr, void* watched, void* event);
void QImageIOPlugin_ChildEventDefault(void* ptr, void* event);
void QImageIOPlugin_ConnectNotifyDefault(void* ptr, void* sign);
void QImageIOPlugin_CustomEventDefault(void* ptr, void* event);
void QImageIOPlugin_DeleteLaterDefault(void* ptr);
void QImageIOPlugin_DisconnectNotifyDefault(void* ptr, void* sign);
void QImageIOPlugin_TimerEventDefault(void* ptr, void* event);
void* QImageIOPlugin_MetaObjectDefault(void* ptr);
void* QImageReader_QImageReader_ImageFormat3(void* device);
void* QImageReader_QImageReader_ImageFormat2(char* fileName);
void* QImageReader_Read(void* ptr);
void* QImageReader_NewQImageReader();
void* QImageReader_NewQImageReader2(void* device, void* format);
void* QImageReader_NewQImageReader3(char* fileName, void* format);
struct QtGui_PackedList QImageReader_QImageReader_SupportedImageFormats();
struct QtGui_PackedList QImageReader_QImageReader_SupportedMimeTypes();
char QImageReader_JumpToImage(void* ptr, int imageNumber);
char QImageReader_JumpToNextImage(void* ptr);
char QImageReader_Read2(void* ptr, void* image);
void QImageReader_SetAutoDetectImageFormat(void* ptr, char enabled);
void QImageReader_SetAutoTransform(void* ptr, char enabled);
void QImageReader_SetBackgroundColor(void* ptr, void* color);
void QImageReader_SetClipRect(void* ptr, void* rect);
void QImageReader_SetDecideFormatFromContent(void* ptr, char ignored);
void QImageReader_SetDevice(void* ptr, void* device);
void QImageReader_SetFileName(void* ptr, char* fileName);
void QImageReader_SetFormat(void* ptr, void* format);
void QImageReader_SetGamma(void* ptr, float gamma);
void QImageReader_SetQuality(void* ptr, int quality);
void QImageReader_SetScaledClipRect(void* ptr, void* rect);
void QImageReader_SetScaledSize(void* ptr, void* size);
void QImageReader_DestroyQImageReader(void* ptr);
long long QImageReader_Error(void* ptr);
void* QImageReader_Format(void* ptr);
void* QImageReader_SubType(void* ptr);
void* QImageReader_BackgroundColor(void* ptr);
void* QImageReader_Device(void* ptr);
long long QImageReader_ImageFormat(void* ptr);
long long QImageReader_Transformation(void* ptr);
struct QtGui_PackedList QImageReader_SupportedSubTypes(void* ptr);
void* QImageReader_ClipRect(void* ptr);
void* QImageReader_CurrentImageRect(void* ptr);
void* QImageReader_ScaledClipRect(void* ptr);
void* QImageReader_ScaledSize(void* ptr);
void* QImageReader_Size(void* ptr);
struct QtGui_PackedString QImageReader_ErrorString(void* ptr);
struct QtGui_PackedString QImageReader_FileName(void* ptr);
struct QtGui_PackedString QImageReader_Text(void* ptr, char* key);
struct QtGui_PackedString QImageReader_TextKeys(void* ptr);
char QImageReader_AutoDetectImageFormat(void* ptr);
char QImageReader_AutoTransform(void* ptr);
char QImageReader_CanRead(void* ptr);
char QImageReader_DecideFormatFromContent(void* ptr);
char QImageReader_SupportsAnimation(void* ptr);
char QImageReader_SupportsOption(void* ptr, long long option);
float QImageReader_Gamma(void* ptr);
int QImageReader_CurrentImageNumber(void* ptr);
int QImageReader_ImageCount(void* ptr);
int QImageReader_LoopCount(void* ptr);
int QImageReader_NextImageDelay(void* ptr);
int QImageReader_Quality(void* ptr);
void* QImageReader___supportedImageFormats_atList(void* ptr, int i);
void QImageReader___supportedImageFormats_setList(void* ptr, void* i);
void* QImageReader___supportedImageFormats_newList(void* ptr);
void* QImageReader___supportedMimeTypes_atList(void* ptr, int i);
void QImageReader___supportedMimeTypes_setList(void* ptr, void* i);
void* QImageReader___supportedMimeTypes_newList(void* ptr);
void* QImageReader___supportedSubTypes_atList(void* ptr, int i);
void QImageReader___supportedSubTypes_setList(void* ptr, void* i);
void* QImageReader___supportedSubTypes_newList(void* ptr);
void* QImageWriter_NewQImageWriter();
void* QImageWriter_NewQImageWriter2(void* device, void* format);
void* QImageWriter_NewQImageWriter3(char* fileName, void* format);
struct QtGui_PackedList QImageWriter_QImageWriter_SupportedImageFormats();
struct QtGui_PackedList QImageWriter_QImageWriter_SupportedMimeTypes();
char QImageWriter_Write(void* ptr, void* image);
void QImageWriter_SetCompression(void* ptr, int compression);
void QImageWriter_SetDevice(void* ptr, void* device);
void QImageWriter_SetFileName(void* ptr, char* fileName);
void QImageWriter_SetFormat(void* ptr, void* format);
void QImageWriter_SetGamma(void* ptr, float gamma);
void QImageWriter_SetOptimizedWrite(void* ptr, char optimize);
void QImageWriter_SetProgressiveScanWrite(void* ptr, char progressive);
void QImageWriter_SetQuality(void* ptr, int quality);
void QImageWriter_SetSubType(void* ptr, void* ty);
void QImageWriter_SetText(void* ptr, char* key, char* text);
void QImageWriter_SetTransformation(void* ptr, long long transform);
void QImageWriter_DestroyQImageWriter(void* ptr);
long long QImageWriter_Error(void* ptr);
void* QImageWriter_Format(void* ptr);
void* QImageWriter_SubType(void* ptr);
void* QImageWriter_Device(void* ptr);
long long QImageWriter_Transformation(void* ptr);
struct QtGui_PackedList QImageWriter_SupportedSubTypes(void* ptr);
struct QtGui_PackedString QImageWriter_ErrorString(void* ptr);
struct QtGui_PackedString QImageWriter_FileName(void* ptr);
char QImageWriter_CanWrite(void* ptr);
char QImageWriter_OptimizedWrite(void* ptr);
char QImageWriter_ProgressiveScanWrite(void* ptr);
char QImageWriter_SupportsOption(void* ptr, long long option);
float QImageWriter_Gamma(void* ptr);
int QImageWriter_Compression(void* ptr);
int QImageWriter_Quality(void* ptr);
void* QImageWriter___supportedImageFormats_atList(void* ptr, int i);
void QImageWriter___supportedImageFormats_setList(void* ptr, void* i);
void* QImageWriter___supportedImageFormats_newList(void* ptr);
void* QImageWriter___supportedMimeTypes_atList(void* ptr, int i);
void QImageWriter___supportedMimeTypes_setList(void* ptr, void* i);
void* QImageWriter___supportedMimeTypes_newList(void* ptr);
void* QImageWriter___supportedSubTypes_atList(void* ptr, int i);
void QImageWriter___supportedSubTypes_setList(void* ptr, void* i);
void* QImageWriter___supportedSubTypes_newList(void* ptr);
long long QInputEvent_Modifiers(void* ptr);
unsigned long QInputEvent_Timestamp(void* ptr);
long long QInputEvent_ModState(void* ptr);
void QInputEvent_SetModState(void* ptr, long long vqt);
unsigned long QInputEvent_Ts(void* ptr);
void QInputEvent_SetTs(void* ptr, unsigned long vul);
void* QInputMethod_QInputMethod_QueryFocusObject(long long query, void* argument);
void QInputMethod_ConnectAnchorRectangleChanged(void* ptr);
void QInputMethod_DisconnectAnchorRectangleChanged(void* ptr);
void QInputMethod_AnchorRectangleChanged(void* ptr);
void QInputMethod_ConnectAnimatingChanged(void* ptr);
void QInputMethod_DisconnectAnimatingChanged(void* ptr);
void QInputMethod_AnimatingChanged(void* ptr);
void QInputMethod_Commit(void* ptr);
void QInputMethod_CommitDefault(void* ptr);
void QInputMethod_ConnectCursorRectangleChanged(void* ptr);
void QInputMethod_DisconnectCursorRectangleChanged(void* ptr);
void QInputMethod_CursorRectangleChanged(void* ptr);
void QInputMethod_Hide(void* ptr);
void QInputMethod_HideDefault(void* ptr);
void QInputMethod_ConnectInputDirectionChanged(void* ptr);
void QInputMethod_DisconnectInputDirectionChanged(void* ptr);
void QInputMethod_InputDirectionChanged(void* ptr, long long newDirection);
void QInputMethod_ConnectInputItemClipRectangleChanged(void* ptr);
void QInputMethod_DisconnectInputItemClipRectangleChanged(void* ptr);
void QInputMethod_InputItemClipRectangleChanged(void* ptr);
void QInputMethod_InvokeAction(void* ptr, long long a, int cursorPosition);
void QInputMethod_InvokeActionDefault(void* ptr, long long a, int cursorPosition);
void QInputMethod_ConnectKeyboardRectangleChanged(void* ptr);
void QInputMethod_DisconnectKeyboardRectangleChanged(void* ptr);
void QInputMethod_KeyboardRectangleChanged(void* ptr);
void QInputMethod_ConnectLocaleChanged(void* ptr);
void QInputMethod_DisconnectLocaleChanged(void* ptr);
void QInputMethod_LocaleChanged(void* ptr);
void QInputMethod_Reset(void* ptr);
void QInputMethod_ResetDefault(void* ptr);
void QInputMethod_SetInputItemRectangle(void* ptr, void* rect);
void QInputMethod_SetInputItemTransform(void* ptr, void* transform);
void QInputMethod_SetVisible(void* ptr, char visible);
void QInputMethod_Show(void* ptr);
void QInputMethod_ShowDefault(void* ptr);
void QInputMethod_Update(void* ptr, long long queries);
void QInputMethod_UpdateDefault(void* ptr, long long queries);
void QInputMethod_ConnectVisibleChanged(void* ptr);
void QInputMethod_DisconnectVisibleChanged(void* ptr);
void QInputMethod_VisibleChanged(void* ptr);
void* QInputMethod_Locale(void* ptr);
void* QInputMethod_AnchorRectangle(void* ptr);
void* QInputMethod_CursorRectangle(void* ptr);
void* QInputMethod_InputItemClipRectangle(void* ptr);
void* QInputMethod_InputItemRectangle(void* ptr);
void* QInputMethod_KeyboardRectangle(void* ptr);
void* QInputMethod_InputItemTransform(void* ptr);
long long QInputMethod_InputDirection(void* ptr);
char QInputMethod_IsAnimating(void* ptr);
char QInputMethod_IsVisible(void* ptr);
void* QInputMethod___dynamicPropertyNames_atList(void* ptr, int i);
void QInputMethod___dynamicPropertyNames_setList(void* ptr, void* i);
void* QInputMethod___dynamicPropertyNames_newList(void* ptr);
void* QInputMethod___findChildren_atList2(void* ptr, int i);
void QInputMethod___findChildren_setList2(void* ptr, void* i);
void* QInputMethod___findChildren_newList2(void* ptr);
void* QInputMethod___findChildren_atList3(void* ptr, int i);
void QInputMethod___findChildren_setList3(void* ptr, void* i);
void* QInputMethod___findChildren_newList3(void* ptr);
void* QInputMethod___findChildren_atList(void* ptr, int i);
void QInputMethod___findChildren_setList(void* ptr, void* i);
void* QInputMethod___findChildren_newList(void* ptr);
void* QInputMethod___children_atList(void* ptr, int i);
void QInputMethod___children_setList(void* ptr, void* i);
void* QInputMethod___children_newList(void* ptr);
char QInputMethod_EventDefault(void* ptr, void* e);
char QInputMethod_EventFilterDefault(void* ptr, void* watched, void* event);
void QInputMethod_ChildEventDefault(void* ptr, void* event);
void QInputMethod_ConnectNotifyDefault(void* ptr, void* sign);
void QInputMethod_CustomEventDefault(void* ptr, void* event);
void QInputMethod_DeleteLaterDefault(void* ptr);
void QInputMethod_DisconnectNotifyDefault(void* ptr, void* sign);
void QInputMethod_TimerEventDefault(void* ptr, void* event);
void* QInputMethod_MetaObjectDefault(void* ptr);
void* QInputMethodEvent_NewQInputMethodEvent3(void* other);
void QInputMethodEvent_SetCommitString(void* ptr, char* commitString, int replaceFrom, int replaceLength);
void QInputMethodEvent_DestroyQInputMethodEvent(void* ptr);
void* QInputMethodEvent_NewQInputMethodEvent();
struct QtGui_PackedString QInputMethodEvent_CommitString(void* ptr);
struct QtGui_PackedString QInputMethodEvent_PreeditString(void* ptr);
int QInputMethodEvent_ReplacementLength(void* ptr);
int QInputMethodEvent_ReplacementStart(void* ptr);
void* QInputMethodQueryEvent_NewQInputMethodQueryEvent(long long queries);
void QInputMethodQueryEvent_SetValue(void* ptr, long long query, void* value);
void* QInputMethodQueryEvent_Value(void* ptr, long long query);
long long QInputMethodQueryEvent_Queries(void* ptr);
void* QIntValidator_NewQIntValidator(void* parent);
void* QIntValidator_NewQIntValidator2(int minimum, int maximum, void* parent);
void QIntValidator_SetBottom(void* ptr, int vin);
void QIntValidator_SetRange(void* ptr, int bottom, int top);
void QIntValidator_SetRangeDefault(void* ptr, int bottom, int top);
void QIntValidator_SetTop(void* ptr, int vin);
void QIntValidator_DestroyQIntValidator(void* ptr);
long long QIntValidator_Validate(void* ptr, char* input, int pos);
long long QIntValidator_ValidateDefault(void* ptr, char* input, int pos);
int QIntValidator_Bottom(void* ptr);
int QIntValidator_Top(void* ptr);
void* QKeyEvent_NewQKeyEvent(long long ty, int key, long long modifiers, char* text, char autorep, unsigned short count);
void* QKeyEvent_NewQKeyEvent2(long long ty, int key, long long modifiers, unsigned int nativeScanCode, unsigned int nativeVirtualKey, unsigned int nativeModifiers, char* text, char autorep, unsigned short count);
struct QtGui_PackedString QKeyEvent_Text(void* ptr);
char QKeyEvent_IsAutoRepeat(void* ptr);
char QKeyEvent_Matches(void* ptr, long long key);
int QKeyEvent_Count(void* ptr);
int QKeyEvent_Key(void* ptr);
unsigned int QKeyEvent_NativeModifiers(void* ptr);
unsigned int QKeyEvent_NativeScanCode(void* ptr);
unsigned int QKeyEvent_NativeVirtualKey(void* ptr);
unsigned short QKeyEvent_C(void* ptr);
void QKeyEvent_SetC(void* ptr, unsigned short vus);
int QKeyEvent_K(void* ptr);
void QKeyEvent_SetK(void* ptr, int vin);
unsigned int QKeyEvent_NModifiers(void* ptr);
void QKeyEvent_SetNModifiers(void* ptr, unsigned int vqu);
unsigned int QKeyEvent_NScanCode(void* ptr);
void QKeyEvent_SetNScanCode(void* ptr, unsigned int vqu);
unsigned int QKeyEvent_NVirtualKey(void* ptr);
void QKeyEvent_SetNVirtualKey(void* ptr, unsigned int vqu);
struct QtGui_PackedString QKeyEvent_Txt(void* ptr);
void QKeyEvent_SetTxt(void* ptr, char* vqs);
void* QKeySequence_QKeySequence_FromString(char* str, long long format);
void* QKeySequence_QKeySequence_Mnemonic(char* text);
void* QKeySequence_NewQKeySequence();
void* QKeySequence_NewQKeySequence5(long long key);
void* QKeySequence_NewQKeySequence4(void* keysequence);
void* QKeySequence_NewQKeySequence2(char* key, long long format);
void* QKeySequence_NewQKeySequence3(int k1, int k2, int k3, int k4);
struct QtGui_PackedList QKeySequence_QKeySequence_KeyBindings(long long key);
struct QtGui_PackedList QKeySequence_QKeySequence_ListFromString(char* str, long long format);
struct QtGui_PackedString QKeySequence_QKeySequence_ListToString(void* list, long long format);
void QKeySequence_Swap(void* ptr, void* other);
void QKeySequence_DestroyQKeySequence(void* ptr);
struct QtGui_PackedString QKeySequence_ToString(void* ptr, long long format);
long long QKeySequence_Matches(void* ptr, void* seq);
char QKeySequence_IsEmpty(void* ptr);
int QKeySequence_Count(void* ptr);
void* QKeySequence___keyBindings_atList(void* ptr, int i);
void QKeySequence___keyBindings_setList(void* ptr, void* i);
void* QKeySequence___keyBindings_newList(void* ptr);
void* QKeySequence___listFromString_atList(void* ptr, int i);
void QKeySequence___listFromString_setList(void* ptr, void* i);
void* QKeySequence___listFromString_newList(void* ptr);
void* QKeySequence___listToString_list_atList(void* ptr, int i);
void QKeySequence___listToString_list_setList(void* ptr, void* i);
void* QKeySequence___listToString_list_newList(void* ptr);
void* QLinearGradient_NewQLinearGradient();
void* QLinearGradient_NewQLinearGradient2(void* start, void* finalStop);
void* QLinearGradient_NewQLinearGradient3(double x1, double y1, double x2, double y2);
void QLinearGradient_SetFinalStop(void* ptr, void* stop);
void QLinearGradient_SetFinalStop2(void* ptr, double x, double y);
void QLinearGradient_SetStart(void* ptr, void* start);
void QLinearGradient_SetStart2(void* ptr, double x, double y);
void* QLinearGradient_FinalStop(void* ptr);
void* QLinearGradient_Start(void* ptr);
void* QMatrix4x4_NewQMatrix4x4();
void* QMatrix4x4_NewQMatrix4x47(void* transform);
void* QMatrix4x4_NewQMatrix4x43(float values);
void* QMatrix4x4_NewQMatrix4x44(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44);
float QMatrix4x4_Data(void* ptr);
void QMatrix4x4_Fill(void* ptr, float value);
void QMatrix4x4_Frustum(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane);
void QMatrix4x4_LookAt(void* ptr, void* eye, void* center, void* up);
void QMatrix4x4_Optimize(void* ptr);
void QMatrix4x4_Ortho3(void* ptr, void* rect);
void QMatrix4x4_Ortho2(void* ptr, void* rect);
void QMatrix4x4_Ortho(void* ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane);
void QMatrix4x4_Perspective(void* ptr, float verticalAngle, float aspectRatio, float nearPlane, float farPlane);
void QMatrix4x4_Rotate3(void* ptr, void* quaternion);
void QMatrix4x4_Rotate(void* ptr, float angle, void* vector);
void QMatrix4x4_Rotate2(void* ptr, float angle, float x, float y, float z);
void QMatrix4x4_Scale(void* ptr, void* vector);
void QMatrix4x4_Scale4(void* ptr, float factor);
void QMatrix4x4_Scale2(void* ptr, float x, float y);
void QMatrix4x4_Scale3(void* ptr, float x, float y, float z);
void QMatrix4x4_SetColumn(void* ptr, int index, void* value);
void QMatrix4x4_SetRow(void* ptr, int index, void* value);
void QMatrix4x4_SetToIdentity(void* ptr);
void QMatrix4x4_Translate(void* ptr, void* vector);
void QMatrix4x4_Translate2(void* ptr, float x, float y);
void QMatrix4x4_Translate3(void* ptr, float x, float y, float z);
void QMatrix4x4_Viewport2(void* ptr, void* rect);
void QMatrix4x4_Viewport(void* ptr, float left, float bottom, float width, float height, float nearPlane, float farPlane);
void* QMatrix4x4_Inverted(void* ptr, char invertible);
void* QMatrix4x4_Transposed(void* ptr);
void* QMatrix4x4_Map(void* ptr, void* point);
void* QMatrix4x4_Map2(void* ptr, void* point);
void* QMatrix4x4_MapRect(void* ptr, void* rect);
void* QMatrix4x4_MapRect2(void* ptr, void* rect);
void* QMatrix4x4_ToTransform(void* ptr);
void* QMatrix4x4_ToTransform2(void* ptr, float distanceToPlane);
void* QMatrix4x4_Map3(void* ptr, void* point);
void* QMatrix4x4_MapVector(void* ptr, void* vector);
void* QMatrix4x4_Column(void* ptr, int index);
void* QMatrix4x4_Map4(void* ptr, void* point);
void* QMatrix4x4_Row(void* ptr, int index);
char QMatrix4x4_IsAffine(void* ptr);
char QMatrix4x4_IsIdentity(void* ptr);
float QMatrix4x4_ConstData(void* ptr);
float QMatrix4x4_Data2(void* ptr);
double QMatrix4x4_Determinant(void* ptr);
void QMatrix4x4_CopyDataTo(void* ptr, float values);
void* QMouseEvent_NewQMouseEvent(long long ty, void* localPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent2(long long ty, void* localPos, void* screenPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent3(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers);
void* QMouseEvent_NewQMouseEvent4(long long ty, void* localPos, void* windowPos, void* screenPos, long long button, long long buttons, long long modifiers, long long source);
void* QMouseEvent_GlobalPos(void* ptr);
void* QMouseEvent_Pos(void* ptr);
long long QMouseEvent_Button(void* ptr);
long long QMouseEvent_Buttons(void* ptr);
long long QMouseEvent_Flags(void* ptr);
long long QMouseEvent_Source(void* ptr);
void* QMouseEvent_LocalPos(void* ptr);
void* QMouseEvent_ScreenPos(void* ptr);
void* QMouseEvent_WindowPos(void* ptr);
int QMouseEvent_GlobalX(void* ptr);
int QMouseEvent_GlobalY(void* ptr);
int QMouseEvent_X(void* ptr);
int QMouseEvent_Y(void* ptr);
long long QMouseEvent_B(void* ptr);
void QMouseEvent_SetB(void* ptr, long long vqt);
int QMouseEvent_Caps(void* ptr);
void QMouseEvent_SetCaps(void* ptr, int vin);
long long QMouseEvent_MouseState(void* ptr);
void QMouseEvent_SetMouseState(void* ptr, long long vqt);
void* QMouseEvent_Velocity(void* ptr);
void QMouseEvent_SetVelocity(void* ptr, void* vqv);
void* QMoveEvent_NewQMoveEvent(void* pos, void* oldPos);
void* QMoveEvent_OldPos(void* ptr);
void* QMoveEvent_Pos(void* ptr);
struct QtGui_PackedList QMovie_QMovie_SupportedFormats();
void* QMovie_NewQMovie2(void* device, void* format, void* parent);
void* QMovie_NewQMovie(void* parent);
void* QMovie_NewQMovie3(char* fileName, void* format, void* parent);
void* QMovie_ScaledSize(void* ptr);
char QMovie_JumpToFrame(void* ptr, int frameNumber);
char QMovie_JumpToNextFrame(void* ptr);
char QMovie_JumpToNextFrameDefault(void* ptr);
void QMovie_ConnectError(void* ptr);
void QMovie_DisconnectError(void* ptr);
void QMovie_Error(void* ptr, long long error);
void QMovie_ConnectFinished(void* ptr);
void QMovie_DisconnectFinished(void* ptr);
void QMovie_Finished(void* ptr);
void QMovie_ConnectFrameChanged(void* ptr);
void QMovie_DisconnectFrameChanged(void* ptr);
void QMovie_FrameChanged(void* ptr, int frameNumber);
void QMovie_ConnectResized(void* ptr);
void QMovie_DisconnectResized(void* ptr);
void QMovie_Resized(void* ptr, void* size);
void QMovie_SetBackgroundColor(void* ptr, void* color);
void QMovie_SetCacheMode(void* ptr, long long mode);
void QMovie_SetDevice(void* ptr, void* device);
void QMovie_SetFileName(void* ptr, char* fileName);
void QMovie_SetFormat(void* ptr, void* format);
void QMovie_SetPaused(void* ptr, char paused);
void QMovie_SetPausedDefault(void* ptr, char paused);
void QMovie_SetScaledSize(void* ptr, void* size);
void QMovie_SetSpeed(void* ptr, int percentSpeed);
void QMovie_SetSpeedDefault(void* ptr, int percentSpeed);
void QMovie_Start(void* ptr);
void QMovie_StartDefault(void* ptr);
void QMovie_ConnectStarted(void* ptr);
void QMovie_DisconnectStarted(void* ptr);
void QMovie_Started(void* ptr);
void QMovie_ConnectStateChanged(void* ptr);
void QMovie_DisconnectStateChanged(void* ptr);
void QMovie_StateChanged(void* ptr, long long state);
void QMovie_Stop(void* ptr);
void QMovie_StopDefault(void* ptr);
void QMovie_ConnectUpdated(void* ptr);
void QMovie_DisconnectUpdated(void* ptr);
void QMovie_Updated(void* ptr, void* rect);
void QMovie_DestroyQMovie(void* ptr);
long long QMovie_CacheMode(void* ptr);
long long QMovie_State(void* ptr);
void* QMovie_Format(void* ptr);
void* QMovie_BackgroundColor(void* ptr);
void* QMovie_Device(void* ptr);
void* QMovie_CurrentImage(void* ptr);
void* QMovie_CurrentPixmap(void* ptr);
void* QMovie_FrameRect(void* ptr);
struct QtGui_PackedString QMovie_FileName(void* ptr);
char QMovie_IsValid(void* ptr);
int QMovie_CurrentFrameNumber(void* ptr);
int QMovie_FrameCount(void* ptr);
int QMovie_LoopCount(void* ptr);
int QMovie_NextFrameDelay(void* ptr);
int QMovie_Speed(void* ptr);
void* QMovie___supportedFormats_atList(void* ptr, int i);
void QMovie___supportedFormats_setList(void* ptr, void* i);
void* QMovie___supportedFormats_newList(void* ptr);
void* QMovie___dynamicPropertyNames_atList(void* ptr, int i);
void QMovie___dynamicPropertyNames_setList(void* ptr, void* i);
void* QMovie___dynamicPropertyNames_newList(void* ptr);
void* QMovie___findChildren_atList2(void* ptr, int i);
void QMovie___findChildren_setList2(void* ptr, void* i);
void* QMovie___findChildren_newList2(void* ptr);
void* QMovie___findChildren_atList3(void* ptr, int i);
void QMovie___findChildren_setList3(void* ptr, void* i);
void* QMovie___findChildren_newList3(void* ptr);
void* QMovie___findChildren_atList(void* ptr, int i);
void QMovie___findChildren_setList(void* ptr, void* i);
void* QMovie___findChildren_newList(void* ptr);
void* QMovie___children_atList(void* ptr, int i);
void QMovie___children_setList(void* ptr, void* i);
void* QMovie___children_newList(void* ptr);
char QMovie_EventDefault(void* ptr, void* e);
char QMovie_EventFilterDefault(void* ptr, void* watched, void* event);
void QMovie_ChildEventDefault(void* ptr, void* event);
void QMovie_ConnectNotifyDefault(void* ptr, void* sign);
void QMovie_CustomEventDefault(void* ptr, void* event);
void QMovie_DeleteLaterDefault(void* ptr);
void QMovie_DisconnectNotifyDefault(void* ptr, void* sign);
void QMovie_TimerEventDefault(void* ptr, void* event);
void* QMovie_MetaObjectDefault(void* ptr);
void* QNativeGestureEvent_NewQNativeGestureEvent(long long ty, void* localPos, void* windowPos, void* screenPos, double realValue, unsigned long sequenceId, unsigned long long intValue);
long long QNativeGestureEvent_GestureType(void* ptr);
void* QNativeGestureEvent_GlobalPos(void* ptr);
void* QNativeGestureEvent_Pos(void* ptr);
void* QNativeGestureEvent_LocalPos(void* ptr);
void* QNativeGestureEvent_ScreenPos(void* ptr);
void* QNativeGestureEvent_WindowPos(void* ptr);
double QNativeGestureEvent_Value(void* ptr);
long long QNativeGestureEvent_MGestureType(void* ptr);
void QNativeGestureEvent_SetMGestureType(void* ptr, long long vqt);
unsigned long long QNativeGestureEvent_MIntValue(void* ptr);
void QNativeGestureEvent_SetMIntValue(void* ptr, unsigned long long vqu);
void* QNativeGestureEvent_MLocalPos(void* ptr);
void QNativeGestureEvent_SetMLocalPos(void* ptr, void* vqp);
double QNativeGestureEvent_MRealValue(void* ptr);
void QNativeGestureEvent_SetMRealValue(void* ptr, double vqr);
void* QNativeGestureEvent_MScreenPos(void* ptr);
void QNativeGestureEvent_SetMScreenPos(void* ptr, void* vqp);
unsigned long QNativeGestureEvent_MSequenceId(void* ptr);
void QNativeGestureEvent_SetMSequenceId(void* ptr, unsigned long vul);
void* QNativeGestureEvent_MWindowPos(void* ptr);
void QNativeGestureEvent_SetMWindowPos(void* ptr, void* vqp);
void* QOffscreenSurface_NewQOffscreenSurface(void* targetScreen);
void QOffscreenSurface_Create(void* ptr);
void QOffscreenSurface_Destroy(void* ptr);
void QOffscreenSurface_ConnectScreenChanged(void* ptr);
void QOffscreenSurface_DisconnectScreenChanged(void* ptr);
void QOffscreenSurface_ScreenChanged(void* ptr, void* screen);
void QOffscreenSurface_SetFormat(void* ptr, void* format);
void QOffscreenSurface_SetScreen(void* ptr, void* newScreen);
void QOffscreenSurface_DestroyQOffscreenSurface(void* ptr);
void QOffscreenSurface_DestroyQOffscreenSurfaceDefault(void* ptr);
void* QOffscreenSurface_Screen(void* ptr);
void* QOffscreenSurface_Size(void* ptr);
void* QOffscreenSurface_SizeDefault(void* ptr);
void* QOffscreenSurface_Format(void* ptr);
void* QOffscreenSurface_FormatDefault(void* ptr);
void* QOffscreenSurface_RequestedFormat(void* ptr);
long long QOffscreenSurface_SurfaceType(void* ptr);
long long QOffscreenSurface_SurfaceTypeDefault(void* ptr);
char QOffscreenSurface_IsValid(void* ptr);
void* QOffscreenSurface___dynamicPropertyNames_atList(void* ptr, int i);
void QOffscreenSurface___dynamicPropertyNames_setList(void* ptr, void* i);
void* QOffscreenSurface___dynamicPropertyNames_newList(void* ptr);
void* QOffscreenSurface___findChildren_atList2(void* ptr, int i);
void QOffscreenSurface___findChildren_setList2(void* ptr, void* i);
void* QOffscreenSurface___findChildren_newList2(void* ptr);
void* QOffscreenSurface___findChildren_atList3(void* ptr, int i);
void QOffscreenSurface___findChildren_setList3(void* ptr, void* i);
void* QOffscreenSurface___findChildren_newList3(void* ptr);
void* QOffscreenSurface___findChildren_atList(void* ptr, int i);
void QOffscreenSurface___findChildren_setList(void* ptr, void* i);
void* QOffscreenSurface___findChildren_newList(void* ptr);
void* QOffscreenSurface___children_atList(void* ptr, int i);
void QOffscreenSurface___children_setList(void* ptr, void* i);
void* QOffscreenSurface___children_newList(void* ptr);
char QOffscreenSurface_Event(void* ptr, void* e);
char QOffscreenSurface_EventDefault(void* ptr, void* e);
char QOffscreenSurface_EventFilter(void* ptr, void* watched, void* event);
char QOffscreenSurface_EventFilterDefault(void* ptr, void* watched, void* event);
void QOffscreenSurface_ChildEvent(void* ptr, void* event);
void QOffscreenSurface_ChildEventDefault(void* ptr, void* event);
void QOffscreenSurface_ConnectNotify(void* ptr, void* sign);
void QOffscreenSurface_ConnectNotifyDefault(void* ptr, void* sign);
void QOffscreenSurface_CustomEvent(void* ptr, void* event);
void QOffscreenSurface_CustomEventDefault(void* ptr, void* event);
void QOffscreenSurface_DeleteLater(void* ptr);
void QOffscreenSurface_DeleteLaterDefault(void* ptr);
void QOffscreenSurface_DisconnectNotify(void* ptr, void* sign);
void QOffscreenSurface_DisconnectNotifyDefault(void* ptr, void* sign);
void QOffscreenSurface_TimerEvent(void* ptr, void* event);
void QOffscreenSurface_TimerEventDefault(void* ptr, void* event);
void* QOffscreenSurface_MetaObject(void* ptr);
void* QOffscreenSurface_MetaObjectDefault(void* ptr);
void* QPageLayout_NewQPageLayout();
void* QPageLayout_NewQPageLayout3(void* other);
void* QPageLayout_NewQPageLayout2(void* pageSize, long long orientation, void* margins, long long units, void* minMargins);
char QPageLayout_SetBottomMargin(void* ptr, double bottomMargin);
char QPageLayout_SetLeftMargin(void* ptr, double leftMargin);
char QPageLayout_SetMargins(void* ptr, void* margins);
char QPageLayout_SetRightMargin(void* ptr, double rightMargin);
char QPageLayout_SetTopMargin(void* ptr, double topMargin);
void QPageLayout_SetMinimumMargins(void* ptr, void* minMargins);
void QPageLayout_SetMode(void* ptr, long long mode);
void QPageLayout_SetOrientation(void* ptr, long long orientation);
void QPageLayout_SetPageSize(void* ptr, void* pageSize, void* minMargins);
void QPageLayout_SetUnits(void* ptr, long long units);
void QPageLayout_Swap(void* ptr, void* other);
void QPageLayout_DestroyQPageLayout(void* ptr);
long long QPageLayout_Mode(void* ptr);
long long QPageLayout_Orientation(void* ptr);
void* QPageLayout_MarginsPixels(void* ptr, int resolution);
void* QPageLayout_MarginsPoints(void* ptr);
void* QPageLayout_Margins(void* ptr);
void* QPageLayout_Margins2(void* ptr, long long units);
void* QPageLayout_MaximumMargins(void* ptr);
void* QPageLayout_MinimumMargins(void* ptr);
void* QPageLayout_PageSize(void* ptr);
void* QPageLayout_FullRectPixels(void* ptr, int resolution);
void* QPageLayout_FullRectPoints(void* ptr);
void* QPageLayout_PaintRectPixels(void* ptr, int resolution);
void* QPageLayout_PaintRectPoints(void* ptr);
void* QPageLayout_FullRect(void* ptr);
void* QPageLayout_FullRect2(void* ptr, long long units);
void* QPageLayout_PaintRect(void* ptr);
void* QPageLayout_PaintRect2(void* ptr, long long units);
long long QPageLayout_Units(void* ptr);
char QPageLayout_IsEquivalentTo(void* ptr, void* other);
char QPageLayout_IsValid(void* ptr);
long long QPageSize_QPageSize_Id2(void* pointSize, long long matchPolicy);
long long QPageSize_QPageSize_Id3(void* size, long long units, long long matchPolicy);
long long QPageSize_QPageSize_Id4(int windowsId);
void* QPageSize_NewQPageSize();
void* QPageSize_NewQPageSize2(long long pageSize);
void* QPageSize_NewQPageSize5(void* other);
void* QPageSize_NewQPageSize3(void* pointSize, char* name, long long matchPolicy);
void* QPageSize_NewQPageSize4(void* size, long long units, char* name, long long matchPolicy);
void* QPageSize_QPageSize_SizePixels2(long long pageSizeId, int resolution);
void* QPageSize_QPageSize_SizePoints2(long long pageSizeId);
void* QPageSize_QPageSize_DefinitionSize2(long long pageSizeId);
void* QPageSize_QPageSize_Size2(long long pageSizeId, long long units);
struct QtGui_PackedString QPageSize_QPageSize_Key2(long long pageSizeId);
struct QtGui_PackedString QPageSize_QPageSize_Name2(long long pageSizeId);
long long QPageSize_QPageSize_DefinitionUnits2(long long pageSizeId);
int QPageSize_QPageSize_WindowsId2(long long pageSizeId);
void QPageSize_Swap(void* ptr, void* other);
void QPageSize_DestroyQPageSize(void* ptr);
long long QPageSize_Id(void* ptr);
void* QPageSize_RectPixels(void* ptr, int resolution);
void* QPageSize_RectPoints(void* ptr);
void* QPageSize_Rect(void* ptr, long long units);
void* QPageSize_SizePixels(void* ptr, int resolution);
void* QPageSize_SizePoints(void* ptr);
void* QPageSize_DefinitionSize(void* ptr);
void* QPageSize_Size(void* ptr, long long units);
struct QtGui_PackedString QPageSize_Key(void* ptr);
struct QtGui_PackedString QPageSize_Name(void* ptr);
long long QPageSize_DefinitionUnits(void* ptr);
char QPageSize_IsEquivalentTo(void* ptr, void* other);
char QPageSize_IsValid(void* ptr);
int QPageSize_WindowsId(void* ptr);
void* QPagedPaintDevice_NewQPagedPaintDevice();
char QPagedPaintDevice_NewPage(void* ptr);
char QPagedPaintDevice_SetPageLayout(void* ptr, void* newPageLayout);
char QPagedPaintDevice_SetPageMargins(void* ptr, void* margins);
char QPagedPaintDevice_SetPageMargins2(void* ptr, void* margins, long long units);
char QPagedPaintDevice_SetPageOrientation(void* ptr, long long orientation);
char QPagedPaintDevice_SetPageSize(void* ptr, void* pageSize);
void QPagedPaintDevice_SetPageSize2(void* ptr, long long size);
void QPagedPaintDevice_SetPageSize2Default(void* ptr, long long size);
void QPagedPaintDevice_SetPageSizeMM(void* ptr, void* size);
void QPagedPaintDevice_SetPageSizeMMDefault(void* ptr, void* size);
void QPagedPaintDevice_DestroyQPagedPaintDevice(void* ptr);
long long QPagedPaintDevice_PageSize(void* ptr);
void* QPagedPaintDevice_PageLayout(void* ptr);
void* QPagedPaintDevice_PageSizeMM(void* ptr);
void* QPagedPaintDevice_PaintEngine(void* ptr);
void* QPagedPaintDevice_PaintEngineDefault(void* ptr);
void* QPaintDevice_NewQPaintDevice();
void QPaintDevice_DestroyQPaintDevice(void* ptr);
void QPaintDevice_DestroyQPaintDeviceDefault(void* ptr);
void* QPaintDevice_PaintEngine(void* ptr);
char QPaintDevice_PaintingActive(void* ptr);
int QPaintDevice_ColorCount(void* ptr);
int QPaintDevice_Depth(void* ptr);
int QPaintDevice_DevicePixelRatio(void* ptr);
int QPaintDevice_Height(void* ptr);
int QPaintDevice_HeightMM(void* ptr);
int QPaintDevice_LogicalDpiX(void* ptr);
int QPaintDevice_LogicalDpiY(void* ptr);
int QPaintDevice_Metric(void* ptr, long long metric);
int QPaintDevice_MetricDefault(void* ptr, long long metric);
int QPaintDevice_PhysicalDpiX(void* ptr);
int QPaintDevice_PhysicalDpiY(void* ptr);
int QPaintDevice_Width(void* ptr);
int QPaintDevice_WidthMM(void* ptr);
double QPaintDevice_DevicePixelRatioF(void* ptr);
unsigned short QPaintDevice_Painters(void* ptr);
void QPaintDevice_SetPainters(void* ptr, unsigned short vus);
void QPaintDeviceWindow_PaintEvent(void* ptr, void* event);
void QPaintDeviceWindow_PaintEventDefault(void* ptr, void* event);
void QPaintDeviceWindow_Update3(void* ptr);
void QPaintDeviceWindow_Update3Default(void* ptr);
void QPaintDeviceWindow_Update(void* ptr, void* rect);
void QPaintDeviceWindow_Update2(void* ptr, void* region);
void* QPaintDeviceWindow_PaintEngine(void* ptr);
void* QPaintDeviceWindow_PaintEngineDefault(void* ptr);
char QPaintEngine_End(void* ptr);
void QPaintEngine_DrawEllipse(void* ptr, void* rect);
void QPaintEngine_DrawEllipseDefault(void* ptr, void* rect);
void QPaintEngine_DrawImage(void* ptr, void* rectangle, void* image, void* sr, long long flags);
void QPaintEngine_DrawImageDefault(void* ptr, void* rectangle, void* image, void* sr, long long flags);
void QPaintEngine_DrawPolygon(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawPolygonDefault(void* ptr, void* points, int pointCount, long long mode);
void* QPaintEngine_NewQPaintEngine(long long caps);
char QPaintEngine_Begin(void* ptr, void* pdev);
void QPaintEngine_DrawEllipse2(void* ptr, void* rect);
void QPaintEngine_DrawEllipse2Default(void* ptr, void* rect);
void QPaintEngine_DrawLines2(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLines2Default(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLines(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawLinesDefault(void* ptr, void* lines, int lineCount);
void QPaintEngine_DrawPath(void* ptr, void* path);
void QPaintEngine_DrawPathDefault(void* ptr, void* path);
void QPaintEngine_DrawPixmap(void* ptr, void* r, void* pm, void* sr);
void QPaintEngine_DrawPoints2(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPoints2Default(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPoints(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPointsDefault(void* ptr, void* points, int pointCount);
void QPaintEngine_DrawPolygon2(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawPolygon2Default(void* ptr, void* points, int pointCount, long long mode);
void QPaintEngine_DrawRects2(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRects2Default(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRects(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawRectsDefault(void* ptr, void* rects, int rectCount);
void QPaintEngine_DrawTextItem(void* ptr, void* p, void* textItem);
void QPaintEngine_DrawTextItemDefault(void* ptr, void* p, void* textItem);
void QPaintEngine_DrawTiledPixmap(void* ptr, void* rect, void* pixmap, void* p);
void QPaintEngine_DrawTiledPixmapDefault(void* ptr, void* rect, void* pixmap, void* p);
void QPaintEngine_SetActive(void* ptr, char state);
void QPaintEngine_UpdateState(void* ptr, void* state);
void QPaintEngine_DestroyQPaintEngine(void* ptr);
void QPaintEngine_DestroyQPaintEngineDefault(void* ptr);
void* QPaintEngine_PaintDevice(void* ptr);
void* QPaintEngine_Painter(void* ptr);
long long QPaintEngine_Type(void* ptr);
char QPaintEngine_HasFeature(void* ptr, long long feature);
char QPaintEngine_IsActive(void* ptr);
long long QPaintEngine_Gccaps(void* ptr);
void QPaintEngine_SetGccaps(void* ptr, long long vpa);
void* QPaintEngine_State(void* ptr);
void QPaintEngine_SetState(void* ptr, void* vqp);
void* QPaintEngineState_BackgroundBrush(void* ptr);
void* QPaintEngineState_Brush(void* ptr);
void* QPaintEngineState_Font(void* ptr);
long long QPaintEngineState_State(void* ptr);
void* QPaintEngineState_Painter(void* ptr);
long long QPaintEngineState_CompositionMode(void* ptr);
long long QPaintEngineState_RenderHints(void* ptr);
void* QPaintEngineState_ClipPath(void* ptr);
void* QPaintEngineState_Pen(void* ptr);
void* QPaintEngineState_BrushOrigin(void* ptr);
void* QPaintEngineState_ClipRegion(void* ptr);
void* QPaintEngineState_Transform(void* ptr);
long long QPaintEngineState_BackgroundMode(void* ptr);
long long QPaintEngineState_ClipOperation(void* ptr);
char QPaintEngineState_BrushNeedsResolving(void* ptr);
char QPaintEngineState_IsClipEnabled(void* ptr);
char QPaintEngineState_PenNeedsResolving(void* ptr);
double QPaintEngineState_Opacity(void* ptr);
long long QPaintEngineState_DirtyFlags(void* ptr);
void QPaintEngineState_SetDirtyFlags(void* ptr, long long vqp);
void* QPaintEvent_NewQPaintEvent2(void* paintRect);
void* QPaintEvent_NewQPaintEvent(void* paintRegion);
void* QPaintEvent_Rect(void* ptr);
void* QPaintEvent_Region(void* ptr);
char QPaintEvent_M_erased(void* ptr);
void QPaintEvent_SetM_erased(void* ptr, char vbo);
void* QPaintEvent_M_rect(void* ptr);
void QPaintEvent_SetM_rect(void* ptr, void* vqr);
void* QPaintEvent_M_region(void* ptr);
void QPaintEvent_SetM_region(void* ptr, void* vqr);
void* QPainter_NewQPainter2(void* device);
void* QPainter_BoundingRect2(void* ptr, void* rectangle, int flags, char* text);
void* QPainter_BoundingRect4(void* ptr, void* rectangle, char* text, void* option);
void* QPainter_BoundingRect(void* ptr, void* rectangle, int flags, char* text);
char QPainter_Begin(void* ptr, void* device);
void QPainter_DrawArc(void* ptr, void* rectangle, int startAngle, int spanAngle);
void* QPainter_NewQPainter();
void* QPainter_BoundingRect3(void* ptr, int x, int y, int w, int h, int flags, char* text);
char QPainter_End(void* ptr);
void QPainter_BeginNativePainting(void* ptr);
void QPainter_DrawArc2(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawArc3(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawChord3(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawChord(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawChord2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawConvexPolygon3(void* ptr, void* points, int pointCount);
void QPainter_DrawConvexPolygon(void* ptr, void* points, int pointCount);
void QPainter_DrawConvexPolygon4(void* ptr, void* polygon);
void QPainter_DrawConvexPolygon2(void* ptr, void* polygon);
void QPainter_DrawEllipse5(void* ptr, void* center, int rx, int ry);
void QPainter_DrawEllipse4(void* ptr, void* center, double rx, double ry);
void QPainter_DrawEllipse2(void* ptr, void* rectangle);
void QPainter_DrawEllipse(void* ptr, void* rectangle);
void QPainter_DrawEllipse3(void* ptr, int x, int y, int width, int height);
void QPainter_DrawGlyphRun(void* ptr, void* position, void* glyphs);
void QPainter_DrawImage8(void* ptr, void* point, void* image);
void QPainter_DrawImage4(void* ptr, void* point, void* image, void* source, long long flags);
void QPainter_DrawImage7(void* ptr, void* point, void* image);
void QPainter_DrawImage3(void* ptr, void* point, void* image, void* source, long long flags);
void QPainter_DrawImage6(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage2(void* ptr, void* target, void* image, void* source, long long flags);
void QPainter_DrawImage5(void* ptr, void* rectangle, void* image);
void QPainter_DrawImage(void* ptr, void* target, void* image, void* source, long long flags);
void QPainter_DrawImage9(void* ptr, int x, int y, void* image, int sx, int sy, int sw, int sh, long long flags);
void QPainter_DrawLine2(void* ptr, void* line);
void QPainter_DrawLine(void* ptr, void* line);
void QPainter_DrawLine4(void* ptr, void* p1, void* p2);
void QPainter_DrawLine5(void* ptr, void* p1, void* p2);
void QPainter_DrawLine3(void* ptr, int x1, int y1, int x2, int y2);
void QPainter_DrawLines5(void* ptr, void* lines, int lineCount);
void QPainter_DrawLines(void* ptr, void* lines, int lineCount);
void QPainter_DrawLines7(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawLines3(void* ptr, void* pointPairs, int lineCount);
void QPainter_DrawLines6(void* ptr, void* lines);
void QPainter_DrawLines2(void* ptr, void* lines);
void QPainter_DrawLines8(void* ptr, void* pointPairs);
void QPainter_DrawLines4(void* ptr, void* pointPairs);
void QPainter_DrawPath(void* ptr, void* path);
void QPainter_DrawPicture3(void* ptr, void* point, void* picture);
void QPainter_DrawPicture(void* ptr, void* point, void* picture);
void QPainter_DrawPicture2(void* ptr, int x, int y, void* picture);
void QPainter_DrawPie3(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPie(void* ptr, void* rectangle, int startAngle, int spanAngle);
void QPainter_DrawPie2(void* ptr, int x, int y, int width, int height, int startAngle, int spanAngle);
void QPainter_DrawPixmap8(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap6(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap7(void* ptr, void* point, void* pixmap);
void QPainter_DrawPixmap5(void* ptr, void* point, void* pixmap, void* source);
void QPainter_DrawPixmap10(void* ptr, void* rectangle, void* pixmap);
void QPainter_DrawPixmap2(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawPixmap(void* ptr, void* target, void* pixmap, void* source);
void QPainter_DrawPixmap9(void* ptr, int x, int y, void* pixmap);
void QPainter_DrawPixmap4(void* ptr, int x, int y, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap3(void* ptr, int x, int y, int w, int h, void* pixmap, int sx, int sy, int sw, int sh);
void QPainter_DrawPixmap11(void* ptr, int x, int y, int width, int height, void* pixmap);
void QPainter_DrawPoint2(void* ptr, void* position);
void QPainter_DrawPoint(void* ptr, void* position);
void QPainter_DrawPoint3(void* ptr, int x, int y);
void QPainter_DrawPoints3(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints(void* ptr, void* points, int pointCount);
void QPainter_DrawPoints4(void* ptr, void* points);
void QPainter_DrawPoints2(void* ptr, void* points);
void QPainter_DrawPolygon3(void* ptr, void* points, int pointCount, long long fillRule);
void QPainter_DrawPolygon(void* ptr, void* points, int pointCount, long long fillRule);
void QPainter_DrawPolygon4(void* ptr, void* points, long long fillRule);
void QPainter_DrawPolygon2(void* ptr, void* points, long long fillRule);
void QPainter_DrawPolyline3(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline(void* ptr, void* points, int pointCount);
void QPainter_DrawPolyline4(void* ptr, void* points);
void QPainter_DrawPolyline2(void* ptr, void* points);
void QPainter_DrawRect3(void* ptr, void* rectangle);
void QPainter_DrawRect(void* ptr, void* rectangle);
void QPainter_DrawRect2(void* ptr, int x, int y, int width, int height);
void QPainter_DrawRects3(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawRects(void* ptr, void* rectangles, int rectCount);
void QPainter_DrawRects4(void* ptr, void* rectangles);
void QPainter_DrawRects2(void* ptr, void* rectangles);
void QPainter_DrawRoundedRect3(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainter_DrawRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainter_DrawRoundedRect2(void* ptr, int x, int y, int w, int h, double xRadius, double yRadius, long long mode);
void QPainter_DrawStaticText2(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText(void* ptr, void* topLeftPosition, void* staticText);
void QPainter_DrawStaticText3(void* ptr, int left, int top, void* staticText);
void QPainter_DrawText2(void* ptr, void* position, char* text);
void QPainter_DrawText(void* ptr, void* position, char* text);
void QPainter_DrawText6(void* ptr, void* rectangle, int flags, char* text, void* boundingRect);
void QPainter_DrawText8(void* ptr, void* rectangle, char* text, void* option);
void QPainter_DrawText5(void* ptr, void* rectangle, int flags, char* text, void* boundingRect);
void QPainter_DrawText3(void* ptr, int x, int y, char* text);
void QPainter_DrawText7(void* ptr, int x, int y, int width, int height, int flags, char* text, void* boundingRect);
void QPainter_DrawTiledPixmap3(void* ptr, void* rectangle, void* pixmap, void* position);
void QPainter_DrawTiledPixmap(void* ptr, void* rectangle, void* pixmap, void* position);
void QPainter_DrawTiledPixmap2(void* ptr, int x, int y, int width, int height, void* pixmap, int sx, int sy);
void QPainter_EndNativePainting(void* ptr);
void QPainter_EraseRect3(void* ptr, void* rectangle);
void QPainter_EraseRect(void* ptr, void* rectangle);
void QPainter_EraseRect2(void* ptr, int x, int y, int width, int height);
void QPainter_FillPath(void* ptr, void* path, void* brush);
void QPainter_FillRect11(void* ptr, void* rectangle, long long style);
void QPainter_FillRect8(void* ptr, void* rectangle, long long color);
void QPainter_FillRect3(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect6(void* ptr, void* rectangle, void* color);
void QPainter_FillRect12(void* ptr, void* rectangle, long long style);
void QPainter_FillRect9(void* ptr, void* rectangle, long long color);
void QPainter_FillRect(void* ptr, void* rectangle, void* brush);
void QPainter_FillRect4(void* ptr, void* rectangle, void* color);
void QPainter_FillRect10(void* ptr, int x, int y, int width, int height, long long style);
void QPainter_FillRect7(void* ptr, int x, int y, int width, int height, long long color);
void QPainter_FillRect2(void* ptr, int x, int y, int width, int height, void* brush);
void QPainter_FillRect5(void* ptr, int x, int y, int width, int height, void* color);
void QPainter_ResetTransform(void* ptr);
void QPainter_Restore(void* ptr);
void QPainter_Rotate(void* ptr, double angle);
void QPainter_Save(void* ptr);
void QPainter_Scale(void* ptr, double sx, double sy);
void QPainter_SetBackground(void* ptr, void* brush);
void QPainter_SetBackgroundMode(void* ptr, long long mode);
void QPainter_SetBrush2(void* ptr, long long style);
void QPainter_SetBrush(void* ptr, void* brush);
void QPainter_SetBrushOrigin2(void* ptr, void* position);
void QPainter_SetBrushOrigin(void* ptr, void* position);
void QPainter_SetBrushOrigin3(void* ptr, int x, int y);
void QPainter_SetClipPath(void* ptr, void* path, long long operation);
void QPainter_SetClipRect2(void* ptr, void* rectangle, long long operation);
void QPainter_SetClipRect(void* ptr, void* rectangle, long long operation);
void QPainter_SetClipRect3(void* ptr, int x, int y, int width, int height, long long operation);
void QPainter_SetClipRegion(void* ptr, void* region, long long operation);
void QPainter_SetClipping(void* ptr, char enable);
void QPainter_SetCompositionMode(void* ptr, long long mode);
void QPainter_SetFont(void* ptr, void* font);
void QPainter_SetLayoutDirection(void* ptr, long long direction);
void QPainter_SetOpacity(void* ptr, double opacity);
void QPainter_SetPen3(void* ptr, long long style);
void QPainter_SetPen2(void* ptr, void* color);
void QPainter_SetPen(void* ptr, void* pen);
void QPainter_SetRenderHint(void* ptr, long long hint, char on);
void QPainter_SetRenderHints(void* ptr, long long hints, char on);
void QPainter_SetTransform(void* ptr, void* transform, char combine);
void QPainter_SetViewTransformEnabled(void* ptr, char enable);
void QPainter_SetViewport(void* ptr, void* rectangle);
void QPainter_SetViewport2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWindow(void* ptr, void* rectangle);
void QPainter_SetWindow2(void* ptr, int x, int y, int width, int height);
void QPainter_SetWorldMatrixEnabled(void* ptr, char enable);
void QPainter_SetWorldTransform(void* ptr, void* matrix, char combine);
void QPainter_Shear(void* ptr, double sh, double sv);
void QPainter_StrokePath(void* ptr, void* path, void* pen);
void QPainter_Translate2(void* ptr, void* offset);
void QPainter_Translate(void* ptr, void* offset);
void QPainter_Translate3(void* ptr, double dx, double dy);
void QPainter_DestroyQPainter(void* ptr);
long long QPainter_CompositionMode(void* ptr);
void* QPainter_FontInfo(void* ptr);
void* QPainter_FontMetrics(void* ptr);
void* QPainter_Device(void* ptr);
void* QPainter_PaintEngine(void* ptr);
void* QPainter_ClipPath(void* ptr);
void* QPainter_BrushOrigin(void* ptr);
void* QPainter_Viewport(void* ptr);
void* QPainter_Window(void* ptr);
void* QPainter_ClipBoundingRect(void* ptr);
void* QPainter_ClipRegion(void* ptr);
void* QPainter_CombinedTransform(void* ptr);
long long QPainter_BackgroundMode(void* ptr);
long long QPainter_LayoutDirection(void* ptr);
long long QPainter_RenderHints(void* ptr);
char QPainter_HasClipping(void* ptr);
char QPainter_IsActive(void* ptr);
char QPainter_TestRenderHint(void* ptr, long long hint);
char QPainter_ViewTransformEnabled(void* ptr);
char QPainter_WorldMatrixEnabled(void* ptr);
void* QPainter_Background(void* ptr);
void* QPainter_Brush(void* ptr);
void* QPainter_Font(void* ptr);
void* QPainter_Pen(void* ptr);
void* QPainter_DeviceTransform(void* ptr);
void* QPainter_Transform(void* ptr);
void* QPainter_WorldTransform(void* ptr);
double QPainter_Opacity(void* ptr);
void* QPainter___drawLines_lines_atList6(void* ptr, int i);
void QPainter___drawLines_lines_setList6(void* ptr, void* i);
void* QPainter___drawLines_lines_newList6(void* ptr);
void* QPainter___drawLines_lines_atList2(void* ptr, int i);
void QPainter___drawLines_lines_setList2(void* ptr, void* i);
void* QPainter___drawLines_lines_newList2(void* ptr);
void* QPainter___drawLines_pointPairs_atList8(void* ptr, int i);
void QPainter___drawLines_pointPairs_setList8(void* ptr, void* i);
void* QPainter___drawLines_pointPairs_newList8(void* ptr);
void* QPainter___drawLines_pointPairs_atList4(void* ptr, int i);
void QPainter___drawLines_pointPairs_setList4(void* ptr, void* i);
void* QPainter___drawLines_pointPairs_newList4(void* ptr);
void* QPainter___drawRects_rectangles_atList4(void* ptr, int i);
void QPainter___drawRects_rectangles_setList4(void* ptr, void* i);
void* QPainter___drawRects_rectangles_newList4(void* ptr);
void* QPainter___drawRects_rectangles_atList2(void* ptr, int i);
void QPainter___drawRects_rectangles_setList2(void* ptr, void* i);
void* QPainter___drawRects_rectangles_newList2(void* ptr);
void* QPainterPath_NewQPainterPath3(void* path);
void QPainterPath_AddEllipse(void* ptr, void* boundingRectangle);
void QPainterPath_AddPath(void* ptr, void* path);
void QPainterPath_AddRect(void* ptr, void* rectangle);
void* QPainterPath_NewQPainterPath();
void* QPainterPath_NewQPainterPath2(void* startPoint);
void QPainterPath_AddEllipse3(void* ptr, void* center, double rx, double ry);
void QPainterPath_AddEllipse2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddPolygon(void* ptr, void* polygon);
void QPainterPath_AddRect2(void* ptr, double x, double y, double width, double height);
void QPainterPath_AddRegion(void* ptr, void* region);
void QPainterPath_AddRoundedRect(void* ptr, void* rect, double xRadius, double yRadius, long long mode);
void QPainterPath_AddRoundedRect2(void* ptr, double x, double y, double w, double h, double xRadius, double yRadius, long long mode);
void QPainterPath_AddText(void* ptr, void* point, void* font, char* text);
void QPainterPath_AddText2(void* ptr, double x, double y, void* font, char* text);
void QPainterPath_ArcMoveTo(void* ptr, void* rectangle, double angle);
void QPainterPath_ArcMoveTo2(void* ptr, double x, double y, double width, double height, double angle);
void QPainterPath_ArcTo(void* ptr, void* rectangle, double startAngle, double sweepLength);
void QPainterPath_ArcTo2(void* ptr, double x, double y, double width, double height, double startAngle, double sweepLength);
void QPainterPath_CloseSubpath(void* ptr);
void QPainterPath_ConnectPath(void* ptr, void* path);
void QPainterPath_CubicTo(void* ptr, void* c1, void* c2, void* endPoint);
void QPainterPath_CubicTo2(void* ptr, double c1X, double c1Y, double c2X, double c2Y, double endPointX, double endPointY);
void QPainterPath_LineTo(void* ptr, void* endPoint);
void QPainterPath_LineTo2(void* ptr, double x, double y);
void QPainterPath_MoveTo(void* ptr, void* point);
void QPainterPath_MoveTo2(void* ptr, double x, double y);
void QPainterPath_QuadTo(void* ptr, void* c, void* endPoint);
void QPainterPath_QuadTo2(void* ptr, double cx, double cy, double endPointX, double endPointY);
void QPainterPath_SetElementPositionAt(void* ptr, int index, double x, double y);
void QPainterPath_SetFillRule(void* ptr, long long fillRule);
void QPainterPath_Swap(void* ptr, void* other);
void QPainterPath_Translate2(void* ptr, void* offset);
void QPainterPath_Translate(void* ptr, double dx, double dy);
void QPainterPath_DestroyQPainterPath(void* ptr);
struct QtGui_PackedList QPainterPath_ToFillPolygons(void* ptr, void* matrix);
struct QtGui_PackedList QPainterPath_ToSubpathPolygons(void* ptr, void* matrix);
void* QPainterPath_Intersected(void* ptr, void* p);
void* QPainterPath_Simplified(void* ptr);
void* QPainterPath_Subtracted(void* ptr, void* p);
void* QPainterPath_ToReversed(void* ptr);
void* QPainterPath_Translated2(void* ptr, void* offset);
void* QPainterPath_Translated(void* ptr, double dx, double dy);
void* QPainterPath_United(void* ptr, void* p);
void* QPainterPath_CurrentPosition(void* ptr);
void* QPainterPath_PointAtPercent(void* ptr, double t);
void* QPainterPath_ToFillPolygon(void* ptr, void* matrix);
void* QPainterPath_BoundingRect(void* ptr);
void* QPainterPath_ControlPointRect(void* ptr);
long long QPainterPath_FillRule(void* ptr);
char QPainterPath_Contains3(void* ptr, void* p);
char QPainterPath_Contains(void* ptr, void* point);
char QPainterPath_Contains2(void* ptr, void* rectangle);
char QPainterPath_Intersects2(void* ptr, void* p);
char QPainterPath_Intersects(void* ptr, void* rectangle);
char QPainterPath_IsEmpty(void* ptr);
int QPainterPath_ElementCount(void* ptr);
double QPainterPath_AngleAtPercent(void* ptr, double t);
double QPainterPath_Length(void* ptr);
double QPainterPath_PercentAtLength(void* ptr, double len);
double QPainterPath_SlopeAtPercent(void* ptr, double t);
void* QPainterPath___toFillPolygons_atList2(void* ptr, int i);
void QPainterPath___toFillPolygons_setList2(void* ptr, void* i);
void* QPainterPath___toFillPolygons_newList2(void* ptr);
void* QPainterPath___toFillPolygons_atList(void* ptr, int i);
void QPainterPath___toFillPolygons_setList(void* ptr, void* i);
void* QPainterPath___toFillPolygons_newList(void* ptr);
void* QPainterPath___toSubpathPolygons_atList2(void* ptr, int i);
void QPainterPath___toSubpathPolygons_setList2(void* ptr, void* i);
void* QPainterPath___toSubpathPolygons_newList2(void* ptr);
void* QPainterPath___toSubpathPolygons_atList(void* ptr, int i);
void QPainterPath___toSubpathPolygons_setList(void* ptr, void* i);
void* QPainterPath___toSubpathPolygons_newList(void* ptr);
void* QPainterPathStroker_NewQPainterPathStroker();
void* QPainterPathStroker_NewQPainterPathStroker2(void* pen);
void QPainterPathStroker_SetCapStyle(void* ptr, long long style);
void QPainterPathStroker_SetCurveThreshold(void* ptr, double threshold);
void QPainterPathStroker_SetDashOffset(void* ptr, double offset);
void QPainterPathStroker_SetDashPattern(void* ptr, long long style);
void QPainterPathStroker_SetDashPattern2(void* ptr, void* dashPattern);
void QPainterPathStroker_SetJoinStyle(void* ptr, long long style);
void QPainterPathStroker_SetMiterLimit(void* ptr, double limit);
void QPainterPathStroker_SetWidth(void* ptr, double width);
void QPainterPathStroker_DestroyQPainterPathStroker(void* ptr);
void* QPainterPathStroker_CreateStroke(void* ptr, void* path);
struct QtGui_PackedList QPainterPathStroker_DashPattern(void* ptr);
long long QPainterPathStroker_CapStyle(void* ptr);
long long QPainterPathStroker_JoinStyle(void* ptr);
double QPainterPathStroker_CurveThreshold(void* ptr);
double QPainterPathStroker_DashOffset(void* ptr);
double QPainterPathStroker_MiterLimit(void* ptr);
double QPainterPathStroker_Width(void* ptr);
double QPainterPathStroker___setDashPattern_dashPattern_atList2(void* ptr, int i);
void QPainterPathStroker___setDashPattern_dashPattern_setList2(void* ptr, double i);
void* QPainterPathStroker___setDashPattern_dashPattern_newList2(void* ptr);
double QPainterPathStroker___dashPattern_atList(void* ptr, int i);
void QPainterPathStroker___dashPattern_setList(void* ptr, double i);
void* QPainterPathStroker___dashPattern_newList(void* ptr);
int QPalette_NColorRoles_Type();
void* QPalette_NewQPalette();
void* QPalette_NewQPalette8(void* other);
void* QPalette_NewQPalette3(long long button);
void* QPalette_NewQPalette5(void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void* QPalette_NewQPalette2(void* button);
void* QPalette_NewQPalette4(void* button, void* window);
void* QPalette_NewQPalette7(void* p);
void QPalette_SetBrush2(void* ptr, long long group, long long role, void* brush);
void QPalette_SetBrush(void* ptr, long long role, void* brush);
void QPalette_SetColor(void* ptr, long long group, long long role, void* color);
void QPalette_SetColor2(void* ptr, long long role, void* color);
void QPalette_SetColorGroup(void* ptr, long long cg, void* windowText, void* button, void* light, void* dark, void* mid, void* text, void* bright_text, void* base, void* window);
void QPalette_SetCurrentColorGroup(void* ptr, long long cg);
void QPalette_Swap(void* ptr, void* other);
void QPalette_DestroyQPalette(void* ptr);
long long QPalette_CurrentColorGroup(void* ptr);
void* QPalette_Resolve(void* ptr, void* other);
char QPalette_IsBrushSet(void* ptr, long long cg, long long cr);
char QPalette_IsCopyOf(void* ptr, void* p);
char QPalette_IsEqual(void* ptr, long long cg1, long long cg2);
void* QPalette_AlternateBase(void* ptr);
void* QPalette_Base(void* ptr);
void* QPalette_BrightText(void* ptr);
void* QPalette_Brush(void* ptr, long long group, long long role);
void* QPalette_Brush2(void* ptr, long long role);
void* QPalette_Button(void* ptr);
void* QPalette_ButtonText(void* ptr);
void* QPalette_Dark(void* ptr);
void* QPalette_Highlight(void* ptr);
void* QPalette_HighlightedText(void* ptr);
void* QPalette_Light(void* ptr);
void* QPalette_Link(void* ptr);
void* QPalette_LinkVisited(void* ptr);
void* QPalette_Mid(void* ptr);
void* QPalette_Midlight(void* ptr);
void* QPalette_Shadow(void* ptr);
void* QPalette_Text(void* ptr);
void* QPalette_ToolTipBase(void* ptr);
void* QPalette_ToolTipText(void* ptr);
void* QPalette_Window(void* ptr);
void* QPalette_WindowText(void* ptr);
void* QPalette_Color(void* ptr, long long group, long long role);
void* QPalette_Color2(void* ptr, long long role);
long long QPalette_CacheKey(void* ptr);
void* QPdfWriter_NewQPdfWriter2(void* device);
void* QPdfWriter_NewQPdfWriter(char* filename);
void QPdfWriter_SetCreator(void* ptr, char* creator);
void QPdfWriter_SetResolution(void* ptr, int resolution);
void QPdfWriter_SetTitle(void* ptr, char* title);
void QPdfWriter_DestroyQPdfWriter(void* ptr);
struct QtGui_PackedString QPdfWriter_Creator(void* ptr);
struct QtGui_PackedString QPdfWriter_Title(void* ptr);
int QPdfWriter_Resolution(void* ptr);
void* QPdfWriter___dynamicPropertyNames_atList(void* ptr, int i);
void QPdfWriter___dynamicPropertyNames_setList(void* ptr, void* i);
void* QPdfWriter___dynamicPropertyNames_newList(void* ptr);
void* QPdfWriter___findChildren_atList2(void* ptr, int i);
void QPdfWriter___findChildren_setList2(void* ptr, void* i);
void* QPdfWriter___findChildren_newList2(void* ptr);
void* QPdfWriter___findChildren_atList3(void* ptr, int i);
void QPdfWriter___findChildren_setList3(void* ptr, void* i);
void* QPdfWriter___findChildren_newList3(void* ptr);
void* QPdfWriter___findChildren_atList(void* ptr, int i);
void QPdfWriter___findChildren_setList(void* ptr, void* i);
void* QPdfWriter___findChildren_newList(void* ptr);
void* QPdfWriter___children_atList(void* ptr, int i);
void QPdfWriter___children_setList(void* ptr, void* i);
void* QPdfWriter___children_newList(void* ptr);
char QPdfWriter_Event(void* ptr, void* e);
char QPdfWriter_EventDefault(void* ptr, void* e);
char QPdfWriter_EventFilter(void* ptr, void* watched, void* event);
char QPdfWriter_EventFilterDefault(void* ptr, void* watched, void* event);
void QPdfWriter_ChildEvent(void* ptr, void* event);
void QPdfWriter_ChildEventDefault(void* ptr, void* event);
void QPdfWriter_ConnectNotify(void* ptr, void* sign);
void QPdfWriter_ConnectNotifyDefault(void* ptr, void* sign);
void QPdfWriter_CustomEvent(void* ptr, void* event);
void QPdfWriter_CustomEventDefault(void* ptr, void* event);
void QPdfWriter_DeleteLater(void* ptr);
void QPdfWriter_DeleteLaterDefault(void* ptr);
void QPdfWriter_DisconnectNotify(void* ptr, void* sign);
void QPdfWriter_DisconnectNotifyDefault(void* ptr, void* sign);
void QPdfWriter_TimerEvent(void* ptr, void* event);
void QPdfWriter_TimerEventDefault(void* ptr, void* event);
void* QPdfWriter_MetaObject(void* ptr);
void* QPdfWriter_MetaObjectDefault(void* ptr);
char QPdfWriter_NewPage(void* ptr);
char QPdfWriter_NewPageDefault(void* ptr);
void* QPen_NewQPen();
void* QPen_NewQPen6(void* pen);
void* QPen_NewQPen2(long long style);
void* QPen_NewQPen4(void* brush, double width, long long style, long long cap, long long join);
void* QPen_NewQPen3(void* color);
void* QPen_NewQPen5(void* pen);
void QPen_SetBrush(void* ptr, void* brush);
void QPen_SetCapStyle(void* ptr, long long style);
void QPen_SetColor(void* ptr, void* color);
void QPen_SetCosmetic(void* ptr, char cosmetic);
void QPen_SetDashOffset(void* ptr, double offset);
void QPen_SetDashPattern(void* ptr, void* pattern);
void QPen_SetJoinStyle(void* ptr, long long style);
void QPen_SetMiterLimit(void* ptr, double limit);
void QPen_SetStyle(void* ptr, long long style);
void QPen_SetWidth(void* ptr, int width);
void QPen_SetWidthF(void* ptr, double width);
void QPen_Swap(void* ptr, void* other);
void QPen_DestroyQPen(void* ptr);
void* QPen_Brush(void* ptr);
void* QPen_Color(void* ptr);
struct QtGui_PackedList QPen_DashPattern(void* ptr);
long long QPen_CapStyle(void* ptr);
long long QPen_JoinStyle(void* ptr);
long long QPen_Style(void* ptr);
char QPen_IsCosmetic(void* ptr);
char QPen_IsSolid(void* ptr);
int QPen_Width(void* ptr);
double QPen_DashOffset(void* ptr);
double QPen_MiterLimit(void* ptr);
double QPen_WidthF(void* ptr);
double QPen___setDashPattern_pattern_atList(void* ptr, int i);
void QPen___setDashPattern_pattern_setList(void* ptr, double i);
void* QPen___setDashPattern_pattern_newList(void* ptr);
double QPen___dashPattern_atList(void* ptr, int i);
void QPen___dashPattern_setList(void* ptr, double i);
void* QPen___dashPattern_newList(void* ptr);
void* QPicture_NewQPicture2(void* pic);
void* QPicture_NewQPicture(int formatVersion);
char QPicture_Load2(void* ptr, void* dev, char* format);
char QPicture_Load(void* ptr, char* fileName, char* format);
char QPicture_Play(void* ptr, void* painter);
char QPicture_Save2(void* ptr, void* dev, char* format);
char QPicture_Save(void* ptr, char* fileName, char* format);
void QPicture_SetBoundingRect(void* ptr, void* r);
void QPicture_SetData(void* ptr, char* data, unsigned int size);
void QPicture_SetDataDefault(void* ptr, char* data, unsigned int size);
void QPicture_Swap(void* ptr, void* other);
void QPicture_DestroyQPicture(void* ptr);
void* QPicture_BoundingRect(void* ptr);
char QPicture_IsNull(void* ptr);
struct QtGui_PackedString QPicture_Data(void* ptr);
unsigned int QPicture_Size(void* ptr);
void* QPicture___inputFormats_atList(void* ptr, int i);
void QPicture___inputFormats_setList(void* ptr, void* i);
void* QPicture___inputFormats_newList(void* ptr);
void* QPicture___outputFormats_atList(void* ptr, int i);
void QPicture___outputFormats_setList(void* ptr, void* i);
void* QPicture___outputFormats_newList(void* ptr);
void* QPicture_PaintEngine(void* ptr);
void* QPicture_PaintEngineDefault(void* ptr);
void* QPixelFormat_NewQPixelFormat();
void* QPixelFormat_NewQPixelFormat2(long long colorModel, char* firstSize, char* secondSize, char* thirdSize, char* fourthSize, char* fifthSize, char* alphaSize, long long alphaUsage, long long alphaPosition, long long premultiplied, long long typeInterpretation, long long byteOrder, char* subEnum);
long long QPixelFormat_AlphaPosition(void* ptr);
long long QPixelFormat_Premultiplied(void* ptr);
long long QPixelFormat_AlphaUsage(void* ptr);
long long QPixelFormat_ByteOrder(void* ptr);
long long QPixelFormat_ColorModel(void* ptr);
long long QPixelFormat_TypeInterpretation(void* ptr);
long long QPixelFormat_YuvLayout(void* ptr);
struct QtGui_PackedString QPixelFormat_AlphaSize(void* ptr);
struct QtGui_PackedString QPixelFormat_BitsPerPixel(void* ptr);
struct QtGui_PackedString QPixelFormat_BlackSize(void* ptr);
struct QtGui_PackedString QPixelFormat_BlueSize(void* ptr);
struct QtGui_PackedString QPixelFormat_BrightnessSize(void* ptr);
struct QtGui_PackedString QPixelFormat_ChannelCount(void* ptr);
struct QtGui_PackedString QPixelFormat_CyanSize(void* ptr);
struct QtGui_PackedString QPixelFormat_GreenSize(void* ptr);
struct QtGui_PackedString QPixelFormat_HueSize(void* ptr);
struct QtGui_PackedString QPixelFormat_LightnessSize(void* ptr);
struct QtGui_PackedString QPixelFormat_MagentaSize(void* ptr);
struct QtGui_PackedString QPixelFormat_RedSize(void* ptr);
struct QtGui_PackedString QPixelFormat_SaturationSize(void* ptr);
struct QtGui_PackedString QPixelFormat_YellowSize(void* ptr);
void* QPixmap_QPixmap_FromImage(void* image, long long flags);
void* QPixmap_QPixmap_FromImageReader(void* imageReader, long long flags);
void* QPixmap_QPixmap_FromImage2(void* image, long long flags);
void* QPixmap_NewQPixmap();
void* QPixmap_NewQPixmap7(void* pixmap);
void* QPixmap_NewQPixmap4(void* size);
void* QPixmap_NewQPixmap5(char* fileName, char* format, long long flags);
void* QPixmap_NewQPixmap3(int width, int height);
void* QPixmap_QPixmap_TrueMatrix(void* matrix, int width, int height);
char QPixmap_ConvertFromImage(void* ptr, void* image, long long flags);
char QPixmap_Load(void* ptr, char* fileName, char* format, long long flags);
char QPixmap_LoadFromData2(void* ptr, void* data, char* format, long long flags);
char QPixmap_LoadFromData(void* ptr, char* data, unsigned int len, char* format, long long flags);
int QPixmap_QPixmap_DefaultDepth();
void QPixmap_Detach(void* ptr);
void QPixmap_Fill(void* ptr, void* color);
void QPixmap_Scroll2(void* ptr, int dx, int dy, void* rect, void* exposed);
void QPixmap_Scroll(void* ptr, int dx, int dy, int x, int y, int width, int height, void* exposed);
void QPixmap_SetDevicePixelRatio(void* ptr, double scaleFactor);
void QPixmap_SetMask(void* ptr, void* mask);
void QPixmap_Swap(void* ptr, void* other);
void QPixmap_DestroyQPixmap(void* ptr);
void* QPixmap_CreateHeuristicMask(void* ptr, char clipTight);
void* QPixmap_CreateMaskFromColor(void* ptr, void* maskColor, long long mode);
void* QPixmap_Mask(void* ptr);
void* QPixmap_ToImage(void* ptr);
void* QPixmap_Copy(void* ptr, void* rectangle);
void* QPixmap_Copy2(void* ptr, int x, int y, int width, int height);
void* QPixmap_Scaled(void* ptr, void* size, long long aspectRatioMode, long long transformMode);
void* QPixmap_Scaled2(void* ptr, int width, int height, long long aspectRatioMode, long long transformMode);
void* QPixmap_ScaledToHeight(void* ptr, int height, long long mode);
void* QPixmap_ScaledToWidth(void* ptr, int width, long long mode);
void* QPixmap_Transformed(void* ptr, void* transform, long long mode);
void* QPixmap_Rect(void* ptr);
void* QPixmap_Size(void* ptr);
char QPixmap_HasAlpha(void* ptr);
char QPixmap_HasAlphaChannel(void* ptr);
char QPixmap_IsNull(void* ptr);
char QPixmap_IsQBitmap(void* ptr);
char QPixmap_Save2(void* ptr, void* device, char* format, int quality);
char QPixmap_Save(void* ptr, char* fileName, char* format, int quality);
long long QPixmap_CacheKey(void* ptr);
double QPixmap_DevicePixelRatio(void* ptr);
void* QPixmap_PaintEngine(void* ptr);
void* QPixmap_PaintEngineDefault(void* ptr);
char QPixmapCache_QPixmapCache_Find(char* key, void* pixmap);
char QPixmapCache_QPixmapCache_Insert(char* key, void* pixmap);
int QPixmapCache_QPixmapCache_CacheLimit();
void QPixmapCache_QPixmapCache_Clear();
void QPixmapCache_QPixmapCache_Remove(char* key);
void QPixmapCache_QPixmapCache_SetCacheLimit(int n);
void* QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(long long surfaceEventType);
long long QPlatformSurfaceEvent_SurfaceEventType(void* ptr);
long long QPlatformSurfaceEvent_M_surfaceEventType(void* ptr);
void QPlatformSurfaceEvent_SetM_surfaceEventType(void* ptr, long long vsu);
void* QPointingDeviceUniqueId_QPointingDeviceUniqueId_FromNumericId(long long id);
void* QPointingDeviceUniqueId_NewQPointingDeviceUniqueId();
char QPointingDeviceUniqueId_IsValid(void* ptr);
long long QPointingDeviceUniqueId_NumericId(void* ptr);
void* QPolygon_NewQPolygon();
void* QPolygon_NewQPolygon8(void* other);
void* QPolygon_NewQPolygon4(void* v);
void* QPolygon_NewQPolygon7(void* polygon);
void* QPolygon_NewQPolygon5(void* rectangle, char closed);
void* QPolygon_NewQPolygon3(void* points);
void* QPolygon_NewQPolygon2(int size);
void QPolygon_PutPoints3(void* ptr, int index, int nPoints, void* fromPolygon, int fromIndex);
void QPolygon_SetPoint2(void* ptr, int index, void* point);
void QPolygon_SetPoint(void* ptr, int index, int x, int y);
void QPolygon_SetPoints(void* ptr, int nPoints, int points);
void QPolygon_Swap(void* ptr, void* other);
void QPolygon_Translate2(void* ptr, void* offset);
void QPolygon_Translate(void* ptr, int dx, int dy);
void QPolygon_DestroyQPolygon(void* ptr);
void* QPolygon_Point2(void* ptr, int index);
void* QPolygon_Intersected(void* ptr, void* r);
void* QPolygon_Subtracted(void* ptr, void* r);
void* QPolygon_Translated2(void* ptr, void* offset);
void* QPolygon_Translated(void* ptr, int dx, int dy);
void* QPolygon_United(void* ptr, void* r);
void* QPolygon_BoundingRect(void* ptr);
char QPolygon_ContainsPoint(void* ptr, void* point, long long fillRule);
void QPolygon_Point(void* ptr, int index, int x, int y);
void* QPolygon___QPolygon_v_atList4(void* ptr, int i);
void QPolygon___QPolygon_v_setList4(void* ptr, void* i);
void* QPolygon___QPolygon_v_newList4(void* ptr);
void* QPolygon___QPolygon_points_atList3(void* ptr, int i);
void QPolygon___QPolygon_points_setList3(void* ptr, void* i);
void* QPolygon___QPolygon_points_newList3(void* ptr);
void* QPolygon___QVector_other_atList5(void* ptr, int i);
void QPolygon___QVector_other_setList5(void* ptr, void* i);
void* QPolygon___QVector_other_newList5(void* ptr);
void* QPolygon___QVector_other_atList4(void* ptr, int i);
void QPolygon___QVector_other_setList4(void* ptr, void* i);
void* QPolygon___QVector_other_newList4(void* ptr);
void* QPolygon___fill_atList(void* ptr, int i);
void QPolygon___fill_setList(void* ptr, void* i);
void* QPolygon___fill_newList(void* ptr);
void* QPolygon___fromList_atList(void* ptr, int i);
void QPolygon___fromList_setList(void* ptr, void* i);
void* QPolygon___fromList_newList(void* ptr);
void* QPolygon___fromList_list_atList(void* ptr, int i);
void QPolygon___fromList_list_setList(void* ptr, void* i);
void* QPolygon___fromList_list_newList(void* ptr);
void* QPolygon___fromStdVector_atList(void* ptr, int i);
void QPolygon___fromStdVector_setList(void* ptr, void* i);
void* QPolygon___fromStdVector_newList(void* ptr);
void* QPolygon___append_value_atList3(void* ptr, int i);
void QPolygon___append_value_setList3(void* ptr, void* i);
void* QPolygon___append_value_newList3(void* ptr);
void* QPolygon___swap_other_atList(void* ptr, int i);
void QPolygon___swap_other_setList(void* ptr, void* i);
void* QPolygon___swap_other_newList(void* ptr);
void* QPolygon___toList_atList(void* ptr, int i);
void QPolygon___toList_setList(void* ptr, void* i);
void* QPolygon___toList_newList(void* ptr);
void* QPolygon___mid_atList(void* ptr, int i);
void QPolygon___mid_setList(void* ptr, void* i);
void* QPolygon___mid_newList(void* ptr);
void* QPolygonF_NewQPolygonF();
void* QPolygonF_NewQPolygonF8(void* other);
void* QPolygonF_NewQPolygonF4(void* v);
void* QPolygonF_NewQPolygonF6(void* polygon);
void* QPolygonF_NewQPolygonF7(void* polygon);
void* QPolygonF_NewQPolygonF5(void* rectangle);
void* QPolygonF_NewQPolygonF3(void* points);
void* QPolygonF_NewQPolygonF2(int size);
void QPolygonF_Swap(void* ptr, void* other);
void QPolygonF_Translate(void* ptr, void* offset);
void QPolygonF_Translate2(void* ptr, double dx, double dy);
void QPolygonF_DestroyQPolygonF(void* ptr);
void* QPolygonF_ToPolygon(void* ptr);
void* QPolygonF_Intersected(void* ptr, void* r);
void* QPolygonF_Subtracted(void* ptr, void* r);
void* QPolygonF_Translated(void* ptr, void* offset);
void* QPolygonF_Translated2(void* ptr, double dx, double dy);
void* QPolygonF_United(void* ptr, void* r);
void* QPolygonF_BoundingRect(void* ptr);
char QPolygonF_ContainsPoint(void* ptr, void* point, long long fillRule);
char QPolygonF_IsClosed(void* ptr);
void* QPolygonF___QPolygonF_v_atList4(void* ptr, int i);
void QPolygonF___QPolygonF_v_setList4(void* ptr, void* i);
void* QPolygonF___QPolygonF_v_newList4(void* ptr);
void* QPolygonF___QPolygonF_points_atList3(void* ptr, int i);
void QPolygonF___QPolygonF_points_setList3(void* ptr, void* i);
void* QPolygonF___QPolygonF_points_newList3(void* ptr);
void* QPolygonF___QVector_other_atList5(void* ptr, int i);
void QPolygonF___QVector_other_setList5(void* ptr, void* i);
void* QPolygonF___QVector_other_newList5(void* ptr);
void* QPolygonF___QVector_other_atList4(void* ptr, int i);
void QPolygonF___QVector_other_setList4(void* ptr, void* i);
void* QPolygonF___QVector_other_newList4(void* ptr);
void* QPolygonF___fill_atList(void* ptr, int i);
void QPolygonF___fill_setList(void* ptr, void* i);
void* QPolygonF___fill_newList(void* ptr);
void* QPolygonF___fromList_atList(void* ptr, int i);
void QPolygonF___fromList_setList(void* ptr, void* i);
void* QPolygonF___fromList_newList(void* ptr);
void* QPolygonF___fromList_list_atList(void* ptr, int i);
void QPolygonF___fromList_list_setList(void* ptr, void* i);
void* QPolygonF___fromList_list_newList(void* ptr);
void* QPolygonF___fromStdVector_atList(void* ptr, int i);
void QPolygonF___fromStdVector_setList(void* ptr, void* i);
void* QPolygonF___fromStdVector_newList(void* ptr);
void* QPolygonF___append_value_atList3(void* ptr, int i);
void QPolygonF___append_value_setList3(void* ptr, void* i);
void* QPolygonF___append_value_newList3(void* ptr);
void* QPolygonF___swap_other_atList(void* ptr, int i);
void QPolygonF___swap_other_setList(void* ptr, void* i);
void* QPolygonF___swap_other_newList(void* ptr);
void* QPolygonF___toList_atList(void* ptr, int i);
void QPolygonF___toList_setList(void* ptr, void* i);
void* QPolygonF___toList_newList(void* ptr);
void* QPolygonF___mid_atList(void* ptr, int i);
void QPolygonF___mid_setList(void* ptr, void* i);
void* QPolygonF___mid_newList(void* ptr);
void* QQuaternion_QQuaternion_FromAxes(void* xAxis, void* yAxis, void* zAxis);
void* QQuaternion_QQuaternion_FromAxisAndAngle(void* axis, float angle);
void* QQuaternion_QQuaternion_FromAxisAndAngle2(float x, float y, float z, float angle);
void* QQuaternion_QQuaternion_FromDirection(void* direction, void* up);
void* QQuaternion_QQuaternion_FromEulerAngles2(void* eulerAngles);
void* QQuaternion_QQuaternion_FromEulerAngles(float pitch, float yaw, float roll);
void* QQuaternion_QQuaternion_Nlerp(void* q1, void* q2, float t);
void* QQuaternion_QQuaternion_RotationTo(void* from, void* to);
void* QQuaternion_QQuaternion_Slerp(void* q1, void* q2, float t);
void* QQuaternion_NewQQuaternion();
void* QQuaternion_NewQQuaternion5(void* vector);
void* QQuaternion_NewQQuaternion4(float scalar, void* vector);
void* QQuaternion_NewQQuaternion3(float scalar, float xpos, float ypos, float zpos);
float QQuaternion_QQuaternion_DotProduct(void* q1, void* q2);
void QQuaternion_Normalize(void* ptr);
void QQuaternion_SetScalar(void* ptr, float scalar);
void QQuaternion_SetVector(void* ptr, void* vector);
void QQuaternion_SetVector2(void* ptr, float x, float y, float z);
void QQuaternion_SetX(void* ptr, float x);
void QQuaternion_SetY(void* ptr, float y);
void QQuaternion_SetZ(void* ptr, float z);
void* QQuaternion_Conjugated(void* ptr);
void* QQuaternion_Inverted(void* ptr);
void* QQuaternion_Normalized(void* ptr);
void* QQuaternion_RotatedVector(void* ptr, void* vector);
void* QQuaternion_ToEulerAngles(void* ptr);
void* QQuaternion_Vector(void* ptr);
void* QQuaternion_ToVector4D(void* ptr);
char QQuaternion_IsIdentity(void* ptr);
char QQuaternion_IsNull(void* ptr);
float QQuaternion_Length(void* ptr);
float QQuaternion_LengthSquared(void* ptr);
float QQuaternion_Scalar(void* ptr);
float QQuaternion_X(void* ptr);
float QQuaternion_Y(void* ptr);
float QQuaternion_Z(void* ptr);
void QQuaternion_GetAxes(void* ptr, void* xAxis, void* yAxis, void* zAxis);
void QQuaternion_GetAxisAndAngle2(void* ptr, void* axis, float angle);
void QQuaternion_GetAxisAndAngle(void* ptr, float x, float y, float z, float angle);
void QQuaternion_GetEulerAngles(void* ptr, float pitch, float yaw, float roll);
void* QRadialGradient_NewQRadialGradient();
void* QRadialGradient_NewQRadialGradient6(void* center, double centerRadius, void* focalPoint, double focalRadius);
void* QRadialGradient_NewQRadialGradient4(void* center, double radius);
void* QRadialGradient_NewQRadialGradient2(void* center, double radius, void* focalPoint);
void* QRadialGradient_NewQRadialGradient7(double cx, double cy, double centerRadius, double fx, double fy, double focalRadius);
void* QRadialGradient_NewQRadialGradient5(double cx, double cy, double radius);
void* QRadialGradient_NewQRadialGradient3(double cx, double cy, double radius, double fx, double fy);
void QRadialGradient_SetCenter(void* ptr, void* center);
void QRadialGradient_SetCenter2(void* ptr, double x, double y);
void QRadialGradient_SetCenterRadius(void* ptr, double radius);
void QRadialGradient_SetFocalPoint(void* ptr, void* focalPoint);
void QRadialGradient_SetFocalPoint2(void* ptr, double x, double y);
void QRadialGradient_SetFocalRadius(void* ptr, double radius);
void QRadialGradient_SetRadius(void* ptr, double radius);
void* QRadialGradient_Center(void* ptr);
void* QRadialGradient_FocalPoint(void* ptr);
double QRadialGradient_CenterRadius(void* ptr);
double QRadialGradient_FocalRadius(void* ptr);
double QRadialGradient_Radius(void* ptr);
void* QRasterWindow_NewQRasterWindow(void* parent);
void* QRawFont_QRawFont_FromFont(void* font, long long writingSystem);
void* QRawFont_NewQRawFont();
void* QRawFont_NewQRawFont3(void* fontData, double pixelSize, long long hintingPreference);
void* QRawFont_NewQRawFont4(void* other);
void* QRawFont_NewQRawFont2(char* fileName, double pixelSize, long long hintingPreference);
void QRawFont_LoadFromData(void* ptr, void* fontData, double pixelSize, long long hintingPreference);
void QRawFont_LoadFromFile(void* ptr, char* fileName, double pixelSize, long long hintingPreference);
void QRawFont_SetPixelSize(void* ptr, double pixelSize);
void QRawFont_Swap(void* ptr, void* other);
void QRawFont_DestroyQRawFont(void* ptr);
void* QRawFont_FontTable(void* ptr, char* tagName);
long long QRawFont_HintingPreference(void* ptr);
long long QRawFont_Style(void* ptr);
void* QRawFont_AlphaMapForGlyph(void* ptr, unsigned int glyphIndex, long long antialiasingType, void* transform);
struct QtGui_PackedList QRawFont_SupportedWritingSystems(void* ptr);
void* QRawFont_PathForGlyph(void* ptr, unsigned int glyphIndex);
void* QRawFont_BoundingRect(void* ptr, unsigned int glyphIndex);
struct QtGui_PackedString QRawFont_FamilyName(void* ptr);
struct QtGui_PackedString QRawFont_StyleName(void* ptr);
struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes2(void* ptr, void* glyphIndexes);
struct QtGui_PackedList QRawFont_AdvancesForGlyphIndexes(void* ptr, void* glyphIndexes, long long layoutFlags);
struct QtGui_PackedList QRawFont_GlyphIndexesForString(void* ptr, char* text);
char QRawFont_AdvancesForGlyphIndexes3(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs);
char QRawFont_AdvancesForGlyphIndexes4(void* ptr, unsigned int glyphIndexes, void* advances, int numGlyphs, long long layoutFlags);
char QRawFont_GlyphIndexesForChars(void* ptr, void* chars, int numChars, unsigned int glyphIndexes, int numGlyphs);
char QRawFont_IsValid(void* ptr);
char QRawFont_SupportsCharacter(void* ptr, void* character);
char QRawFont_SupportsCharacter2(void* ptr, unsigned int ucs4);
int QRawFont_Weight(void* ptr);
double QRawFont_Ascent(void* ptr);
double QRawFont_AverageCharWidth(void* ptr);
double QRawFont_CapHeight(void* ptr);
double QRawFont_Descent(void* ptr);
double QRawFont_Leading(void* ptr);
double QRawFont_LineThickness(void* ptr);
double QRawFont_MaxCharWidth(void* ptr);
double QRawFont_PixelSize(void* ptr);
double QRawFont_UnderlinePosition(void* ptr);
double QRawFont_UnitsPerEm(void* ptr);
double QRawFont_XHeight(void* ptr);
long long QRawFont___supportedWritingSystems_atList(void* ptr, int i);
void QRawFont___supportedWritingSystems_setList(void* ptr, long long i);
void* QRawFont___supportedWritingSystems_newList(void* ptr);
void* QRawFont___advancesForGlyphIndexes_atList2(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_setList2(void* ptr, void* i);
void* QRawFont___advancesForGlyphIndexes_newList2(void* ptr);
unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList2(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList2(void* ptr, unsigned int i);
void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList2(void* ptr);
void* QRawFont___advancesForGlyphIndexes_atList(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_setList(void* ptr, void* i);
void* QRawFont___advancesForGlyphIndexes_newList(void* ptr);
unsigned int QRawFont___advancesForGlyphIndexes_glyphIndexes_atList(void* ptr, int i);
void QRawFont___advancesForGlyphIndexes_glyphIndexes_setList(void* ptr, unsigned int i);
void* QRawFont___advancesForGlyphIndexes_glyphIndexes_newList(void* ptr);
unsigned int QRawFont___glyphIndexesForString_atList(void* ptr, int i);
void QRawFont___glyphIndexesForString_setList(void* ptr, unsigned int i);
void* QRawFont___glyphIndexesForString_newList(void* ptr);
void* QRegExpValidator_NewQRegExpValidator(void* parent);
void* QRegExpValidator_NewQRegExpValidator2(void* rx, void* parent);
void QRegExpValidator_SetRegExp(void* ptr, void* rx);
void QRegExpValidator_DestroyQRegExpValidator(void* ptr);
long long QRegExpValidator_Validate(void* ptr, char* input, int pos);
long long QRegExpValidator_ValidateDefault(void* ptr, char* input, int pos);
void* QRegExpValidator_RegExp(void* ptr);
void* QRegion_NewQRegion();
void* QRegion_NewQRegion6(void* other);
void* QRegion_NewQRegion7(void* bm);
void* QRegion_NewQRegion4(void* a, long long fillRule);
void* QRegion_NewQRegion3(void* r, long long t);
void* QRegion_NewQRegion5(void* r);
void* QRegion_NewQRegion2(int x, int y, int w, int h, long long t);
void QRegion_SetRects(void* ptr, void* rects, int number);
void QRegion_Swap(void* ptr, void* other);
void QRegion_Translate2(void* ptr, void* point);
void QRegion_Translate(void* ptr, int dx, int dy);
void* QRegion_BoundingRect(void* ptr);
void* QRegion_Intersected2(void* ptr, void* rect);
void* QRegion_Intersected(void* ptr, void* r);
void* QRegion_Subtracted(void* ptr, void* r);
void* QRegion_Translated2(void* ptr, void* p);
void* QRegion_Translated(void* ptr, int dx, int dy);
void* QRegion_United2(void* ptr, void* rect);
void* QRegion_United(void* ptr, void* r);
void* QRegion_Xored(void* ptr, void* r);
struct QtGui_PackedList QRegion_Rects(void* ptr);
char QRegion_Contains(void* ptr, void* p);
char QRegion_Contains2(void* ptr, void* r);
char QRegion_Intersects2(void* ptr, void* rect);
char QRegion_Intersects(void* ptr, void* region);
char QRegion_IsEmpty(void* ptr);
char QRegion_IsNull(void* ptr);
int QRegion_RectCount(void* ptr);
void* QRegion___rects_atList(void* ptr, int i);
void QRegion___rects_setList(void* ptr, void* i);
void* QRegion___rects_newList(void* ptr);
void* QRegularExpressionValidator_NewQRegularExpressionValidator(void* parent);
void* QRegularExpressionValidator_NewQRegularExpressionValidator2(void* re, void* parent);
void QRegularExpressionValidator_ConnectRegularExpressionChanged(void* ptr);
void QRegularExpressionValidator_DisconnectRegularExpressionChanged(void* ptr);
void QRegularExpressionValidator_RegularExpressionChanged(void* ptr, void* re);
void QRegularExpressionValidator_SetRegularExpression(void* ptr, void* re);
void QRegularExpressionValidator_SetRegularExpressionDefault(void* ptr, void* re);
void QRegularExpressionValidator_DestroyQRegularExpressionValidator(void* ptr);
void* QRegularExpressionValidator_RegularExpression(void* ptr);
long long QRegularExpressionValidator_Validate(void* ptr, char* input, int pos);
long long QRegularExpressionValidator_ValidateDefault(void* ptr, char* input, int pos);
void* QResizeEvent_NewQResizeEvent(void* size, void* oldSize);
void* QResizeEvent_OldSize(void* ptr);
void* QResizeEvent_Size(void* ptr);
void QRgba64_SetAlpha(void* ptr, unsigned short alpha);
void QRgba64_SetBlue(void* ptr, unsigned short blue);
void QRgba64_SetGreen(void* ptr, unsigned short green);
void QRgba64_SetRed(void* ptr, unsigned short red);
char QRgba64_IsOpaque(void* ptr);
char QRgba64_IsTransparent(void* ptr);
unsigned short QRgba64_Alpha(void* ptr);
unsigned short QRgba64_Blue(void* ptr);
unsigned short QRgba64_Green(void* ptr);
unsigned short QRgba64_Red(void* ptr);
struct QtGui_PackedString QRgba64_Alpha8(void* ptr);
struct QtGui_PackedString QRgba64_Blue8(void* ptr);
struct QtGui_PackedString QRgba64_Green8(void* ptr);
struct QtGui_PackedString QRgba64_Red8(void* ptr);
unsigned int QRgba64_ToArgb32(void* ptr);
unsigned short QRgba64_ToRgb16(void* ptr);
void* QScreen_GrabWindow(void* ptr, uintptr_t window, int x, int y, int width, int height);
void QScreen_ConnectAvailableGeometryChanged(void* ptr);
void QScreen_DisconnectAvailableGeometryChanged(void* ptr);
void QScreen_AvailableGeometryChanged(void* ptr, void* geometry);
void QScreen_ConnectGeometryChanged(void* ptr);
void QScreen_DisconnectGeometryChanged(void* ptr);
void QScreen_GeometryChanged(void* ptr, void* geometry);
void QScreen_ConnectLogicalDotsPerInchChanged(void* ptr);
void QScreen_DisconnectLogicalDotsPerInchChanged(void* ptr);
void QScreen_LogicalDotsPerInchChanged(void* ptr, double dpi);
void QScreen_ConnectOrientationChanged(void* ptr);
void QScreen_DisconnectOrientationChanged(void* ptr);
void QScreen_OrientationChanged(void* ptr, long long orientation);
void QScreen_ConnectPhysicalDotsPerInchChanged(void* ptr);
void QScreen_DisconnectPhysicalDotsPerInchChanged(void* ptr);
void QScreen_PhysicalDotsPerInchChanged(void* ptr, double dpi);
void QScreen_ConnectPhysicalSizeChanged(void* ptr);
void QScreen_DisconnectPhysicalSizeChanged(void* ptr);
void QScreen_PhysicalSizeChanged(void* ptr, void* size);
void QScreen_ConnectPrimaryOrientationChanged(void* ptr);
void QScreen_DisconnectPrimaryOrientationChanged(void* ptr);
void QScreen_PrimaryOrientationChanged(void* ptr, long long orientation);
void QScreen_ConnectRefreshRateChanged(void* ptr);
void QScreen_DisconnectRefreshRateChanged(void* ptr);
void QScreen_RefreshRateChanged(void* ptr, double refreshRate);
void QScreen_SetOrientationUpdateMask(void* ptr, long long mask);
void QScreen_ConnectVirtualGeometryChanged(void* ptr);
void QScreen_DisconnectVirtualGeometryChanged(void* ptr);
void QScreen_VirtualGeometryChanged(void* ptr, void* rect);
void QScreen_DestroyQScreen(void* ptr);
struct QtGui_PackedList QScreen_VirtualSiblings(void* ptr);
void* QScreen_AvailableGeometry(void* ptr);
void* QScreen_AvailableVirtualGeometry(void* ptr);
void* QScreen_Geometry(void* ptr);
void* QScreen_MapBetween(void* ptr, long long a, long long b, void* rect);
void* QScreen_VirtualGeometry(void* ptr);
void* QScreen_AvailableSize(void* ptr);
void* QScreen_AvailableVirtualSize(void* ptr);
void* QScreen_Size(void* ptr);
void* QScreen_VirtualSize(void* ptr);
void* QScreen_PhysicalSize(void* ptr);
struct QtGui_PackedString QScreen_Name(void* ptr);
void* QScreen_TransformBetween(void* ptr, long long a, long long b, void* target);
long long QScreen_NativeOrientation(void* ptr);
long long QScreen_Orientation(void* ptr);
long long QScreen_PrimaryOrientation(void* ptr);
long long QScreen_OrientationUpdateMask(void* ptr);
char QScreen_IsLandscape(void* ptr, long long o);
char QScreen_IsPortrait(void* ptr, long long o);
int QScreen_AngleBetween(void* ptr, long long a, long long b);
int QScreen_Depth(void* ptr);
double QScreen_DevicePixelRatio(void* ptr);
double QScreen_LogicalDotsPerInch(void* ptr);
double QScreen_LogicalDotsPerInchX(void* ptr);
double QScreen_LogicalDotsPerInchY(void* ptr);
double QScreen_PhysicalDotsPerInch(void* ptr);
double QScreen_PhysicalDotsPerInchX(void* ptr);
double QScreen_PhysicalDotsPerInchY(void* ptr);
double QScreen_RefreshRate(void* ptr);
void* QScreen___virtualSiblings_atList(void* ptr, int i);
void QScreen___virtualSiblings_setList(void* ptr, void* i);
void* QScreen___virtualSiblings_newList(void* ptr);
void* QScreen___dynamicPropertyNames_atList(void* ptr, int i);
void QScreen___dynamicPropertyNames_setList(void* ptr, void* i);
void* QScreen___dynamicPropertyNames_newList(void* ptr);
void* QScreen___findChildren_atList2(void* ptr, int i);
void QScreen___findChildren_setList2(void* ptr, void* i);
void* QScreen___findChildren_newList2(void* ptr);
void* QScreen___findChildren_atList3(void* ptr, int i);
void QScreen___findChildren_setList3(void* ptr, void* i);
void* QScreen___findChildren_newList3(void* ptr);
void* QScreen___findChildren_atList(void* ptr, int i);
void QScreen___findChildren_setList(void* ptr, void* i);
void* QScreen___findChildren_newList(void* ptr);
void* QScreen___children_atList(void* ptr, int i);
void QScreen___children_setList(void* ptr, void* i);
void* QScreen___children_newList(void* ptr);
char QScreen_EventDefault(void* ptr, void* e);
char QScreen_EventFilterDefault(void* ptr, void* watched, void* event);
void QScreen_ChildEventDefault(void* ptr, void* event);
void QScreen_ConnectNotifyDefault(void* ptr, void* sign);
void QScreen_CustomEventDefault(void* ptr, void* event);
void QScreen_DeleteLaterDefault(void* ptr);
void QScreen_DisconnectNotifyDefault(void* ptr, void* sign);
void QScreen_TimerEventDefault(void* ptr, void* event);
void* QScreen_MetaObjectDefault(void* ptr);
void* QScrollEvent_NewQScrollEvent(void* contentPos, void* overshootDistance, long long scrollState);
void QScrollEvent_DestroyQScrollEvent(void* ptr);
void* QScrollEvent_ContentPos(void* ptr);
void* QScrollEvent_OvershootDistance(void* ptr);
long long QScrollEvent_ScrollState(void* ptr);
void* QScrollPrepareEvent_NewQScrollPrepareEvent(void* startPos);
void QScrollPrepareEvent_SetContentPos(void* ptr, void* pos);
void QScrollPrepareEvent_SetContentPosRange(void* ptr, void* rect);
void QScrollPrepareEvent_SetViewportSize(void* ptr, void* size);
void QScrollPrepareEvent_DestroyQScrollPrepareEvent(void* ptr);
void* QScrollPrepareEvent_ContentPos(void* ptr);
void* QScrollPrepareEvent_StartPos(void* ptr);
void* QScrollPrepareEvent_ContentPosRange(void* ptr);
void* QScrollPrepareEvent_ViewportSize(void* ptr);
char QSessionManager_AllowsErrorInteraction(void* ptr);
char QSessionManager_AllowsInteraction(void* ptr);
void QSessionManager_Cancel(void* ptr);
void QSessionManager_Release(void* ptr);
void QSessionManager_RequestPhase2(void* ptr);
void QSessionManager_SetDiscardCommand(void* ptr, char* command);
void QSessionManager_SetManagerProperty2(void* ptr, char* name, char* value);
void QSessionManager_SetManagerProperty(void* ptr, char* name, char* value);
void QSessionManager_SetRestartCommand(void* ptr, char* command);
void QSessionManager_SetRestartHint(void* ptr, long long hint);
struct QtGui_PackedString QSessionManager_SessionId(void* ptr);
struct QtGui_PackedString QSessionManager_SessionKey(void* ptr);
struct QtGui_PackedString QSessionManager_DiscardCommand(void* ptr);
struct QtGui_PackedString QSessionManager_RestartCommand(void* ptr);
long long QSessionManager_RestartHint(void* ptr);
char QSessionManager_IsPhase2(void* ptr);
void* QSessionManager___dynamicPropertyNames_atList(void* ptr, int i);
void QSessionManager___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSessionManager___dynamicPropertyNames_newList(void* ptr);
void* QSessionManager___findChildren_atList2(void* ptr, int i);
void QSessionManager___findChildren_setList2(void* ptr, void* i);
void* QSessionManager___findChildren_newList2(void* ptr);
void* QSessionManager___findChildren_atList3(void* ptr, int i);
void QSessionManager___findChildren_setList3(void* ptr, void* i);
void* QSessionManager___findChildren_newList3(void* ptr);
void* QSessionManager___findChildren_atList(void* ptr, int i);
void QSessionManager___findChildren_setList(void* ptr, void* i);
void* QSessionManager___findChildren_newList(void* ptr);
void* QSessionManager___children_atList(void* ptr, int i);
void QSessionManager___children_setList(void* ptr, void* i);
void* QSessionManager___children_newList(void* ptr);
char QSessionManager_EventDefault(void* ptr, void* e);
char QSessionManager_EventFilterDefault(void* ptr, void* watched, void* event);
void QSessionManager_ChildEventDefault(void* ptr, void* event);
void QSessionManager_ConnectNotifyDefault(void* ptr, void* sign);
void QSessionManager_CustomEventDefault(void* ptr, void* event);
void QSessionManager_DeleteLaterDefault(void* ptr);
void QSessionManager_DisconnectNotifyDefault(void* ptr, void* sign);
void QSessionManager_TimerEventDefault(void* ptr, void* event);
void* QSessionManager_MetaObjectDefault(void* ptr);
void* QShortcutEvent_NewQShortcutEvent(void* key, int id, char ambiguous);
void QShortcutEvent_DestroyQShortcutEvent(void* ptr);
char QShortcutEvent_IsAmbiguous(void* ptr);
void* QShortcutEvent_Key(void* ptr);
int QShortcutEvent_ShortcutId(void* ptr);
char QShortcutEvent_Ambig(void* ptr);
void QShortcutEvent_SetAmbig(void* ptr, char vbo);
void* QShortcutEvent_Sequence(void* ptr);
void QShortcutEvent_SetSequence(void* ptr, void* vqk);
int QShortcutEvent_Sid(void* ptr);
void QShortcutEvent_SetSid(void* ptr, int vin);
void* QShowEvent_NewQShowEvent();
struct QtGui_PackedList QStandardItem_TakeColumn(void* ptr, int column);
struct QtGui_PackedList QStandardItem_TakeRow(void* ptr, int row);
void* QStandardItem_TakeChild(void* ptr, int row, int column);
void* QStandardItem_NewQStandardItem();
void* QStandardItem_NewQStandardItem3(void* icon, char* text);
void* QStandardItem_NewQStandardItem5(void* other);
void* QStandardItem_NewQStandardItem2(char* text);
void* QStandardItem_NewQStandardItem4(int rows, int columns);
void QStandardItem_AppendColumn(void* ptr, void* items);
void QStandardItem_AppendRow2(void* ptr, void* item);
void QStandardItem_AppendRow(void* ptr, void* items);
void QStandardItem_AppendRows(void* ptr, void* items);
void QStandardItem_EmitDataChanged(void* ptr);
void QStandardItem_InsertColumn(void* ptr, int column, void* items);
void QStandardItem_InsertColumns(void* ptr, int column, int count);
void QStandardItem_InsertRow2(void* ptr, int row, void* item);
void QStandardItem_InsertRow(void* ptr, int row, void* items);
void QStandardItem_InsertRows(void* ptr, int row, void* items);
void QStandardItem_InsertRows2(void* ptr, int row, int count);
void QStandardItem_Read(void* ptr, void* in);
void QStandardItem_ReadDefault(void* ptr, void* in);
void QStandardItem_RemoveColumn(void* ptr, int column);
void QStandardItem_RemoveColumns(void* ptr, int column, int count);
void QStandardItem_RemoveRow(void* ptr, int row);
void QStandardItem_RemoveRows(void* ptr, int row, int count);
void QStandardItem_SetAccessibleDescription(void* ptr, char* accessibleDescription);
void QStandardItem_SetAccessibleText(void* ptr, char* accessibleText);
void QStandardItem_SetAutoTristate(void* ptr, char tristate);
void QStandardItem_SetBackground(void* ptr, void* brush);
void QStandardItem_SetCheckState(void* ptr, long long state);
void QStandardItem_SetCheckable(void* ptr, char checkable);
void QStandardItem_SetChild2(void* ptr, int row, void* item);
void QStandardItem_SetChild(void* ptr, int row, int column, void* item);
void QStandardItem_SetColumnCount(void* ptr, int columns);
void QStandardItem_SetData(void* ptr, void* value, int role);
void QStandardItem_SetDataDefault(void* ptr, void* value, int role);
void QStandardItem_SetDragEnabled(void* ptr, char dragEnabled);
void QStandardItem_SetDropEnabled(void* ptr, char dropEnabled);
void QStandardItem_SetEditable(void* ptr, char editable);
void QStandardItem_SetEnabled(void* ptr, char enabled);
void QStandardItem_SetFlags(void* ptr, long long flags);
void QStandardItem_SetFont(void* ptr, void* font);
void QStandardItem_SetForeground(void* ptr, void* brush);
void QStandardItem_SetIcon(void* ptr, void* icon);
void QStandardItem_SetRowCount(void* ptr, int rows);
void QStandardItem_SetSelectable(void* ptr, char selectable);
void QStandardItem_SetSizeHint(void* ptr, void* size);
void QStandardItem_SetStatusTip(void* ptr, char* statusTip);
void QStandardItem_SetText(void* ptr, char* text);
void QStandardItem_SetTextAlignment(void* ptr, long long alignment);
void QStandardItem_SetToolTip(void* ptr, char* toolTip);
void QStandardItem_SetUserTristate(void* ptr, char tristate);
void QStandardItem_SetWhatsThis(void* ptr, char* whatsThis);
void QStandardItem_SortChildren(void* ptr, int column, long long order);
void QStandardItem_DestroyQStandardItem(void* ptr);
void QStandardItem_DestroyQStandardItemDefault(void* ptr);
void* QStandardItem_Background(void* ptr);
void* QStandardItem_Foreground(void* ptr);
void* QStandardItem_Font(void* ptr);
void* QStandardItem_Icon(void* ptr);
void* QStandardItem_Index(void* ptr);
void* QStandardItem_SizeHint(void* ptr);
void* QStandardItem_Child(void* ptr, int row, int column);
void* QStandardItem_Clone(void* ptr);
void* QStandardItem_CloneDefault(void* ptr);
void* QStandardItem_Parent(void* ptr);
void* QStandardItem_Model(void* ptr);
struct QtGui_PackedString QStandardItem_AccessibleDescription(void* ptr);
struct QtGui_PackedString QStandardItem_AccessibleText(void* ptr);
struct QtGui_PackedString QStandardItem_StatusTip(void* ptr);
struct QtGui_PackedString QStandardItem_Text(void* ptr);
struct QtGui_PackedString QStandardItem_ToolTip(void* ptr);
struct QtGui_PackedString QStandardItem_WhatsThis(void* ptr);
void* QStandardItem_Data(void* ptr, int role);
void* QStandardItem_DataDefault(void* ptr, int role);
long long QStandardItem_TextAlignment(void* ptr);
long long QStandardItem_CheckState(void* ptr);
long long QStandardItem_Flags(void* ptr);
char QStandardItem_HasChildren(void* ptr);
char QStandardItem_IsAutoTristate(void* ptr);
char QStandardItem_IsCheckable(void* ptr);
char QStandardItem_IsDragEnabled(void* ptr);
char QStandardItem_IsDropEnabled(void* ptr);
char QStandardItem_IsEditable(void* ptr);
char QStandardItem_IsEnabled(void* ptr);
char QStandardItem_IsSelectable(void* ptr);
char QStandardItem_IsUserTristate(void* ptr);
int QStandardItem_Column(void* ptr);
int QStandardItem_ColumnCount(void* ptr);
int QStandardItem_Row(void* ptr);
int QStandardItem_RowCount(void* ptr);
int QStandardItem_Type(void* ptr);
int QStandardItem_TypeDefault(void* ptr);
void QStandardItem_Write(void* ptr, void* out);
void QStandardItem_WriteDefault(void* ptr, void* out);
void* QStandardItem___takeColumn_atList(void* ptr, int i);
void QStandardItem___takeColumn_setList(void* ptr, void* i);
void* QStandardItem___takeColumn_newList(void* ptr);
void* QStandardItem___takeRow_atList(void* ptr, int i);
void QStandardItem___takeRow_setList(void* ptr, void* i);
void* QStandardItem___takeRow_newList(void* ptr);
void* QStandardItem___appendColumn_items_atList(void* ptr, int i);
void QStandardItem___appendColumn_items_setList(void* ptr, void* i);
void* QStandardItem___appendColumn_items_newList(void* ptr);
void* QStandardItem___appendRow_items_atList(void* ptr, int i);
void QStandardItem___appendRow_items_setList(void* ptr, void* i);
void* QStandardItem___appendRow_items_newList(void* ptr);
void* QStandardItem___appendRows_items_atList(void* ptr, int i);
void QStandardItem___appendRows_items_setList(void* ptr, void* i);
void* QStandardItem___appendRows_items_newList(void* ptr);
void* QStandardItem___insertColumn_items_atList(void* ptr, int i);
void QStandardItem___insertColumn_items_setList(void* ptr, void* i);
void* QStandardItem___insertColumn_items_newList(void* ptr);
void* QStandardItem___insertRow_items_atList(void* ptr, int i);
void QStandardItem___insertRow_items_setList(void* ptr, void* i);
void* QStandardItem___insertRow_items_newList(void* ptr);
void* QStandardItem___insertRows_items_atList(void* ptr, int i);
void QStandardItem___insertRows_items_setList(void* ptr, void* i);
void* QStandardItem___insertRows_items_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel_TakeColumn(void* ptr, int column);
struct QtGui_PackedList QStandardItemModel_TakeRow(void* ptr, int row);
void* QStandardItemModel_TakeHorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_TakeItem(void* ptr, int row, int column);
void* QStandardItemModel_TakeVerticalHeaderItem(void* ptr, int row);
void* QStandardItemModel_NewQStandardItemModel(void* parent);
void* QStandardItemModel_NewQStandardItemModel2(int rows, int columns, void* parent);
char QStandardItemModel_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QStandardItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char QStandardItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char QStandardItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char QStandardItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char QStandardItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
char QStandardItemModel_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char QStandardItemModel_SetItemDataDefault(void* ptr, void* index, void* roles);
void QStandardItemModel_AppendColumn(void* ptr, void* items);
void QStandardItemModel_AppendRow2(void* ptr, void* item);
void QStandardItemModel_AppendRow(void* ptr, void* items);
void QStandardItemModel_Clear(void* ptr);
void QStandardItemModel_InsertColumn(void* ptr, int column, void* items);
void QStandardItemModel_InsertRow2(void* ptr, int row, void* item);
void QStandardItemModel_InsertRow(void* ptr, int row, void* items);
void QStandardItemModel_ConnectItemChanged(void* ptr);
void QStandardItemModel_DisconnectItemChanged(void* ptr);
void QStandardItemModel_ItemChanged(void* ptr, void* item);
void QStandardItemModel_SetColumnCount(void* ptr, int columns);
void QStandardItemModel_SetHorizontalHeaderItem(void* ptr, int column, void* item);
void QStandardItemModel_SetHorizontalHeaderLabels(void* ptr, char* labels);
void QStandardItemModel_SetItem2(void* ptr, int row, void* item);
void QStandardItemModel_SetItem(void* ptr, int row, int column, void* item);
void QStandardItemModel_SetItemPrototype(void* ptr, void* item);
void QStandardItemModel_SetItemRoleNames(void* ptr, void* roleNames);
void QStandardItemModel_SetRowCount(void* ptr, int rows);
void QStandardItemModel_SetSortRole(void* ptr, int role);
void QStandardItemModel_SetVerticalHeaderItem(void* ptr, int row, void* item);
void QStandardItemModel_SetVerticalHeaderLabels(void* ptr, char* labels);
void QStandardItemModel_SortDefault(void* ptr, int column, long long order);
void QStandardItemModel_DestroyQStandardItemModel(void* ptr);
struct QtGui_PackedList QStandardItemModel_FindItems(void* ptr, char* text, long long flags, int column);
struct QtGui_PackedList QStandardItemModel_ItemDataDefault(void* ptr, void* index);
void* QStandardItemModel_MimeDataDefault(void* ptr, void* indexes);
void* QStandardItemModel_Index(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexDefault(void* ptr, int row, int column, void* parent);
void* QStandardItemModel_IndexFromItem(void* ptr, void* item);
void* QStandardItemModel_Parent(void* ptr, void* child);
void* QStandardItemModel_ParentDefault(void* ptr, void* child);
void* QStandardItemModel_SiblingDefault(void* ptr, int row, int column, void* idx);
void* QStandardItemModel_HorizontalHeaderItem(void* ptr, int column);
void* QStandardItemModel_InvisibleRootItem(void* ptr);
void* QStandardItemModel_Item(void* ptr, int row, int column);
void* QStandardItemModel_ItemFromIndex(void* ptr, void* index);
void* QStandardItemModel_VerticalHeaderItem(void* ptr, int row);
struct QtGui_PackedString QStandardItemModel_MimeTypesDefault(void* ptr);
void* QStandardItemModel_Data(void* ptr, void* index, int role);
void* QStandardItemModel_DataDefault(void* ptr, void* index, int role);
void* QStandardItemModel_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long QStandardItemModel_SupportedDropActionsDefault(void* ptr);
long long QStandardItemModel_FlagsDefault(void* ptr, void* index);
char QStandardItemModel_HasChildrenDefault(void* ptr, void* parent);
void* QStandardItemModel_ItemPrototype(void* ptr);
int QStandardItemModel_ColumnCount(void* ptr, void* parent);
int QStandardItemModel_ColumnCountDefault(void* ptr, void* parent);
int QStandardItemModel_RowCount(void* ptr, void* parent);
int QStandardItemModel_RowCountDefault(void* ptr, void* parent);
int QStandardItemModel_SortRole(void* ptr);
void* QStandardItemModel___takeColumn_atList(void* ptr, int i);
void QStandardItemModel___takeColumn_setList(void* ptr, void* i);
void* QStandardItemModel___takeColumn_newList(void* ptr);
void* QStandardItemModel___takeRow_atList(void* ptr, int i);
void QStandardItemModel___takeRow_setList(void* ptr, void* i);
void* QStandardItemModel___takeRow_newList(void* ptr);
void* QStandardItemModel___setItemData_roles_atList(void* ptr, int i);
void QStandardItemModel___setItemData_roles_setList(void* ptr, int key, void* i);
void* QStandardItemModel___setItemData_roles_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___setItemData_keyList(void* ptr);
void* QStandardItemModel___appendColumn_items_atList(void* ptr, int i);
void QStandardItemModel___appendColumn_items_setList(void* ptr, void* i);
void* QStandardItemModel___appendColumn_items_newList(void* ptr);
void* QStandardItemModel___appendRow_items_atList(void* ptr, int i);
void QStandardItemModel___appendRow_items_setList(void* ptr, void* i);
void* QStandardItemModel___appendRow_items_newList(void* ptr);
void* QStandardItemModel___insertColumn_items_atList(void* ptr, int i);
void QStandardItemModel___insertColumn_items_setList(void* ptr, void* i);
void* QStandardItemModel___insertColumn_items_newList(void* ptr);
void* QStandardItemModel___insertRow_items_atList(void* ptr, int i);
void QStandardItemModel___insertRow_items_setList(void* ptr, void* i);
void* QStandardItemModel___insertRow_items_newList(void* ptr);
void* QStandardItemModel___setItemRoleNames_roleNames_atList(void* ptr, int i);
void QStandardItemModel___setItemRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QStandardItemModel___setItemRoleNames_roleNames_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___setItemRoleNames_keyList(void* ptr);
void* QStandardItemModel___findItems_atList(void* ptr, int i);
void QStandardItemModel___findItems_setList(void* ptr, void* i);
void* QStandardItemModel___findItems_newList(void* ptr);
void* QStandardItemModel___itemData_atList(void* ptr, int i);
void QStandardItemModel___itemData_setList(void* ptr, int key, void* i);
void* QStandardItemModel___itemData_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___itemData_keyList(void* ptr);
void* QStandardItemModel___mimeData_indexes_atList(void* ptr, int i);
void QStandardItemModel___mimeData_indexes_setList(void* ptr, void* i);
void* QStandardItemModel___mimeData_indexes_newList(void* ptr);
int QStandardItemModel_____setItemData_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setItemData_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setItemData_keyList_newList(void* ptr);
int QStandardItemModel_____setItemRoleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setItemRoleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setItemRoleNames_keyList_newList(void* ptr);
int QStandardItemModel_____itemData_keyList_atList(void* ptr, int i);
void QStandardItemModel_____itemData_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____itemData_keyList_newList(void* ptr);
void* QStandardItemModel___changePersistentIndexList_from_atList(void* ptr, int i);
void QStandardItemModel___changePersistentIndexList_from_setList(void* ptr, void* i);
void* QStandardItemModel___changePersistentIndexList_from_newList(void* ptr);
void* QStandardItemModel___changePersistentIndexList_to_atList(void* ptr, int i);
void QStandardItemModel___changePersistentIndexList_to_setList(void* ptr, void* i);
void* QStandardItemModel___changePersistentIndexList_to_newList(void* ptr);
int QStandardItemModel___dataChanged_roles_atList(void* ptr, int i);
void QStandardItemModel___dataChanged_roles_setList(void* ptr, int i);
void* QStandardItemModel___dataChanged_roles_newList(void* ptr);
void* QStandardItemModel___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void QStandardItemModel___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* QStandardItemModel___layoutAboutToBeChanged_parents_newList(void* ptr);
void* QStandardItemModel___layoutChanged_parents_atList(void* ptr, int i);
void QStandardItemModel___layoutChanged_parents_setList(void* ptr, void* i);
void* QStandardItemModel___layoutChanged_parents_newList(void* ptr);
void* QStandardItemModel___roleNames_atList(void* ptr, int i);
void QStandardItemModel___roleNames_setList(void* ptr, int key, void* i);
void* QStandardItemModel___roleNames_newList(void* ptr);
struct QtGui_PackedList QStandardItemModel___roleNames_keyList(void* ptr);
void* QStandardItemModel___match_atList(void* ptr, int i);
void QStandardItemModel___match_setList(void* ptr, void* i);
void* QStandardItemModel___match_newList(void* ptr);
void* QStandardItemModel___persistentIndexList_atList(void* ptr, int i);
void QStandardItemModel___persistentIndexList_setList(void* ptr, void* i);
void* QStandardItemModel___persistentIndexList_newList(void* ptr);
int QStandardItemModel_____doSetRoleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____doSetRoleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____doSetRoleNames_keyList_newList(void* ptr);
int QStandardItemModel_____setRoleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____setRoleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____setRoleNames_keyList_newList(void* ptr);
int QStandardItemModel_____roleNames_keyList_atList(void* ptr, int i);
void QStandardItemModel_____roleNames_keyList_setList(void* ptr, int i);
void* QStandardItemModel_____roleNames_keyList_newList(void* ptr);
void* QStandardItemModel___dynamicPropertyNames_atList(void* ptr, int i);
void QStandardItemModel___dynamicPropertyNames_setList(void* ptr, void* i);
void* QStandardItemModel___dynamicPropertyNames_newList(void* ptr);
void* QStandardItemModel___findChildren_atList2(void* ptr, int i);
void QStandardItemModel___findChildren_setList2(void* ptr, void* i);
void* QStandardItemModel___findChildren_newList2(void* ptr);
void* QStandardItemModel___findChildren_atList3(void* ptr, int i);
void QStandardItemModel___findChildren_setList3(void* ptr, void* i);
void* QStandardItemModel___findChildren_newList3(void* ptr);
void* QStandardItemModel___findChildren_atList(void* ptr, int i);
void QStandardItemModel___findChildren_setList(void* ptr, void* i);
void* QStandardItemModel___findChildren_newList(void* ptr);
void* QStandardItemModel___children_atList(void* ptr, int i);
void QStandardItemModel___children_setList(void* ptr, void* i);
void* QStandardItemModel___children_newList(void* ptr);
char QStandardItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QStandardItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char QStandardItemModel_SubmitDefault(void* ptr);
void QStandardItemModel_FetchMoreDefault(void* ptr, void* parent);
void QStandardItemModel_ResetInternalDataDefault(void* ptr);
void QStandardItemModel_RevertDefault(void* ptr);
struct QtGui_PackedList QStandardItemModel_RoleNamesDefault(void* ptr);
void* QStandardItemModel_BuddyDefault(void* ptr, void* index);
struct QtGui_PackedList QStandardItemModel_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
void* QStandardItemModel_SpanDefault(void* ptr, void* index);
long long QStandardItemModel_SupportedDragActionsDefault(void* ptr);
char QStandardItemModel_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QStandardItemModel_CanFetchMoreDefault(void* ptr, void* parent);
char QStandardItemModel_EventDefault(void* ptr, void* e);
char QStandardItemModel_EventFilterDefault(void* ptr, void* watched, void* event);
void QStandardItemModel_ChildEventDefault(void* ptr, void* event);
void QStandardItemModel_ConnectNotifyDefault(void* ptr, void* sign);
void QStandardItemModel_CustomEventDefault(void* ptr, void* event);
void QStandardItemModel_DeleteLaterDefault(void* ptr);
void QStandardItemModel_DisconnectNotifyDefault(void* ptr, void* sign);
void QStandardItemModel_TimerEventDefault(void* ptr, void* event);
void* QStandardItemModel_MetaObjectDefault(void* ptr);
void* QStaticText_NewQStaticText();
void* QStaticText_NewQStaticText3(void* other);
void* QStaticText_NewQStaticText2(char* text);
void QStaticText_Prepare(void* ptr, void* matrix, void* font);
void QStaticText_SetPerformanceHint(void* ptr, long long performanceHint);
void QStaticText_SetText(void* ptr, char* text);
void QStaticText_SetTextFormat(void* ptr, long long textFormat);
void QStaticText_SetTextOption(void* ptr, void* textOption);
void QStaticText_SetTextWidth(void* ptr, double textWidth);
void QStaticText_Swap(void* ptr, void* other);
void QStaticText_DestroyQStaticText(void* ptr);
long long QStaticText_PerformanceHint(void* ptr);
void* QStaticText_Size(void* ptr);
struct QtGui_PackedString QStaticText_Text(void* ptr);
void* QStaticText_TextOption(void* ptr);
long long QStaticText_TextFormat(void* ptr);
double QStaticText_TextWidth(void* ptr);
void* QStatusTipEvent_NewQStatusTipEvent(char* tip);
struct QtGui_PackedString QStatusTipEvent_Tip(void* ptr);
void QStyleHints_ConnectCursorFlashTimeChanged(void* ptr);
void QStyleHints_DisconnectCursorFlashTimeChanged(void* ptr);
void QStyleHints_CursorFlashTimeChanged(void* ptr, int cursorFlashTime);
void QStyleHints_ConnectKeyboardInputIntervalChanged(void* ptr);
void QStyleHints_DisconnectKeyboardInputIntervalChanged(void* ptr);
void QStyleHints_KeyboardInputIntervalChanged(void* ptr, int keyboardInputInterval);
void QStyleHints_ConnectMouseDoubleClickIntervalChanged(void* ptr);
void QStyleHints_DisconnectMouseDoubleClickIntervalChanged(void* ptr);
void QStyleHints_MouseDoubleClickIntervalChanged(void* ptr, int mouseDoubleClickInterval);
void QStyleHints_ConnectMousePressAndHoldIntervalChanged(void* ptr);
void QStyleHints_DisconnectMousePressAndHoldIntervalChanged(void* ptr);
void QStyleHints_MousePressAndHoldIntervalChanged(void* ptr, int mousePressAndHoldInterval);
void QStyleHints_SetUseHoverEffects(void* ptr, char useHoverEffects);
void QStyleHints_ConnectStartDragDistanceChanged(void* ptr);
void QStyleHints_DisconnectStartDragDistanceChanged(void* ptr);
void QStyleHints_StartDragDistanceChanged(void* ptr, int startDragDistance);
void QStyleHints_ConnectStartDragTimeChanged(void* ptr);
void QStyleHints_DisconnectStartDragTimeChanged(void* ptr);
void QStyleHints_StartDragTimeChanged(void* ptr, int startDragTime);
void QStyleHints_ConnectTabFocusBehaviorChanged(void* ptr);
void QStyleHints_DisconnectTabFocusBehaviorChanged(void* ptr);
void QStyleHints_TabFocusBehaviorChanged(void* ptr, long long tabFocusBehavior);
void QStyleHints_ConnectUseHoverEffectsChanged(void* ptr);
void QStyleHints_DisconnectUseHoverEffectsChanged(void* ptr);
void QStyleHints_UseHoverEffectsChanged(void* ptr, char useHoverEffects);
void* QStyleHints_PasswordMaskCharacter(void* ptr);
long long QStyleHints_TabFocusBehavior(void* ptr);
char QStyleHints_SetFocusOnTouchRelease(void* ptr);
char QStyleHints_ShowIsFullScreen(void* ptr);
char QStyleHints_ShowIsMaximized(void* ptr);
char QStyleHints_SingleClickActivation(void* ptr);
char QStyleHints_UseHoverEffects(void* ptr);
char QStyleHints_UseRtlExtensions(void* ptr);
int QStyleHints_CursorFlashTime(void* ptr);
int QStyleHints_KeyboardAutoRepeatRate(void* ptr);
int QStyleHints_KeyboardInputInterval(void* ptr);
int QStyleHints_MouseDoubleClickInterval(void* ptr);
int QStyleHints_MousePressAndHoldInterval(void* ptr);
int QStyleHints_PasswordMaskDelay(void* ptr);
int QStyleHints_StartDragDistance(void* ptr);
int QStyleHints_StartDragTime(void* ptr);
int QStyleHints_StartDragVelocity(void* ptr);
double QStyleHints_FontSmoothingGamma(void* ptr);
void* QStyleHints___dynamicPropertyNames_atList(void* ptr, int i);
void QStyleHints___dynamicPropertyNames_setList(void* ptr, void* i);
void* QStyleHints___dynamicPropertyNames_newList(void* ptr);
void* QStyleHints___findChildren_atList2(void* ptr, int i);
void QStyleHints___findChildren_setList2(void* ptr, void* i);
void* QStyleHints___findChildren_newList2(void* ptr);
void* QStyleHints___findChildren_atList3(void* ptr, int i);
void QStyleHints___findChildren_setList3(void* ptr, void* i);
void* QStyleHints___findChildren_newList3(void* ptr);
void* QStyleHints___findChildren_atList(void* ptr, int i);
void QStyleHints___findChildren_setList(void* ptr, void* i);
void* QStyleHints___findChildren_newList(void* ptr);
void* QStyleHints___children_atList(void* ptr, int i);
void QStyleHints___children_setList(void* ptr, void* i);
void* QStyleHints___children_newList(void* ptr);
char QStyleHints_EventDefault(void* ptr, void* e);
char QStyleHints_EventFilterDefault(void* ptr, void* watched, void* event);
void QStyleHints_ChildEventDefault(void* ptr, void* event);
void QStyleHints_ConnectNotifyDefault(void* ptr, void* sign);
void QStyleHints_CustomEventDefault(void* ptr, void* event);
void QStyleHints_DeleteLaterDefault(void* ptr);
void QStyleHints_DisconnectNotifyDefault(void* ptr, void* sign);
void QStyleHints_TimerEventDefault(void* ptr, void* event);
void* QStyleHints_MetaObjectDefault(void* ptr);
void QSurface_DestroyQSurface(void* ptr);
void QSurface_DestroyQSurfaceDefault(void* ptr);
void* QSurface_Size(void* ptr);
void* QSurface_Format(void* ptr);
long long QSurface_SurfaceClass(void* ptr);
long long QSurface_SurfaceType(void* ptr);
char QSurface_SupportsOpenGL(void* ptr);
long long QSurface_M_type(void* ptr);
void QSurface_SetM_type(void* ptr, long long vsu);
void* QSurfaceFormat_QSurfaceFormat_DefaultFormat();
void* QSurfaceFormat_NewQSurfaceFormat();
void* QSurfaceFormat_NewQSurfaceFormat2(long long options);
void* QSurfaceFormat_NewQSurfaceFormat3(void* other);
void QSurfaceFormat_SetAlphaBufferSize(void* ptr, int size);
void QSurfaceFormat_SetBlueBufferSize(void* ptr, int size);
void QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(void* format);
void QSurfaceFormat_SetDepthBufferSize(void* ptr, int size);
void QSurfaceFormat_SetGreenBufferSize(void* ptr, int size);
void QSurfaceFormat_SetMajorVersion(void* ptr, int major);
void QSurfaceFormat_SetMinorVersion(void* ptr, int minor);
void QSurfaceFormat_SetOption(void* ptr, long long option, char on);
void QSurfaceFormat_SetOptions(void* ptr, long long options);
void QSurfaceFormat_SetProfile(void* ptr, long long profile);
void QSurfaceFormat_SetRedBufferSize(void* ptr, int size);
void QSurfaceFormat_SetRenderableType(void* ptr, long long ty);
void QSurfaceFormat_SetSamples(void* ptr, int numSamples);
void QSurfaceFormat_SetStencilBufferSize(void* ptr, int size);
void QSurfaceFormat_SetStereo(void* ptr, char enable);
void QSurfaceFormat_SetSwapBehavior(void* ptr, long long behavior);
void QSurfaceFormat_SetSwapInterval(void* ptr, int interval);
void QSurfaceFormat_SetVersion(void* ptr, int major, int minor);
void QSurfaceFormat_DestroyQSurfaceFormat(void* ptr);
long long QSurfaceFormat_Profile(void* ptr);
long long QSurfaceFormat_Options(void* ptr);
long long QSurfaceFormat_RenderableType(void* ptr);
long long QSurfaceFormat_SwapBehavior(void* ptr);
char QSurfaceFormat_HasAlpha(void* ptr);
char QSurfaceFormat_Stereo(void* ptr);
char QSurfaceFormat_TestOption(void* ptr, long long option);
int QSurfaceFormat_AlphaBufferSize(void* ptr);
int QSurfaceFormat_BlueBufferSize(void* ptr);
int QSurfaceFormat_DepthBufferSize(void* ptr);
int QSurfaceFormat_GreenBufferSize(void* ptr);
int QSurfaceFormat_MajorVersion(void* ptr);
int QSurfaceFormat_MinorVersion(void* ptr);
int QSurfaceFormat_RedBufferSize(void* ptr);
int QSurfaceFormat_Samples(void* ptr);
int QSurfaceFormat_StencilBufferSize(void* ptr);
int QSurfaceFormat_SwapInterval(void* ptr);
void* QSyntaxHighlighter_NewQSyntaxHighlighter(void* parent);
void* QSyntaxHighlighter_NewQSyntaxHighlighter2(void* parent);
void QSyntaxHighlighter_HighlightBlock(void* ptr, char* text);
void QSyntaxHighlighter_Rehighlight(void* ptr);
void QSyntaxHighlighter_RehighlightDefault(void* ptr);
void QSyntaxHighlighter_RehighlightBlock(void* ptr, void* block);
void QSyntaxHighlighter_RehighlightBlockDefault(void* ptr, void* block);
void QSyntaxHighlighter_SetCurrentBlockState(void* ptr, int newState);
void QSyntaxHighlighter_SetCurrentBlockUserData(void* ptr, void* data);
void QSyntaxHighlighter_SetDocument(void* ptr, void* doc);
void QSyntaxHighlighter_SetFormat2(void* ptr, int start, int count, void* color);
void QSyntaxHighlighter_SetFormat3(void* ptr, int start, int count, void* font);
void QSyntaxHighlighter_SetFormat(void* ptr, int start, int count, void* format);
void QSyntaxHighlighter_DestroyQSyntaxHighlighter(void* ptr);
void QSyntaxHighlighter_DestroyQSyntaxHighlighterDefault(void* ptr);
void* QSyntaxHighlighter_CurrentBlock(void* ptr);
void* QSyntaxHighlighter_CurrentBlockUserData(void* ptr);
void* QSyntaxHighlighter_Format(void* ptr, int position);
void* QSyntaxHighlighter_Document(void* ptr);
int QSyntaxHighlighter_CurrentBlockState(void* ptr);
int QSyntaxHighlighter_PreviousBlockState(void* ptr);
void* QSyntaxHighlighter___dynamicPropertyNames_atList(void* ptr, int i);
void QSyntaxHighlighter___dynamicPropertyNames_setList(void* ptr, void* i);
void* QSyntaxHighlighter___dynamicPropertyNames_newList(void* ptr);
void* QSyntaxHighlighter___findChildren_atList2(void* ptr, int i);
void QSyntaxHighlighter___findChildren_setList2(void* ptr, void* i);
void* QSyntaxHighlighter___findChildren_newList2(void* ptr);
void* QSyntaxHighlighter___findChildren_atList3(void* ptr, int i);
void QSyntaxHighlighter___findChildren_setList3(void* ptr, void* i);
void* QSyntaxHighlighter___findChildren_newList3(void* ptr);
void* QSyntaxHighlighter___findChildren_atList(void* ptr, int i);
void QSyntaxHighlighter___findChildren_setList(void* ptr, void* i);
void* QSyntaxHighlighter___findChildren_newList(void* ptr);
void* QSyntaxHighlighter___children_atList(void* ptr, int i);
void QSyntaxHighlighter___children_setList(void* ptr, void* i);
void* QSyntaxHighlighter___children_newList(void* ptr);
char QSyntaxHighlighter_EventDefault(void* ptr, void* e);
char QSyntaxHighlighter_EventFilterDefault(void* ptr, void* watched, void* event);
void QSyntaxHighlighter_ChildEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_ConnectNotifyDefault(void* ptr, void* sign);
void QSyntaxHighlighter_CustomEventDefault(void* ptr, void* event);
void QSyntaxHighlighter_DeleteLaterDefault(void* ptr);
void QSyntaxHighlighter_DisconnectNotifyDefault(void* ptr, void* sign);
void QSyntaxHighlighter_TimerEventDefault(void* ptr, void* event);
void* QSyntaxHighlighter_MetaObjectDefault(void* ptr);
void* QTabletEvent_NewQTabletEvent(long long ty, void* pos, void* globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, long long keyState, long long uniqueID, long long button, long long buttons);
long long QTabletEvent_PointerType(void* ptr);
void* QTabletEvent_GlobalPos(void* ptr);
void* QTabletEvent_Pos(void* ptr);
long long QTabletEvent_Button(void* ptr);
long long QTabletEvent_Buttons(void* ptr);
long long QTabletEvent_Device(void* ptr);
void* QTabletEvent_GlobalPosF(void* ptr);
void* QTabletEvent_PosF(void* ptr);
int QTabletEvent_GlobalX(void* ptr);
int QTabletEvent_GlobalY(void* ptr);
int QTabletEvent_X(void* ptr);
int QTabletEvent_XTilt(void* ptr);
int QTabletEvent_Y(void* ptr);
int QTabletEvent_YTilt(void* ptr);
int QTabletEvent_Z(void* ptr);
long long QTabletEvent_UniqueId(void* ptr);
double QTabletEvent_HiResGlobalX(void* ptr);
double QTabletEvent_HiResGlobalY(void* ptr);
double QTabletEvent_Pressure(void* ptr);
double QTabletEvent_Rotation(void* ptr);
double QTabletEvent_TangentialPressure(void* ptr);
void* QTabletEvent_MExtra(void* ptr);
void QTabletEvent_SetMExtra(void* ptr, void* vvo);
long long QTabletEvent_MUnique(void* ptr);
void QTabletEvent_SetMUnique(void* ptr, long long vqi);
void* QTextBlock_NewQTextBlock(void* other);
void QTextBlock_ClearLayout(void* ptr);
void QTextBlock_SetLineCount(void* ptr, int count);
void QTextBlock_SetRevision(void* ptr, int rev);
void QTextBlock_SetUserData(void* ptr, void* data);
void QTextBlock_SetUserState(void* ptr, int state);
void QTextBlock_SetVisible(void* ptr, char visible);
struct QtGui_PackedString QTextBlock_Text(void* ptr);
void* QTextBlock_Next(void* ptr);
void* QTextBlock_Previous(void* ptr);
void* QTextBlock_BlockFormat(void* ptr);
void* QTextBlock_UserData(void* ptr);
void* QTextBlock_CharFormat(void* ptr);
void* QTextBlock_Layout(void* ptr);
long long QTextBlock_TextDirection(void* ptr);
char QTextBlock_Contains(void* ptr, int position);
char QTextBlock_IsValid(void* ptr);
char QTextBlock_IsVisible(void* ptr);
void* QTextBlock_Document(void* ptr);
int QTextBlock_BlockFormatIndex(void* ptr);
int QTextBlock_BlockNumber(void* ptr);
int QTextBlock_CharFormatIndex(void* ptr);
int QTextBlock_FirstLineNumber(void* ptr);
int QTextBlock_Length(void* ptr);
int QTextBlock_LineCount(void* ptr);
int QTextBlock_Position(void* ptr);
int QTextBlock_Revision(void* ptr);
int QTextBlock_UserState(void* ptr);
void* QTextBlock___textFormats_newList(void* ptr);
void* QTextBlockFormat_NewQTextBlockFormat();
void QTextBlockFormat_SetAlignment(void* ptr, long long alignment);
void QTextBlockFormat_SetBottomMargin(void* ptr, double margin);
void QTextBlockFormat_SetIndent(void* ptr, int indentation);
void QTextBlockFormat_SetLeftMargin(void* ptr, double margin);
void QTextBlockFormat_SetLineHeight(void* ptr, double height, int heightType);
void QTextBlockFormat_SetNonBreakableLines(void* ptr, char b);
void QTextBlockFormat_SetPageBreakPolicy(void* ptr, long long policy);
void QTextBlockFormat_SetRightMargin(void* ptr, double margin);
void QTextBlockFormat_SetTextIndent(void* ptr, double indent);
void QTextBlockFormat_SetTopMargin(void* ptr, double margin);
long long QTextBlockFormat_PageBreakPolicy(void* ptr);
long long QTextBlockFormat_Alignment(void* ptr);
char QTextBlockFormat_NonBreakableLines(void* ptr);
int QTextBlockFormat_Indent(void* ptr);
int QTextBlockFormat_LineHeightType(void* ptr);
double QTextBlockFormat_BottomMargin(void* ptr);
double QTextBlockFormat_LeftMargin(void* ptr);
double QTextBlockFormat_LineHeight2(void* ptr);
double QTextBlockFormat_LineHeight(void* ptr, double scriptLineHeight, double scaling);
double QTextBlockFormat_RightMargin(void* ptr);
double QTextBlockFormat_TextIndent(void* ptr);
double QTextBlockFormat_TopMargin(void* ptr);
void* QTextBlockFormat___setTabPositions_tabs_newList(void* ptr);
void* QTextBlockFormat___tabPositions_newList(void* ptr);
void* QTextBlockGroup_NewQTextBlockGroup(void* document);
void QTextBlockGroup_BlockFormatChanged(void* ptr, void* block);
void QTextBlockGroup_BlockFormatChangedDefault(void* ptr, void* block);
void QTextBlockGroup_BlockInserted(void* ptr, void* block);
void QTextBlockGroup_BlockInsertedDefault(void* ptr, void* block);
void QTextBlockGroup_BlockRemoved(void* ptr, void* block);
void QTextBlockGroup_BlockRemovedDefault(void* ptr, void* block);
void QTextBlockGroup_DestroyQTextBlockGroup(void* ptr);
struct QtGui_PackedList QTextBlockGroup_BlockList(void* ptr);
void* QTextBlockGroup___blockList_atList(void* ptr, int i);
void QTextBlockGroup___blockList_setList(void* ptr, void* i);
void* QTextBlockGroup___blockList_newList(void* ptr);
void QTextBlockUserData_DestroyQTextBlockUserData(void* ptr);
void QTextBlockUserData_DestroyQTextBlockUserDataDefault(void* ptr);
void* QTextCharFormat_NewQTextCharFormat();
void QTextCharFormat_SetUnderlineStyle(void* ptr, long long style);
struct QtGui_PackedString QTextCharFormat_AnchorNames(void* ptr);
char QTextCharFormat_FontUnderline(void* ptr);
void QTextCharFormat_SetAnchor(void* ptr, char anchor);
void QTextCharFormat_SetAnchorHref(void* ptr, char* value);
void QTextCharFormat_SetAnchorNames(void* ptr, char* names);
void QTextCharFormat_SetFont2(void* ptr, void* font);
void QTextCharFormat_SetFont(void* ptr, void* font, long long behavior);
void QTextCharFormat_SetFontCapitalization(void* ptr, long long capitalization);
void QTextCharFormat_SetFontFamily(void* ptr, char* family);
void QTextCharFormat_SetFontFixedPitch(void* ptr, char fixedPitch);
void QTextCharFormat_SetFontHintingPreference(void* ptr, long long hintingPreference);
void QTextCharFormat_SetFontItalic(void* ptr, char italic);
void QTextCharFormat_SetFontKerning(void* ptr, char enable);
void QTextCharFormat_SetFontLetterSpacing(void* ptr, double spacing);
void QTextCharFormat_SetFontLetterSpacingType(void* ptr, long long letterSpacingType);
void QTextCharFormat_SetFontOverline(void* ptr, char overline);
void QTextCharFormat_SetFontPointSize(void* ptr, double size);
void QTextCharFormat_SetFontStretch(void* ptr, int factor);
void QTextCharFormat_SetFontStrikeOut(void* ptr, char strikeOut);
void QTextCharFormat_SetFontStyleHint(void* ptr, long long hint, long long strategy);
void QTextCharFormat_SetFontStyleStrategy(void* ptr, long long strategy);
void QTextCharFormat_SetFontUnderline(void* ptr, char underline);
void QTextCharFormat_SetFontWeight(void* ptr, int weight);
void QTextCharFormat_SetFontWordSpacing(void* ptr, double spacing);
void QTextCharFormat_SetTextOutline(void* ptr, void* pen);
void QTextCharFormat_SetToolTip(void* ptr, char* text);
void QTextCharFormat_SetUnderlineColor(void* ptr, void* color);
void QTextCharFormat_SetVerticalAlignment(void* ptr, long long alignment);
void* QTextCharFormat_UnderlineColor(void* ptr);
void* QTextCharFormat_Font(void* ptr);
long long QTextCharFormat_FontCapitalization(void* ptr);
long long QTextCharFormat_FontHintingPreference(void* ptr);
long long QTextCharFormat_FontLetterSpacingType(void* ptr);
long long QTextCharFormat_FontStyleHint(void* ptr);
long long QTextCharFormat_FontStyleStrategy(void* ptr);
void* QTextCharFormat_TextOutline(void* ptr);
struct QtGui_PackedString QTextCharFormat_AnchorHref(void* ptr);
struct QtGui_PackedString QTextCharFormat_FontFamily(void* ptr);
struct QtGui_PackedString QTextCharFormat_ToolTip(void* ptr);
long long QTextCharFormat_UnderlineStyle(void* ptr);
long long QTextCharFormat_VerticalAlignment(void* ptr);
char QTextCharFormat_FontFixedPitch(void* ptr);
char QTextCharFormat_FontItalic(void* ptr);
char QTextCharFormat_FontKerning(void* ptr);
char QTextCharFormat_FontOverline(void* ptr);
char QTextCharFormat_FontStrikeOut(void* ptr);
char QTextCharFormat_IsAnchor(void* ptr);
int QTextCharFormat_FontStretch(void* ptr);
int QTextCharFormat_FontWeight(void* ptr);
double QTextCharFormat_FontLetterSpacing(void* ptr);
double QTextCharFormat_FontPointSize(void* ptr);
double QTextCharFormat_FontWordSpacing(void* ptr);
void* QTextCursor_NewQTextCursor();
void* QTextCursor_NewQTextCursor2(void* document);
void* QTextCursor_NewQTextCursor5(void* frame);
void* QTextCursor_NewQTextCursor6(void* block);
void* QTextCursor_NewQTextCursor7(void* cursor);
void* QTextCursor_InsertFrame(void* ptr, void* format);
void* QTextCursor_CreateList2(void* ptr, long long style);
void* QTextCursor_CreateList(void* ptr, void* format);
void* QTextCursor_InsertList2(void* ptr, long long style);
void* QTextCursor_InsertList(void* ptr, void* format);
void* QTextCursor_InsertTable2(void* ptr, int rows, int columns);
void* QTextCursor_InsertTable(void* ptr, int rows, int columns, void* format);
char QTextCursor_MovePosition(void* ptr, long long operation, long long mode, int n);
void QTextCursor_BeginEditBlock(void* ptr);
void QTextCursor_ClearSelection(void* ptr);
void QTextCursor_DeleteChar(void* ptr);
void QTextCursor_DeletePreviousChar(void* ptr);
void QTextCursor_EndEditBlock(void* ptr);
void QTextCursor_InsertBlock(void* ptr);
void QTextCursor_InsertBlock2(void* ptr, void* format);
void QTextCursor_InsertBlock3(void* ptr, void* format, void* charFormat);
void QTextCursor_InsertFragment(void* ptr, void* fragment);
void QTextCursor_InsertHtml(void* ptr, char* html);
void QTextCursor_InsertImage4(void* ptr, void* image, char* name);
void QTextCursor_InsertImage3(void* ptr, char* name);
void QTextCursor_InsertImage(void* ptr, void* format);
void QTextCursor_InsertImage2(void* ptr, void* format, long long alignment);
void QTextCursor_InsertText(void* ptr, char* text);
void QTextCursor_InsertText2(void* ptr, char* text, void* format);
void QTextCursor_JoinPreviousEditBlock(void* ptr);
void QTextCursor_MergeBlockCharFormat(void* ptr, void* modifier);
void QTextCursor_MergeBlockFormat(void* ptr, void* modifier);
void QTextCursor_MergeCharFormat(void* ptr, void* modifier);
void QTextCursor_RemoveSelectedText(void* ptr);
void QTextCursor_Select(void* ptr, long long selection);
void QTextCursor_SetBlockCharFormat(void* ptr, void* format);
void QTextCursor_SetBlockFormat(void* ptr, void* format);
void QTextCursor_SetCharFormat(void* ptr, void* format);
void QTextCursor_SetKeepPositionOnInsert(void* ptr, char b);
void QTextCursor_SetPosition(void* ptr, int pos, long long m);
void QTextCursor_SetVerticalMovementX(void* ptr, int x);
void QTextCursor_SetVisualNavigation(void* ptr, char b);
void QTextCursor_Swap(void* ptr, void* other);
void QTextCursor_DestroyQTextCursor(void* ptr);
struct QtGui_PackedString QTextCursor_SelectedText(void* ptr);
void* QTextCursor_Block(void* ptr);
void* QTextCursor_BlockFormat(void* ptr);
void* QTextCursor_BlockCharFormat(void* ptr);
void* QTextCursor_CharFormat(void* ptr);
void* QTextCursor_Document(void* ptr);
void* QTextCursor_Selection(void* ptr);
void* QTextCursor_CurrentFrame(void* ptr);
void* QTextCursor_CurrentList(void* ptr);
void* QTextCursor_CurrentTable(void* ptr);
char QTextCursor_AtBlockEnd(void* ptr);
char QTextCursor_AtBlockStart(void* ptr);
char QTextCursor_AtEnd(void* ptr);
char QTextCursor_AtStart(void* ptr);
char QTextCursor_HasComplexSelection(void* ptr);
char QTextCursor_HasSelection(void* ptr);
char QTextCursor_IsCopyOf(void* ptr, void* other);
char QTextCursor_IsNull(void* ptr);
char QTextCursor_KeepPositionOnInsert(void* ptr);
char QTextCursor_VisualNavigation(void* ptr);
int QTextCursor_Anchor(void* ptr);
int QTextCursor_BlockNumber(void* ptr);
int QTextCursor_ColumnNumber(void* ptr);
int QTextCursor_Position(void* ptr);
int QTextCursor_PositionInBlock(void* ptr);
int QTextCursor_SelectionEnd(void* ptr);
int QTextCursor_SelectionStart(void* ptr);
int QTextCursor_VerticalMovementX(void* ptr);
void QTextCursor_SelectedTableCells(void* ptr, int firstRow, int numRows, int firstColumn, int numColumns);
void* QTextDocument_NewQTextDocument2(char* text, void* parent);
void* QTextDocument_CreateObject(void* ptr, void* format);
void* QTextDocument_CreateObjectDefault(void* ptr, void* format);
void* QTextDocument_NewQTextDocument(void* parent);
void* QTextDocument_LoadResource(void* ptr, int ty, void* name);
void* QTextDocument_LoadResourceDefault(void* ptr, int ty, void* name);
void QTextDocument_AddResource(void* ptr, int ty, void* name, void* resource);
void QTextDocument_AdjustSize(void* ptr);
void QTextDocument_ConnectBaseUrlChanged(void* ptr);
void QTextDocument_DisconnectBaseUrlChanged(void* ptr);
void QTextDocument_BaseUrlChanged(void* ptr, void* url);
void QTextDocument_ConnectBlockCountChanged(void* ptr);
void QTextDocument_DisconnectBlockCountChanged(void* ptr);
void QTextDocument_BlockCountChanged(void* ptr, int newBlockCount);
void QTextDocument_Clear(void* ptr);
void QTextDocument_ClearDefault(void* ptr);
void QTextDocument_ClearUndoRedoStacks(void* ptr, long long stacksToClear);
void QTextDocument_ConnectContentsChange(void* ptr);
void QTextDocument_DisconnectContentsChange(void* ptr);
void QTextDocument_ContentsChange(void* ptr, int position, int charsRemoved, int charsAdded);
void QTextDocument_ConnectContentsChanged(void* ptr);
void QTextDocument_DisconnectContentsChanged(void* ptr);
void QTextDocument_ContentsChanged(void* ptr);
void QTextDocument_ConnectCursorPositionChanged(void* ptr);
void QTextDocument_DisconnectCursorPositionChanged(void* ptr);
void QTextDocument_CursorPositionChanged(void* ptr, void* cursor);
void QTextDocument_ConnectDocumentLayoutChanged(void* ptr);
void QTextDocument_DisconnectDocumentLayoutChanged(void* ptr);
void QTextDocument_DocumentLayoutChanged(void* ptr);
void QTextDocument_DrawContents(void* ptr, void* p, void* rect);
void QTextDocument_MarkContentsDirty(void* ptr, int position, int length);
void QTextDocument_ConnectModificationChanged(void* ptr);
void QTextDocument_DisconnectModificationChanged(void* ptr);
void QTextDocument_ModificationChanged(void* ptr, char changed);
void QTextDocument_Redo2(void* ptr);
void QTextDocument_Redo2Default(void* ptr);
void QTextDocument_Redo(void* ptr, void* cursor);
void QTextDocument_ConnectRedoAvailable(void* ptr);
void QTextDocument_DisconnectRedoAvailable(void* ptr);
void QTextDocument_RedoAvailable(void* ptr, char available);
void QTextDocument_SetBaseUrl(void* ptr, void* url);
void QTextDocument_SetDefaultCursorMoveStyle(void* ptr, long long style);
void QTextDocument_SetDefaultFont(void* ptr, void* font);
void QTextDocument_SetDefaultStyleSheet(void* ptr, char* sheet);
void QTextDocument_SetDefaultTextOption(void* ptr, void* option);
void QTextDocument_SetDocumentLayout(void* ptr, void* layout);
void QTextDocument_SetDocumentMargin(void* ptr, double margin);
void QTextDocument_SetHtml(void* ptr, char* html);
void QTextDocument_SetIndentWidth(void* ptr, double width);
void QTextDocument_SetMaximumBlockCount(void* ptr, int maximum);
void QTextDocument_SetMetaInformation(void* ptr, long long info, char* stri);
void QTextDocument_SetModified(void* ptr, char m);
void QTextDocument_SetModifiedDefault(void* ptr, char m);
void QTextDocument_SetPageSize(void* ptr, void* size);
void QTextDocument_SetPlainText(void* ptr, char* text);
void QTextDocument_SetTextWidth(void* ptr, double width);
void QTextDocument_SetUndoRedoEnabled(void* ptr, char enable);
void QTextDocument_SetUseDesignMetrics(void* ptr, char b);
void QTextDocument_Undo2(void* ptr);
void QTextDocument_Undo2Default(void* ptr);
void QTextDocument_Undo(void* ptr, void* cursor);
void QTextDocument_ConnectUndoAvailable(void* ptr);
void QTextDocument_DisconnectUndoAvailable(void* ptr);
void QTextDocument_UndoAvailable(void* ptr, char available);
void QTextDocument_ConnectUndoCommandAdded(void* ptr);
void QTextDocument_DisconnectUndoCommandAdded(void* ptr);
void QTextDocument_UndoCommandAdded(void* ptr);
void QTextDocument_DestroyQTextDocument(void* ptr);
void* QTextDocument_DocumentLayout(void* ptr);
void* QTextDocument_CharacterAt(void* ptr, int pos);
void* QTextDocument_DefaultFont(void* ptr);
void* QTextDocument_PageSize(void* ptr);
void* QTextDocument_Size(void* ptr);
struct QtGui_PackedString QTextDocument_DefaultStyleSheet(void* ptr);
struct QtGui_PackedString QTextDocument_MetaInformation(void* ptr, long long info);
struct QtGui_PackedString QTextDocument_ToHtml(void* ptr, void* encoding);
struct QtGui_PackedString QTextDocument_ToPlainText(void* ptr);
void* QTextDocument_Begin(void* ptr);
void* QTextDocument_End(void* ptr);
void* QTextDocument_FindBlock(void* ptr, int pos);
void* QTextDocument_FindBlockByLineNumber(void* ptr, int lineNumber);
void* QTextDocument_FindBlockByNumber(void* ptr, int blockNumber);
void* QTextDocument_FirstBlock(void* ptr);
void* QTextDocument_LastBlock(void* ptr);
void* QTextDocument_Find4(void* ptr, void* expr, void* cursor, long long options);
void* QTextDocument_Find3(void* ptr, void* expr, int from, long long options);
void* QTextDocument_Find6(void* ptr, void* expr, void* cursor, long long options);
void* QTextDocument_Find5(void* ptr, void* expr, int from, long long options);
void* QTextDocument_Find(void* ptr, char* subString, void* cursor, long long options);
void* QTextDocument_Find2(void* ptr, char* subString, int position, long long options);
void* QTextDocument_Clone(void* ptr, void* parent);
void* QTextDocument_RootFrame(void* ptr);
void* QTextDocument_Object(void* ptr, int objectIndex);
void* QTextDocument_ObjectForFormat(void* ptr, void* fo);
void* QTextDocument_DefaultTextOption(void* ptr);
void* QTextDocument_BaseUrl(void* ptr);
void* QTextDocument_Resource(void* ptr, int ty, void* name);
struct QtGui_PackedList QTextDocument_AllFormats(void* ptr);
long long QTextDocument_DefaultCursorMoveStyle(void* ptr);
char QTextDocument_IsEmpty(void* ptr);
char QTextDocument_IsModified(void* ptr);
char QTextDocument_IsRedoAvailable(void* ptr);
char QTextDocument_IsUndoAvailable(void* ptr);
char QTextDocument_IsUndoRedoEnabled(void* ptr);
char QTextDocument_UseDesignMetrics(void* ptr);
int QTextDocument_AvailableRedoSteps(void* ptr);
int QTextDocument_AvailableUndoSteps(void* ptr);
int QTextDocument_BlockCount(void* ptr);
int QTextDocument_CharacterCount(void* ptr);
int QTextDocument_LineCount(void* ptr);
int QTextDocument_MaximumBlockCount(void* ptr);
int QTextDocument_PageCount(void* ptr);
int QTextDocument_Revision(void* ptr);
double QTextDocument_DocumentMargin(void* ptr);
double QTextDocument_IdealWidth(void* ptr);
double QTextDocument_IndentWidth(void* ptr);
double QTextDocument_TextWidth(void* ptr);
void QTextDocument_Print(void* ptr, void* printer);
void* QTextDocument___allFormats_atList(void* ptr, int i);
void QTextDocument___allFormats_setList(void* ptr, void* i);
void* QTextDocument___allFormats_newList(void* ptr);
void* QTextDocument___dynamicPropertyNames_atList(void* ptr, int i);
void QTextDocument___dynamicPropertyNames_setList(void* ptr, void* i);
void* QTextDocument___dynamicPropertyNames_newList(void* ptr);
void* QTextDocument___findChildren_atList2(void* ptr, int i);
void QTextDocument___findChildren_setList2(void* ptr, void* i);
void* QTextDocument___findChildren_newList2(void* ptr);
void* QTextDocument___findChildren_atList3(void* ptr, int i);
void QTextDocument___findChildren_setList3(void* ptr, void* i);
void* QTextDocument___findChildren_newList3(void* ptr);
void* QTextDocument___findChildren_atList(void* ptr, int i);
void QTextDocument___findChildren_setList(void* ptr, void* i);
void* QTextDocument___findChildren_newList(void* ptr);
void* QTextDocument___children_atList(void* ptr, int i);
void QTextDocument___children_setList(void* ptr, void* i);
void* QTextDocument___children_newList(void* ptr);
char QTextDocument_EventDefault(void* ptr, void* e);
char QTextDocument_EventFilterDefault(void* ptr, void* watched, void* event);
void QTextDocument_ChildEventDefault(void* ptr, void* event);
void QTextDocument_ConnectNotifyDefault(void* ptr, void* sign);
void QTextDocument_CustomEventDefault(void* ptr, void* event);
void QTextDocument_DeleteLaterDefault(void* ptr);
void QTextDocument_DisconnectNotifyDefault(void* ptr, void* sign);
void QTextDocument_TimerEventDefault(void* ptr, void* event);
void* QTextDocument_MetaObjectDefault(void* ptr);
void* QTextDocumentFragment_QTextDocumentFragment_FromHtml(char* text);
void* QTextDocumentFragment_QTextDocumentFragment_FromHtml2(char* text, void* resourceProvider);
void* QTextDocumentFragment_QTextDocumentFragment_FromPlainText(char* plainText);
void* QTextDocumentFragment_NewQTextDocumentFragment();
void* QTextDocumentFragment_NewQTextDocumentFragment3(void* cursor);
void* QTextDocumentFragment_NewQTextDocumentFragment2(void* document);
void* QTextDocumentFragment_NewQTextDocumentFragment4(void* other);
void QTextDocumentFragment_DestroyQTextDocumentFragment(void* ptr);
struct QtGui_PackedString QTextDocumentFragment_ToHtml(void* ptr, void* encoding);
struct QtGui_PackedString QTextDocumentFragment_ToPlainText(void* ptr);
char QTextDocumentFragment_IsEmpty(void* ptr);
struct QtGui_PackedList QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats();
void* QTextDocumentWriter_NewQTextDocumentWriter();
void* QTextDocumentWriter_NewQTextDocumentWriter2(void* device, void* format);
void* QTextDocumentWriter_NewQTextDocumentWriter3(char* fileName, void* format);
char QTextDocumentWriter_Write(void* ptr, void* document);
char QTextDocumentWriter_Write2(void* ptr, void* fragment);
void QTextDocumentWriter_SetCodec(void* ptr, void* codec);
void QTextDocumentWriter_SetDevice(void* ptr, void* device);
void QTextDocumentWriter_SetFileName(void* ptr, char* fileName);
void QTextDocumentWriter_SetFormat(void* ptr, void* format);
void QTextDocumentWriter_DestroyQTextDocumentWriter(void* ptr);
void* QTextDocumentWriter_Format(void* ptr);
void* QTextDocumentWriter_Device(void* ptr);
struct QtGui_PackedString QTextDocumentWriter_FileName(void* ptr);
void* QTextDocumentWriter_Codec(void* ptr);
void* QTextDocumentWriter___supportedDocumentFormats_atList(void* ptr, int i);
void QTextDocumentWriter___supportedDocumentFormats_setList(void* ptr, void* i);
void* QTextDocumentWriter___supportedDocumentFormats_newList(void* ptr);
void* QTextFormat_NewQTextFormat3(void* other);
void* QTextFormat_NewQTextFormat();
void* QTextFormat_NewQTextFormat2(int ty);
void QTextFormat_ClearBackground(void* ptr);
void QTextFormat_ClearForeground(void* ptr);
void QTextFormat_ClearProperty(void* ptr, int propertyId);
void QTextFormat_Merge(void* ptr, void* other);
void QTextFormat_SetBackground(void* ptr, void* brush);
void QTextFormat_SetForeground(void* ptr, void* brush);
void QTextFormat_SetLayoutDirection(void* ptr, long long direction);
void QTextFormat_SetObjectIndex(void* ptr, int index);
void QTextFormat_SetObjectType(void* ptr, int ty);
void QTextFormat_SetProperty(void* ptr, int propertyId, void* value);
void QTextFormat_SetProperty2(void* ptr, int propertyId, void* value);
void QTextFormat_Swap(void* ptr, void* other);
void QTextFormat_DestroyQTextFormat(void* ptr);
void* QTextFormat_Background(void* ptr);
void* QTextFormat_BrushProperty(void* ptr, int propertyId);
void* QTextFormat_Foreground(void* ptr);
void* QTextFormat_ColorProperty(void* ptr, int propertyId);
struct QtGui_PackedList QTextFormat_Properties(void* ptr);
void* QTextFormat_PenProperty(void* ptr, int propertyId);
struct QtGui_PackedString QTextFormat_StringProperty(void* ptr, int propertyId);
void* QTextFormat_ToBlockFormat(void* ptr);
void* QTextFormat_ToCharFormat(void* ptr);
void* QTextFormat_ToFrameFormat(void* ptr);
void* QTextFormat_ToImageFormat(void* ptr);
void* QTextFormat_LengthProperty(void* ptr, int propertyId);
void* QTextFormat_ToListFormat(void* ptr);
void* QTextFormat_ToTableCellFormat(void* ptr);
void* QTextFormat_ToTableFormat(void* ptr);
void* QTextFormat_Property(void* ptr, int propertyId);
long long QTextFormat_LayoutDirection(void* ptr);
char QTextFormat_BoolProperty(void* ptr, int propertyId);
char QTextFormat_HasProperty(void* ptr, int propertyId);
char QTextFormat_IsBlockFormat(void* ptr);
char QTextFormat_IsCharFormat(void* ptr);
char QTextFormat_IsEmpty(void* ptr);
char QTextFormat_IsFrameFormat(void* ptr);
char QTextFormat_IsImageFormat(void* ptr);
char QTextFormat_IsListFormat(void* ptr);
char QTextFormat_IsTableCellFormat(void* ptr);
char QTextFormat_IsTableFormat(void* ptr);
char QTextFormat_IsValid(void* ptr);
int QTextFormat_IntProperty(void* ptr, int propertyId);
int QTextFormat_ObjectIndex(void* ptr);
int QTextFormat_ObjectType(void* ptr);
int QTextFormat_PropertyCount(void* ptr);
int QTextFormat_Type(void* ptr);
double QTextFormat_DoubleProperty(void* ptr, int propertyId);
void* QTextFormat___setProperty_value_atList2(void* ptr, int i);
void QTextFormat___setProperty_value_setList2(void* ptr, void* i);
void* QTextFormat___setProperty_value_newList2(void* ptr);
void* QTextFormat___properties_atList(void* ptr, int i);
void QTextFormat___properties_setList(void* ptr, int key, void* i);
void* QTextFormat___properties_newList(void* ptr);
struct QtGui_PackedList QTextFormat___properties_keyList(void* ptr);
void* QTextFormat___lengthVectorProperty_atList(void* ptr, int i);
void QTextFormat___lengthVectorProperty_setList(void* ptr, void* i);
void* QTextFormat___lengthVectorProperty_newList(void* ptr);
int QTextFormat_____properties_keyList_atList(void* ptr, int i);
void QTextFormat_____properties_keyList_setList(void* ptr, int i);
void* QTextFormat_____properties_keyList_newList(void* ptr);
void* QTextFragment_NewQTextFragment();
void* QTextFragment_NewQTextFragment3(void* other);
struct QtGui_PackedList QTextFragment_GlyphRuns(void* ptr, int pos, int len);
struct QtGui_PackedString QTextFragment_Text(void* ptr);
void* QTextFragment_CharFormat(void* ptr);
char QTextFragment_Contains(void* ptr, int position);
char QTextFragment_IsValid(void* ptr);
int QTextFragment_CharFormatIndex(void* ptr);
int QTextFragment_Length(void* ptr);
int QTextFragment_Position(void* ptr);
void* QTextFragment___glyphRuns_atList(void* ptr, int i);
void QTextFragment___glyphRuns_setList(void* ptr, void* i);
void* QTextFragment___glyphRuns_newList(void* ptr);
void* QTextFrame_NewQTextFrame(void* document);
void QTextFrame_SetFrameFormat(void* ptr, void* format);
void QTextFrame_DestroyQTextFrame(void* ptr);
struct QtGui_PackedList QTextFrame_ChildFrames(void* ptr);
void* QTextFrame_FirstCursorPosition(void* ptr);
void* QTextFrame_LastCursorPosition(void* ptr);
void* QTextFrame_ParentFrame(void* ptr);
void* QTextFrame_FrameFormat(void* ptr);
int QTextFrame_FirstPosition(void* ptr);
int QTextFrame_LastPosition(void* ptr);
void* QTextFrame___childFrames_atList(void* ptr, int i);
void QTextFrame___childFrames_setList(void* ptr, void* i);
void* QTextFrame___childFrames_newList(void* ptr);
void* QTextFrameFormat_NewQTextFrameFormat();
void QTextFrameFormat_SetBorder(void* ptr, double width);
void QTextFrameFormat_SetBorderBrush(void* ptr, void* brush);
void QTextFrameFormat_SetBorderStyle(void* ptr, long long style);
void QTextFrameFormat_SetBottomMargin(void* ptr, double margin);
void QTextFrameFormat_SetHeight(void* ptr, void* height);
void QTextFrameFormat_SetHeight2(void* ptr, double height);
void QTextFrameFormat_SetLeftMargin(void* ptr, double margin);
void QTextFrameFormat_SetMargin(void* ptr, double margin);
void QTextFrameFormat_SetPadding(void* ptr, double width);
void QTextFrameFormat_SetPageBreakPolicy(void* ptr, long long policy);
void QTextFrameFormat_SetPosition(void* ptr, long long policy);
void QTextFrameFormat_SetRightMargin(void* ptr, double margin);
void QTextFrameFormat_SetTopMargin(void* ptr, double margin);
void QTextFrameFormat_SetWidth(void* ptr, void* width);
void QTextFrameFormat_SetWidth2(void* ptr, double width);
long long QTextFrameFormat_BorderStyle(void* ptr);
long long QTextFrameFormat_PageBreakPolicy(void* ptr);
long long QTextFrameFormat_Position(void* ptr);
void* QTextFrameFormat_BorderBrush(void* ptr);
void* QTextFrameFormat_Height(void* ptr);
void* QTextFrameFormat_Width(void* ptr);
double QTextFrameFormat_Border(void* ptr);
double QTextFrameFormat_BottomMargin(void* ptr);
double QTextFrameFormat_LeftMargin(void* ptr);
double QTextFrameFormat_Margin(void* ptr);
double QTextFrameFormat_Padding(void* ptr);
double QTextFrameFormat_RightMargin(void* ptr);
double QTextFrameFormat_TopMargin(void* ptr);
void* QTextImageFormat_NewQTextImageFormat();
void QTextImageFormat_SetHeight(void* ptr, double height);
void QTextImageFormat_SetName(void* ptr, char* name);
void QTextImageFormat_SetWidth(void* ptr, double width);
struct QtGui_PackedString QTextImageFormat_Name(void* ptr);
double QTextImageFormat_Height(void* ptr);
double QTextImageFormat_Width(void* ptr);
void QTextInlineObject_SetAscent(void* ptr, double a);
void QTextInlineObject_SetDescent(void* ptr, double d);
void QTextInlineObject_SetWidth(void* ptr, double w);
void* QTextInlineObject_Rect(void* ptr);
void* QTextInlineObject_Format(void* ptr);
long long QTextInlineObject_TextDirection(void* ptr);
char QTextInlineObject_IsValid(void* ptr);
int QTextInlineObject_FormatIndex(void* ptr);
int QTextInlineObject_TextPosition(void* ptr);
double QTextInlineObject_Ascent(void* ptr);
double QTextInlineObject_Descent(void* ptr);
double QTextInlineObject_Height(void* ptr);
double QTextInlineObject_Width(void* ptr);
void* QTextItem_Font(void* ptr);
struct QtGui_PackedString QTextItem_Text(void* ptr);
long long QTextItem_RenderFlags(void* ptr);
double QTextItem_Ascent(void* ptr);
double QTextItem_Descent(void* ptr);
double QTextItem_Width(void* ptr);
void* QTextLayout_NewQTextLayout();
void* QTextLayout_NewQTextLayout2(char* text);
void* QTextLayout_NewQTextLayout3(char* text, void* font, void* paintdevice);
void* QTextLayout_CreateLine(void* ptr);
void QTextLayout_BeginLayout(void* ptr);
void QTextLayout_ClearFormats(void* ptr);
void QTextLayout_ClearLayout(void* ptr);
void QTextLayout_EndLayout(void* ptr);
void QTextLayout_SetCacheEnabled(void* ptr, char enable);
void QTextLayout_SetCursorMoveStyle(void* ptr, long long style);
void QTextLayout_SetFont(void* ptr, void* font);
void QTextLayout_SetPosition(void* ptr, void* p);
void QTextLayout_SetPreeditArea(void* ptr, int position, char* text);
void QTextLayout_SetText(void* ptr, char* stri);
void QTextLayout_SetTextOption(void* ptr, void* option);
void QTextLayout_DestroyQTextLayout(void* ptr);
void* QTextLayout_Font(void* ptr);
struct QtGui_PackedList QTextLayout_GlyphRuns(void* ptr, int from, int length);
void* QTextLayout_Position(void* ptr);
void* QTextLayout_BoundingRect(void* ptr);
struct QtGui_PackedString QTextLayout_PreeditAreaText(void* ptr);
struct QtGui_PackedString QTextLayout_Text(void* ptr);
void* QTextLayout_LineAt(void* ptr, int i);
void* QTextLayout_LineForTextPosition(void* ptr, int pos);
long long QTextLayout_CursorMoveStyle(void* ptr);
char QTextLayout_CacheEnabled(void* ptr);
char QTextLayout_IsValidCursorPosition(void* ptr, int pos);
void* QTextLayout_TextOption(void* ptr);
int QTextLayout_LeftCursorPosition(void* ptr, int oldPos);
int QTextLayout_LineCount(void* ptr);
int QTextLayout_NextCursorPosition(void* ptr, int oldPos, long long mode);
int QTextLayout_PreeditAreaPosition(void* ptr);
int QTextLayout_PreviousCursorPosition(void* ptr, int oldPos, long long mode);
int QTextLayout_RightCursorPosition(void* ptr, int oldPos);
double QTextLayout_MaximumWidth(void* ptr);
double QTextLayout_MinimumWidth(void* ptr);
void QTextLayout_DrawCursor2(void* ptr, void* painter, void* position, int cursorPosition);
void QTextLayout_DrawCursor(void* ptr, void* painter, void* position, int cursorPosition, int width);
void* QTextLayout___glyphRuns_atList(void* ptr, int i);
void QTextLayout___glyphRuns_setList(void* ptr, void* i);
void* QTextLayout___glyphRuns_newList(void* ptr);
void* QTextLength_NewQTextLength();
void* QTextLength_NewQTextLength2(long long ty, double value);
long long QTextLength_Type(void* ptr);
double QTextLength_RawValue(void* ptr);
double QTextLength_Value(void* ptr, double maximumLength);
void* QTextLine_NewQTextLine();
int QTextLine_XToCursor(void* ptr, double x, long long cpos);
void QTextLine_SetLeadingIncluded(void* ptr, char included);
void QTextLine_SetLineWidth(void* ptr, double width);
void QTextLine_SetNumColumns(void* ptr, int numColumns);
void QTextLine_SetNumColumns2(void* ptr, int numColumns, double alignmentWidth);
void QTextLine_SetPosition(void* ptr, void* pos);
struct QtGui_PackedList QTextLine_GlyphRuns(void* ptr, int from, int length);
void* QTextLine_Position(void* ptr);
void* QTextLine_NaturalTextRect(void* ptr);
void* QTextLine_Rect(void* ptr);
char QTextLine_IsValid(void* ptr);
char QTextLine_LeadingIncluded(void* ptr);
int QTextLine_LineNumber(void* ptr);
int QTextLine_TextLength(void* ptr);
int QTextLine_TextStart(void* ptr);
double QTextLine_Ascent(void* ptr);
double QTextLine_CursorToX(void* ptr, int cursorPos, long long edge);
double QTextLine_CursorToX2(void* ptr, int cursorPos, long long edge);
double QTextLine_Descent(void* ptr);
double QTextLine_Height(void* ptr);
double QTextLine_HorizontalAdvance(void* ptr);
double QTextLine_Leading(void* ptr);
double QTextLine_NaturalTextWidth(void* ptr);
double QTextLine_Width(void* ptr);
double QTextLine_X(void* ptr);
double QTextLine_Y(void* ptr);
void* QTextLine___glyphRuns_atList(void* ptr, int i);
void QTextLine___glyphRuns_setList(void* ptr, void* i);
void* QTextLine___glyphRuns_newList(void* ptr);
void QTextList_Add(void* ptr, void* block);
void QTextList_Remove(void* ptr, void* block);
void QTextList_RemoveItem(void* ptr, int i);
void QTextList_SetFormat(void* ptr, void* format);
struct QtGui_PackedString QTextList_ItemText(void* ptr, void* block);
void* QTextList_Item(void* ptr, int i);
void* QTextList_Format(void* ptr);
int QTextList_Count(void* ptr);
int QTextList_ItemNumber(void* ptr, void* block);
void* QTextListFormat_NewQTextListFormat();
void QTextListFormat_SetIndent(void* ptr, int indentation);
void QTextListFormat_SetNumberPrefix(void* ptr, char* numberPrefix);
void QTextListFormat_SetNumberSuffix(void* ptr, char* numberSuffix);
void QTextListFormat_SetStyle(void* ptr, long long style);
struct QtGui_PackedString QTextListFormat_NumberPrefix(void* ptr);
struct QtGui_PackedString QTextListFormat_NumberSuffix(void* ptr);
long long QTextListFormat_Style(void* ptr);
int QTextListFormat_Indent(void* ptr);
void* QTextObject_NewQTextObject(void* document);
void QTextObject_SetFormat(void* ptr, void* format);
void QTextObject_DestroyQTextObject(void* ptr);
void* QTextObject_Document(void* ptr);
void* QTextObject_Format(void* ptr);
int QTextObject_FormatIndex(void* ptr);
int QTextObject_ObjectIndex(void* ptr);
void* QTextObject___dynamicPropertyNames_atList(void* ptr, int i);
void QTextObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QTextObject___dynamicPropertyNames_newList(void* ptr);
void* QTextObject___findChildren_atList2(void* ptr, int i);
void QTextObject___findChildren_setList2(void* ptr, void* i);
void* QTextObject___findChildren_newList2(void* ptr);
void* QTextObject___findChildren_atList3(void* ptr, int i);
void QTextObject___findChildren_setList3(void* ptr, void* i);
void* QTextObject___findChildren_newList3(void* ptr);
void* QTextObject___findChildren_atList(void* ptr, int i);
void QTextObject___findChildren_setList(void* ptr, void* i);
void* QTextObject___findChildren_newList(void* ptr);
void* QTextObject___children_atList(void* ptr, int i);
void QTextObject___children_setList(void* ptr, void* i);
void* QTextObject___children_newList(void* ptr);
char QTextObject_EventDefault(void* ptr, void* e);
char QTextObject_EventFilterDefault(void* ptr, void* watched, void* event);
void QTextObject_ChildEventDefault(void* ptr, void* event);
void QTextObject_ConnectNotifyDefault(void* ptr, void* sign);
void QTextObject_CustomEventDefault(void* ptr, void* event);
void QTextObject_DeleteLaterDefault(void* ptr);
void QTextObject_DisconnectNotifyDefault(void* ptr, void* sign);
void QTextObject_TimerEventDefault(void* ptr, void* event);
void* QTextObject_MetaObjectDefault(void* ptr);
void* QTextObjectInterface_IntrinsicSize(void* ptr, void* doc, int posInDocument, void* format);
void QTextObjectInterface_DrawObject(void* ptr, void* painter, void* rect, void* doc, int posInDocument, void* format);
void QTextObjectInterface_DestroyQTextObjectInterface(void* ptr);
void QTextObjectInterface_DestroyQTextObjectInterfaceDefault(void* ptr);
void* QTextOption_NewQTextOption3(void* other);
void* QTextOption_NewQTextOption();
void* QTextOption_NewQTextOption2(long long alignment);
void QTextOption_SetAlignment(void* ptr, long long alignment);
void QTextOption_SetFlags(void* ptr, long long flags);
void QTextOption_SetTabArray(void* ptr, void* tabStops);
void QTextOption_SetTabStop(void* ptr, double tabStop);
void QTextOption_SetTextDirection(void* ptr, long long direction);
void QTextOption_SetUseDesignMetrics(void* ptr, char enable);
void QTextOption_SetWrapMode(void* ptr, long long mode);
void QTextOption_DestroyQTextOption(void* ptr);
long long QTextOption_Flags(void* ptr);
struct QtGui_PackedList QTextOption_TabArray(void* ptr);
long long QTextOption_Alignment(void* ptr);
long long QTextOption_TextDirection(void* ptr);
long long QTextOption_WrapMode(void* ptr);
char QTextOption_UseDesignMetrics(void* ptr);
double QTextOption_TabStop(void* ptr);
double QTextOption___setTabArray_tabStops_atList(void* ptr, int i);
void QTextOption___setTabArray_tabStops_setList(void* ptr, double i);
void* QTextOption___setTabArray_tabStops_newList(void* ptr);
double QTextOption___tabArray_atList(void* ptr, int i);
void QTextOption___tabArray_setList(void* ptr, double i);
void* QTextOption___tabArray_newList(void* ptr);
void QTextTable_AppendColumns(void* ptr, int count);
void QTextTable_AppendRows(void* ptr, int count);
void QTextTable_InsertColumns(void* ptr, int index, int columns);
void QTextTable_InsertRows(void* ptr, int index, int rows);
void QTextTable_MergeCells2(void* ptr, void* cursor);
void QTextTable_MergeCells(void* ptr, int row, int column, int numRows, int numCols);
void QTextTable_RemoveColumns(void* ptr, int index, int columns);
void QTextTable_RemoveRows(void* ptr, int index, int rows);
void QTextTable_Resize(void* ptr, int rows, int columns);
void QTextTable_SetFormat(void* ptr, void* format);
void QTextTable_SplitCell(void* ptr, int row, int column, int numRows, int numCols);
void* QTextTable_RowEnd(void* ptr, void* cursor);
void* QTextTable_RowStart(void* ptr, void* cursor);
void* QTextTable_CellAt3(void* ptr, void* cursor);
void* QTextTable_CellAt2(void* ptr, int position);
void* QTextTable_CellAt(void* ptr, int row, int column);
void* QTextTable_Format(void* ptr);
int QTextTable_Columns(void* ptr);
int QTextTable_Rows(void* ptr);
void* QTextTableCell_NewQTextTableCell();
void* QTextTableCell_NewQTextTableCell2(void* other);
void QTextTableCell_SetFormat(void* ptr, void* format);
void QTextTableCell_DestroyQTextTableCell(void* ptr);
void* QTextTableCell_Format(void* ptr);
void* QTextTableCell_FirstCursorPosition(void* ptr);
void* QTextTableCell_LastCursorPosition(void* ptr);
char QTextTableCell_IsValid(void* ptr);
int QTextTableCell_Column(void* ptr);
int QTextTableCell_ColumnSpan(void* ptr);
int QTextTableCell_Row(void* ptr);
int QTextTableCell_RowSpan(void* ptr);
int QTextTableCell_TableCellFormatIndex(void* ptr);
void* QTextTableCellFormat_NewQTextTableCellFormat();
void QTextTableCellFormat_SetBottomPadding(void* ptr, double padding);
void QTextTableCellFormat_SetLeftPadding(void* ptr, double padding);
void QTextTableCellFormat_SetPadding(void* ptr, double padding);
void QTextTableCellFormat_SetRightPadding(void* ptr, double padding);
void QTextTableCellFormat_SetTopPadding(void* ptr, double padding);
double QTextTableCellFormat_BottomPadding(void* ptr);
double QTextTableCellFormat_LeftPadding(void* ptr);
double QTextTableCellFormat_RightPadding(void* ptr);
double QTextTableCellFormat_TopPadding(void* ptr);
void* QTextTableFormat_NewQTextTableFormat();
void QTextTableFormat_ClearColumnWidthConstraints(void* ptr);
void QTextTableFormat_SetAlignment(void* ptr, long long alignment);
void QTextTableFormat_SetCellPadding(void* ptr, double padding);
void QTextTableFormat_SetCellSpacing(void* ptr, double spacing);
void QTextTableFormat_SetColumnWidthConstraints(void* ptr, void* constraints);
void QTextTableFormat_SetHeaderRowCount(void* ptr, int count);
long long QTextTableFormat_Alignment(void* ptr);
int QTextTableFormat_Columns(void* ptr);
int QTextTableFormat_HeaderRowCount(void* ptr);
double QTextTableFormat_CellPadding(void* ptr);
double QTextTableFormat_CellSpacing(void* ptr);
void* QTextTableFormat___setColumnWidthConstraints_constraints_atList(void* ptr, int i);
void QTextTableFormat___setColumnWidthConstraints_constraints_setList(void* ptr, void* i);
void* QTextTableFormat___setColumnWidthConstraints_constraints_newList(void* ptr);
void* QTextTableFormat___columnWidthConstraints_atList(void* ptr, int i);
void QTextTableFormat___columnWidthConstraints_setList(void* ptr, void* i);
void* QTextTableFormat___columnWidthConstraints_newList(void* ptr);
struct QtGui_PackedList QTouchDevice_QTouchDevice_Devices();
void* QTouchDevice_NewQTouchDevice();
void QTouchDevice_SetCapabilities(void* ptr, long long caps);
void QTouchDevice_SetMaximumTouchPoints(void* ptr, int max);
void QTouchDevice_SetName(void* ptr, char* name);
void QTouchDevice_SetType(void* ptr, long long devType);
void QTouchDevice_DestroyQTouchDevice(void* ptr);
long long QTouchDevice_Capabilities(void* ptr);
long long QTouchDevice_Type(void* ptr);
struct QtGui_PackedString QTouchDevice_Name(void* ptr);
int QTouchDevice_MaximumTouchPoints(void* ptr);
void* QTouchDevice___devices_atList(void* ptr, int i);
void QTouchDevice___devices_setList(void* ptr, void* i);
void* QTouchDevice___devices_newList(void* ptr);
void QTouchEvent_DestroyQTouchEvent(void* ptr);
void* QTouchEvent_Target(void* ptr);
void* QTouchEvent_Device(void* ptr);
void* QTouchEvent_Window(void* ptr);
long long QTouchEvent_TouchPointStates(void* ptr);
void* QTouchEvent__device(void* ptr);
void QTouchEvent_Set_device(void* ptr, void* vqt);
void* QTouchEvent__target(void* ptr);
void QTouchEvent_Set_target(void* ptr, void* vqo);
long long QTouchEvent__touchPointStates(void* ptr);
void QTouchEvent_Set_touchPointStates(void* ptr, long long vqt);
void* QTouchEvent__window(void* ptr);
void QTouchEvent_Set_window(void* ptr, void* vqw);
void* QTouchEvent___QTouchEvent_touchPoints_newList(void* ptr);
void* QTouchEvent___setTouchPoints_touchPoints_newList(void* ptr);
void* QTouchEvent___touchPoints_newList(void* ptr);
void* QTouchEvent____touchPoints_newList(void* ptr);
void* QTouchEvent___set_touchPoints__newList(void* ptr);
void* QTransform_Rotate(void* ptr, double angle, long long axis);
void* QTransform_RotateRadians(void* ptr, double angle, long long axis);
void* QTransform_Scale(void* ptr, double sx, double sy);
void* QTransform_Shear(void* ptr, double sh, double sv);
void* QTransform_Translate(void* ptr, double dx, double dy);
void* QTransform_QTransform_FromScale(double sx, double sy);
void* QTransform_QTransform_FromTranslate(double dx, double dy);
void* QTransform_NewQTransform();
void* QTransform_NewQTransform6(void* other);
void* QTransform_NewQTransform7(void* other);
void* QTransform_NewQTransform3(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
void* QTransform_NewQTransform4(double m11, double m12, double m21, double m22, double dx, double dy);
char QTransform_QTransform_QuadToQuad(void* one, void* two, void* trans);
char QTransform_QTransform_QuadToSquare(void* quad, void* trans);
char QTransform_QTransform_SquareToQuad(void* quad, void* trans);
void QTransform_Reset(void* ptr);
void QTransform_SetMatrix(void* ptr, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33);
void* QTransform_Map3(void* ptr, void* l);
void* QTransform_Map4(void* ptr, void* line);
void* QTransform_Map8(void* ptr, void* path);
void* QTransform_Map10(void* ptr, void* point);
void* QTransform_Map2(void* ptr, void* p);
void* QTransform_Map6(void* ptr, void* polygon);
void* QTransform_MapToPolygon(void* ptr, void* rectangle);
void* QTransform_Map5(void* ptr, void* polygon);
void* QTransform_MapRect2(void* ptr, void* rectangle);
void* QTransform_MapRect(void* ptr, void* rectangle);
void* QTransform_Map7(void* ptr, void* region);
void* QTransform_Adjoint(void* ptr);
void* QTransform_Inverted(void* ptr, char invertible);
void* QTransform_Transposed(void* ptr);
long long QTransform_Type(void* ptr);
char QTransform_IsAffine(void* ptr);
char QTransform_IsIdentity(void* ptr);
char QTransform_IsInvertible(void* ptr);
char QTransform_IsRotating(void* ptr);
char QTransform_IsScaling(void* ptr);
char QTransform_IsTranslating(void* ptr);
double QTransform_Determinant(void* ptr);
double QTransform_Dx(void* ptr);
double QTransform_Dy(void* ptr);
double QTransform_M11(void* ptr);
double QTransform_M12(void* ptr);
double QTransform_M13(void* ptr);
double QTransform_M21(void* ptr);
double QTransform_M22(void* ptr);
double QTransform_M23(void* ptr);
double QTransform_M31(void* ptr);
double QTransform_M32(void* ptr);
double QTransform_M33(void* ptr);
void QTransform_Map9(void* ptr, int x, int y, int tx, int ty);
void QTransform_Map(void* ptr, double x, double y, double tx, double ty);
void QValidator_ConnectChanged(void* ptr);
void QValidator_DisconnectChanged(void* ptr);
void QValidator_Changed(void* ptr);
void QValidator_Fixup(void* ptr, char* input);
void QValidator_FixupDefault(void* ptr, char* input);
void* QValidator_NewQValidator(void* parent);
void QValidator_SetLocale(void* ptr, void* locale);
void QValidator_DestroyQValidator(void* ptr);
void* QValidator_Locale(void* ptr);
long long QValidator_Validate(void* ptr, char* input, int pos);
void* QValidator___dynamicPropertyNames_atList(void* ptr, int i);
void QValidator___dynamicPropertyNames_setList(void* ptr, void* i);
void* QValidator___dynamicPropertyNames_newList(void* ptr);
void* QValidator___findChildren_atList2(void* ptr, int i);
void QValidator___findChildren_setList2(void* ptr, void* i);
void* QValidator___findChildren_newList2(void* ptr);
void* QValidator___findChildren_atList3(void* ptr, int i);
void QValidator___findChildren_setList3(void* ptr, void* i);
void* QValidator___findChildren_newList3(void* ptr);
void* QValidator___findChildren_atList(void* ptr, int i);
void QValidator___findChildren_setList(void* ptr, void* i);
void* QValidator___findChildren_newList(void* ptr);
void* QValidator___children_atList(void* ptr, int i);
void QValidator___children_setList(void* ptr, void* i);
void* QValidator___children_newList(void* ptr);
char QValidator_EventDefault(void* ptr, void* e);
char QValidator_EventFilterDefault(void* ptr, void* watched, void* event);
void QValidator_ChildEventDefault(void* ptr, void* event);
void QValidator_ConnectNotifyDefault(void* ptr, void* sign);
void QValidator_CustomEventDefault(void* ptr, void* event);
void QValidator_DeleteLaterDefault(void* ptr);
void QValidator_DisconnectNotifyDefault(void* ptr, void* sign);
void QValidator_TimerEventDefault(void* ptr, void* event);
void* QValidator_MetaObjectDefault(void* ptr);
void* QVector2D_NewQVector2D();
void* QVector2D_NewQVector2D4(void* point);
void* QVector2D_NewQVector2D5(void* point);
void* QVector2D_NewQVector2D6(void* vector);
void* QVector2D_NewQVector2D7(void* vector);
void* QVector2D_NewQVector2D3(float xpos, float ypos);
float QVector2D_QVector2D_DotProduct(void* v1, void* v2);
void QVector2D_Normalize(void* ptr);
void QVector2D_SetX(void* ptr, float x);
void QVector2D_SetY(void* ptr, float y);
void* QVector2D_ToPoint(void* ptr);
void* QVector2D_ToPointF(void* ptr);
void* QVector2D_Normalized(void* ptr);
void* QVector2D_ToVector3D(void* ptr);
void* QVector2D_ToVector4D(void* ptr);
char QVector2D_IsNull(void* ptr);
float QVector2D_DistanceToLine(void* ptr, void* point, void* direction);
float QVector2D_DistanceToPoint(void* ptr, void* point);
float QVector2D_Length(void* ptr);
float QVector2D_LengthSquared(void* ptr);
float QVector2D_X(void* ptr);
float QVector2D_Y(void* ptr);
void* QVector3D_QVector3D_CrossProduct(void* v1, void* v2);
void* QVector3D_QVector3D_Normal(void* v1, void* v2);
void* QVector3D_QVector3D_Normal2(void* v1, void* v2, void* v3);
void* QVector3D_NewQVector3D();
void* QVector3D_NewQVector3D4(void* point);
void* QVector3D_NewQVector3D5(void* point);
void* QVector3D_NewQVector3D6(void* vector);
void* QVector3D_NewQVector3D7(void* vector, float zpos);
void* QVector3D_NewQVector3D8(void* vector);
void* QVector3D_NewQVector3D3(float xpos, float ypos, float zpos);
float QVector3D_QVector3D_DotProduct(void* v1, void* v2);
void QVector3D_Normalize(void* ptr);
void QVector3D_SetX(void* ptr, float x);
void QVector3D_SetY(void* ptr, float y);
void QVector3D_SetZ(void* ptr, float z);
void* QVector3D_ToPoint(void* ptr);
void* QVector3D_ToPointF(void* ptr);
void* QVector3D_ToVector2D(void* ptr);
void* QVector3D_Normalized(void* ptr);
void* QVector3D_Project(void* ptr, void* modelView, void* projection, void* viewport);
void* QVector3D_Unproject(void* ptr, void* modelView, void* projection, void* viewport);
void* QVector3D_ToVector4D(void* ptr);
char QVector3D_IsNull(void* ptr);
float QVector3D_DistanceToLine(void* ptr, void* point, void* direction);
float QVector3D_DistanceToPlane(void* ptr, void* plane, void* normal);
float QVector3D_DistanceToPlane2(void* ptr, void* plane1, void* plane2, void* plane3);
float QVector3D_DistanceToPoint(void* ptr, void* point);
float QVector3D_Length(void* ptr);
float QVector3D_LengthSquared(void* ptr);
float QVector3D_X(void* ptr);
float QVector3D_Y(void* ptr);
float QVector3D_Z(void* ptr);
void* QVector4D_NewQVector4D();
void* QVector4D_NewQVector4D4(void* point);
void* QVector4D_NewQVector4D5(void* point);
void* QVector4D_NewQVector4D6(void* vector);
void* QVector4D_NewQVector4D7(void* vector, float zpos, float wpos);
void* QVector4D_NewQVector4D8(void* vector);
void* QVector4D_NewQVector4D9(void* vector, float wpos);
void* QVector4D_NewQVector4D3(float xpos, float ypos, float zpos, float wpos);
float QVector4D_QVector4D_DotProduct(void* v1, void* v2);
void QVector4D_Normalize(void* ptr);
void QVector4D_SetW(void* ptr, float w);
void QVector4D_SetX(void* ptr, float x);
void QVector4D_SetY(void* ptr, float y);
void QVector4D_SetZ(void* ptr, float z);
void* QVector4D_ToPoint(void* ptr);
void* QVector4D_ToPointF(void* ptr);
void* QVector4D_ToVector2D(void* ptr);
void* QVector4D_ToVector2DAffine(void* ptr);
void* QVector4D_ToVector3D(void* ptr);
void* QVector4D_ToVector3DAffine(void* ptr);
void* QVector4D_Normalized(void* ptr);
char QVector4D_IsNull(void* ptr);
float QVector4D_Length(void* ptr);
float QVector4D_LengthSquared(void* ptr);
float QVector4D_W(void* ptr);
float QVector4D_X(void* ptr);
float QVector4D_Y(void* ptr);
float QVector4D_Z(void* ptr);
void* QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(char* href);
struct QtGui_PackedString QWhatsThisClickedEvent_Href(void* ptr);
void* QWheelEvent_NewQWheelEvent(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, long long qt4Orientation, long long buttons, long long modifiers);
void* QWheelEvent_NewQWheelEvent4(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, long long qt4Orientation, long long buttons, long long modifiers, long long phase);
void* QWheelEvent_NewQWheelEvent5(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, long long qt4Orientation, long long buttons, long long modifiers, long long phase, long long source);
void* QWheelEvent_NewQWheelEvent6(void* pos, void* globalPos, void* pixelDelta, void* angleDelta, int qt4Delta, long long qt4Orientation, long long buttons, long long modifiers, long long phase, long long source, char inverted);
void* QWheelEvent_AngleDelta(void* ptr);
void* QWheelEvent_GlobalPos(void* ptr);
void* QWheelEvent_PixelDelta(void* ptr);
void* QWheelEvent_Pos(void* ptr);
long long QWheelEvent_Buttons(void* ptr);
long long QWheelEvent_Source(void* ptr);
long long QWheelEvent_Phase(void* ptr);
char QWheelEvent_Inverted(void* ptr);
void* QWheelEvent_GlobalPosF(void* ptr);
void* QWheelEvent_PosF(void* ptr);
int QWheelEvent_GlobalX(void* ptr);
int QWheelEvent_GlobalY(void* ptr);
int QWheelEvent_X(void* ptr);
int QWheelEvent_Y(void* ptr);
int QWheelEvent_QWheelEvent_DefaultDeltasPerStep();
void* QWheelEvent_AngleD(void* ptr);
void QWheelEvent_SetAngleD(void* ptr, void* vqp);
void* QWheelEvent_G(void* ptr);
void QWheelEvent_SetG(void* ptr, void* vqp);
long long QWheelEvent_MouseState(void* ptr);
void QWheelEvent_SetMouseState(void* ptr, long long vqt);
void* QWheelEvent_P(void* ptr);
void QWheelEvent_SetP(void* ptr, void* vqp);
void* QWheelEvent_PixelD(void* ptr);
void QWheelEvent_SetPixelD(void* ptr, void* vqp);
int QWheelEvent_Qt4D(void* ptr);
void QWheelEvent_SetQt4D(void* ptr, int vin);
long long QWheelEvent_Qt4O(void* ptr);
void QWheelEvent_SetQt4O(void* ptr, long long vqt);
void* QWindow_QWindow_FromWinId(uintptr_t id);
void* QWindow_NewQWindow(void* targetScreen);
void* QWindow_NewQWindow2(void* parent);
char QWindow_Close(void* ptr);
char QWindow_CloseDefault(void* ptr);
char QWindow_Event(void* ptr, void* ev);
char QWindow_EventDefault(void* ptr, void* ev);
char QWindow_NativeEvent(void* ptr, void* eventType, void* message, long result);
char QWindow_NativeEventDefault(void* ptr, void* eventType, void* message, long result);
char QWindow_SetKeyboardGrabEnabled(void* ptr, char grab);
char QWindow_SetMouseGrabEnabled(void* ptr, char grab);
void QWindow_ConnectActiveChanged(void* ptr);
void QWindow_DisconnectActiveChanged(void* ptr);
void QWindow_ActiveChanged(void* ptr);
void QWindow_Alert(void* ptr, int msec);
void QWindow_AlertDefault(void* ptr, int msec);
void QWindow_ConnectContentOrientationChanged(void* ptr);
void QWindow_DisconnectContentOrientationChanged(void* ptr);
void QWindow_ContentOrientationChanged(void* ptr, long long orientation);
void QWindow_Create(void* ptr);
void QWindow_Destroy(void* ptr);
void QWindow_ExposeEvent(void* ptr, void* ev);
void QWindow_ExposeEventDefault(void* ptr, void* ev);
void QWindow_FocusInEvent(void* ptr, void* ev);
void QWindow_FocusInEventDefault(void* ptr, void* ev);
void QWindow_ConnectFocusObjectChanged(void* ptr);
void QWindow_DisconnectFocusObjectChanged(void* ptr);
void QWindow_FocusObjectChanged(void* ptr, void* object);
void QWindow_FocusOutEvent(void* ptr, void* ev);
void QWindow_FocusOutEventDefault(void* ptr, void* ev);
void QWindow_ConnectHeightChanged(void* ptr);
void QWindow_DisconnectHeightChanged(void* ptr);
void QWindow_HeightChanged(void* ptr, int arg);
void QWindow_Hide(void* ptr);
void QWindow_HideDefault(void* ptr);
void QWindow_HideEvent(void* ptr, void* ev);
void QWindow_HideEventDefault(void* ptr, void* ev);
void QWindow_KeyPressEvent(void* ptr, void* ev);
void QWindow_KeyPressEventDefault(void* ptr, void* ev);
void QWindow_KeyReleaseEvent(void* ptr, void* ev);
void QWindow_KeyReleaseEventDefault(void* ptr, void* ev);
void QWindow_Lower(void* ptr);
void QWindow_LowerDefault(void* ptr);
void QWindow_ConnectMaximumHeightChanged(void* ptr);
void QWindow_DisconnectMaximumHeightChanged(void* ptr);
void QWindow_MaximumHeightChanged(void* ptr, int arg);
void QWindow_ConnectMaximumWidthChanged(void* ptr);
void QWindow_DisconnectMaximumWidthChanged(void* ptr);
void QWindow_MaximumWidthChanged(void* ptr, int arg);
void QWindow_ConnectMinimumHeightChanged(void* ptr);
void QWindow_DisconnectMinimumHeightChanged(void* ptr);
void QWindow_MinimumHeightChanged(void* ptr, int arg);
void QWindow_ConnectMinimumWidthChanged(void* ptr);
void QWindow_DisconnectMinimumWidthChanged(void* ptr);
void QWindow_MinimumWidthChanged(void* ptr, int arg);
void QWindow_ConnectModalityChanged(void* ptr);
void QWindow_DisconnectModalityChanged(void* ptr);
void QWindow_ModalityChanged(void* ptr, long long modality);
void QWindow_MouseDoubleClickEvent(void* ptr, void* ev);
void QWindow_MouseDoubleClickEventDefault(void* ptr, void* ev);
void QWindow_MouseMoveEvent(void* ptr, void* ev);
void QWindow_MouseMoveEventDefault(void* ptr, void* ev);
void QWindow_MousePressEvent(void* ptr, void* ev);
void QWindow_MousePressEventDefault(void* ptr, void* ev);
void QWindow_MouseReleaseEvent(void* ptr, void* ev);
void QWindow_MouseReleaseEventDefault(void* ptr, void* ev);
void QWindow_MoveEvent(void* ptr, void* ev);
void QWindow_MoveEventDefault(void* ptr, void* ev);
void QWindow_ConnectOpacityChanged(void* ptr);
void QWindow_DisconnectOpacityChanged(void* ptr);
void QWindow_OpacityChanged(void* ptr, double opacity);
void QWindow_Raise(void* ptr);
void QWindow_RaiseDefault(void* ptr);
void QWindow_ReportContentOrientationChange(void* ptr, long long orientation);
void QWindow_RequestActivate(void* ptr);
void QWindow_RequestActivateDefault(void* ptr);
void QWindow_RequestUpdate(void* ptr);
void QWindow_RequestUpdateDefault(void* ptr);
void QWindow_Resize(void* ptr, void* newSize);
void QWindow_Resize2(void* ptr, int w, int h);
void QWindow_ResizeEvent(void* ptr, void* ev);
void QWindow_ResizeEventDefault(void* ptr, void* ev);
void QWindow_ConnectScreenChanged(void* ptr);
void QWindow_DisconnectScreenChanged(void* ptr);
void QWindow_ScreenChanged(void* ptr, void* screen);
void QWindow_SetBaseSize(void* ptr, void* size);
void QWindow_SetCursor(void* ptr, void* cursor);
void QWindow_SetFilePath(void* ptr, char* filePath);
void QWindow_SetFlags(void* ptr, long long flags);
void QWindow_SetFormat(void* ptr, void* format);
void QWindow_SetFramePosition(void* ptr, void* point);
void QWindow_SetGeometry2(void* ptr, void* rect);
void QWindow_SetGeometry(void* ptr, int posx, int posy, int w, int h);
void QWindow_SetHeight(void* ptr, int arg);
void QWindow_SetHeightDefault(void* ptr, int arg);
void QWindow_SetIcon(void* ptr, void* icon);
void QWindow_SetMask(void* ptr, void* region);
void QWindow_SetMaximumHeight(void* ptr, int h);
void QWindow_SetMaximumHeightDefault(void* ptr, int h);
void QWindow_SetMaximumSize(void* ptr, void* size);
void QWindow_SetMaximumWidth(void* ptr, int w);
void QWindow_SetMaximumWidthDefault(void* ptr, int w);
void QWindow_SetMinimumHeight(void* ptr, int h);
void QWindow_SetMinimumHeightDefault(void* ptr, int h);
void QWindow_SetMinimumSize(void* ptr, void* size);
void QWindow_SetMinimumWidth(void* ptr, int w);
void QWindow_SetMinimumWidthDefault(void* ptr, int w);
void QWindow_SetModality(void* ptr, long long modality);
void QWindow_SetOpacity(void* ptr, double level);
void QWindow_SetParent(void* ptr, void* parent);
void QWindow_SetPosition(void* ptr, void* pt);
void QWindow_SetPosition2(void* ptr, int posx, int posy);
void QWindow_SetScreen(void* ptr, void* newScreen);
void QWindow_SetSizeIncrement(void* ptr, void* size);
void QWindow_SetSurfaceType(void* ptr, long long surfaceType);
void QWindow_SetTitle(void* ptr, char* vqs);
void QWindow_SetTitleDefault(void* ptr, char* vqs);
void QWindow_SetTransientParent(void* ptr, void* parent);
void QWindow_SetVisibility(void* ptr, long long v);
void QWindow_SetVisible(void* ptr, char visible);
void QWindow_SetVisibleDefault(void* ptr, char visible);
void QWindow_SetWidth(void* ptr, int arg);
void QWindow_SetWidthDefault(void* ptr, int arg);
void QWindow_SetWindowState(void* ptr, long long state);
void QWindow_SetX(void* ptr, int arg);
void QWindow_SetXDefault(void* ptr, int arg);
void QWindow_SetY(void* ptr, int arg);
void QWindow_SetYDefault(void* ptr, int arg);
void QWindow_Show(void* ptr);
void QWindow_ShowDefault(void* ptr);
void QWindow_ShowEvent(void* ptr, void* ev);
void QWindow_ShowEventDefault(void* ptr, void* ev);
void QWindow_ShowFullScreen(void* ptr);
void QWindow_ShowFullScreenDefault(void* ptr);
void QWindow_ShowMaximized(void* ptr);
void QWindow_ShowMaximizedDefault(void* ptr);
void QWindow_ShowMinimized(void* ptr);
void QWindow_ShowMinimizedDefault(void* ptr);
void QWindow_ShowNormal(void* ptr);
void QWindow_ShowNormalDefault(void* ptr);
void QWindow_TabletEvent(void* ptr, void* ev);
void QWindow_TabletEventDefault(void* ptr, void* ev);
void QWindow_TouchEvent(void* ptr, void* ev);
void QWindow_TouchEventDefault(void* ptr, void* ev);
void QWindow_UnsetCursor(void* ptr);
void QWindow_ConnectVisibilityChanged(void* ptr);
void QWindow_DisconnectVisibilityChanged(void* ptr);
void QWindow_VisibilityChanged(void* ptr, long long visibility);
void QWindow_ConnectVisibleChanged(void* ptr);
void QWindow_DisconnectVisibleChanged(void* ptr);
void QWindow_VisibleChanged(void* ptr, char arg);
void QWindow_WheelEvent(void* ptr, void* ev);
void QWindow_WheelEventDefault(void* ptr, void* ev);
void QWindow_ConnectWidthChanged(void* ptr);
void QWindow_DisconnectWidthChanged(void* ptr);
void QWindow_WidthChanged(void* ptr, int arg);
void QWindow_ConnectWindowStateChanged(void* ptr);
void QWindow_DisconnectWindowStateChanged(void* ptr);
void QWindow_WindowStateChanged(void* ptr, long long windowState);
void QWindow_ConnectWindowTitleChanged(void* ptr);
void QWindow_DisconnectWindowTitleChanged(void* ptr);
void QWindow_WindowTitleChanged(void* ptr, char* title);
void QWindow_ConnectXChanged(void* ptr);
void QWindow_DisconnectXChanged(void* ptr);
void QWindow_XChanged(void* ptr, int arg);
void QWindow_ConnectYChanged(void* ptr);
void QWindow_DisconnectYChanged(void* ptr);
void QWindow_YChanged(void* ptr, int arg);
void QWindow_DestroyQWindow(void* ptr);
void QWindow_DestroyQWindowDefault(void* ptr);
void* QWindow_Cursor(void* ptr);
void* QWindow_Icon(void* ptr);
void* QWindow_FrameMargins(void* ptr);
void* QWindow_FocusObject(void* ptr);
void* QWindow_FocusObjectDefault(void* ptr);
void* QWindow_FramePosition(void* ptr);
void* QWindow_MapFromGlobal(void* ptr, void* pos);
void* QWindow_MapToGlobal(void* ptr, void* pos);
void* QWindow_Position(void* ptr);
void* QWindow_FrameGeometry(void* ptr);
void* QWindow_Geometry(void* ptr);
void* QWindow_Mask(void* ptr);
void* QWindow_Screen(void* ptr);
void* QWindow_BaseSize(void* ptr);
void* QWindow_MaximumSize(void* ptr);
void* QWindow_MinimumSize(void* ptr);
void* QWindow_Size(void* ptr);
void* QWindow_SizeDefault(void* ptr);
void* QWindow_SizeIncrement(void* ptr);
struct QtGui_PackedString QWindow_FilePath(void* ptr);
struct QtGui_PackedString QWindow_Title(void* ptr);
void* QWindow_Format(void* ptr);
void* QWindow_FormatDefault(void* ptr);
void* QWindow_RequestedFormat(void* ptr);
void* QWindow_Parent(void* ptr);
void* QWindow_TransientParent(void* ptr);
long long QWindow_ContentOrientation(void* ptr);
long long QWindow_Flags(void* ptr);
long long QWindow_Modality(void* ptr);
long long QWindow_WindowState(void* ptr);
long long QWindow_Type(void* ptr);
long long QWindow_SurfaceType(void* ptr);
long long QWindow_SurfaceTypeDefault(void* ptr);
long long QWindow_Visibility(void* ptr);
uintptr_t QWindow_WinId(void* ptr);
char QWindow_IsActive(void* ptr);
char QWindow_IsAncestorOf(void* ptr, void* child, long long mode);
char QWindow_IsExposed(void* ptr);
char QWindow_IsModal(void* ptr);
char QWindow_IsTopLevel(void* ptr);
char QWindow_IsVisible(void* ptr);
int QWindow_Height(void* ptr);
int QWindow_MaximumHeight(void* ptr);
int QWindow_MaximumWidth(void* ptr);
int QWindow_MinimumHeight(void* ptr);
int QWindow_MinimumWidth(void* ptr);
int QWindow_Width(void* ptr);
int QWindow_X(void* ptr);
int QWindow_Y(void* ptr);
double QWindow_DevicePixelRatio(void* ptr);
double QWindow_Opacity(void* ptr);
void* QWindow___dynamicPropertyNames_atList(void* ptr, int i);
void QWindow___dynamicPropertyNames_setList(void* ptr, void* i);
void* QWindow___dynamicPropertyNames_newList(void* ptr);
void* QWindow___findChildren_atList2(void* ptr, int i);
void QWindow___findChildren_setList2(void* ptr, void* i);
void* QWindow___findChildren_newList2(void* ptr);
void* QWindow___findChildren_atList3(void* ptr, int i);
void QWindow___findChildren_setList3(void* ptr, void* i);
void* QWindow___findChildren_newList3(void* ptr);
void* QWindow___findChildren_atList(void* ptr, int i);
void QWindow___findChildren_setList(void* ptr, void* i);
void* QWindow___findChildren_newList(void* ptr);
void* QWindow___children_atList(void* ptr, int i);
void QWindow___children_setList(void* ptr, void* i);
void* QWindow___children_newList(void* ptr);
char QWindow_EventFilter(void* ptr, void* watched, void* event);
char QWindow_EventFilterDefault(void* ptr, void* watched, void* event);
void QWindow_ChildEvent(void* ptr, void* event);
void QWindow_ChildEventDefault(void* ptr, void* event);
void QWindow_ConnectNotify(void* ptr, void* sign);
void QWindow_ConnectNotifyDefault(void* ptr, void* sign);
void QWindow_CustomEvent(void* ptr, void* event);
void QWindow_CustomEventDefault(void* ptr, void* event);
void QWindow_DeleteLater(void* ptr);
void QWindow_DeleteLaterDefault(void* ptr);
void QWindow_DisconnectNotify(void* ptr, void* sign);
void QWindow_DisconnectNotifyDefault(void* ptr, void* sign);
void QWindow_TimerEvent(void* ptr, void* event);
void QWindow_TimerEventDefault(void* ptr, void* event);
void* QWindow_MetaObject(void* ptr);
void* QWindow_MetaObjectDefault(void* ptr);
long long QWindowStateChangeEvent_OldState(void* ptr);

#ifdef __cplusplus
}
#endif

#endif